import { FocusMonitor } from '@angular/cdk/a11y';
import { BooleanInput } from '@angular/cdk/coercion';
import { AfterViewInit, ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, OnDestroy } from '@angular/core';
import { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';
import { ErrorStateMatcher } from '@aposin/ng-aquila/utils';
import * as i0 from "@angular/core";
/** Options for placement of the label */
export declare type POSITION = 'left' | 'right';
/** Options for sizing of the label */
export declare type LABEL_SIZE = 'small' | 'large';
export declare class NxSwitcherComponent implements ControlValueAccessor, DoCheck, AfterViewInit, OnDestroy {
    private _cdr;
    ngControl: NgControl | null;
    private _errorStateMatcher;
    private _parentForm;
    private _parentFormGroup;
    private _focusMonitor;
    private _id;
    /** @docs-private */
    errorState: boolean;
    /** @docs-private */
    _switcherLabelWrapper: ElementRef;
    _nativeInput: ElementRef<HTMLElement>;
    /** Sets the id of the switcher */
    set id(value: string);
    get id(): string;
    private _labelPosition;
    /** Specifies the placement of the label */
    set labelPosition(value: POSITION);
    get labelPosition(): POSITION;
    private _name;
    /** Sets the label text of the switcher */
    set name(value: string);
    get name(): string;
    private _checked;
    /** Whether the switcher is checked (on) or unchecked (off) */
    set checked(value: boolean);
    get checked(): boolean;
    private _big;
    /** Whether the big switcher is used */
    set big(value: BooleanInput);
    get big(): boolean;
    private _labelSize;
    /** Sets the size of the label */
    set labelSize(value: LABEL_SIZE);
    get labelSize(): LABEL_SIZE;
    private _negative;
    /** Whether the style for a dark background is used */
    set negative(value: BooleanInput);
    get negative(): boolean;
    private _disabled;
    /** Whether the switcher is in the disabled state */
    set disabled(value: BooleanInput);
    get disabled(): boolean;
    /** An event is dispatched each time the switcher value is changed */
    checkedChange: EventEmitter<boolean>;
    private onChangeCallback;
    private onTouchedCallback;
    constructor(_cdr: ChangeDetectorRef, ngControl: NgControl | null, _errorStateMatcher: ErrorStateMatcher, _parentForm: NgForm | null, _parentFormGroup: FormGroupDirective | null, _focusMonitor: FocusMonitor);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /** Allows to toggle between the states */
    toggle(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    ngDoCheck(): void;
    setDisabledState(isDisabled: boolean): void;
    /** @docs-private */
    touch(): void;
    /** @docs-private */
    updateErrorState(): void;
    /** @docs-private */
    get labelHasContent(): boolean;
    /** @docs-private
     * Callback for when the content of the label has changed.
     */
    labelContentChanged(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxSwitcherComponent, [null, { optional: true; self: true; }, null, { optional: true; }, { optional: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxSwitcherComponent, "nx-switcher", never, { "id": "id"; "labelPosition": "labelPosition"; "name": "name"; "checked": "checked"; "big": "nxBig"; "labelSize": "labelSize"; "negative": "nxNegative"; "disabled": "disabled"; }, { "checkedChange": "checkedChange"; }, never, ["*"]>;
}
