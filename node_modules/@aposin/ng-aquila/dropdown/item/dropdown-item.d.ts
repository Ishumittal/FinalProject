import { Highlightable } from '@angular/cdk/a11y';
import { BooleanInput } from '@angular/cdk/coercion';
import { AfterViewChecked, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy } from '@angular/core';
import { Subject } from 'rxjs';
import { NxDropdownControl } from '../dropdown.control';
import { NxDropdownGroupComponent } from '../group/dropdown-group';
import * as i0 from "@angular/core";
export declare class NxDropdownItemChange {
    /** Reference to the option that emitted the event. */
    item: NxDropdownItemComponent;
    /** Whether the change in the option's value was a result of a user action. */
    isUserInput: boolean;
    constructor(
    /** Reference to the option that emitted the event. */
    item: NxDropdownItemComponent, 
    /** Whether the change in the option's value was a result of a user action. */
    isUserInput?: boolean);
}
export declare class NxDropdownItemComponent implements Highlightable, OnDestroy, AfterViewChecked {
    private _dropdown;
    /** @docs-private */ readonly group: NxDropdownGroupComponent | null;
    private _cdr;
    private _elementRef;
    _hidden: boolean;
    private _mostRecentViewValue;
    private _id;
    /**
     * The value of the dropdown item.
     * You can't use undefined, null and '' (empty strings)
     * as they are sentinel values signalling empty data.
     */
    value: any;
    get label(): string;
    /** The unique ID of the option. */
    get id(): string;
    private _disabled;
    /** Whether the dropdown item is disabled. */
    set disabled(value: BooleanInput);
    get disabled(): boolean;
    private _selected;
    /** Whether the item is selected. */
    get selected(): boolean;
    private _active;
    /** Whether the item is active. */
    get active(): boolean;
    /**
     * @docs-private
     * Whether the parent dropdown is in multiselect mode.
     */
    get multiselect(): boolean;
    /**
     * @docs-private
     * Whether the parent dropdown allows item truncation.
     */
    get truncateItems(): boolean;
    /** Emits whenever the component is destroyed. */
    private readonly _destroyed;
    /** Event emitted when the option is selected or deselected. */
    readonly onSelectionChange: EventEmitter<NxDropdownItemChange>;
    /** Emits when the state of the option changes and any parents have to be notified. */
    readonly _stateChanges: Subject<void>;
    /**
     * @docs-private
     * The wrapping div in the template. Used by dropdown to use the container height for scrolling.
     */
    containerElement: any;
    constructor(_dropdown: NxDropdownControl, 
    /** @docs-private */ group: NxDropdownGroupComponent | null, _cdr: ChangeDetectorRef, _elementRef: ElementRef);
    ngAfterViewChecked(): void;
    private _updateViewValue;
    ngOnDestroy(): void;
    _onClick(event: Event): void;
    /**
     * `Selects the option while indicating the selection came from the user. Used to
     * determine if the select's view -> model callback should be invoked.`
     */
    _selectViaInteraction(): void;
    /**
     * @docs-private
     * Gets the `aria-selected` value for the option. The attribute is omitted from the single-select dropdown
     * for the unselected options. Including the `aria-selected="false" attributes adds a lot of of noise to
     * screen-reader users without providing useful information.
     */
    _getAriaSelected(): boolean | null;
    /** @docs-private */
    show(): void;
    /** @docs-private */
    hide(): void;
    private _showOrHideByFilter;
    get _formattedValue(): string;
    /** @docs-private */
    get viewValue(): any;
    /** @docs-private */
    get elementRef(): ElementRef<any>;
    select(): void;
    /** @docs-private */
    deselect(): void;
    _initSelected(selected: boolean): void;
    /** @docs-private */
    focus(): void;
    private _emitSelectionChangeEvent;
    /** @docs-private */
    setActiveStyles(): void;
    /** @docs-private */
    setInactiveStyles(): void;
    /**
     * Returns the list item's text label. Implemented as a part of the ListKeyManagerOption.
     * @docs-private */
    getLabel(): string;
    _isContentEmpty(element: Element): boolean;
    _onLabelChange(): void;
    /** Returns the correct tabindex for the option depending on disabled state. */
    _getTabIndex(): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxDropdownItemComponent, [null, { optional: true; }, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxDropdownItemComponent, "nx-dropdown-item", never, { "value": "nxValue"; "disabled": "disabled"; }, { "onSelectionChange": "onSelectionChange"; }, never, ["*"]>;
}
