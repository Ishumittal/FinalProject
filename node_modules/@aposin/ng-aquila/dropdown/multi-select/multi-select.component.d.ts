import { ActiveDescendantKeyManager, FocusOrigin } from '@angular/cdk/a11y';
import { BooleanInput } from '@angular/cdk/coercion';
import { ConnectionPositionPair } from '@angular/cdk/overlay';
import { AfterViewInit, ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, OnDestroy } from '@angular/core';
import { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';
import { AppearanceType, NxFormfieldComponent, NxFormfieldControl } from '@aposin/ng-aquila/formfield';
import { ErrorStateMatcher } from '@aposin/ng-aquila/utils';
import { Subject } from 'rxjs';
import { NxDropdownIntl } from '../dropdown';
import { NxMultiSelectOptionComponent } from './multi-select-option.component';
import * as i0 from "@angular/core";
export declare type NxMultiSelectFilterFn = (query: string, label: string) => boolean;
/**
 * Multi Select component.
 * @typeParam S Type of the items in the options array
 * @typeParam T Type of the ngModel value
 */
export declare class NxMultiSelectComponent<S, T> implements ControlValueAccessor, NxFormfieldControl<T[]>, DoCheck, OnDestroy, AfterViewInit {
    #private;
    _intl: NxDropdownIntl;
    private _elementRef;
    private _errorStateMatcher;
    private _cdr;
    private _formFieldComponent;
    ngControl: NgControl | null;
    private _parentForm;
    private _parentFormGroup;
    get value(): T[];
    get _isOutline(): boolean;
    get _appearance(): AppearanceType;
    get _overlayLabel(): string | null | undefined;
    /**
     * Whether the value is empty.
     */
    get empty(): boolean;
    get focused(): boolean;
    get required(): boolean;
    set required(value: boolean);
    /** Whether the multi select is disabled. */
    get disabled(): boolean;
    set disabled(value: boolean);
    /** Whether the multi select should be read only. */
    get readonly(): boolean;
    set readonly(value: BooleanInput);
    /** The placeholder shown in the multi select field. */
    get placeholder(): string;
    set placeholder(value: string);
    /**
     * Whether this multi select can be filtered.
     */
    set filter(value: BooleanInput);
    get filter(): boolean;
    /** Whether the (select all / clear all) should be disabled and hidden. */
    set disableSelectAll(value: BooleanInput);
    get disableSelectAll(): boolean;
    /**
     * Function to be used when the user types into the search filter. The first argument is the user input,
     * the second argument is the dropdown item value as displayed. The dropdown items will use this function
     * to set their visibility state. A boolean should be returned.
     *
     * Defaults to lower case inclusion.
     */
    set filterFn(value: NxMultiSelectFilterFn | null | undefined);
    get filterFn(): NxMultiSelectFilterFn;
    /** @docs-private */
    get shouldLabelFloat(): boolean;
    /** @docs-private */
    get elementRef(): ElementRef<any>;
    get _allSelected(): boolean;
    get _someSelected(): boolean;
    constructor(_intl: NxDropdownIntl, _elementRef: ElementRef, _errorStateMatcher: ErrorStateMatcher, _cdr: ChangeDetectorRef, _formFieldComponent: NxFormfieldComponent | null, ngControl: NgControl | null, _parentForm: NgForm | null, _parentFormGroup: FormGroupDirective | null);
    private get _isActiveItemFiltered();
    private _options;
    private _required;
    private _disabled;
    private _readonly;
    private _placeholder;
    private _filter;
    private _openedBy;
    /** @docs-private */
    _divider: number;
    private _panelContent?;
    private _filterInput?;
    private _optionsList?;
    private _trigger?;
    private _panelHeader?;
    private _overlayDir?;
    /** Event emitted when the selected value has been changed. */
    readonly selectionChange: EventEmitter<T[]>;
    /** @docs-private */
    readonly controlType: string;
    /** @docs-private */
    errorState: boolean;
    _positions: ConnectionPositionPair[];
    _inputFocused: boolean;
    _ariaDescribedby: string;
    _width: number;
    _filterValue: string;
    _tooltipText: string;
    listItems: S[];
    selectedItems: Set<S>;
    id: string;
    _comboboxId: string;
    readonly stateChanges: Subject<any>;
    _keyManager: ActiveDescendantKeyManager<NxMultiSelectOptionComponent<T>>;
    /**
     * List of options to choose from.
     */
    options: S[];
    /**
     * Placeholder for the filter input.
     */
    filterPlaceholder: string;
    /**
     * Selector to get the value of an option.
     * Can be either a property name or a selector function.
     * When empty the whole option is treated as the value.
     */
    selectValue: string | ((option: S) => T);
    /**
     * Selector to get the label of an option.
     * Can be either a property name or a selector function.
     * When empty the whole option is treated as the label.
     */
    selectLabel: string | ((option: S) => string);
    /**
     * Selector to get the disabled state of an option.
     * Can be either a property name or a selector function.
     */
    selectDisabled?: string | ((option: S) => boolean);
    _isOpen: boolean;
    private readonly _destroyed;
    ngOnDestroy(): void;
    setDisabledState(isDisabled: boolean): void;
    private _onChange;
    private _onTouched;
    _selectValue(option: S): T;
    _selectLabel(option: S): string;
    private _updatePositions;
    _isDisabled(option: S): boolean;
    /**
     * Returns html ids of multi select rendered value and label (if available),
     * separated by space.
     */
    _getAriaLabelledBy(): string;
    /** @docs-private */
    setDescribedByIds(ids: string[]): void;
    ngAfterViewInit(): void;
    open($event: Event, origin: FocusOrigin): void;
    _open($event: Event, origin: FocusOrigin): void;
    _close(): void;
    _onSelect(item: S, selected: boolean): void;
    _onKeydown($event: KeyboardEvent): void;
    _onTriggerBlur(): void;
    _onFocusWithinOverlay($event: Event): void;
    _getAriaActiveDescendant(): string | null;
    _onFilterChange(query: string | null | undefined): void;
    _getValueText(): string;
    _onAttach(): void;
    _onDetach(): void;
    _onSelectAll(): void;
    _clear(): void;
    _clearFilter(): void;
    writeValue(value: T[]): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    ngDoCheck(): void;
    updateErrorState(): void;
    private _updateTooltipText;
    private _scrollActiveOptionIntoView;
    private _initKeyManager;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxMultiSelectComponent<any, any>, [null, null, null, null, { optional: true; }, { optional: true; self: true; }, { optional: true; }, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxMultiSelectComponent<any, any>, "nx-multi-select", never, { "required": "required"; "disabled": "disabled"; "readonly": "readonly"; "placeholder": "placeholder"; "filter": "filter"; "disableSelectAll": "disableSelectAll"; "filterFn": "filterFn"; "options": "options"; "filterPlaceholder": "filterPlaceholder"; "selectValue": "selectValue"; "selectLabel": "selectLabel"; "selectDisabled": "selectDisabled"; }, { "selectionChange": "selectionChange"; }, never, never>;
}
