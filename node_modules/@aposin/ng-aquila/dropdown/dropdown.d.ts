import { LiveAnnouncer } from '@angular/cdk/a11y';
import { Direction, Directionality } from '@angular/cdk/bidi';
import { BooleanInput } from '@angular/cdk/coercion';
import { CdkConnectedOverlay, ConnectionPositionPair, Overlay, ScrollStrategy } from '@angular/cdk/overlay';
import { AfterContentInit, AfterViewInit, ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, InjectionToken, NgZone, OnDestroy, OnInit, QueryList, TemplateRef } from '@angular/core';
import { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';
import { NxFormfieldComponent } from '@aposin/ng-aquila/formfield';
import { ErrorStateMatcher } from '@aposin/ng-aquila/utils';
import { Observable, Subject } from 'rxjs';
import { NxDropdownClosedLabelDirective } from './closed-label.directive';
import { NxDropdownControl } from './dropdown.control';
import { NxDropdownItemComponent } from './item/dropdown-item';
import * as i0 from "@angular/core";
/**
 * An option of the dropdown.
 * Contains a value and an optional label.
 * If no label is specified, the value will be displayed instead.
 */
export interface NxDropdownOption {
    value: any;
    label?: string;
}
/** Dropdown data that requires internationalization. */
export declare class NxDropdownIntl {
    /**
     * Stream that emits whenever the labels here are changed. Use this to notify
     * components if the labels have changed after initialization.
     */
    readonly changes: Subject<void>;
    /** A label for the multi-select component. */
    selectAll: string;
    /** A label for the multi-select component. */
    clearAll: string;
}
/** Change event object that is emitted when the select value has changed. */
export declare class NxDropdownSelectChange<T = any> {
    /** Reference to the select that emitted the change event. */
    source: NxDropdownComponent;
    /** Current value of the select that emitted the event. */
    value: T;
    constructor(
    /** Reference to the select that emitted the change event. */
    source: NxDropdownComponent, 
    /** Current value of the select that emitted the event. */
    value: T);
}
/** Injection token that determines the scroll handling while a dropdown is open. */
export declare const NX_DROPDOWN_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;
/** @docs-private */
export declare function NX_DROPDOWN_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => ScrollStrategy;
/** @docs-private */
export declare const NX_DROPDOWN_SCROLL_STRATEGY_PROVIDER: {
    provide: InjectionToken<() => ScrollStrategy>;
    useFactory: typeof NX_DROPDOWN_SCROLL_STRATEGY_PROVIDER_FACTORY;
    deps: (typeof Overlay)[];
};
export declare type FilterInputType = 'text' | 'number' | 'tel' | 'search' | 'date' | 'datetime' | 'month' | 'email';
export declare type NxDropdownFilterFn = (query: string, label: string) => boolean;
export declare type NxDropdownCompareWithFn = (o1: any, o2: any) => boolean;
export declare type NxDropdownValueFormatterFn = (value: any) => any;
export declare class NxDropdownComponent implements NxDropdownControl, ControlValueAccessor, OnInit, AfterViewInit, AfterContentInit, OnDestroy, DoCheck {
    #private;
    private _cdr;
    private _elementRef;
    private _ngZone;
    private formFieldComponent;
    private _errorStateMatcher;
    /** @docs-private */ ngControl: NgControl | null;
    private _parentForm;
    private _parentFormGroup;
    private _dir;
    private _defaultScrollStrategyFactory;
    private liveAnnouncer;
    readonly readonly: boolean;
    private _selectionModel;
    protected _disabled: boolean;
    /** The ID of rendered dropdown html element. */
    readonly renderedValueId: string;
    private _placeholder;
    private _focused;
    /** Whether or not the overlay panel is open. */
    private _panelOpen;
    /** @docs-private */
    errorState: boolean;
    /**
     * Disable truncation of long item texts.
     * We recommend following UX guidelines and always truncating long items.
     * Please only disable truncation if it's impossible to use short descriptions.
     */
    private _ignoreItemTrunctation;
    /**
     * Name of this control that is used inside the formfield component
     * @docs-private
     */
    controlType: string;
    /** Holds the value from nxValue. */
    private _value;
    /** The minimal space between the viewport and the overlay */
    _overlayViewportMargin: number;
    /** The last measured value for the trigger's client bounding rect. */
    _triggerRect: ClientRect;
    /** Holds the panelWidth after panel was attached. */
    _panelWidth: number | undefined;
    _positions: ConnectionPositionPair[];
    /**
     * @docs-private
     * Emits when internal state changes to inform formfield about it.
     */
    readonly stateChanges: Subject<any>;
    /** @docs-private */
    ariaDescribedby: string | undefined;
    private _tabIndex;
    /** @docs-private */
    currentFilter: string;
    private _options;
    /**
     * Array of options for the dropdown.
     */
    set options(value: NxDropdownOption[]);
    get options(): NxDropdownOption[];
    private _filterInputType;
    /**
     * Type of filter input (default: text)
     */
    set filterInputType(value: FilterInputType);
    get filterInputType(): FilterInputType;
    get tabIndex(): number;
    set tabIndex(value: number);
    /** Selected value */
    get value(): any;
    set value(newValue: any);
    /** Whether the dropdown is disabled. */
    get disabled(): boolean;
    set disabled(value: BooleanInput);
    /**
     * Whether the dropdown should allow multi selection and additional checkboxes are shown.
     * Note: Please make sure the value you bind is an array.
     *
     * @throws Error if true and the bound value is not an array
     * @deprecated Please use the new `<nx-multi-select>` component instead.
     */
    isMultiSelect: boolean;
    /** The id of the input. */
    get id(): string;
    /** Whether the component is required. This adds an aria-required label to the component. */
    required: boolean;
    private _style;
    /** Whether the dropdown should render in its negative style or not. */
    _negative: boolean;
    /** If set to 'negative', the component is displayed with the negative set of styles. */
    set styles(value: string);
    /** Placeholder to be shown if no value has been selected. */
    get placeholder(): string;
    set placeholder(value: string);
    /**
     * Disable truncation of long item texts.
     * We recommend following UX guidelines and always truncating long items.
     * Please only disable truncation if it's impossible to use short descriptions.
     */
    get ignoreItemTrunctation(): boolean;
    set ignoreItemTrunctation(value: BooleanInput);
    /** Whether the dropdown should be shown with an additional filter input. */
    showFilter: boolean;
    /** Text displayed as placeholder for the filter. */
    filterPlaceholder: string;
    /** Text that is displayed at the top of the overlay. If not set the formfield label is used by default. */
    overlayLabel: string;
    /** Event emitted when the select panel has been toggled. */
    readonly openedChange: EventEmitter<boolean>;
    /** Event emitted when the dropdown items get filtered. Returns the currently visible dropdown items. */
    readonly filterResultChange: EventEmitter<NxDropdownItemComponent[]>;
    /** Event emitted when the select has been opened. */
    readonly _openedStream: Observable<void>;
    /** Event emitted when the select has been closed. */
    readonly _closedStream: Observable<void>;
    /** Event emitted when the user types in the filter input. */
    readonly filterChanges: Subject<any>;
    /**
     * Event that emits whenever the raw value of the select changes. This is here primarily
     * to facilitate the two-way binding for the `value` input.
     * @docs-private
     */
    readonly valueChange: EventEmitter<any>;
    /** Event emitted when the selected value has been changed. */
    readonly selectionChange: EventEmitter<NxDropdownSelectChange>;
    /**
     * @docs-private
     * Panel containing the select options.
     */
    panel?: ElementRef;
    /** @docs-private */
    panelBody?: ElementRef;
    /** @docs-private */
    trigger: ElementRef;
    /** @docs-private */
    filterInput?: ElementRef;
    /**
     * @docs-private
     * Overlay pane containing the options.
     */
    overlayDir: CdkConnectedOverlay;
    _contentDropdownItems: QueryList<NxDropdownItemComponent>;
    /** @docs-private */
    groups: any;
    _customClosedDropdownLabel: NxDropdownClosedLabelDirective;
    private _defaultClosedDropdownLabel;
    _lazyDropdownItems: QueryList<NxDropdownItemComponent>;
    get dropdownItems(): QueryList<NxDropdownItemComponent>;
    /** @docs-private */
    get closedDropdownLabel(): TemplateRef<any>;
    private _closedDropdownLabel;
    private readonly _destroyed;
    private _keyManager;
    /** @docs-private */
    get panelOpen(): boolean;
    set panelOpen(value: boolean);
    /** Strategy factory that will be used to handle scrolling while the dropdown panel is open. */
    private _scrollStrategyFactory;
    /** Strategy that will be used to handle scrolling while the dropdown panel is open. */
    _scrollStrategy: ScrollStrategy;
    /** @docs-private */
    get label(): string;
    /** Comparison function to specify which option is displayed. Defaults to object equality. */
    private _compareWith;
    /**
     * Function that transforms the value into a string.
     * This function is used for displaying and filtering the content.
     *
     * Defaults to `(value: any) => value == null ? '' : value.toString()`
     */
    set valueFormatter(value: NxDropdownValueFormatterFn | null | undefined);
    get valueFormatter(): NxDropdownValueFormatterFn;
    /**
     * Function to compare the option values with the selected values. The first argument
     * is a value from an option. The second is a value from the selection. A boolean
     * should be returned.
     *
     * Defaults to object equality.
     */
    set compareWith(value: NxDropdownCompareWithFn | null | undefined);
    get compareWith(): NxDropdownCompareWithFn;
    /**
     * Function to be used when the user types into the search filter. The first argument is the user input,
     * the second argument is the dropdown item value as displayed. The dropdown items will use this function
     * to set their visibility state. A boolean should be returned.
     *
     * Defaults to lower case inclusion.
     */
    set filterFn(value: NxDropdownFilterFn | null | undefined);
    get filterFn(): NxDropdownFilterFn;
    /**
     * @docs-private
     * Whether the select is focused.
     */
    get focused(): boolean;
    /** `View -> model callback called when value changes` */
    _onChange: (value: any) => void;
    /** `View -> model callback called when select has been touched` */
    _onTouched: () => void;
    /** @docs-private */
    get elementRef(): ElementRef;
    /** The text direction of the containing app. */
    get dir(): Direction;
    constructor(_cdr: ChangeDetectorRef, _elementRef: ElementRef, _ngZone: NgZone, tabIndex: string, formFieldComponent: NxFormfieldComponent | null, _errorStateMatcher: ErrorStateMatcher, 
    /** @docs-private */ ngControl: NgControl | null, _parentForm: NgForm | null, _parentFormGroup: FormGroupDirective | null, _dir: Directionality | null, _defaultScrollStrategyFactory: () => ScrollStrategy, liveAnnouncer: LiveAnnouncer);
    ngDoCheck(): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    /** @docs-private */
    updateErrorState(): void;
    /** Sets up a key manager to listen to keyboard events on the overlay panel. */
    private _initKeyManager;
    private _initActiveItem;
    private _subscribeToOptionChanges;
    /** Invoked when an option is clicked. */
    _onSelect(option: NxDropdownItemComponent, isUserInput: boolean, item?: NxDropdownOption): void;
    private _initializeSelection;
    /**
     * Sets the selected option based on a value. If no option can be
     * found with the designated value, the select trigger is cleared.
     */
    private _setSelectionByValue;
    /**
     * Finds and selects and option based on its value.
     */
    private _selectValue;
    /** Emits change event to set the model value. */
    private _propagateChanges;
    /** Sorts the selected values in the selected based on their order in the panel. */
    private _sortValues;
    /** Adds a offset to the overlay position, so the formfield label and the dropdown panel header are vertically aligned. */
    private _updatePosition;
    /** Focuses the select element. */
    focus(): void;
    /** Opens the panel of the dropdown. */
    openPanel($event: Event): void;
    /** Closes the panel of the dropdown. */
    closePanel(): void;
    private _scrollActiveOptionIntoCenter;
    /** Scrolls the active option into view. */
    private _scrollActiveOptionIntoView;
    private _getItemOffset;
    /**
     * @docs-private
     * Formfield Implementation
     */
    setDescribedByIds(ids: string[]): void;
    /**
     * @docs-private
     * aria-label support removed in favor of aria-labelledby
     * The NxFormfieldControl abstract class requires implementation
     * of below method.
     */
    setAriaLabel(value: string): string;
    /**
     * @docs-private
     * Returns html ids of dropdown rendered value and label (if available),
     * separated by space.
     */
    _getAriaLabelledBy(): string;
    get _isInOutlineField(): boolean;
    /**
     * @docs-private
     * Whether the select has a value.
     */
    get empty(): boolean;
    /** @docs-private */
    get hasValue(): boolean;
    /** @docs-private */
    get shouldLabelFloat(): boolean;
    /** End Formfield */
    /** ControlValueAccessor */
    /**
     * Sets the select's value. Part of the ControlValueAccessor interface
     * required to integrate with Angular's core forms API.
     *
     * setTimeout allows to write value after ngOnInit (happens before it right now),
     * so that we have the input `options` set, and it's shown properly in the dropdown
     * https://github.com/angular/angular/issues/29218#issuecomment-592015773
     * It can be removed after the Angular issue is resolved
     *
     * @param value New value to be written to the model.
     */
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: () => void): void;
    /**
     * Disables the select. Part of the ControlValueAccessor interface required
     * to integrate with Angular's core forms API.
     *
     * @param isDisabled Sets whether the component is disabled.
     */
    setDisabledState(isDisabled: boolean): void;
    /** End ControlValueAccessor */
    _handleKeydown(event: KeyboardEvent): void;
    private get _isLazy();
    private setNextItemActive;
    private setPreviousItemActive;
    private _handleClosedKeydown;
    private _handleOpenKeydown;
    /** @docs-private */
    formatValue(value: any): string;
    /** Called when the user types in the filter input */
    _onFilter(event: Event): void;
    /**
     * @docs-private
     * The value displayed in the trigger.
     */
    get triggerValue(): string;
    _getLabel(option: NxDropdownOption): string;
    /**
     * Callback that is invoked when the overlay panel has been attached.
     */
    _onAttached(): void;
    _onFocus(): void;
    /**
     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will
     * "blur" to the panel when it opens, causing a false positive.
     */
    _onBlur(): void;
    /** @docs-private */
    get isFilterEmpty(): boolean;
    _clearFilter(): void;
    /** determines the `aria-activedescendant` to be set on the host. */
    _getAriaActiveDescendant(): string | null;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxDropdownComponent, [null, null, null, { attribute: "tabindex"; }, { optional: true; }, null, { optional: true; self: true; }, { optional: true; }, { optional: true; }, { optional: true; }, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxDropdownComponent, "nx-dropdown", never, { "options": "options"; "filterInputType": "filterInputType"; "tabIndex": "tabIndex"; "value": "nxValue"; "disabled": "nxDisabled"; "isMultiSelect": "nxIsMultiselect"; "required": "nxRequired"; "styles": "nxStyle"; "placeholder": "placeholder"; "ignoreItemTrunctation": "nxIgnoreItemTrunctation"; "showFilter": "nxShowFilter"; "filterPlaceholder": "nxFilterPlaceholder"; "overlayLabel": "nxOverlayLabel"; "valueFormatter": "nxValueFormatter"; "compareWith": "compareWith"; "filterFn": "filterFn"; }, { "openedChange": "openedChange"; "filterResultChange": "filterResult"; "_openedStream": "opened"; "_closedStream": "closed"; "filterChanges": "filterInput"; "valueChange": "nxValueChange"; "selectionChange": "selectionChange"; }, ["_customClosedDropdownLabel", "_contentDropdownItems", "groups"], ["*"]>;
}
