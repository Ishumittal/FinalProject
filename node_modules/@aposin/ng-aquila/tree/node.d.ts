import { FocusableOption, FocusMonitor } from '@angular/cdk/a11y';
import { CdkTree, CdkTreeNode, CdkTreeNodeDef } from '@angular/cdk/tree';
import { ElementRef, OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Wrapper for the CdkTree node with custom design styles.
 */
export declare class NxTreeNodeComponent<T> extends CdkTreeNode<T> implements OnDestroy {
    protected _elementRef: ElementRef<HTMLElement>;
    protected _tree: CdkTree<T>;
    protected _focusMonitor: FocusMonitor;
    constructor(_elementRef: ElementRef<HTMLElement>, _tree: CdkTree<T>, _focusMonitor: FocusMonitor);
    actionItem: FocusableOption;
    ngOnDestroy(): void;
    /** Update the focused data in tree keyboard interaction */
    _focus(): void;
    focus(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxTreeNodeComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxTreeNodeComponent<any>, "nx-tree-node", ["nxTreeNode"], { "disabled": "disabled"; "tabIndex": "tabIndex"; }, {}, ["actionItem"], ["*"]>;
}
/**
 * Wrapper for the CdkTree node definition with custom design styles.
 */
export declare class NxTreeNodeDefDirective<T> extends CdkTreeNodeDef<T> {
    data: T;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxTreeNodeDefDirective<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NxTreeNodeDefDirective<any>, "[nxTreeNodeDef]", never, { "when": "nxTreeNodeDefWhen"; "data": "nxTreeNode"; }, {}, never>;
}
