import { FocusableOption, FocusMonitor } from '@angular/cdk/a11y';
import { Directionality } from '@angular/cdk/bidi';
import { CdkTree } from '@angular/cdk/tree';
import { ChangeDetectorRef, ElementRef, IterableDiffer, IterableDiffers, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';
import { NxTreeNodeOutletDirective } from './outlet';
import * as i0 from "@angular/core";
/**
 * Wrapper for the CdkTree with custom design styles and keyboard nav mechanics.
 */
export declare class NxTreeComponent<T> extends CdkTree<T> implements OnDestroy, OnInit {
    private _wrapperDiffers;
    private _cdr;
    private dir;
    protected _elementRef: ElementRef;
    protected _focusMonitor: FocusMonitor;
    _nodeOutlet: NxTreeNodeOutletDirective;
    /** The node map map data nodes to CdkTreeNodes */
    protected nodeMap: Map<T, FocusableOption>;
    /** A map from parent node to a list of children. */
    protected childrenMap: Map<T | undefined, T[]>;
    /** A map from node data to its parent node data. */
    protected parentMap: Map<T, T>;
    /** Current focused node data. */
    protected _focusedData: T;
    /** Tab index for the tree. */
    _tabIndex: number;
    /**
     * User defined tab index.
     * When it is not null, use user defined tab index. Otherwise use _tabIndex
     */
    _userTabIndex: number | null;
    set tabIndex(value: number);
    /** Subject that emits when the component has been destroyed. */
    private _wrapperOnDestroy;
    constructor(_wrapperDiffers: IterableDiffers, _cdr: ChangeDetectorRef, dir: Directionality | null, _elementRef: ElementRef, _focusMonitor: FocusMonitor);
    ngOnInit(): void;
    ngOnDestroy(): void;
    /** Get current focused data */
    get focusedData(): T;
    /** Add tree node to data list based on owner of parent view container. */
    insertToA11yNodeTracking(index: number, data: T, node: FocusableOption, parentData?: T): void;
    /** Remove a node data from node list based on the owner of view container. */
    removeFromA11yNodeTracking(index: number, parentData?: T): void;
    /** Update node's index information based on the owner of view container. */
    moveInA11yNodeTracking(previousIndex: number, currentIndex: number, parentData?: T): void;
    /** When a tree node is focused, update the current focused data. */
    updateFocusedData(newFocusedData: T): void;
    /** Focus first node when the tree is focused */
    focus(): void;
    /** Change focus to first visible node in the tree. */
    focusFirstVisibleNode(): void;
    /** Change focus to last visible node in the tree. */
    focusLastVisibleNode(): void;
    /** Change focus to previous visible node. */
    focusPreviousVisibleNode(): void;
    /** Change focus to next visible node. */
    focusNextVisibleNode(): void;
    /** Collapse the current node if it's expanded. Otherwise move to parent. */
    collapseCurrentFocusedNode(): void;
    /** Expand the current node if it's not expanded. Otherwise move to its first child. */
    expandCurrentFocusedNode(): void;
    /** Expand all the nodes in the tree */
    expandAllNodes(): void;
    /** Expand the current node if it's not expanded. Otherwise move to its first child. */
    toggleCurrentFocusedNode(): void;
    _isRtl(): boolean | null;
    /**
     * Pass events to the keyboard manager. Available here for tests.
     */
    _handleKeydown(event: KeyboardEvent): void;
    /** Focus the tree node component with new focused data. */
    _changeFocusedData(newFocused: T | undefined): void;
    /** Returns the data of the first visible tree node in the tree. */
    _getFirstVisibleNode(): T | undefined;
    /** Returns the data of the last visible tree node in the tree. */
    _getLastVisibleNode(): T | undefined;
    /** Returns the previous visible tree node of current focused data. */
    _getPreviousVisibleNode(): T | undefined;
    /** Returns the next visible tree node data of current focused data. */
    _getNextVisibleNode(): T | undefined;
    /** Returns the parent of current focused node. */
    _getParentNode(): T | undefined;
    /**
     * Returns the data of list of children in the current `parentData` node's view container.
     * If there's no parent, return the tree nodes in the tree's view container.
     */
    _getChildrenList(parentData?: T): T[];
    /**
     * Returns the data of last visible elements in the sub-tree rooted at `targetNode`.
     */
    _getLastChild(targetNode: T): T;
    /**
     * Extended CdkTree method to track new nodes for a11y.
     */
    insertNode(nodeData: T, index: number, viewContainer?: ViewContainerRef, parentData?: T): void;
    /**
     * ⚠️  Here we override the method from cdk tree ⚠️
     * Adds some extra method calls to update the a11y node tracking.
     */
    renderNodeChanges(data: T[], dataDiffer?: IterableDiffer<T>, viewContainer?: ViewContainerRef, parentData?: T): void;
    /**
     * Monitor focus of the tree. When the tree is focused, change the tab index to -1 so TAB
     * can move the focus out of the tree. When the tree is blurred, change back the tab index.
     */
    _monitorTreeFocus(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxTreeComponent<any>, [null, null, { optional: true; }, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxTreeComponent<any>, "nx-tree", ["nxTree"], { "tabIndex": "tabIndex"; }, {}, never, never>;
}
