import { Overlay, ScrollStrategy } from '@angular/cdk/overlay';
import { ElementRef, InjectionToken, TemplateRef } from '@angular/core';
import { NxOverlayService, NxTriggerButton } from '@aposin/ng-aquila/overlay';
import * as i0 from "@angular/core";
/** Injection token that determines the scroll handling while a notification-panel is open. */
export declare const NX_NOTIFICATION_PANEL_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;
/** @docs-private */
export declare function NX_NOTIFICATION_PANEL_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => ScrollStrategy;
/** @docs-private */
export declare const NX_NOTIFICATION_PANEL_SCROLL_STRATEGY_PROVIDER: {
    provide: InjectionToken<() => ScrollStrategy>;
    useFactory: typeof NX_NOTIFICATION_PANEL_SCROLL_STRATEGY_PROVIDER_FACTORY;
    deps: (typeof Overlay)[];
};
export declare class NxNotificationPanelTriggerDirective {
    private _nxOverlay;
    private _element;
    private _triggerButton;
    private _defaultScrollStrategyFactory;
    private _panelTemplate;
    private _overlayRef;
    set notificationPanel(value: TemplateRef<any>);
    get notificationPanel(): TemplateRef<any>;
    /** Strategy factory that will be used to handle scrolling while the notification-panel panel is open. */
    private _scrollStrategyFactory;
    constructor(_nxOverlay: NxOverlayService, _element: ElementRef<HTMLElement>, _triggerButton: NxTriggerButton | null, _defaultScrollStrategyFactory: () => ScrollStrategy);
    open(): void;
    close(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxNotificationPanelTriggerDirective, [null, null, { optional: true; self: true; }, null]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NxNotificationPanelTriggerDirective, "[nxNotificationPanelTriggerFor]", never, { "notificationPanel": "nxNotificationPanelTriggerFor"; }, {}, never>;
}
