import { Direction, Directionality } from '@angular/cdk/bidi';
import { BooleanInput } from '@angular/cdk/coercion';
import { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
/** Type for the available position values. */
export declare type PositionType = 'floating' | 'static';
/** Type for the appearance of the sidepanel. */
export declare type Appearance = 'light' | 'dark';
export declare class NxSidepanelComponent {
    private _cdr;
    protected _elementRef: ElementRef;
    private _dir;
    _wrapper: NxSidepanelOuterContainerComponent | null;
    /** Whether the sidepanel should be opened and visible. */
    set opened(value: BooleanInput);
    get opened(): boolean;
    /** Sets the position of the sidepanel. */
    set position(value: PositionType);
    get position(): PositionType;
    /** Sets the appearance of the sidepanel. Default: dark. */
    set appearance(value: Appearance);
    get appearance(): Appearance;
    triggerElem?: HTMLElement | null;
    constructor(_cdr: ChangeDetectorRef, _elementRef: ElementRef, _dir: Directionality | null, _wrapper: NxSidepanelOuterContainerComponent | null);
    private _opened;
    _header: ElementRef;
    /**
     * An event emitted when the opened value has changed.
     *
     * Emits the boolean value.
     */
    readonly openedChange: EventEmitter<boolean>;
    private _position;
    private _appearance;
    private _openState;
    /** Toggles the opened state of the sidepanel. */
    toggle(): void;
    /** Sets the opened state of the sidepanel to true. */
    open(): void;
    /** Sets the opened state of the sidepanel to false. */
    close(): void;
    _getWidth(): number;
    _getOpenState(): string;
    _setOpenState(opened: boolean): void;
    onAnimationDone(event: AnimationEvent): void;
    focusTrigger(opened: boolean): void;
    /** The text direction of the containing app. */
    get dir(): Direction;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxSidepanelComponent, [null, null, { optional: true; }, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxSidepanelComponent, "nx-sidepanel", never, { "opened": "opened"; "position": "position"; "appearance": "appearance"; }, { "openedChange": "openedChange"; }, ["_header"], ["*"]>;
}
export declare class NxSidepanelOuterContainerComponent implements OnDestroy {
    private _dir;
    private _cdr;
    _sidepanel: NxSidepanelComponent;
    private readonly _destroyed;
    constructor(_dir: Directionality | null, _cdr: ChangeDetectorRef);
    ngOnDestroy(): void;
    _update(): void;
    /** The text direction of the containing app. */
    get dir(): Direction;
    _getOpenState(): string;
    _getSidepanelWidth(): number;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxSidepanelOuterContainerComponent, [{ optional: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxSidepanelOuterContainerComponent, "nx-sidepanel-outer-container", never, {}, {}, ["_sidepanel"], ["*", "nx-sidepanel"]>;
}
