import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import { ChangeDetectorRef, ElementRef, EventEmitter, QueryList } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as i0 from "@angular/core";
export declare class NxTaglistComponent implements ControlValueAccessor {
    private _cdr;
    /** An event is dispatched each time when the list of tags changed. */
    tagsChange: EventEmitter<any[]>;
    /** An event is dispatched each time when a tag is clicked. */
    tagClickEvent: EventEmitter<any>;
    /** @docs-private */
    tagChildren: QueryList<ElementRef>;
    private _tags;
    /** Sets the list of tags. */
    set tags(value: any[]);
    get tags(): any[];
    private _tabindex;
    /** Sets the tabindex of the contained tags. Default value: -1. */
    set tabindex(value: NumberInput);
    get tabindex(): number;
    private _allowTagDeletion;
    /** Whether the tags can be removed from the list. Default: true. */
    set allowTagDeletion(value: BooleanInput);
    get allowTagDeletion(): boolean;
    private _isKeywordList;
    /** Whether the tags can be styled as keywords. */
    set isKeywordList(value: BooleanInput);
    get isKeywordList(): boolean;
    private _labelProperty;
    /** Sets the label property, in case tags represent objects. */
    set labelProp(value: string);
    get labelProp(): string;
    private _ariaLabelledBy;
    /** Sets the label property to improve accessibility. */
    set labelledby(value: string);
    get labelledby(): string;
    private _valueFormatterFn;
    /** Sets the customization function for tag value.  */
    set valueFormatter(fn: (value: any) => string);
    get valueFormatter(): (value: any) => string;
    private _onChange;
    private _onTouched;
    constructor(_cdr: ChangeDetectorRef);
    /** Allows to delete a tag given index. Takes index of the tag to be deleted as a parameter */
    delete(index: number, value: any): void;
    /** Allows to add a tag. Takes tag object as an input */
    addTag(tag: any): void;
    /** Allows to clear the tag list. */
    clearTags(): void;
    /** @docs-private */
    writeValue(tags: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    /** @docs-private */
    renderTag(tag: any): string;
    /** @docs-private */
    tagClick(index: number, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxTaglistComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxTaglistComponent, "nx-taglist", never, { "tags": "nxTags"; "tabindex": "tabindex"; "allowTagDeletion": "nxAllowTagDeletion"; "isKeywordList": "nxIsKeywordList"; "labelProp": "nxLabelProperty"; "labelledby": "aria-labelledby"; "valueFormatter": "nxValueFormatter"; }, { "tagsChange": "nxTagsChange"; "tagClickEvent": "nxTagClick"; }, never, ["*"]>;
}
