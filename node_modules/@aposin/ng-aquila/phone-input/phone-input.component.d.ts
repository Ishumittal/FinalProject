import { FocusMonitor } from '@angular/cdk/a11y';
import { BooleanInput } from '@angular/cdk/coercion';
import { AfterViewInit, ChangeDetectorRef, DoCheck, ElementRef, OnDestroy, OnInit } from '@angular/core';
import { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';
import { NxDropdownComponent, NxDropdownOption } from '@aposin/ng-aquila/dropdown';
import { NxFormfieldComponent, NxFormfieldControl } from '@aposin/ng-aquila/formfield';
import { ErrorStateMatcher } from '@aposin/ng-aquila/utils';
import { LocalizedCountryNames } from 'i18n-iso-countries';
import { Subject } from 'rxjs';
import { NxPhoneInputIntl } from './phone-input-intl';
import * as i0 from "@angular/core";
export declare class NxPhoneInputComponent implements ControlValueAccessor, NxFormfieldControl<any>, OnDestroy, DoCheck, OnInit, AfterViewInit {
    #private;
    private _elementRef;
    private _focusMonitor;
    private _cdr;
    private _errorStateMatcher;
    private _intl;
    private formFieldComponent;
    /** @docs-private */ ngControl: NgControl | null;
    private _parentForm;
    private _parentFormGroup;
    dropdown: NxDropdownComponent;
    value: any;
    _inputValue: string;
    _describedBy: string;
    readonly stateChanges: Subject<any>;
    get empty(): boolean;
    focused: boolean;
    private _uid;
    private _id;
    /** Sets the id of the phone input component. */
    get id(): string;
    set id(value: string);
    /** Whether the component should be required. */
    set required(value: BooleanInput);
    get required(): boolean;
    private _disabled;
    /** Whether the component should be disabled. */
    get disabled(): boolean;
    set disabled(value: BooleanInput);
    private _readonly;
    /** Whether the component should be read only. */
    get readonly(): boolean;
    set readonly(value: BooleanInput);
    private _countryCode;
    private _initialCountryCode;
    /** Sets the initial country to be selected in the dropdown. Format is the international
     * country code like DE, US.
     * If there is already a number in the input field changing this property has no effect.
     */
    set countryCode(value: string);
    get countryCode(): string;
    private _areaCodeLabel;
    /** Set the text at the top of the dropdown. The default value is 'Area Code'. */
    get areaCodeLabel(): string;
    set areaCodeLabel(value: string);
    private _countryNames;
    /** Set the translations of the countries. */
    get countryNames(): LocalizedCountryNames<any>;
    set countryNames(value: LocalizedCountryNames<any>);
    private _placeholder;
    /** The placeholder to be shown in the input field. */
    get placeholder(): string;
    set placeholder(value: string);
    /**
     * Function to format the value in the input part of the component.
     * The function is called on blur. The default function removes leading zeros.
     * Please note: to determine the model value the component will remove parenthesis,
     * whitespace and dash characters from the formatted input.
     */
    get inputFormatter(): (inputValue: string, countryCode: string) => string;
    set inputFormatter(formatFn: (inputValue: string, countryCode: string) => string);
    readonly shouldLabelFloat?: boolean;
    /** @docs-private */
    errorState: boolean;
    readonly controlType?: string;
    _sortedCountries: NxDropdownOption[];
    _countryCallingCode: string;
    private readonly _destroyed;
    private _inputFormatter;
    /** `View -> model callback called when value changes` */
    _onChange: (value: any) => void;
    /** `View -> model callback called when select has been touched` */
    _onTouched: () => void;
    constructor(_elementRef: ElementRef, _focusMonitor: FocusMonitor, _cdr: ChangeDetectorRef, _errorStateMatcher: ErrorStateMatcher, _intl: NxPhoneInputIntl, formFieldComponent: NxFormfieldComponent | null, 
    /** @docs-private */ ngControl: NgControl | null, _parentForm: NgForm | null, _parentFormGroup: FormGroupDirective | null);
    ngDoCheck(): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    setDescribedByIds(ids: string[]): void;
    get _ariaLabelledBy(): string | undefined;
    get elementRef(): ElementRef<any>;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    updateErrorState(): void;
    _onInputBlur(): void;
    _onInput(): void;
    _onCountryChange(countryCode: string): void;
    updateModel(): void;
    private _trimInputValue;
    private _removeLeadingZero;
    /** Returns the combined string of selected calling code + input number */
    getModelValue(): string;
    _getCallingCode(country: string): string;
    _sortCountries(): void;
    _getDropdownOption(country: string): NxDropdownOption;
    _getCountryName(countryCode: string): string;
    _getReadonlyValue(): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxPhoneInputComponent, [null, null, null, null, null, { optional: true; }, { optional: true; self: true; }, { optional: true; }, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxPhoneInputComponent, "nx-phone-input", never, { "id": "id"; "required": "required"; "disabled": "disabled"; "readonly": "readonly"; "countryCode": "countryCode"; "areaCodeLabel": "areaCodeLabel"; "countryNames": "countryNames"; "placeholder": "placeholder"; "inputFormatter": "inputFormatter"; }, {}, never, never>;
}
