import { Directionality } from '@angular/cdk/bidi';
import { NumberInput } from '@angular/cdk/coercion';
import { ScrollDispatcher } from '@angular/cdk/scrolling';
import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy, OnInit, QueryList } from '@angular/core';
import { NxViewportService } from '@aposin/ng-aquila/utils';
import { NxComparisonTableCell } from './cell/cell.component';
import { NxComparisonTableBase } from './comparison-table-base';
import { NxComparisonTableRowDirective } from './comparison-table-row.directive';
import { NxComparisonTableRowGroupDirective } from './comparison-table-row-group.directive';
import { NxComparisonTableFlexRow } from './flex-row/flex-row.component';
import { NxComparisonTablePopularCell } from './popular-cell/popular-cell.component';
import { NxTableContentElement } from './table-content-element.directive';
import { NxToggleSectionDirective } from './toggle-section/toggle-section.directive';
import * as i0 from "@angular/core";
export declare class NxComparisonTableComponent extends NxComparisonTableBase implements OnInit, AfterViewInit, OnDestroy {
    private _element;
    private _dir;
    protected _cdr: ChangeDetectorRef;
    private scrollDispatch;
    private _ngZone;
    /** @docs-private */
    elements: QueryList<NxTableContentElement>;
    private _selectedIndex;
    private _scrollableArea;
    _headerRowElement: NxComparisonTableFlexRow;
    _desktopContentDiv: ElementRef;
    /** The top value for the clip-path of the _desktopContentDiv. */
    _desktopContentClip: number;
    _stickyMobileCell: ElementRef;
    /**
     * The value of the right or left edge of the first column of the mobile table,
     * that describes the threshold for how much clip-path is needed.
     */
    private _mobileStickyEdge;
    /** Sets which info column is selected. */
    set selectedIndex(value: NumberInput);
    get selectedIndex(): number;
    /** An event that is is dispatched each time selected index of the table has changed. */
    selectedIndexChange: EventEmitter<number>;
    /** Sets which column is hidden. */
    set hiddenIndexes(value: number[]);
    get hiddenIndexes(): number[];
    constructor(_element: ElementRef, _dir: Directionality | null, viewportService: NxViewportService, _cdr: ChangeDetectorRef, scrollDispatch: ScrollDispatcher, _ngZone: NgZone);
    /** @docs-private */
    get dir(): import("@angular/cdk/bidi").Direction;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    private _scrollHandler;
    _updateCellClipping(): void;
    _getMobileClipPathInset(cellRect: DOMRect): string;
    /** Whether the element is a row. */
    _isRow(element: NxTableContentElement): element is NxComparisonTableRowDirective;
    /** Whether the element is a toggle section. */
    _isToggleSection(element: NxTableContentElement): element is NxToggleSectionDirective;
    /** Whether the element is a row group. */
    _isRowGroup(element: NxTableContentElement): element is NxComparisonTableRowGroupDirective;
    /** Whether row is the first item in a new block of rows or a section. */
    _isFirstInfoOfBlock(rowIndex: number): boolean;
    _getHeaderCells(): NxComparisonTableCell[];
    _getPopularCell(): NxComparisonTablePopularCell;
    _getFooterCells(): NxComparisonTableCell[];
    _containsToggleSection(): boolean;
    _infoColumnCount(): number;
    _getMobileColumnCount(): number;
    _isMobileRowDisabled(i: number): boolean;
    _addDisabledColumn(disabledColumn: number): void;
    _removeDisabledColumn(enabledColumn: number): void;
    _getHeaderRow(): NxComparisonTableRowDirective;
    _scrollElementIntoView(element: ElementRef, additionalSpacing?: number): void;
    private _getScrollParent;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxComparisonTableComponent, [null, { optional: true; }, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxComparisonTableComponent, "nx-comparison-table", never, { "selectedIndex": "selectedIndex"; "hiddenIndexes": "hiddenIndexes"; }, { "selectedIndexChange": "selectedIndexChange"; }, ["elements"], never>;
}
