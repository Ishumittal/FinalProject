import { AriaDescriber, FocusMonitor } from '@angular/cdk/a11y';
import { Direction, Directionality } from '@angular/cdk/bidi';
import { BooleanInput } from '@angular/cdk/coercion';
import { OriginConnectionPosition, Overlay, OverlayConnectionPosition, OverlayRef, ScrollStrategy } from '@angular/cdk/overlay';
import { Platform } from '@angular/cdk/platform';
import { ScrollDispatcher } from '@angular/cdk/scrolling';
import { ElementRef, InjectionToken, NgZone, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';
import { NxTooltipComponent } from './tooltip.component';
import * as i0 from "@angular/core";
/**
 * Possible positions of the tooltip.
 */
export declare type TooltipPosition = TooltipVerticalPosition | TooltipHorizontalPosition;
export declare type TooltipHorizontalPosition = 'left' | 'right';
export declare type TooltipVerticalPosition = 'top' | 'bottom';
/** Injection token that determines the scroll handling while a tooltip is open. */
export declare const NX_TOOLTIP_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;
/** @docs-private */
export declare function NX_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => ScrollStrategy;
/** @docs-private */
export declare const NX_TOOLTIP_SCROLL_STRATEGY_PROVIDER: {
    provide: InjectionToken<() => ScrollStrategy>;
    useFactory: typeof NX_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY;
    deps: (typeof Overlay)[];
};
/**
 * CSS class that will be attached to the overlay panel.
 * @docs-private
 */
export declare const NX_TOOLTIP_PANEL_CLASS = "nx-tooltip-panel";
/**
 * Creates an error to be thrown if the user provided an invalid tooltip position.
 * @docs-private
 */
export declare function getNxTooltipInvalidPositionError(position: string): Error;
/** Default `nxTooltip` options that can be overridden. */
export interface NxTooltipDefaultOptions {
    /** The default delay in ms before showing the tooltip after show is called */
    showDelay: number;
    /** The default delay in ms before hiding the tooltip after hide is called */
    hideDelay: number;
    /** The default delay in ms before hiding the tooltip on touch devices */
    touchendHideDelay: number;
    /** The default position of the tooltip */
    position?: TooltipPosition;
}
/** Injection token to be used to override the default options for `nxTooltip`. */
export declare const NX_TOOLTIP_DEFAULT_OPTIONS: InjectionToken<NxTooltipDefaultOptions>;
export declare function NX_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): NxTooltipDefaultOptions;
/**
 * Directive that attaches a tooltip to the host element.
 *
 */
export declare class NxTooltipDirective implements OnDestroy, OnInit {
    private _overlay;
    private _elementRef;
    private _scrollDispatcher;
    private _viewContainerRef;
    private _ngZone;
    private _ariaDescriber;
    private _focusMonitor;
    private _dir;
    private _defaultOptions;
    private _defaultScrollStrategyFactory;
    _overlayRef: OverlayRef | null;
    _tooltipInstance: NxTooltipComponent | null;
    private _portal;
    private _position;
    private _disabled;
    private _selectable;
    private _embeddedViewRef;
    private _possibleTooltipPositions;
    /** Allows the user to define the position of the tooltip relative to the parent element */
    get position(): TooltipPosition;
    set position(value: TooltipPosition);
    /** Disables the display of the tooltip. */
    get disabled(): boolean;
    set disabled(value: BooleanInput);
    /** Allows selection of text within tooltip trigger
     *  NOTE: inputs and textareas always remain selectable, ignoring this input.
     */
    get selectable(): boolean;
    set selectable(value: BooleanInput);
    /** The default delay in ms before showing the tooltip after show is called */
    showDelay: number;
    /** The default delay in ms before hiding the tooltip after hide is called */
    hideDelay: number;
    private _message;
    /** The message to be displayed in the tooltip */
    get message(): string;
    set message(value: string);
    /** Strategy factory that will be used to handle scrolling while the tooltip panel is open. */
    private _scrollStrategyFactory;
    private _manualListeners;
    private readonly _destroyed;
    constructor(_overlay: Overlay, _elementRef: ElementRef<HTMLElement>, _scrollDispatcher: ScrollDispatcher, _viewContainerRef: ViewContainerRef, _ngZone: NgZone, platform: Platform, _ariaDescriber: AriaDescriber, _focusMonitor: FocusMonitor, _dir: Directionality | null, _defaultOptions: NxTooltipDefaultOptions | null, _defaultScrollStrategyFactory: () => ScrollStrategy);
    ngOnInit(): void;
    /**
     * Dispose the tooltip when destroyed.
     */
    ngOnDestroy(): void;
    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */
    show(delay?: number): void;
    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */
    hide(delay?: number): void;
    /** Shows/hides the tooltip */
    toggle(): void;
    /** Returns true if the tooltip is currently visible to the user */
    _isTooltipVisible(): boolean;
    /** Handles the keydown events on the host element. */
    _handleKeydown(e: KeyboardEvent): void;
    /** Handles the touchend events on the host element. */
    _handleTouchend(): void;
    /**
     * Setup styling-specific things
     */
    _updateSelectabilityStyles(): void;
    /** Create the overlay config and position strategy */
    private _createOverlay;
    /** Detaches the currently-attached tooltip. */
    private _detach;
    /** Updates the position of the current tooltip. */
    private _updatePosition;
    /**
     * Returns the origin position based on the user's position preference.
     */
    _getOrigin(position: TooltipPosition): OriginConnectionPosition;
    /** Returns the overlay position based on the user's preference */
    _getOverlayPosition(position: TooltipPosition): OverlayConnectionPosition;
    /** Returns the overlay offset required by the user's position preference */
    private _getOffset;
    /** Returns the opposite position, using aquila tooltip position naming: top, right, bottom, left */
    private _getInverseTooltipPosition;
    /** Returns the opposite position, using angular position naming: top, bottom, start, end, center */
    private _getInversePosition;
    /** Returns an array of fallback positions for tooltip, following the algoritm:
     * 1) Slightly alternate preferred position if applicable. I.e. for 'top' try 'top-start' and 'top-end' positioning.
     * 2) Try the opposite position, i.e. for 'top' try 'bottom'.
     * 3) Slightly alternate opposite position, i.e. 'bottom-start', 'bottom-end'
     * 4) All remaining positions from positions list
     */
    private _getFallbackPositions;
    /** Calculates fallbacks for vertical tooltip positioning */
    private _getVerticalFallbackPositionPairs;
    /** Calculates fallbacks for horizontal tooltip positioning */
    private _getHorizontalFallbackPositionPairs;
    /** Updates the tooltip message and repositions the overlay according to the new message length */
    private _updateTooltipMessage;
    private _positionArrow;
    _dirChangeHandler(value: Direction): void;
    get _isLtr(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxTooltipDirective, [null, null, null, null, null, null, null, null, { optional: true; }, { optional: true; }, null]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NxTooltipDirective, "[nxTooltip]", ["nxTooltip"], { "position": "nxTooltipPosition"; "disabled": "nxTooltipDisabled"; "selectable": "nxTooltipSelectable"; "showDelay": "nxTooltipShowDelay"; "hideDelay": "nxTooltipHideDelay"; "message": "nxTooltip"; }, {}, never>;
}
