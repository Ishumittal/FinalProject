import { FocusMonitor } from '@angular/cdk/a11y';
import { BooleanInput } from '@angular/cdk/coercion';
import { AfterContentInit, AfterViewInit, ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, InjectionToken, OnDestroy, QueryList } from '@angular/core';
import { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';
import { NxErrorComponent } from '@aposin/ng-aquila/base';
import { ErrorStateMatcher } from '@aposin/ng-aquila/utils';
import { NxSelectableCardChangeEvent } from './selectable-card-change-event';
import * as i0 from "@angular/core";
export declare type NxSelectableCardAppearance = 'expert' | 'default';
/**
 * Represents the default options for the selectable card.
 * It can be configured using the `NX_SELECTABLE_CARD_DEFAULT_OPTIONS` injection token.
 */
export interface SelectableCardDefaultOptions {
    /**
     * Sets the default appearance. (optional)
     */
    appearance?: NxSelectableCardAppearance;
}
export declare const SELECTABLE_CARD_DEFAULT_OPTIONS: InjectionToken<SelectableCardDefaultOptions>;
export declare class NxSelectableCardComponent implements ControlValueAccessor, DoCheck, AfterContentInit, OnDestroy, AfterViewInit {
    private _cdr;
    private _errorStateMatcher;
    ngControl: NgControl | null;
    private _parentForm;
    private _parentFormGroup;
    private _focusMonitor;
    private _defaultOptions;
    private _id;
    private _checked;
    private _disabled;
    private _value;
    private _name;
    private _negative;
    private _tabindex;
    private _required;
    private _appearance;
    _errorListIds: string;
    _errorList: QueryList<NxErrorComponent>;
    _nativeInput: ElementRef<HTMLElement>;
    _errorState: boolean;
    /** An event is dispatched each time the selectable card value is changed */
    selectionChange: EventEmitter<NxSelectableCardChangeEvent>;
    /** An event is dispatched each time the selectable card value is changed */
    checkedChange: EventEmitter<boolean>;
    /**
     * ** Expert option **
     *
     * Sets the appearance of the small stage. Default: 'default'
     */
    set appearance(value: NxSelectableCardAppearance);
    get appearance(): NxSelectableCardAppearance;
    /**
     * Id of the selectable card.
     *
     * If not set, the selectable card gets an incremented value by default.
     */
    set id(value: string);
    get id(): string;
    /** Whether the selectable card  is checked. */
    set checked(value: BooleanInput);
    get checked(): boolean;
    /** The value attribute of the native input element  */
    get value(): string;
    set value(value: string);
    /** Whether the selectable card is disabled. */
    set disabled(value: BooleanInput);
    get disabled(): boolean;
    /**
     * Whether the selectable card is negative.
     * @deprecated Obsolete as negative state is not implemented.
     * @deletion-target 12.0.0
     */
    set negative(value: BooleanInput);
    get negative(): boolean;
    /** Whether the selectable card is required. */
    get required(): boolean;
    set required(value: BooleanInput);
    /** Name of the selectable card. */
    get name(): string;
    set name(value: string);
    /** The tabindex of the selectable card. */
    get tabindex(): string;
    set tabindex(value: string);
    get _isExpert(): boolean;
    private readonly _destroyed;
    constructor(_cdr: ChangeDetectorRef, _errorStateMatcher: ErrorStateMatcher, ngControl: NgControl | null, _parentForm: NgForm | null, _parentFormGroup: FormGroupDirective | null, _focusMonitor: FocusMonitor, _defaultOptions: SelectableCardDefaultOptions | null);
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    /** @docs-private */
    onChangeCallback: (_: any) => void;
    registerOnChange(fn: any): void;
    onTouchedCallback: (_: any) => void;
    registerOnTouched(onTouched: any): void;
    setDisabledState?(isDisabled: boolean): void;
    writeValue(value: any): void;
    ngDoCheck(): void;
    _updateErrorState(): void;
    /** Toggles the checked state of the selectable card . */
    toggle(): void;
    _onInputClick(event: Event): void;
    _onInteractionEvent(event: Event): void;
    private _emitChangeEvent;
    private _getErrorListIds;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxSelectableCardComponent, [null, null, { optional: true; self: true; }, { optional: true; }, { optional: true; }, null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxSelectableCardComponent, "nx-selectable-card", never, { "appearance": "appearance"; "id": "id"; "checked": "checked"; "value": "value"; "disabled": "disabled"; "negative": "negative"; "required": "required"; "name": "name"; "tabindex": "tabindex"; }, { "selectionChange": "selectionChange"; "checkedChange": "checkedChange"; }, ["_errorList"], ["nx-card-header", "*", "nx-card-footer", "nx-error"]>;
}
