import { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';
import { BooleanInput } from '@angular/cdk/coercion';
import { AfterContentInit, AfterViewInit, ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList } from '@angular/core';
import { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';
import { NxLabelComponent } from '@aposin/ng-aquila/base';
import { ErrorStateMatcher } from '@aposin/ng-aquila/utils';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
/** The change event object emitted by the radio group and radio button. */
export declare class NxRadioChange {
    source: NxRadioComponent;
    value: any;
    /** The NxRadioComponent that emits the change event. NxRadioChange object can be instantiated with source radio component and a value. */
    constructor(source: NxRadioComponent, value: any);
}
/** Label Size Types */
export declare type LabelSize = 'small' | 'big';
export declare class NxRadioGroupComponent implements ControlValueAccessor, AfterContentInit, OnDestroy, DoCheck {
    private _cdr;
    ngControl: NgControl | null;
    _parentForm: NgForm | null;
    _parentFormGroup: FormGroupDirective | null;
    private _errorStateMatcher;
    _label: NxLabelComponent;
    /** @docs-private */
    errorState: boolean;
    readonly _stateChanges: Subject<void>;
    private _id;
    /** Sets the Id of the radio group. */
    set id(value: string);
    get id(): string;
    private _disabled;
    /** Whether every radio button in this group should be disabled. */
    set disabled(value: BooleanInput);
    get disabled(): boolean;
    private _negative;
    /** Whether the radio group should have negative styling. */
    set negative(value: BooleanInput);
    get negative(): boolean;
    private _required;
    /** Sets if at least an option should be selected. */
    set required(value: BooleanInput);
    get required(): boolean;
    /** An event is dispatched on each group value change. */
    groupValueChange: EventEmitter<NxRadioChange>;
    private _name;
    private _value;
    private _selected;
    _radios: QueryList<NxRadioComponent>;
    private _onChange;
    private _onTouched;
    get name(): string;
    /** Sets the name of this radio group, which is mandatory in conjunction with ngModel (Default: null). */
    set name(value: string);
    get value(): any;
    /** Sets the value of the selected radion button in this group (Default: null). */
    set value(newValue: any);
    constructor(_cdr: ChangeDetectorRef, ngControl: NgControl | null, _parentForm: NgForm | null, _parentFormGroup: FormGroupDirective | null, _errorStateMatcher: ErrorStateMatcher);
    ngAfterContentInit(): void;
    ngDoCheck(): void;
    ngOnDestroy(): void;
    writeValue(value: any): void;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: () => void): void;
    /** @docs-private this is meant to be called by the radio buttons in this group */
    change(value: any): void;
    /** @docs-private this is meant to be called by the radio buttons in this group. */
    touch(): void;
    setDisabledState(isDisabled: boolean): void;
    private _updateSelectedRadioFromValue;
    private _checkSelectedRadioButton;
    /** @docs-private */
    updateErrorState(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxRadioGroupComponent, [null, { optional: true; self: true; }, { optional: true; }, { optional: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxRadioGroupComponent, "nx-radio-group", never, { "id": "id"; "disabled": "nxDisabled"; "negative": "negative"; "required": "required"; "name": "name"; "value": "nxValue"; }, { "groupValueChange": "nxGroupValueChange"; }, ["_label", "_radios"], ["nx-label", "*", "nx-error"]>;
}
export declare class NxRadioComponent implements ControlValueAccessor, OnInit, AfterViewInit, OnDestroy {
    radioGroup: NxRadioGroupComponent | null;
    private _cdr;
    private _focusMonitor;
    /** @docs-private */
    _radioLabelWrapper: ElementRef;
    _nativeInput: ElementRef<HTMLElement>;
    private _id;
    /** Sets the id of the radio component. */
    set id(value: string);
    get id(): string;
    /** @docs-private */
    get inputId(): string;
    /** @docs-private */
    get labelId(): string;
    private _name;
    /** Sets the name of this radio component, which is mandatory in conjunction with ngModel (Default: null). */
    set name(value: string);
    get name(): string;
    private _labelSize;
    /** Sets the label size of the radio button.
     * The default value is `big`.
     */
    set labelSize(value: LabelSize);
    get labelSize(): LabelSize;
    private _negative;
    /**
     * Whether the negative set of styles should be used.
     *
     * If the radio button is placed in a radio group, the negative value
     * is overwritten by the group's negative value.
     */
    set negative(value: BooleanInput);
    get negative(): boolean;
    /** An event is dispatched on each value change. */
    valueChange: EventEmitter<NxRadioChange>;
    private _value;
    private _checked;
    private _disabled;
    private _required;
    /** @docs-private */
    get labelHasContent(): boolean;
    /** Sets the value of the form control element (Default: null). */
    set value(value: any);
    get value(): any;
    /** @docs-private */
    get checked(): boolean;
    /** Whether the radio component is selected. */
    set checked(value: boolean);
    /** @docs-private */
    get disabled(): boolean;
    /** Whether the radio button should be disabled or not. */
    set disabled(value: BooleanInput);
    /** @docs-private */
    get required(): boolean;
    /** Sets if at least a radio button should be selected. */
    set required(value: boolean);
    private readonly _destroyed;
    constructor(radioGroup: NxRadioGroupComponent | null, _cdr: ChangeDetectorRef, _focusMonitor: FocusMonitor);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /** @docs-private
     * Callback for when the content of the label has changed.
     */
    labelContentChanged(): void;
    writeValue(value: any): void;
    private onChangeCallback;
    registerOnChange(onChange: (value: any) => void): void;
    private onTouchedCallback;
    registerOnTouched(onTouched: () => void): void;
    /** Focuses the radio button element. */
    focus(focusOrigin?: FocusOrigin): void;
    /** @docs-private */
    touch(): void;
    _onInputChange(event: Event): void;
    _onInputClick(event: Event): void;
    /** @docs-private */
    _controlInvalid(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxRadioComponent, [{ optional: true; }, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxRadioComponent, "nx-radio", never, { "id": "id"; "name": "name"; "labelSize": "labelSize"; "negative": "negative"; "value": "nxValue"; "checked": "nxChecked"; "disabled": "nxDisabled"; "required": "required"; }, { "valueChange": "nxValueChange"; }, never, ["*"]>;
}
