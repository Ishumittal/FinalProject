import { BooleanInput } from '@angular/cdk/coercion';
import { AfterContentInit, ChangeDetectorRef, DoCheck, OnDestroy, QueryList } from '@angular/core';
import { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';
import { ErrorStateMatcher } from '@aposin/ng-aquila/utils';
import { Subject } from 'rxjs';
import { NxRadioToggleButtonBaseComponent } from './radio-toggle-button-base.component';
import * as i0 from "@angular/core";
export declare const RESET_VALUES: (string | null | undefined)[];
export declare class NxRadioToggleComponent implements ControlValueAccessor, OnDestroy, AfterContentInit, DoCheck {
    private _cdr;
    /** @docs-private */ ngControl: NgControl | null;
    private _errorStateMatcher;
    private _parentForm;
    private _parentFormGroup;
    private _toggleId;
    private _selection;
    private _disabled;
    /** @docs-private */
    errorState: boolean;
    _disableChange: Subject<void>;
    /** @docs-private */
    additionalClasses: string;
    /** Sets the component to the disabled state.*/
    set disabled(value: BooleanInput);
    get disabled(): boolean;
    private _name;
    /** Sets the name used for accessibility. */
    set name(value: string);
    get name(): string;
    /** @docs-private */
    toggleButtons: QueryList<NxRadioToggleButtonBaseComponent>;
    private readonly _destroyed;
    private onTouchedCallback;
    private onChangeCallback;
    constructor(_cdr: ChangeDetectorRef, 
    /** @docs-private */ ngControl: NgControl | null, _errorStateMatcher: ErrorStateMatcher, _parentForm: NgForm | null, _parentFormGroup: FormGroupDirective | null);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    ngDoCheck(): void;
    registerOnChange(onChangeCallback: any): void;
    registerOnTouched(onTouchedCallback: any): void;
    /** Preselects the respective options. */
    writeValue(value: any): void;
    setDisabledState(isDisabled: boolean): void;
    /** @docs-private */
    get id(): string;
    /** Sets the modifiers for the component. */
    set style(value: string);
    /**
     * @docs-private
     */
    get selection(): any;
    /** @docs-private */
    change(value: any): void;
    /** @docs-private */
    updateErrorState(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxRadioToggleComponent, [null, { optional: true; self: true; }, null, { optional: true; }, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxRadioToggleComponent, "nx-radio-toggle", never, { "disabled": "nxDisabled"; "name": "nxName"; "writeValue": "nxSelection"; "style": "nxStyle"; }, {}, ["toggleButtons"], ["*"]>;
}
