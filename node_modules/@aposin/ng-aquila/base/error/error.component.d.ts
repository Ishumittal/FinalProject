import { BooleanInput } from '@angular/cdk/coercion';
import { ChangeDetectorRef, InjectionToken, OnDestroy } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export declare type ErrorStyleType = 'message' | 'text';
/**
 * Represents the default options for the error notification that can be configured
 * using the `ERROR_DEFAULT_OPTIONS` injection token.
 */
export declare class ErrorDefaultOptions {
    /**
     * Stream that emits whenever the default options are changed. Use this to notify
     * components if the default options have changed after initialization.
     */
    changes?: Subject<void>;
    /** Defines the style type of the error notification. */
    appearance?: ErrorStyleType;
    static ɵfac: i0.ɵɵFactoryDeclaration<ErrorDefaultOptions, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ErrorDefaultOptions>;
}
export declare const ERROR_DEFAULT_OPTIONS: InjectionToken<ErrorDefaultOptions>;
export declare class NxErrorComponent implements OnDestroy {
    private _cdr;
    private _defaultOptions;
    private _showIcon;
    private _appearance;
    private _id;
    /** Whether an icon should be displayed. Only has an effect for type 'text' */
    set showIcon(value: BooleanInput);
    get showIcon(): boolean;
    /**
     * Id of the nx-error.
     *
     * If not set, the selectable card gets an incremented value by default.
     */
    set id(value: string);
    get id(): string;
    /**
     * Whether the error should have message or text styling.
     *
     * Default is 'message'.
     */
    set appearance(value: ErrorStyleType);
    get appearance(): ErrorStyleType;
    private readonly _destroyed;
    constructor(_cdr: ChangeDetectorRef, _defaultOptions: ErrorDefaultOptions | null);
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxErrorComponent, [null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxErrorComponent, "nx-error", never, { "showIcon": "showIcon"; "id": "id"; "appearance": "appearance"; }, {}, never, ["*"]>;
}
