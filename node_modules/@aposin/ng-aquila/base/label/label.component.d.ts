import { BooleanInput } from '@angular/cdk/coercion';
import { ChangeDetectorRef, InjectionToken } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export interface LabelDefaultOptions {
    /** Sets the default appearance. (optional) */
    size?: LABEL_SIZE_TYPE;
}
/** Options for sizing of the label. */
export declare type LABEL_SIZE_TYPE = 'small' | 'large';
export declare const LABEL_DEFAULT_OPTIONS: InjectionToken<LabelDefaultOptions>;
export declare class NxLabelComponent {
    private _defaultOptions;
    private _cdr;
    readonly _stateChanges: Subject<void>;
    private _disabled;
    private _negative;
    private _size;
    private _for;
    private _id;
    /** Sets the label to disabled */
    set disabled(value: BooleanInput);
    get disabled(): boolean;
    /** Sets the label to disabled */
    set negative(value: BooleanInput);
    get negative(): boolean;
    /** Sets the Id of the label */
    set id(value: string);
    get id(): string;
    /**
     * **Expert option**
     * Sets the appearance of the label */
    set size(value: LABEL_SIZE_TYPE);
    get size(): LABEL_SIZE_TYPE;
    /**
     * Sets the html `for` attribute on the label.
     */
    set for(value: string | null);
    get for(): string | null;
    constructor(_defaultOptions: LabelDefaultOptions | null, _cdr: ChangeDetectorRef);
    static ɵfac: i0.ɵɵFactoryDeclaration<NxLabelComponent, [{ optional: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxLabelComponent, "nx-label", never, { "disabled": "disabled"; "negative": "negative"; "id": "id"; "size": "size"; "for": "for"; }, {}, never, ["*"]>;
}
