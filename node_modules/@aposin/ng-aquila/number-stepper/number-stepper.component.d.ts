import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, Renderer2 } from '@angular/core';
import { ControlValueAccessor, FormControl, Validator } from '@angular/forms';
import { MappedStyles } from '@aposin/ng-aquila/core';
import { Decimal } from 'decimal.js';
import { NxAutoResizeDirective } from './auto-resize.directive';
import { NxNumberStepperIntl } from './number-stepper-intl';
import * as i0 from "@angular/core";
/**
 * `Input('nxSize') classNames` defines the size of the number stepper.
 * Values: big | normal. Default: normal
 */
export declare class NxNumberStepperComponent extends MappedStyles implements AfterViewInit, ControlValueAccessor, Validator, OnDestroy {
    private _cdr;
    _intl: NxNumberStepperIntl;
    private _step;
    private _min;
    private _max;
    private _value;
    private _label;
    private _incrementAriaLabel;
    private _decrementAriaLabel;
    private _inputAriaLabel;
    private _resize;
    private _negative;
    private _leadingZero;
    private _disabled;
    /** @docs-private */
    numberInputValue: string;
    /** @docs-private */
    inputClassNames: string;
    /** @docs-private */
    inputId: string;
    /** @docs-private */
    inputWidth: number;
    /** @docs-private */
    ariaDescribedBy: string | null;
    /** @docs-private */
    ngContentWrapper: ElementRef;
    /** @docs-private */
    autoResize: NxAutoResizeDirective;
    /** @docs-private */
    nativeInput: ElementRef;
    /** An event emitted on value change. */
    valueChange: EventEmitter<number>;
    /** Whether the input should be resized. Default: false */
    set resize(value: BooleanInput);
    get resize(): boolean;
    get label(): string;
    /** Defines the the label shown above the stepper input. */
    set label(value: string);
    /** Sets the aria-label for the increment button. */
    set incrementAriaLabel(value: string);
    get incrementAriaLabel(): string;
    /** Sets the aria-label for the decrement button. */
    set decrementAriaLabel(value: string);
    get decrementAriaLabel(): string;
    /** Sets the aria-label for the input of the number stepper. */
    set inputAriaLabel(value: string);
    get inputAriaLabel(): string;
    /** Sets the step size. Default: 1 */
    set step(value: NumberInput);
    get step(): number;
    /** Sets the minimum accepted number. Default: 0 */
    set min(value: NumberInput);
    get min(): number;
    /** Sets the maximum accepted number. Default: 100 */
    set max(value: NumberInput);
    get max(): number;
    get value(): number | null;
    /** Sets the value of the number-stepper. */
    set value(value: number | null);
    /** Whether the negative set of styling should be used. */
    set negative(value: BooleanInput);
    get negative(): boolean;
    /** Whether the number stepper value should have a leading zero.
     *
     * Default value is true.
     */
    set leadingZero(value: BooleanInput);
    get leadingZero(): boolean;
    /** Whether the user input in the number stepper should be disabled.
     *
     * Default value is false.
     */
    set disabled(value: BooleanInput);
    get disabled(): boolean;
    private readonly _destroyed;
    constructor(_cdr: ChangeDetectorRef, _renderer: Renderer2, _elementRef: ElementRef, _intl: NxNumberStepperIntl);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /** @docs-private */
    setInputValue(value: number | null): void;
    writeValue(value: number | null): void;
    private onChangeCallback;
    registerOnChange(onChange: (value: number | null) => void): void;
    /** @docs-private */
    onTouchedCallback: () => void;
    registerOnTouched(onTouched: () => void): void;
    /**
     * Disables the stepper. Part of the ControlValueAccessor interface required
     * to integrate with Angular's core forms API.
     *
     * @param isDisabled Sets whether the component is disabled.
     */
    setDisabledState(isDisabled: boolean): void;
    /** @docs-private */
    onInputChange(event: Event): void;
    /** @docs-private */
    validateUserInput(input: string): boolean;
    /** @docs-private */
    incrementOnClick(): void;
    /** @docs-private */
    incrementOnKey(event: Event): void;
    /** @docs-private */
    _increment(): void;
    /** @docs-private */
    triggerResize(): void;
    /** @docs-private */
    decrementOnClick(): void;
    /** @docs-private */
    decrementOnKey(event: Event): void;
    /** @docs-private */
    _decrement(): void;
    /** @docs-private */
    enforceLimits(value: number): number;
    /** @docs-private */
    getNextLowerValue(start: number): number;
    /** @docs-private */
    getNextGreaterValue(start: number): number;
    /** @docs-private */
    isBetweenLimits(value: number | Decimal): boolean;
    /** @docs-private */
    isMinimum(): boolean;
    /** @docs-private */
    isMaximum(): boolean;
    /** @docs-private */
    isValidStep(value: number | Decimal | null): boolean;
    /** @docs-private */
    userInputToNumber(value: string): number;
    _validateFn(): {
        nxNumberStepperStepError: string;
        nxNumberStepperFormatError?: undefined;
    } | {
        nxNumberStepperFormatError: string;
        nxNumberStepperStepError?: undefined;
    } | null;
    /** @docs-private */
    validate(c: FormControl): {
        nxNumberStepperStepError: string;
        nxNumberStepperFormatError?: undefined;
    } | {
        nxNumberStepperFormatError: string;
        nxNumberStepperStepError?: undefined;
    } | null;
    get _buttonType(): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxNumberStepperComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxNumberStepperComponent, "nx-number-stepper", never, { "classNames": "nxSize"; "resize": "nxResize"; "label": "nxLabel"; "incrementAriaLabel": "incrementAriaLabel"; "decrementAriaLabel": "decrementAriaLabel"; "inputAriaLabel": "inputAriaLabel"; "step": "nxStep"; "min": "nxMin"; "max": "nxMax"; "value": "nxValue"; "negative": "negative"; "leadingZero": "leadingZero"; "disabled": "nxDisabled"; }, { "valueChange": "nxValueChange"; }, never, ["*", "nx-number-stepper-prefix", "nx-number-stepper-suffix"]>;
}
