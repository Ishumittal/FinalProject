import { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';
import { BooleanInput } from '@angular/cdk/coercion';
import { AfterContentInit, AfterViewInit, ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList } from '@angular/core';
import { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';
import { NxLabelComponent } from '@aposin/ng-aquila/base';
import { ErrorStateMatcher } from '@aposin/ng-aquila/utils';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export declare class NxCheckboxChangeEvent {
    /** The checked value of the checkbox. */
    checked: boolean;
    /** The value of the checkbox. */
    value: string;
    /** The component instance of the checkbox which emitted the change event. */
    checkbox: NxCheckboxComponent;
    constructor(
    /** The checked value of the checkbox. */
    checked: boolean, 
    /** The value of the checkbox. */
    value: string, 
    /** The component instance of the checkbox which emitted the change event. */
    checkbox: NxCheckboxComponent);
}
export declare class NxCheckboxGroupChangeEvent {
    /** The value of the checkbox group. An array containing all checked checkbox values. */
    value: string[];
    /** The component instance of the checkbox group. */
    checkboxGroup: NxCheckboxGroupComponent;
    constructor(
    /** The value of the checkbox group. An array containing all checked checkbox values. */
    value: string[], 
    /** The component instance of the checkbox group. */
    checkboxGroup: NxCheckboxGroupComponent);
}
/** Size of the label. */
export declare type NxCheckboxLabelSize = 'small' | 'large';
export declare class NxCheckboxGroupComponent implements ControlValueAccessor, AfterContentInit, OnDestroy, DoCheck {
    private _cdr;
    private _errorStateMatcher;
    private _parentForm;
    private _parentFormGroup;
    ngControl: NgControl | null;
    _checkboxes: QueryList<NxCheckboxComponent>;
    _label: NxLabelComponent;
    readonly _stateChanges: Subject<void>;
    errorState: boolean;
    selectionChange: EventEmitter<NxCheckboxGroupChangeEvent>;
    private _id;
    /** Sets the Id of the checkbox group. */
    set id(value: string);
    get id(): string;
    private _name;
    /** Sets the name of the checkboxes inside the nx-checkbox-group. */
    set name(value: string);
    get name(): string;
    private _disabled;
    /** Disables all checkboxes inside the nx-checkbox-group. */
    set disabled(value: BooleanInput);
    get disabled(): boolean;
    private _negative;
    /** Set the negative styles for all the checkboxes inside the nx-checkbox-group */
    set negative(value: BooleanInput);
    get negative(): boolean;
    private _labelSize;
    /** Sets the label size of the checkboxes inside the group */
    set labelSize(value: NxCheckboxLabelSize);
    get labelSize(): NxCheckboxLabelSize;
    /** Whether the nx-checkbox-group are required. */
    get required(): boolean;
    set required(value: BooleanInput);
    private _required;
    private _value;
    private readonly _destroyed;
    constructor(_cdr: ChangeDetectorRef, _errorStateMatcher: ErrorStateMatcher, _parentForm: NgForm | null, _parentFormGroup: FormGroupDirective | null, ngControl: NgControl | null);
    ngAfterContentInit(): void;
    ngDoCheck(): void;
    ngOnDestroy(): void;
    writeValue(value: any): void;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: any): void;
    setDisabledState?(isDisabled: boolean): void;
    private _onChange;
    private _onTouched;
    private _updateSelectedCheckboxFromValue;
    /** @docs-private */
    change(value: unknown): void;
    /** Checkbox instances in the checkbox group. */
    get checkboxes(): NxCheckboxComponent[];
    /** @docs-private */
    updateErrorState(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxCheckboxGroupComponent, [null, null, { optional: true; }, { optional: true; }, { optional: true; self: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxCheckboxGroupComponent, "nx-checkbox-group", never, { "id": "id"; "name": "name"; "disabled": "disabled"; "negative": "negative"; "labelSize": "labelSize"; "required": "required"; }, { "selectionChange": "selectionChange"; }, ["_label", "_checkboxes"], ["nx-label", "nx-error", "*"]>;
}
export declare class NxCheckboxComponent implements ControlValueAccessor, OnDestroy, OnInit, AfterViewInit {
    private _cdr;
    private _errorStateMatcher;
    checkboxGroup: NxCheckboxGroupComponent | null;
    ngControl: NgControl | null;
    private _parentForm;
    private _parentFormGroup;
    private _focusMonitor;
    private _id;
    private _disabled;
    private _negative;
    private _labelSize;
    private _checked;
    private _name;
    /** @docs-private */
    _checkboxLabelWrapper: ElementRef;
    _nativeInput: ElementRef<HTMLElement>;
    /**
     * Id of the checkbox.
     *
     * If not set, the checkbox gets an incremented value by default.
     */
    set id(value: string);
    get id(): string;
    /** Name of the checkbox. */
    set name(name: string);
    get name(): string;
    /** Whether the checkbox is disabled. */
    set disabled(value: BooleanInput);
    get disabled(): boolean;
    /**
     * Sets the label size of the checkbox. Default value: small
     */
    set labelSize(value: NxCheckboxLabelSize);
    get labelSize(): NxCheckboxLabelSize;
    /**
     * Whether the checkbox has negative styling.
     */
    set negative(value: BooleanInput);
    get negative(): boolean;
    /** Whether the checkbox is checked. */
    set checked(value: BooleanInput);
    get checked(): boolean;
    private _indeterminate;
    /** Whether the checkbox is indeterminated. */
    set indeterminate(value: BooleanInput);
    get indeterminate(): boolean;
    /** Whether the checkbox is required. */
    get required(): boolean;
    set required(value: BooleanInput);
    private _required;
    /** Sets the value of the checkbox. Default value is the checked status. */
    get value(): string;
    set value(value: string);
    private _value;
    /** An event emitted when the indeterminate value has changed */
    indeterminateChange: EventEmitter<boolean>;
    /** An event emitted when the checked value has changed.
     *
     * Emits the boolean checked value of the changed checkbox.
     */
    checkedChange: EventEmitter<boolean>;
    /** An event emitted when the checked value has changed.
     *
     * Emits a NxCheckboxChangeEvent.
     */
    checkboxChange: EventEmitter<NxCheckboxChangeEvent>;
    /** @docs-private */
    get labelHasContent(): boolean;
    private readonly _destroyed;
    /** @docs-private
     * Callback for when the content of the label has changed.
     */
    labelContentChanged(): void;
    constructor(_cdr: ChangeDetectorRef, _errorStateMatcher: ErrorStateMatcher, checkboxGroup: NxCheckboxGroupComponent | null, ngControl: NgControl | null, _parentForm: NgForm | null, _parentFormGroup: FormGroupDirective | null, _focusMonitor: FocusMonitor);
    /** @docs-private */
    _controlInvalid(): boolean;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    private _setIndeterminate;
    private _setChecked;
    /** Toggles the checked state of the checkbox. */
    toggle(): void;
    writeValue(value: any): void;
    private onChangeCallback;
    registerOnChange(onChange: any): void;
    private onTouchedCallback;
    registerOnTouched(onTouched: any): void;
    setDisabledState?(isDisabled: boolean): void;
    /** Focuses the checkbox element. */
    focus(focusOrigin?: FocusOrigin): void;
    /** @docs-private */
    touch(): void;
    /** @docs-private */
    _onInputClick(event: Event): void;
    /** @docs-private */
    private _createChangeEvent;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxCheckboxComponent, [null, null, { optional: true; }, { optional: true; self: true; }, { optional: true; }, { optional: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxCheckboxComponent, "nx-checkbox", never, { "id": "id"; "name": "name"; "disabled": "disabled"; "labelSize": "labelSize"; "negative": "negative"; "checked": "checked"; "indeterminate": "indeterminate"; "required": "required"; "value": "value"; }, { "indeterminateChange": "indeterminateChange"; "checkedChange": "checkedChange"; "checkboxChange": "checkboxChange"; }, never, ["*"]>;
}
