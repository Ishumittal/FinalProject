{"version":3,"file":"aposin-ng-aquila-radio-button.mjs","sources":["../../../projects/ng-aquila/src/radio-button/radio-button.ts","../../../projects/ng-aquila/src/radio-button/radio-group.html","../../../projects/ng-aquila/src/radio-button/radio-button.html","../../../projects/ng-aquila/src/radio-button/radio-button.module.ts","../../../projects/ng-aquila/src/radio-button/aposin-ng-aquila-radio-button.ts"],"sourcesContent":["import { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\nimport { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Self,\n    ViewChild,\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, FormGroupDirective, NG_VALUE_ACCESSOR, NgControl, NgForm } from '@angular/forms';\nimport { NxLabelComponent } from '@aposin/ng-aquila/base';\nimport { ErrorStateMatcher } from '@aposin/ng-aquila/utils';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/** The change event object emitted by the radio group and radio button. */\nexport class NxRadioChange {\n    source: NxRadioComponent;\n    value: any;\n\n    /** The NxRadioComponent that emits the change event. NxRadioChange object can be instantiated with source radio component and a value. */\n    constructor(source: NxRadioComponent, value: any) {\n        this.source = source;\n        this.value = value;\n    }\n}\n\n/** Label Size Types */\nexport type LabelSize = 'small' | 'big';\n\nlet nextId = 0;\n\n@Component({\n    selector: 'nx-radio-group',\n    templateUrl: './radio-group.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        role: 'radiogroup',\n        '[attr.id]': 'id',\n        '[attr.required]': 'required',\n        '[class.nx-radio-group--negative]': 'negative',\n        '[attr.aria-labelledby]': 'this._label?.id  || null',\n    },\n    styleUrls: ['radio-button-group.scss'],\n})\nexport class NxRadioGroupComponent implements ControlValueAccessor, AfterContentInit, OnDestroy, DoCheck {\n    @ContentChild(forwardRef(() => NxLabelComponent))\n    _label!: NxLabelComponent;\n\n    /** @docs-private */\n    errorState = false;\n\n    // emits when the internal state changes on properties which are relevant\n    // for the radio buttons so that they can mark themself for check\n    readonly _stateChanges = new Subject<void>();\n\n    private _id = `nx-radio-group-${nextId++}`;\n    /** Sets the Id of the radio group. */\n    @Input('id')\n    set id(value: string) {\n        if (this._id !== value) {\n            this._id = value;\n            this._cdr.markForCheck();\n        }\n    }\n    get id(): string {\n        return this._id;\n    }\n    private _disabled = false;\n\n    /** Whether every radio button in this group should be disabled. */\n    @Input('nxDisabled')\n    set disabled(value: BooleanInput) {\n        this._disabled = coerceBooleanProperty(value);\n        // inform childs about the change where CD should be triggered\n        this._stateChanges.next();\n    }\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    private _negative = false;\n    /** Whether the radio group should have negative styling. */\n    @Input()\n    set negative(value: BooleanInput) {\n        this._negative = coerceBooleanProperty(value);\n        this._cdr.markForCheck();\n    }\n    get negative(): boolean {\n        return this._negative;\n    }\n\n    private _required = false;\n    /** Sets if at least an option should be selected. */\n    @Input()\n    set required(value: BooleanInput) {\n        this._required = coerceBooleanProperty(value);\n        this._stateChanges.next();\n    }\n    get required(): boolean {\n        return this._required;\n    }\n\n    /** An event is dispatched on each group value change. */\n    @Output('nxGroupValueChange') groupValueChange: EventEmitter<NxRadioChange> = new EventEmitter<NxRadioChange>();\n    private _name = `nx-radio-group-${nextId++}`;\n    private _value: any = null;\n    // The currently selected radio button; should match _value\n    private _selected: NxRadioComponent | null = null;\n\n    @ContentChildren(forwardRef(() => NxRadioComponent), { descendants: true })\n    _radios!: QueryList<NxRadioComponent>;\n\n    private _onChange: (value: any) => void = () => {};\n    private _onTouched: () => void = () => {};\n\n    get name(): string {\n        return this._name;\n    }\n\n    // this is also the name attribute, which is mandatory in conjunction with ngModel, hence no nx prefix\n    /** Sets the name of this radio group, which is mandatory in conjunction with ngModel (Default: null). */\n    @Input()\n    set name(value: string) {\n        this._name = value;\n        this._stateChanges.next();\n    }\n\n    get value(): any {\n        return this._value;\n    }\n\n    /** Sets the value of the selected radion button in this group (Default: null). */\n    @Input('nxValue')\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this._updateSelectedRadioFromValue();\n            this._checkSelectedRadioButton();\n        }\n    }\n\n    constructor(\n        private _cdr: ChangeDetectorRef,\n        @Optional() @Self() public ngControl: NgControl | null,\n        @Optional() public _parentForm: NgForm | null,\n        @Optional() public _parentFormGroup: FormGroupDirective | null,\n        private _errorStateMatcher: ErrorStateMatcher,\n    ) {\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n    }\n\n    ngAfterContentInit() {\n        this._updateSelectedRadioFromValue();\n        this._checkSelectedRadioButton();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n\n    writeValue(value: any): void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: (value: any) => void) {\n        this._onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this._onTouched = fn;\n    }\n\n    /** @docs-private this is meant to be called by the radio buttons in this group */\n    change(value: any) {\n        this.value = value;\n        this._onChange(value);\n        this.groupValueChange.emit(new NxRadioChange(this._selected as NxRadioComponent, this._value));\n    }\n\n    /** @docs-private this is meant to be called by the radio buttons in this group. */\n    touch() {\n        if (this._onTouched) {\n            this._onTouched();\n        }\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    private _updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected != null && this._selected.value === this._value;\n\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach(radio => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n\n    private _checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /** @docs-private */\n    updateErrorState() {\n        const oldState = this.errorState;\n        const parent = this._parentFormGroup || this._parentForm;\n        const control = this.ngControl ? (this.ngControl.control as FormControl) : null;\n        const newState = this._errorStateMatcher.isErrorState(control, parent);\n\n        if (newState !== oldState) {\n            this.errorState = newState;\n            this._cdr.markForCheck();\n        }\n    }\n}\n\n@Component({\n    selector: 'nx-radio',\n    templateUrl: 'radio-button.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styleUrls: ['radio-button.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => NxRadioComponent),\n            multi: true,\n        },\n    ],\n    host: {\n        '[attr.required]': 'required',\n        '[class.nx-radio-button--small-label]': 'labelSize === \"small\"',\n        '[class.nx-radio-button--big-label]': 'labelSize === \"big\"',\n        '[class.nx-radio--negative]': 'negative',\n        '[class.has-error]': '_controlInvalid() || null',\n        '[attr.aria-invalid]': '_controlInvalid() || null',\n    },\n})\nexport class NxRadioComponent implements ControlValueAccessor, OnInit, AfterViewInit, OnDestroy {\n    /** @docs-private */\n    @ViewChild('radioLabelWrapper', { static: true }) _radioLabelWrapper!: ElementRef;\n    @ViewChild('input') _nativeInput!: ElementRef<HTMLElement>;\n\n    private _id = `nx-radio-${nextId++}`;\n    /** Sets the id of the radio component. */\n    @Input('id')\n    set id(value: string) {\n        if (this._id !== value) {\n            this._id = value;\n            this._cdr.markForCheck();\n        }\n    }\n    get id(): string {\n        return this._id;\n    }\n\n    /** @docs-private */\n    get inputId(): string {\n        return `${this.id}-input`;\n    }\n\n    /** @docs-private */\n    get labelId(): string {\n        return `${this.id}-label`;\n    }\n\n    private _name: string | null = null;\n    // this is also the name attribute, which is mandatory in conjunction with ngModel, hence no nx prefix\n    /** Sets the name of this radio component, which is mandatory in conjunction with ngModel (Default: null). */\n    @Input('name')\n    set name(value: string) {\n        if (this._name !== value) {\n            this._name = value;\n            this._cdr.markForCheck();\n        }\n    }\n    get name(): string {\n        return this.radioGroup?.name || (this._name as string);\n    }\n\n    private _labelSize: LabelSize = 'big';\n    /** Sets the label size of the radio button.\n     * The default value is `big`.\n     */\n    @Input()\n    set labelSize(value: LabelSize) {\n        if (this._labelSize !== value) {\n            this._labelSize = value;\n            this._cdr.markForCheck();\n        }\n    }\n    get labelSize(): LabelSize {\n        return this._labelSize;\n    }\n\n    private _negative = false;\n    /**\n     * Whether the negative set of styles should be used.\n     *\n     * If the radio button is placed in a radio group, the negative value\n     * is overwritten by the group's negative value.\n     */\n    @Input()\n    set negative(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n        if (this._negative !== newValue) {\n            this._negative = newValue;\n            this._cdr.markForCheck();\n        }\n    }\n    get negative(): boolean {\n        return this.radioGroup ? this.radioGroup.negative : this._negative;\n    }\n\n    /** An event is dispatched on each value change. */\n    @Output('nxValueChange') valueChange: EventEmitter<NxRadioChange> = new EventEmitter<NxRadioChange>();\n\n    private _value: any = null;\n    private _checked = false;\n    private _disabled = false;\n    private _required = false;\n\n    /** @docs-private */\n    get labelHasContent(): boolean {\n        return !!this._radioLabelWrapper.nativeElement.innerHTML.trim();\n    }\n\n    /** Sets the value of the form control element (Default: null). */\n    @Input('nxValue')\n    set value(value: any) {\n        if (value !== this._value) {\n            this._value = value;\n            this.onChangeCallback(value);\n        }\n    }\n\n    get value(): any {\n        return this._value;\n    }\n\n    /** @docs-private */\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    /** Whether the radio component is selected. */\n    @Input('nxChecked')\n    set checked(value: boolean) {\n        if (this._checked !== value) {\n            this._checked = value;\n            this._cdr.markForCheck();\n        }\n    }\n\n    /** @docs-private */\n    get disabled(): boolean {\n        return this._disabled || !!this.radioGroup?.disabled;\n    }\n\n    /** Whether the radio button should be disabled or not. */\n    @Input('nxDisabled')\n    set disabled(value: BooleanInput) {\n        this._disabled = coerceBooleanProperty(value);\n        this._cdr.markForCheck();\n    }\n\n    /** @docs-private */\n    get required(): boolean {\n        return this._required || !!this.radioGroup?.required;\n    }\n\n    /** Sets if at least a radio button should be selected. */\n    @Input()\n    set required(value: boolean) {\n        this._required = value;\n        // needed when the outer component is set to onPush because it is a native property\n        // on the host element\n        this._cdr.markForCheck();\n    }\n\n    private readonly _destroyed = new Subject<void>();\n\n    constructor(@Optional() public radioGroup: NxRadioGroupComponent | null, private _cdr: ChangeDetectorRef, private _focusMonitor: FocusMonitor) {}\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            this.name = this.radioGroup.name;\n            // when relevant properties of the parent like name and disabled change\n            // we need to let change detection know that the template needs an update\n            this.radioGroup._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                this._cdr.markForCheck();\n            });\n\n            if (this.radioGroup.value === this._value) {\n                this._checked = true;\n            }\n        }\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._nativeInput);\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._focusMonitor.stopMonitoring(this._nativeInput);\n    }\n\n    /** @docs-private\n     * Callback for when the content of the label has changed.\n     */\n    labelContentChanged() {\n        this._cdr.detectChanges();\n    }\n\n    writeValue(value: any): void {\n        if (value === this._value) {\n            this._checked = true;\n            this._cdr.markForCheck();\n        }\n    }\n\n    private onChangeCallback: (value: any) => void = () => {};\n\n    registerOnChange(onChange: (value: any) => void): void {\n        this.onChangeCallback = onChange;\n    }\n\n    private onTouchedCallback: () => void = () => {};\n\n    registerOnTouched(onTouched: () => void): void {\n        this.onTouchedCallback = onTouched;\n    }\n\n    /** Focuses the radio button element. */\n    focus(focusOrigin?: FocusOrigin) {\n        this._focusMonitor.focusVia(this._nativeInput, focusOrigin as FocusOrigin);\n    }\n\n    /** @docs-private */\n    touch() {\n        this.onTouchedCallback();\n\n        if (this.radioGroup) {\n            this.radioGroup.touch();\n        }\n    }\n\n    _onInputChange(event: Event) {\n        event.stopPropagation();\n        this._checked = true;\n        this.valueChange.emit(new NxRadioChange(this, this._value));\n        this.onChangeCallback(this.value);\n\n        if (this.radioGroup && this.value !== this.radioGroup.value) {\n            this.radioGroup.change(this.value);\n        }\n    }\n\n    _onInputClick(event: Event) {\n        // make sure click event propagation on the visually hidden input\n        // are stopped to prevent multiple events bubbling up.\n        event.stopPropagation();\n    }\n\n    /** @docs-private */\n    _controlInvalid(): boolean {\n        const form = this.radioGroup && (this.radioGroup._parentFormGroup || this.radioGroup._parentForm);\n        this._cdr.markForCheck();\n        return !!(this.radioGroup?.ngControl?.invalid && (this.radioGroup.ngControl.touched || form?.submitted));\n    }\n}\n","<ng-content select=\"nx-label\"></ng-content>\n<ng-content></ng-content>\n<ng-container *ngIf=\"errorState\">\n    <ng-content select=\"nx-error\"></ng-content>\n</ng-container>\n","<input\n    #input\n    type=\"radio\"\n    [id]=\"inputId\"\n    [attr.name]=\"name\"\n    [disabled]=\"disabled\"\n    (blur)=\"touch()\"\n    (change)=\"_onInputChange($event)\"\n    (click)=\"_onInputClick($event)\"\n    [checked]=\"checked\"\n    [attr.aria-labelledby]=\"labelId\"\n    [attr.aria-invalid]=\"_controlInvalid() || null\"\n    class=\"nx-radio__input\"\n/>\n<label [id]=\"labelId\" [attr.for]=\"inputId\" class=\"nx-radio__label\" [class.has-label]=\"labelHasContent\">\n    <div class=\"nx-radio__circle\">\n        <div *ngIf=\"checked\" class=\"nx-radio__dot\"></div>\n    </div>\n    <span class=\"nx-radio__label--text\" #radioLabelWrapper (cdkObserveContent)=\"labelContentChanged()\">\n        <ng-content></ng-content>\n    </span>\n</label>\n","import { ObserversModule } from '@angular/cdk/observers';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxErrorModule, NxLabelModule } from '@aposin/ng-aquila/base';\nimport { NxIconModule } from '@aposin/ng-aquila/icon';\n\nimport { NxRadioComponent, NxRadioGroupComponent } from './radio-button';\n\n@NgModule({\n    declarations: [NxRadioComponent, NxRadioGroupComponent],\n    exports: [NxRadioComponent, NxRadioGroupComponent, NxErrorModule, NxLabelModule],\n    imports: [CommonModule, NxIconModule, ObserversModule],\n})\nexport class NxRadioModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}