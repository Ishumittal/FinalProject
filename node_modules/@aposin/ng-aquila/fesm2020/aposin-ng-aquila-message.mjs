import * as i1$1 from '@angular/cdk/overlay';
import { OverlayModule, OverlayConfig } from '@angular/cdk/overlay';
import * as i3$1 from '@angular/cdk/portal';
import { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal, PortalInjector } from '@angular/cdk/portal';
import * as i3 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { EventEmitter, Component, ChangeDetectionStrategy, HostBinding, ViewChild, Input, Output, NgModule, InjectionToken, Injectable, Optional, SkipSelf, Inject } from '@angular/core';
import * as i2 from '@aposin/ng-aquila/icon';
import { NxIconModule } from '@aposin/ng-aquila/icon';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import * as i1 from '@angular/cdk/a11y';
import { Subject } from 'rxjs';
import { take } from 'rxjs/operators';
import { trigger, state, style, transition, animate } from '@angular/animations';

const ICONS = {
    info: 'info-circle',
    error: 'exclamation-triangle',
    success: 'check-circle',
    warning: 'exclamation-circle-warning',
};
class NxMessageComponent {
    constructor(_cdr, _focusMonitor) {
        this._cdr = _cdr;
        this._focusMonitor = _focusMonitor;
        this._context = 'regular';
        this._allowedContexts = ['regular', 'info', 'error', 'warning', 'success'];
        this._closable = false;
        this._closeButtonLabel = 'Close dialog';
        /** Event emitted when the close icon of the message has been clicked. */
        this.closeEvent = new EventEmitter();
    }
    get _isInfo() {
        return this._context === 'info';
    }
    get _isSuccess() {
        return this._context === 'success';
    }
    get _isWarning() {
        return this._context === 'warning';
    }
    get _isError() {
        return this._context === 'error';
    }
    /**
     * Sets the context of the message.
     * The message box will color accordingly. Default: 'regular' */
    set context(value) {
        this._updateContext(value);
    }
    get context() {
        return this._context;
    }
    /** Whether a message should have a close icon in order to be dismissed. */
    set closable(value) {
        const newValue = coerceBooleanProperty(value);
        if (newValue !== this._closable) {
            this._closable = newValue;
            this._cdr.markForCheck();
        }
    }
    get closable() {
        return this._closable;
    }
    /** Sets the label of the close button of the message. */
    set closeButtonLabel(value) {
        if (value !== this._closeButtonLabel) {
            this._closeButtonLabel = value;
            this._cdr.markForCheck();
        }
    }
    get closeButtonLabel() {
        return this._closeButtonLabel;
    }
    ngAfterViewInit() {
        if (this.closable) {
            this._focusMonitor.monitor(this._closeButton);
        }
    }
    ngOnDestroy() {
        this._focusMonitor.stopMonitoring(this._closeButton);
    }
    _emitCloseEvent() {
        this.closeEvent.emit();
    }
    get _iconName() {
        const context = this._allowedContexts.includes(this._context) ? this._context : this._allowedContexts[0];
        return ICONS[context];
    }
    _updateContext(value) {
        if (value !== this._context) {
            this._context = value;
            this._cdr.markForCheck();
        }
    }
}
NxMessageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxMessageComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });
NxMessageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxMessageComponent, selector: "nx-message", inputs: { context: ["nxContext", "context"], closable: "closable", closeButtonLabel: "closeButtonLabel" }, outputs: { closeEvent: "close" }, host: { properties: { "class.context-info": "this._isInfo", "class.context-success": "this._isSuccess", "class.context-warning": "this._isWarning", "class.context-error": "this._isError", "class.nx-message--closable": "this.closable" } }, viewQueries: [{ propertyName: "_closeButton", first: true, predicate: ["closeButton"], descendants: true }], exportAs: ["nxMessage"], ngImport: i0, template: "<nx-icon *ngIf=\"_iconName\" class=\"nx-message__icon\" [name]=\"_iconName\" size=\"s\" aria-hidden=\"true\"> </nx-icon>\n\n<button\n    #closeButton\n    *ngIf=\"closable\"\n    (click)=\"_emitCloseEvent()\"\n    [attr.aria-label]=\"closeButtonLabel\"\n    tabindex=\"0\"\n    class=\"nx-message__close-icon\"\n    type=\"button\"\n>\n    <nx-icon name=\"close\" size=\"s\" aria-hidden=\"true\"> </nx-icon>\n</button>\n\n<div class=\"nx-message__content\">\n    <ng-content></ng-content>\n</div>\n", styles: [":host{font-size:var(--message-font-size);line-height:var(--message-line-height);font-weight:var(--message-font-weight);letter-spacing:var(--message-letter-spacing);color:var(--message-text-color);border-radius:var(--message-border-radius);width:100%;display:flex;align-items:flex-start;text-align:left;position:relative;border:1px solid;padding:23px}@media (max-width: 703px){:host{display:block}}[dir=rtl] :host{text-align:right}:host,:host(.context-regular){border-color:var(--message-regular-border-color);background-color:var(--message-regular-background-color)}:host(.context-info){border-color:var(--message-info-border-color);background-color:var(--message-info-background-color)}:host(.context-info) .nx-message__icon{color:var(--message-info-icon-color)}:host(.context-error){border-color:var(--message-error-border-color);background-color:var(--message-error-background-color)}:host(.context-error) .nx-message__icon{color:var(--message-error-icon-color)}:host(.context-success){border-color:var(--message-success-border-color);background-color:var(--message-success-background-color)}:host(.context-success) .nx-message__icon{color:var(--message-success-icon-color)}:host(.context-warning){border-color:var(--message-warning-border-color);background-color:var(--message-warning-background-color)}:host(.context-warning) .nx-message__icon{color:var(--message-warning-icon-color)}@media screen and (-ms-high-contrast: active){.nx-message__icon{color:windowText}}.nx-message__icon{margin-right:16px}@media (max-width: 703px){.nx-message__icon{float:left;margin-right:8px}}:host-context([dir=rtl]) .nx-message__icon{float:right;margin-right:0;margin-right:initial;margin-left:16px}@media (max-width: 703px){:host-context([dir=rtl]) .nx-message__icon{margin-left:8px}}:host(.nx-message--closable){padding-right:39px}@media (max-width: 703px){:host(.nx-message--closable){padding-right:31px}}[dir=rtl] :host(.nx-message--closable){padding-right:23px;padding-left:39px}@media (max-width: 703px){[dir=rtl] :host(.nx-message--closable){padding-left:31px}}.nx-message__close-icon{position:absolute;top:16px;right:16px;cursor:pointer;background-color:transparent;border:none;outline:none;padding:0;display:flex;align-items:center}.nx-message__close-icon nx-icon{color:var(--message-close-icon-color)}:host-context([dir=rtl]) .nx-message__close-icon{right:auto;left:16px}.nx-message__close-icon.cdk-keyboard-focused{box-shadow:var(--focus-box-shadow);border-radius:4px}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-message__close-icon.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}\n"], components: [{ type: i2.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxMessageComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-message', changeDetection: ChangeDetectionStrategy.OnPush, exportAs: 'nxMessage', template: "<nx-icon *ngIf=\"_iconName\" class=\"nx-message__icon\" [name]=\"_iconName\" size=\"s\" aria-hidden=\"true\"> </nx-icon>\n\n<button\n    #closeButton\n    *ngIf=\"closable\"\n    (click)=\"_emitCloseEvent()\"\n    [attr.aria-label]=\"closeButtonLabel\"\n    tabindex=\"0\"\n    class=\"nx-message__close-icon\"\n    type=\"button\"\n>\n    <nx-icon name=\"close\" size=\"s\" aria-hidden=\"true\"> </nx-icon>\n</button>\n\n<div class=\"nx-message__content\">\n    <ng-content></ng-content>\n</div>\n", styles: [":host{font-size:var(--message-font-size);line-height:var(--message-line-height);font-weight:var(--message-font-weight);letter-spacing:var(--message-letter-spacing);color:var(--message-text-color);border-radius:var(--message-border-radius);width:100%;display:flex;align-items:flex-start;text-align:left;position:relative;border:1px solid;padding:23px}@media (max-width: 703px){:host{display:block}}[dir=rtl] :host{text-align:right}:host,:host(.context-regular){border-color:var(--message-regular-border-color);background-color:var(--message-regular-background-color)}:host(.context-info){border-color:var(--message-info-border-color);background-color:var(--message-info-background-color)}:host(.context-info) .nx-message__icon{color:var(--message-info-icon-color)}:host(.context-error){border-color:var(--message-error-border-color);background-color:var(--message-error-background-color)}:host(.context-error) .nx-message__icon{color:var(--message-error-icon-color)}:host(.context-success){border-color:var(--message-success-border-color);background-color:var(--message-success-background-color)}:host(.context-success) .nx-message__icon{color:var(--message-success-icon-color)}:host(.context-warning){border-color:var(--message-warning-border-color);background-color:var(--message-warning-background-color)}:host(.context-warning) .nx-message__icon{color:var(--message-warning-icon-color)}@media screen and (-ms-high-contrast: active){.nx-message__icon{color:windowText}}.nx-message__icon{margin-right:16px}@media (max-width: 703px){.nx-message__icon{float:left;margin-right:8px}}:host-context([dir=rtl]) .nx-message__icon{float:right;margin-right:0;margin-right:initial;margin-left:16px}@media (max-width: 703px){:host-context([dir=rtl]) .nx-message__icon{margin-left:8px}}:host(.nx-message--closable){padding-right:39px}@media (max-width: 703px){:host(.nx-message--closable){padding-right:31px}}[dir=rtl] :host(.nx-message--closable){padding-right:23px;padding-left:39px}@media (max-width: 703px){[dir=rtl] :host(.nx-message--closable){padding-left:31px}}.nx-message__close-icon{position:absolute;top:16px;right:16px;cursor:pointer;background-color:transparent;border:none;outline:none;padding:0;display:flex;align-items:center}.nx-message__close-icon nx-icon{color:var(--message-close-icon-color)}:host-context([dir=rtl]) .nx-message__close-icon{right:auto;left:16px}.nx-message__close-icon.cdk-keyboard-focused{box-shadow:var(--focus-box-shadow);border-radius:4px}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-message__close-icon.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.FocusMonitor }]; }, propDecorators: { _isInfo: [{
                type: HostBinding,
                args: ['class.context-info']
            }], _isSuccess: [{
                type: HostBinding,
                args: ['class.context-success']
            }], _isWarning: [{
                type: HostBinding,
                args: ['class.context-warning']
            }], _isError: [{
                type: HostBinding,
                args: ['class.context-error']
            }], _closeButton: [{
                type: ViewChild,
                args: ['closeButton']
            }], context: [{
                type: Input,
                args: ['nxContext']
            }], closable: [{
                type: HostBinding,
                args: ['class.nx-message--closable']
            }, {
                type: Input
            }], closeButtonLabel: [{
                type: Input
            }], closeEvent: [{
                type: Output,
                args: ['close']
            }] } });

class NxMessageBannerComponent extends NxMessageComponent {
    constructor(_cdr, _fm) {
        super(_cdr, _fm);
        this._context = 'info';
        this._closable = true;
        this._allowedContexts = ['info', 'error', 'warning'];
    }
    /**
     * Sets the context of the message banner.
     * The message box will color accordingly. Default: 'info'
     */
    set context(value) {
        this._updateContext(value);
    }
    get context() {
        return this._context;
    }
}
NxMessageBannerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxMessageBannerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });
NxMessageBannerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxMessageBannerComponent, selector: "nx-message-banner", inputs: { context: "context" }, exportAs: ["nxMessageBanner"], usesInheritance: true, ngImport: i0, template: "<nx-icon *ngIf=\"_iconName\" class=\"nx-message__icon\" [name]=\"_iconName\" size=\"s\" aria-hidden=\"true\"> </nx-icon>\n\n<button\n    #closeButton\n    *ngIf=\"closable\"\n    (click)=\"_emitCloseEvent()\"\n    [attr.aria-label]=\"closeButtonLabel\"\n    tabindex=\"0\"\n    class=\"nx-message__close-icon\"\n    type=\"button\"\n>\n    <nx-icon name=\"close\" size=\"s\" aria-hidden=\"true\"> </nx-icon>\n</button>\n\n<div class=\"nx-message__content\">\n    <ng-content></ng-content>\n</div>\n", styles: [":host{font-size:var(--message-font-size);line-height:var(--message-line-height);font-weight:var(--message-font-weight);letter-spacing:var(--message-letter-spacing);color:var(--message-text-color);border-radius:var(--message-border-radius);width:100%;display:flex;align-items:flex-start;text-align:left;position:relative;border:1px solid;padding:23px}@media (max-width: 703px){:host{display:block}}[dir=rtl] :host{text-align:right}:host,:host(.context-regular){border-color:var(--message-regular-border-color);background-color:var(--message-regular-background-color)}:host(.context-info){border-color:var(--message-info-border-color);background-color:var(--message-info-background-color)}:host(.context-info) .nx-message__icon{color:var(--message-info-icon-color)}:host(.context-error){border-color:var(--message-error-border-color);background-color:var(--message-error-background-color)}:host(.context-error) .nx-message__icon{color:var(--message-error-icon-color)}:host(.context-success){border-color:var(--message-success-border-color);background-color:var(--message-success-background-color)}:host(.context-success) .nx-message__icon{color:var(--message-success-icon-color)}:host(.context-warning){border-color:var(--message-warning-border-color);background-color:var(--message-warning-background-color)}:host(.context-warning) .nx-message__icon{color:var(--message-warning-icon-color)}@media screen and (-ms-high-contrast: active){.nx-message__icon{color:windowText}}.nx-message__icon{margin-right:16px}@media (max-width: 703px){.nx-message__icon{float:left;margin-right:8px}}:host-context([dir=rtl]) .nx-message__icon{float:right;margin-right:0;margin-right:initial;margin-left:16px}@media (max-width: 703px){:host-context([dir=rtl]) .nx-message__icon{margin-left:8px}}:host(.nx-message--closable){padding-right:39px}@media (max-width: 703px){:host(.nx-message--closable){padding-right:31px}}[dir=rtl] :host(.nx-message--closable){padding-right:23px;padding-left:39px}@media (max-width: 703px){[dir=rtl] :host(.nx-message--closable){padding-left:31px}}.nx-message__close-icon{position:absolute;top:16px;right:16px;cursor:pointer;background-color:transparent;border:none;outline:none;padding:0;display:flex;align-items:center}.nx-message__close-icon nx-icon{color:var(--message-close-icon-color)}:host-context([dir=rtl]) .nx-message__close-icon{right:auto;left:16px}.nx-message__close-icon.cdk-keyboard-focused{box-shadow:var(--focus-box-shadow);border-radius:4px}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-message__close-icon.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}\n", ":host{border-radius:var(--message-banner-border-radius)}\n"], components: [{ type: i2.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxMessageBannerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-message-banner', changeDetection: ChangeDetectionStrategy.OnPush, exportAs: 'nxMessageBanner', template: "<nx-icon *ngIf=\"_iconName\" class=\"nx-message__icon\" [name]=\"_iconName\" size=\"s\" aria-hidden=\"true\"> </nx-icon>\n\n<button\n    #closeButton\n    *ngIf=\"closable\"\n    (click)=\"_emitCloseEvent()\"\n    [attr.aria-label]=\"closeButtonLabel\"\n    tabindex=\"0\"\n    class=\"nx-message__close-icon\"\n    type=\"button\"\n>\n    <nx-icon name=\"close\" size=\"s\" aria-hidden=\"true\"> </nx-icon>\n</button>\n\n<div class=\"nx-message__content\">\n    <ng-content></ng-content>\n</div>\n", styles: [":host{font-size:var(--message-font-size);line-height:var(--message-line-height);font-weight:var(--message-font-weight);letter-spacing:var(--message-letter-spacing);color:var(--message-text-color);border-radius:var(--message-border-radius);width:100%;display:flex;align-items:flex-start;text-align:left;position:relative;border:1px solid;padding:23px}@media (max-width: 703px){:host{display:block}}[dir=rtl] :host{text-align:right}:host,:host(.context-regular){border-color:var(--message-regular-border-color);background-color:var(--message-regular-background-color)}:host(.context-info){border-color:var(--message-info-border-color);background-color:var(--message-info-background-color)}:host(.context-info) .nx-message__icon{color:var(--message-info-icon-color)}:host(.context-error){border-color:var(--message-error-border-color);background-color:var(--message-error-background-color)}:host(.context-error) .nx-message__icon{color:var(--message-error-icon-color)}:host(.context-success){border-color:var(--message-success-border-color);background-color:var(--message-success-background-color)}:host(.context-success) .nx-message__icon{color:var(--message-success-icon-color)}:host(.context-warning){border-color:var(--message-warning-border-color);background-color:var(--message-warning-background-color)}:host(.context-warning) .nx-message__icon{color:var(--message-warning-icon-color)}@media screen and (-ms-high-contrast: active){.nx-message__icon{color:windowText}}.nx-message__icon{margin-right:16px}@media (max-width: 703px){.nx-message__icon{float:left;margin-right:8px}}:host-context([dir=rtl]) .nx-message__icon{float:right;margin-right:0;margin-right:initial;margin-left:16px}@media (max-width: 703px){:host-context([dir=rtl]) .nx-message__icon{margin-left:8px}}:host(.nx-message--closable){padding-right:39px}@media (max-width: 703px){:host(.nx-message--closable){padding-right:31px}}[dir=rtl] :host(.nx-message--closable){padding-right:23px;padding-left:39px}@media (max-width: 703px){[dir=rtl] :host(.nx-message--closable){padding-left:31px}}.nx-message__close-icon{position:absolute;top:16px;right:16px;cursor:pointer;background-color:transparent;border:none;outline:none;padding:0;display:flex;align-items:center}.nx-message__close-icon nx-icon{color:var(--message-close-icon-color)}:host-context([dir=rtl]) .nx-message__close-icon{right:auto;left:16px}.nx-message__close-icon.cdk-keyboard-focused{box-shadow:var(--focus-box-shadow);border-radius:4px}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-message__close-icon.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}\n", ":host{border-radius:var(--message-banner-border-radius)}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.FocusMonitor }]; }, propDecorators: { context: [{
                type: Input,
                args: ['context']
            }] } });

/**
 * Animations used by the Message Toast.
 * @docs-private
 */
const messageToastAnimations = {
    toastState: trigger('state', [
        state('initial, void, hidden', style({ opacity: 0, transform: 'translateY(100%)' })),
        state('visible', style({ opacity: 1 })),
        transition('* => visible', animate('300ms cubic-bezier(0, 0, 0.2, 1)', style({ opacity: 1, transform: 'translateY(0)' }))),
        transition('* => hidden', animate('300ms cubic-bezier(0, 0, 0.2, 1)', style({ opacity: 0, transform: 'translateY(200%)' }))),
    ]),
};

/**
 * Configuration used when opening a message toast.
 */
class NxMessageToastConfig {
    constructor() {
        /** The politeness level for the LiveAnnouncer announcement.
         *
         *  Default value: 'polite'.
         */
        this.politeness = 'polite';
        /**
         * Message to be announced by the LiveAnnouncer. When opening a toast message without a custom
         * component or template, the announcement message will default to the specified message.
         *
         * Default value: ''.
         */
        this.announcementMessage = '';
        /** The length of time in milliseconds to wait before automatically dismissing the message toast.
         *
         * Default value: 3000.
         */
        this.duration = 3000;
        /** Context of the message toast.
         *
         * Default value: 'info'. */
        this.context = 'info';
    }
}
/**
 * @docs-private
 * Needed so that the user text data can be injected in the message toastcomponent
 */
class NxMessageToastData {
    constructor(data) {
        this.data = data;
    }
}

/**
 * Internal component that wraps user-provided message toastcontent.
 * @docs-private
 */
class NxMessageToastComponent extends BasePortalOutlet {
    constructor(_ngZone, _cdr, 
    /** The message toastconfiguration. */
    config, 
    /** Injected data into the notifciation. */
    data) {
        super();
        this._ngZone = _ngZone;
        this._cdr = _cdr;
        this.config = config;
        this.data = data;
        /** Whether the component has been destroyed. */
        this._destroyed = false;
        /** Subject for notifying that the message toasthas exited from view. */
        this._onExit = new Subject();
        /** Subject for notifying that the message toasthas finished entering the view. */
        this._onEnter = new Subject();
        /** The state of the message toastanimations. */
        this._animationState = 'void';
        /** ARIA role for the message toastcontainer. */
        this._role = null;
        this._context = this.config.context;
        this._setAriaLabels();
    }
    /** Attach a component portal as content to this message toastcontainer. */
    attachComponentPortal(portal) {
        this._assertNotAttached();
        return this._portalOutlet.attachComponentPortal(portal);
    }
    /** Attach a template portal as content to this message toastcontainer. */
    attachTemplatePortal(portal) {
        this._assertNotAttached();
        return this._portalOutlet.attachTemplatePortal(portal);
    }
    /** Handle end of animations, updating the state of the notification. */
    onAnimationEnd(event) {
        const { fromState, toState } = event;
        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {
            this._completeExit();
        }
        if (toState === 'visible') {
            // Note: we shouldn't use `this` inside the zone callback,
            // because it can cause a memory leak.
            const onEnter = this._onEnter;
            this._ngZone.run(() => {
                onEnter.next();
                onEnter.complete();
            });
        }
    }
    /** Begin animation of message toastentrance into view. */
    enter() {
        if (!this._destroyed) {
            this._animationState = 'visible';
            this._cdr.detectChanges();
        }
    }
    /** Begin animation of the message toastexiting from view. */
    exit() {
        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case
        // where multiple notifications are opened in quick succession (e.g. two consecutive calls to
        // `NxMessageToastService.open`).
        this._animationState = 'hidden';
    }
    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */
    ngOnDestroy() {
        this._destroyed = true;
        this._completeExit();
    }
    /**
     * Waits for the zone to settle before removing the element. Helps prevent
     * errors where we end up removing an element which is in the middle of an animation.
     */
    _completeExit() {
        this._ngZone.onMicrotaskEmpty
            .asObservable()
            .pipe(take(1))
            .subscribe(() => {
            this._onExit.next();
            this._onExit.complete();
        });
    }
    /** Asserts that no content is already attached to the container. */
    _assertNotAttached() {
        if (this._portalOutlet.hasAttached()) {
            throw Error('Attempting to attach message toastcontent after content is already attached');
        }
    }
    _setAriaLabels() {
        // Based on the ARIA spec, `alert` and `status` roles have an
        // implicit `assertive` and `polite` politeness respectively.
        if (this.config.politeness === 'assertive' && !this.config.announcementMessage) {
            this._role = 'alert';
        }
        else if (this.config.politeness === 'off') {
            this._role = null;
        }
        else {
            this._role = 'status';
        }
    }
}
NxMessageToastComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxMessageToastComponent, deps: [{ token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: NxMessageToastConfig }, { token: NxMessageToastData }], target: i0.ɵɵFactoryTarget.Component });
NxMessageToastComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxMessageToastComponent, selector: "nx-message-toast", host: { listeners: { "@state.done": "onAnimationEnd($event)" }, properties: { "attr.role": "_role", "@state": "_animationState" } }, viewQueries: [{ propertyName: "_portalOutlet", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: "<nx-message [nxContext]=\"_context\">\n    <!-- Used when opening from a template -->\n    <ng-template cdkPortalOutlet></ng-template>\n    <!-- Used when opening only with custom text-->\n    <ng-container *ngIf=\"data\">{{ data.data }}</ng-container>\n</nx-message>\n", styles: ["nx-message{box-shadow:var(--message-box-shadow);max-width:352px}@media (max-width: 703px){nx-message{max-width:calc(100vw - 16px)}}\n"], components: [{ type: NxMessageComponent, selector: "nx-message", inputs: ["nxContext", "closable", "closeButtonLabel"], outputs: ["close"], exportAs: ["nxMessage"] }], directives: [{ type: i3$1.CdkPortalOutlet, selector: "[cdkPortalOutlet]", inputs: ["cdkPortalOutlet"], outputs: ["attached"], exportAs: ["cdkPortalOutlet"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], animations: [messageToastAnimations.toastState] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxMessageToastComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-message-toast', host: {
                        '[attr.role]': '_role',
                        '[@state]': '_animationState',
                        '(@state.done)': 'onAnimationEnd($event)',
                    }, animations: [messageToastAnimations.toastState], template: "<nx-message [nxContext]=\"_context\">\n    <!-- Used when opening from a template -->\n    <ng-template cdkPortalOutlet></ng-template>\n    <!-- Used when opening only with custom text-->\n    <ng-container *ngIf=\"data\">{{ data.data }}</ng-container>\n</nx-message>\n", styles: ["nx-message{box-shadow:var(--message-box-shadow);max-width:352px}@media (max-width: 703px){nx-message{max-width:calc(100vw - 16px)}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: NxMessageToastConfig }, { type: NxMessageToastData }]; }, propDecorators: { _portalOutlet: [{
                type: ViewChild,
                args: [CdkPortalOutlet, { static: true }]
            }] } });

class NxMessageModule {
}
NxMessageModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxMessageModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NxMessageModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxMessageModule, declarations: [NxMessageComponent, NxMessageToastComponent, NxMessageBannerComponent], imports: [CommonModule, NxIconModule, OverlayModule, PortalModule], exports: [NxMessageComponent, NxMessageBannerComponent] });
NxMessageModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxMessageModule, imports: [[CommonModule, NxIconModule, OverlayModule, PortalModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxMessageModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NxIconModule, OverlayModule, PortalModule],
                    declarations: [NxMessageComponent, NxMessageToastComponent, NxMessageBannerComponent],
                    exports: [NxMessageComponent, NxMessageBannerComponent],
                }]
        }] });

/** Maximum amount of milliseconds that can be passed into setTimeout. */
const MAX_TIMEOUT = 2 ** 31 - 1;
class NxMessageToastRef {
    constructor(toastInstance, _overlayRef) {
        this._overlayRef = _overlayRef;
        /** Subject for notifying the user that the message toasthas been dismissed. */
        this._afterDismissed = new Subject();
        /** Subject for notifying the user that the message toasthas opened and appeared. */
        this._afterOpened = new Subject();
        this.toastInstance = toastInstance;
        toastInstance._onExit.pipe(take(1)).subscribe(() => this._finishDismiss());
    }
    /** Dismisses the message toast. */
    dismiss() {
        if (!this._afterDismissed.closed) {
            this.toastInstance.exit();
        }
        clearTimeout(this._durationTimeoutId);
    }
    /** Dismisses the message toast after some duration */
    _dismissAfter(duration) {
        // Note that we need to cap the duration to the maximum value for setTimeout, because
        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.
        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));
    }
    /** Marks the message toastas opened */
    _open() {
        if (!this._afterOpened.closed) {
            this._afterOpened.next();
            this._afterOpened.complete();
        }
    }
    /** Cleans up the DOM after closing. */
    _finishDismiss() {
        this._overlayRef.dispose();
        this._afterDismissed.next();
        this._afterDismissed.complete();
    }
    /** Gets an observable that is notified when the message toastis finished closing. */
    afterDismissed() {
        return this._afterDismissed.asObservable();
    }
    /** Gets an observable that is notified when the message toasthas opened and appeared. */
    afterOpened() {
        return this.toastInstance._onEnter;
    }
}

/** Injection token that can be used to specify default message toast. */
const NX_MESSAGE_TOAST_DEFAULT_CONFIG = new InjectionToken('NX_MESSAGE_TOAST_DEFAULT_CONFIG');
/** A service for dispatching and displaying toast messages. */
class NxMessageToastService {
    constructor(_overlay, _injector, _live, _parentMessageToastService, _defaultConfig) {
        this._overlay = _overlay;
        this._injector = _injector;
        this._live = _live;
        this._parentMessageToastService = _parentMessageToastService;
        this._defaultConfig = _defaultConfig;
        /**
         * Reference to the current message toast in the view *at this level* (in the Angular injector tree).
         * If there is a parent message toast service, all operations should delegate to that parent
         * via `_oldToastMessageRef`.
         */
        this._toastRefAtThisLevel = null;
    }
    /** Reference to the currently opened message toastat *any* level. */
    get _oldToastMessageRef() {
        const parent = this._parentMessageToastService;
        return parent ? parent._oldToastMessageRef : this._toastRefAtThisLevel;
    }
    set _oldToastMessageRef(value) {
        if (this._parentMessageToastService) {
            this._parentMessageToastService._oldToastMessageRef = value;
        }
        else {
            this._toastRefAtThisLevel = value;
        }
    }
    /** Creates and dispatches a message toastwith a custom text.
     *
     * @param text Text to be used for the message toast.
     * @param config Extra configuration for the message toast.
     */
    open(text, config) {
        const currentConfig = { ...new NxMessageToastConfig(), ...this._defaultConfig, ...config };
        const overlayRef = this._createOverlay(currentConfig);
        const injector = this._createInjector(currentConfig, new NxMessageToastData(text), this._injector);
        const componentPortal = new ComponentPortal(NxMessageToastComponent, undefined, injector);
        const componentRef = overlayRef.attach(componentPortal);
        const toastRef = new NxMessageToastRef(componentRef.instance, overlayRef);
        this._animateToast(toastRef, currentConfig);
        this._oldToastMessageRef = toastRef;
        return this._oldToastMessageRef;
    }
    /** Creates and dispatches a message toastwith a custom template for the content.
     *
     * @param template Template to be used for the message toast.
     * @param config Extra configuration for the message toast.
     */
    openFromTemplate(template, config) {
        const currentConfig = { ...new NxMessageToastConfig(), ...this._defaultConfig, ...config };
        const overlayRef = this._createOverlay(currentConfig);
        const container = this._attachToastComponent(overlayRef, currentConfig);
        const toastRef = new NxMessageToastRef(container, overlayRef);
        const portal = new TemplatePortal(template, null, toastRef);
        container.attachTemplatePortal(portal);
        this._animateToast(toastRef, currentConfig);
        this._oldToastMessageRef = toastRef;
        return this._oldToastMessageRef;
    }
    // Attaches the message toastcontainer component to the overlay.
    _attachToastComponent(overlayRef, config) {
        const injector = this._createInjector(config, null, this._injector);
        const containerPortal = new ComponentPortal(NxMessageToastComponent, null, injector);
        const containerRef = overlayRef.attach(containerPortal);
        containerRef.instance.config = config;
        return containerRef.instance;
    }
    // Creates a new overlay and places it in the correct place.
    _createOverlay(config) {
        const overlayConfig = new OverlayConfig();
        const positionStrategy = this._overlay.position().global();
        positionStrategy.bottom('0');
        positionStrategy.centerHorizontally();
        overlayConfig.positionStrategy = positionStrategy;
        return this._overlay.create(overlayConfig);
    }
    /** Animates the old message toastout and the new one in. */
    _animateToast(toastRef, config) {
        // When the message toastis dismissed, clear the reference to it.
        toastRef.afterDismissed().subscribe(() => {
            // Clear the message toastref if it hasn't already been replaced by a newer message toast.
            if (this._oldToastMessageRef === toastRef) {
                this._oldToastMessageRef = null;
            }
            if (config.announcementMessage) {
                this._live.clear();
            }
        });
        if (this._oldToastMessageRef) {
            // If a message toastis opened, dismiss it and enter the
            // new message toastafter exit animation is complete.
            this._oldToastMessageRef.afterDismissed().subscribe(() => {
                toastRef.toastInstance.enter();
            });
            this._oldToastMessageRef.dismiss();
        }
        else {
            // If no message toastis in view, enter the message toast.
            toastRef.toastInstance.enter();
        }
        // If a message toastduration is provided, set up dismiss based on after the message toastis opened.
        if (config.duration && config.duration > 0) {
            toastRef.afterOpened().subscribe(() => toastRef._dismissAfter(config.duration));
        }
        if (config.announcementMessage) {
            this._live.announce(config.announcementMessage, config.politeness);
        }
    }
    _createInjector(config, data, injector) {
        const tokens = new WeakMap();
        tokens.set(NxMessageToastConfig, config);
        tokens.set(NxMessageToastData, data);
        return new PortalInjector(injector, tokens);
    }
    /**
     * Dismisses the currently visible message toast.
     */
    dismiss() {
        if (this._oldToastMessageRef) {
            this._oldToastMessageRef.dismiss();
        }
    }
    ngOnDestroy() {
        if (this._toastRefAtThisLevel) {
            this._toastRefAtThisLevel.dismiss();
        }
    }
}
NxMessageToastService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxMessageToastService, deps: [{ token: i1$1.Overlay }, { token: i0.Injector }, { token: i1.LiveAnnouncer }, { token: NxMessageToastService, optional: true, skipSelf: true }, { token: NX_MESSAGE_TOAST_DEFAULT_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
NxMessageToastService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxMessageToastService, providedIn: NxMessageModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxMessageToastService, decorators: [{
            type: Injectable,
            args: [{ providedIn: NxMessageModule }]
        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: i1.LiveAnnouncer }, { type: NxMessageToastService, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: NxMessageToastConfig, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [NX_MESSAGE_TOAST_DEFAULT_CONFIG]
                }] }]; } });

/**
 * Generated bundle index. Do not edit.
 */

export { NX_MESSAGE_TOAST_DEFAULT_CONFIG, NxMessageBannerComponent, NxMessageComponent, NxMessageModule, NxMessageToastComponent, NxMessageToastConfig, NxMessageToastData, NxMessageToastRef, NxMessageToastService, messageToastAnimations };
//# sourceMappingURL=aposin-ng-aquila-message.mjs.map
