{"version":3,"file":"aposin-ng-aquila-message.mjs","sources":["../../../projects/ng-aquila/src/message/message/message.component.ts","../../../projects/ng-aquila/src/message/message/message.component.html","../../../projects/ng-aquila/src/message/message-banner/message-banner.component.ts","../../../projects/ng-aquila/src/message/message-toast/message-toast-animations.ts","../../../projects/ng-aquila/src/message/message-toast/message-toast-config.ts","../../../projects/ng-aquila/src/message/message-toast/message-toast.component.ts","../../../projects/ng-aquila/src/message/message-toast/message-toast.component.html","../../../projects/ng-aquila/src/message/message.module.ts","../../../projects/ng-aquila/src/message/message-toast/message-toast-ref.ts","../../../projects/ng-aquila/src/message/message-toast/message-toast.service.ts","../../../projects/ng-aquila/src/message/aposin-ng-aquila-message.ts"],"sourcesContent":["import { FocusMonitor } from '@angular/cdk/a11y';\nimport { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    Output,\n    ViewChild,\n} from '@angular/core';\n\n/** The contextual type of a message. */\nexport type CONTEXT = 'regular' | 'info' | 'error' | 'success' | 'warning';\n\nconst ICONS: { [k: string]: string } = {\n    info: 'info-circle',\n    error: 'exclamation-triangle',\n    success: 'check-circle',\n    warning: 'exclamation-circle-warning',\n};\n\n@Component({\n    selector: 'nx-message',\n    templateUrl: './message.component.html',\n    styleUrls: ['./message.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'nxMessage',\n})\nexport class NxMessageComponent implements AfterViewInit, OnDestroy {\n    _context: CONTEXT = 'regular';\n\n    @HostBinding('class.context-info')\n    get _isInfo() {\n        return this._context === 'info';\n    }\n\n    @HostBinding('class.context-success')\n    get _isSuccess() {\n        return this._context === 'success';\n    }\n\n    @HostBinding('class.context-warning')\n    get _isWarning() {\n        return this._context === 'warning';\n    }\n\n    @HostBinding('class.context-error')\n    get _isError() {\n        return this._context === 'error';\n    }\n\n    _allowedContexts: CONTEXT[] = ['regular', 'info', 'error', 'warning', 'success'];\n\n    @ViewChild('closeButton') _closeButton!: ElementRef;\n\n    /**\n     * Sets the context of the message.\n     * The message box will color accordingly. Default: 'regular' */\n    @Input('nxContext')\n    set context(value: CONTEXT) {\n        this._updateContext(value);\n    }\n    get context(): CONTEXT {\n        return this._context;\n    }\n\n    _closable = false;\n\n    /** Whether a message should have a close icon in order to be dismissed. */\n    @HostBinding('class.nx-message--closable')\n    @Input()\n    set closable(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._closable) {\n            this._closable = newValue;\n            this._cdr.markForCheck();\n        }\n    }\n    get closable(): boolean {\n        return this._closable;\n    }\n\n    private _closeButtonLabel = 'Close dialog';\n\n    /** Sets the label of the close button of the message. */\n    @Input()\n    set closeButtonLabel(value: string) {\n        if (value !== this._closeButtonLabel) {\n            this._closeButtonLabel = value;\n            this._cdr.markForCheck();\n        }\n    }\n    get closeButtonLabel(): string {\n        return this._closeButtonLabel;\n    }\n\n    /** Event emitted when the close icon of the message has been clicked. */\n    @Output('close') closeEvent = new EventEmitter<void>();\n\n    constructor(private _cdr: ChangeDetectorRef, private _focusMonitor: FocusMonitor) {}\n\n    ngAfterViewInit() {\n        if (this.closable) {\n            this._focusMonitor.monitor(this._closeButton);\n        }\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._closeButton);\n    }\n\n    _emitCloseEvent() {\n        this.closeEvent.emit();\n    }\n\n    get _iconName(): string {\n        const context = this._allowedContexts.includes(this._context) ? this._context : this._allowedContexts[0];\n\n        return ICONS[context];\n    }\n\n    _updateContext(value: CONTEXT) {\n        if (value !== this._context) {\n            this._context = value;\n            this._cdr.markForCheck();\n        }\n    }\n}\n","<nx-icon *ngIf=\"_iconName\" class=\"nx-message__icon\" [name]=\"_iconName\" size=\"s\" aria-hidden=\"true\"> </nx-icon>\n\n<button\n    #closeButton\n    *ngIf=\"closable\"\n    (click)=\"_emitCloseEvent()\"\n    [attr.aria-label]=\"closeButtonLabel\"\n    tabindex=\"0\"\n    class=\"nx-message__close-icon\"\n    type=\"button\"\n>\n    <nx-icon name=\"close\" size=\"s\" aria-hidden=\"true\"> </nx-icon>\n</button>\n\n<div class=\"nx-message__content\">\n    <ng-content></ng-content>\n</div>\n","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input } from '@angular/core';\n\nimport { CONTEXT, NxMessageComponent } from '../message/message.component';\n\nexport type BANNER_CONTEXT = 'info' | 'error' | 'warning';\n\n@Component({\n    selector: 'nx-message-banner',\n    templateUrl: '../message/message.component.html',\n    styleUrls: ['../message/message.component.scss', './message-banner.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'nxMessageBanner',\n})\nexport class NxMessageBannerComponent extends NxMessageComponent {\n    _context: CONTEXT = 'info';\n\n    _closable = true;\n\n    _allowedContexts: CONTEXT[] = ['info', 'error', 'warning'];\n\n    constructor(_cdr: ChangeDetectorRef, _fm: FocusMonitor) {\n        super(_cdr, _fm);\n    }\n\n    /**\n     * Sets the context of the message banner.\n     * The message box will color accordingly. Default: 'info'\n     */\n    @Input('context')\n    set context(value: BANNER_CONTEXT) {\n        this._updateContext(value);\n    }\n    get context(): BANNER_CONTEXT {\n        return this._context as BANNER_CONTEXT;\n    }\n}\n","import { animate, AnimationTriggerMetadata, state, style, transition, trigger } from '@angular/animations';\n\n/**\n * Animations used by the Message Toast.\n * @docs-private\n */\nexport const messageToastAnimations: {\n    toastState: AnimationTriggerMetadata;\n} = {\n    toastState: trigger('state', [\n        state('initial, void, hidden', style({ opacity: 0, transform: 'translateY(100%)' })),\n        state('visible', style({ opacity: 1 })),\n        transition('* => visible', animate('300ms cubic-bezier(0, 0, 0.2, 1)', style({ opacity: 1, transform: 'translateY(0)' }))),\n        transition('* => hidden', animate('300ms cubic-bezier(0, 0, 0.2, 1)', style({ opacity: 0, transform: 'translateY(200%)' }))),\n    ]),\n};\n\n/** @docs-private */\nexport type NxMessageToastAnimationState = 'void' | 'visible' | 'hidden';\n","import { AriaLivePoliteness } from '@angular/cdk/a11y';\n\n/** The contextual type of a message. */\nexport type NxMessageToastContext = 'info' | 'success';\n\n/**\n * Configuration used when opening a message toast.\n */\nexport class NxMessageToastConfig {\n    /** The politeness level for the LiveAnnouncer announcement.\n     *\n     *  Default value: 'polite'.\n     */\n    politeness?: AriaLivePoliteness = 'polite';\n\n    /**\n     * Message to be announced by the LiveAnnouncer. When opening a toast message without a custom\n     * component or template, the announcement message will default to the specified message.\n     *\n     * Default value: ''.\n     */\n    announcementMessage?: string = '';\n\n    /** The length of time in milliseconds to wait before automatically dismissing the message toast.\n     *\n     * Default value: 3000.\n     */\n    duration?: number = 3000;\n\n    /** Context of the message toast.\n     *\n     * Default value: 'info'. */\n    context?: NxMessageToastContext = 'info';\n}\n\n/**\n * @docs-private\n * Needed so that the user text data can be injected in the message toastcomponent\n */\nexport class NxMessageToastData {\n    constructor(public data: string) {}\n}\n","import { AnimationEvent } from '@angular/animations';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { ChangeDetectorRef, Component, ComponentRef, EmbeddedViewRef, NgZone, OnDestroy, ViewChild } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { messageToastAnimations } from './message-toast-animations';\nimport { NxMessageToastConfig, NxMessageToastContext, NxMessageToastData } from './message-toast-config';\n\n/**\n * Internal component that wraps user-provided message toastcontent.\n * @docs-private\n */\n@Component({\n    selector: 'nx-message-toast',\n    templateUrl: './message-toast.component.html',\n    styleUrls: ['./message-toast.component.scss'],\n    host: {\n        '[attr.role]': '_role',\n        '[@state]': '_animationState',\n        '(@state.done)': 'onAnimationEnd($event)',\n    },\n    animations: [messageToastAnimations.toastState],\n})\nexport class NxMessageToastComponent extends BasePortalOutlet implements OnDestroy {\n    /** Whether the component has been destroyed. */\n    private _destroyed = false;\n\n    /** The portal outlet inside of this container into which the message toastcontent will be loaded. */\n    @ViewChild(CdkPortalOutlet, { static: true }) _portalOutlet!: CdkPortalOutlet;\n\n    /** Subject for notifying that the message toasthas exited from view. */\n    readonly _onExit: Subject<any> = new Subject();\n\n    /** Subject for notifying that the message toasthas finished entering the view. */\n    readonly _onEnter: Subject<any> = new Subject();\n\n    /** The state of the message toastanimations. */\n    _animationState = 'void';\n\n    /** ARIA role for the message toastcontainer. */\n    _role: 'alert' | 'status' | null = null;\n\n    _context: NxMessageToastContext;\n\n    constructor(\n        private _ngZone: NgZone,\n        private _cdr: ChangeDetectorRef,\n        /** The message toastconfiguration. */\n        public config: NxMessageToastConfig,\n        /** Injected data into the notifciation. */\n        public data?: NxMessageToastData,\n    ) {\n        super();\n\n        this._context = this.config.context as NxMessageToastContext;\n        this._setAriaLabels();\n    }\n\n    /** Attach a component portal as content to this message toastcontainer. */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n        this._assertNotAttached();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n\n    /** Attach a template portal as content to this message toastcontainer. */\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n        this._assertNotAttached();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n\n    /** Handle end of animations, updating the state of the notification. */\n    onAnimationEnd(event: AnimationEvent) {\n        const { fromState, toState } = event;\n\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n\n    /** Begin animation of message toastentrance into view. */\n    enter(): void {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._cdr.detectChanges();\n        }\n    }\n\n    /** Begin animation of the message toastexiting from view. */\n    exit() {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple notifications are opened in quick succession (e.g. two consecutive calls to\n        // `NxMessageToastService.open`).\n        this._animationState = 'hidden';\n    }\n\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    private _completeExit() {\n        this._ngZone.onMicrotaskEmpty\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                this._onExit.next();\n                this._onExit.complete();\n            });\n    }\n\n    /** Asserts that no content is already attached to the container. */\n    private _assertNotAttached() {\n        if (this._portalOutlet.hasAttached()) {\n            throw Error('Attempting to attach message toastcontent after content is already attached');\n        }\n    }\n\n    _setAriaLabels() {\n        // Based on the ARIA spec, `alert` and `status` roles have an\n        // implicit `assertive` and `polite` politeness respectively.\n        if (this.config.politeness === 'assertive' && !this.config.announcementMessage) {\n            this._role = 'alert';\n        } else if (this.config.politeness === 'off') {\n            this._role = null;\n        } else {\n            this._role = 'status';\n        }\n    }\n}\n","<nx-message [nxContext]=\"_context\">\n    <!-- Used when opening from a template -->\n    <ng-template cdkPortalOutlet></ng-template>\n    <!-- Used when opening only with custom text-->\n    <ng-container *ngIf=\"data\">{{ data.data }}</ng-container>\n</nx-message>\n","import { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxIconModule } from '@aposin/ng-aquila/icon';\n\nimport { NxMessageComponent } from './message/message.component';\nimport { NxMessageBannerComponent } from './message-banner/message-banner.component';\nimport { NxMessageToastComponent } from './message-toast/message-toast.component';\n\n@NgModule({\n    imports: [CommonModule, NxIconModule, OverlayModule, PortalModule],\n    declarations: [NxMessageComponent, NxMessageToastComponent, NxMessageBannerComponent],\n    exports: [NxMessageComponent, NxMessageBannerComponent],\n})\nexport class NxMessageModule {}\n","import { OverlayRef } from '@angular/cdk/overlay';\nimport { Observable, Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { NxMessageToastComponent } from './message-toast.component';\n\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = 2 ** 31 - 1;\n\nexport class NxMessageToastRef {\n    /**\n     * The instance of the component making up the content of the message toast.\n     * @docs-private\n     */\n    toastInstance: NxMessageToastComponent;\n\n    /** Subject for notifying the user that the message toasthas been dismissed. */\n    private readonly _afterDismissed = new Subject<any>();\n\n    /** Subject for notifying the user that the message toasthas opened and appeared. */\n    private readonly _afterOpened = new Subject<void>();\n\n    /**\n     * Timeout ID for the duration setTimeout call. Used to clear the timeout if the message toastis\n     * dismissed before the duration passes.\n     */\n    private _durationTimeoutId: any;\n\n    constructor(toastInstance: NxMessageToastComponent, private _overlayRef: OverlayRef) {\n        this.toastInstance = toastInstance;\n        toastInstance._onExit.pipe(take(1)).subscribe(() => this._finishDismiss());\n    }\n\n    /** Dismisses the message toast. */\n    dismiss(): void {\n        if (!this._afterDismissed.closed) {\n            this.toastInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n\n    /** Dismisses the message toast after some duration */\n    _dismissAfter(duration: number): void {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n\n    /** Marks the message toastas opened */\n    _open(): void {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n\n    /** Cleans up the DOM after closing. */\n    private _finishDismiss(): void {\n        this._overlayRef.dispose();\n\n        this._afterDismissed.next();\n        this._afterDismissed.complete();\n    }\n\n    /** Gets an observable that is notified when the message toastis finished closing. */\n    afterDismissed(): Observable<any> {\n        return this._afterDismissed.asObservable();\n    }\n\n    /** Gets an observable that is notified when the message toasthas opened and appeared. */\n    afterOpened(): Observable<void> {\n        return this.toastInstance._onEnter;\n    }\n}\n","import { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Overlay, OverlayConfig, OverlayRef } from '@angular/cdk/overlay';\nimport { ComponentPortal, PortalInjector, TemplatePortal } from '@angular/cdk/portal';\nimport { ComponentRef, Inject, Injectable, InjectionToken, Injector, OnDestroy, Optional, SkipSelf, TemplateRef } from '@angular/core';\n\nimport { NxMessageModule } from '../message.module';\nimport { NxMessageToastComponent } from './message-toast.component';\nimport { NxMessageToastConfig, NxMessageToastData } from './message-toast-config';\nimport { NxMessageToastRef } from './message-toast-ref';\n\n/** Injection token that can be used to specify default message toast. */\nexport const NX_MESSAGE_TOAST_DEFAULT_CONFIG = new InjectionToken<NxMessageToastConfig>('NX_MESSAGE_TOAST_DEFAULT_CONFIG');\n\n/** A service for dispatching and displaying toast messages. */\n@Injectable({ providedIn: NxMessageModule })\nexport class NxMessageToastService implements OnDestroy {\n    /**\n     * Reference to the current message toast in the view *at this level* (in the Angular injector tree).\n     * If there is a parent message toast service, all operations should delegate to that parent\n     * via `_oldToastMessageRef`.\n     */\n    private _toastRefAtThisLevel: NxMessageToastRef | null = null;\n\n    /** Reference to the currently opened message toastat *any* level. */\n    get _oldToastMessageRef(): NxMessageToastRef | null {\n        const parent = this._parentMessageToastService;\n        return parent ? parent._oldToastMessageRef : this._toastRefAtThisLevel;\n    }\n\n    set _oldToastMessageRef(value: NxMessageToastRef | null) {\n        if (this._parentMessageToastService) {\n            this._parentMessageToastService._oldToastMessageRef = value;\n        } else {\n            this._toastRefAtThisLevel = value;\n        }\n    }\n\n    constructor(\n        private _overlay: Overlay,\n        private _injector: Injector,\n        private _live: LiveAnnouncer,\n        @Optional() @SkipSelf() private _parentMessageToastService: NxMessageToastService | null,\n        @Optional() @Inject(NX_MESSAGE_TOAST_DEFAULT_CONFIG) private _defaultConfig: NxMessageToastConfig | null,\n    ) {}\n\n    /** Creates and dispatches a message toastwith a custom text.\n     *\n     * @param text Text to be used for the message toast.\n     * @param config Extra configuration for the message toast.\n     */\n    open(text: string, config?: NxMessageToastConfig): NxMessageToastRef {\n        const currentConfig = { ...new NxMessageToastConfig(), ...this._defaultConfig, ...config };\n        const overlayRef = this._createOverlay(currentConfig);\n        const injector = this._createInjector(currentConfig, new NxMessageToastData(text), this._injector);\n\n        const componentPortal = new ComponentPortal(NxMessageToastComponent, undefined, injector);\n        const componentRef = overlayRef.attach(componentPortal);\n        const toastRef = new NxMessageToastRef(componentRef.instance, overlayRef);\n\n        this._animateToast(toastRef, currentConfig);\n        this._oldToastMessageRef = toastRef;\n        return this._oldToastMessageRef;\n    }\n\n    /** Creates and dispatches a message toastwith a custom template for the content.\n     *\n     * @param template Template to be used for the message toast.\n     * @param config Extra configuration for the message toast.\n     */\n    openFromTemplate(template: TemplateRef<any>, config?: NxMessageToastConfig): NxMessageToastRef {\n        const currentConfig = { ...new NxMessageToastConfig(), ...this._defaultConfig, ...config };\n        const overlayRef = this._createOverlay(currentConfig);\n        const container = this._attachToastComponent(overlayRef, currentConfig);\n        const toastRef = new NxMessageToastRef(container, overlayRef);\n        const portal = new TemplatePortal(template, null!, toastRef);\n\n        container.attachTemplatePortal(portal);\n        this._animateToast(toastRef, currentConfig);\n        this._oldToastMessageRef = toastRef;\n        return this._oldToastMessageRef;\n    }\n\n    // Attaches the message toastcontainer component to the overlay.\n    private _attachToastComponent(overlayRef: OverlayRef, config: NxMessageToastConfig): NxMessageToastComponent {\n        const injector = this._createInjector(config, null, this._injector);\n        const containerPortal = new ComponentPortal(NxMessageToastComponent, null, injector);\n        const containerRef: ComponentRef<NxMessageToastComponent> = overlayRef.attach(containerPortal);\n        containerRef.instance.config = config;\n\n        return containerRef.instance;\n    }\n\n    // Creates a new overlay and places it in the correct place.\n    private _createOverlay(config: NxMessageToastConfig): OverlayRef {\n        const overlayConfig = new OverlayConfig();\n        const positionStrategy = this._overlay.position().global();\n\n        positionStrategy.bottom('0');\n        positionStrategy.centerHorizontally();\n        overlayConfig.positionStrategy = positionStrategy;\n\n        return this._overlay.create(overlayConfig);\n    }\n\n    /** Animates the old message toastout and the new one in. */\n    private _animateToast(toastRef: NxMessageToastRef, config: NxMessageToastConfig) {\n        // When the message toastis dismissed, clear the reference to it.\n        toastRef.afterDismissed().subscribe(() => {\n            // Clear the message toastref if it hasn't already been replaced by a newer message toast.\n            if (this._oldToastMessageRef === toastRef) {\n                this._oldToastMessageRef = null;\n            }\n\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n\n        if (this._oldToastMessageRef) {\n            // If a message toastis opened, dismiss it and enter the\n            // new message toastafter exit animation is complete.\n            this._oldToastMessageRef.afterDismissed().subscribe(() => {\n                toastRef.toastInstance.enter();\n            });\n            this._oldToastMessageRef.dismiss();\n        } else {\n            // If no message toastis in view, enter the message toast.\n            toastRef.toastInstance.enter();\n        }\n\n        // If a message toastduration is provided, set up dismiss based on after the message toastis opened.\n        if (config.duration && config.duration > 0) {\n            toastRef.afterOpened().subscribe(() => toastRef._dismissAfter(config.duration!));\n        }\n\n        if (config.announcementMessage) {\n            this._live.announce(config.announcementMessage, config.politeness);\n        }\n    }\n\n    private _createInjector(config: NxMessageToastConfig, data: NxMessageToastData | null, injector: Injector): PortalInjector {\n        const tokens = new WeakMap();\n        tokens.set(NxMessageToastConfig, config);\n        tokens.set(NxMessageToastData, data);\n\n        return new PortalInjector(injector, tokens);\n    }\n\n    /**\n     * Dismisses the currently visible message toast.\n     */\n    dismiss(): void {\n        if (this._oldToastMessageRef) {\n            this._oldToastMessageRef.dismiss();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._toastRefAtThisLevel) {\n            this._toastRefAtThisLevel.dismiss();\n        }\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.NxMessageToastConfig","i1.NxMessageToastData","i1","i2"],"mappings":"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"}