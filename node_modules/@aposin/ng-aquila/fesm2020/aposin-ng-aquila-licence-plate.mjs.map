{"version":3,"file":"aposin-ng-aquila-licence-plate.mjs","sources":["../../../projects/ng-aquila/src/licence-plate/licence-plate.validator.ts","../../../projects/ng-aquila/src/licence-plate/licence-plate-euro-prefix.component.ts","../../../projects/ng-aquila/src/licence-plate/licence-plate-season-suffix.component.ts","../../../projects/ng-aquila/src/licence-plate/licence-plate.module.ts","../../../projects/ng-aquila/src/licence-plate/aposin-ng-aquila-licence-plate.ts"],"sourcesContent":["import { Directive, Input } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn } from '@angular/forms';\n\n/**\n * Type of supported license plates.\n */\nexport type NxLicencePlateType = 'de_standard' | 'de_season' | 'de_special' | 'other' | 'euro';\n\nconst DE_SPECIAL_PATTERN = /^[\\dA-Za-zÄÖÜäöü]{1,3}[ -]?[\\dA-Za-z]{1,5}[ -]?[\\dA-Za-z]{1,5}$/;\nconst DE_STANDARD_PATTERN = /^[A-Za-zÄÖÜäöü]{1,3}-[A-Za-z]{1,2} \\d{1,4}[EHeh]?$/;\nconst OTHER_PATTERN = /^.+$/;\n\nconst LICENCE_PLATE_PATTERNS: { [key in NxLicencePlateType]: RegExp } = {\n    de_standard: DE_STANDARD_PATTERN,\n    de_special: DE_SPECIAL_PATTERN,\n    de_season: DE_STANDARD_PATTERN,\n    other: OTHER_PATTERN,\n    euro: OTHER_PATTERN,\n};\n\n/**\n * Licence plate validator.\n * Supports validation for german standard and special plate numbers.\n * Choose `other` to allow all values.\n */\nexport function nxLicensePlateValidator(type: NxLicencePlateType): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n        const valid = LICENCE_PLATE_PATTERNS[type].test(control.value);\n\n        if (valid) {\n            return null;\n        }\n        return { nxLicensePlateError: true };\n    };\n}\n\n@Directive({\n    selector: '[nxLicensePlate]',\n    providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: NxLicencePlateValidatorDirective,\n            multi: true,\n        },\n    ],\n})\nexport class NxLicencePlateValidatorDirective implements Validator {\n    /**\n     * Licence plate type.\n     * Supports validation for german standard and special plate numbers.\n     * Choose `other` to allow all values.\n     */\n    @Input('nxLicensePlate')\n    type: NxLicencePlateType = 'other';\n\n    validate(control: AbstractControl): ValidationErrors | null {\n        return nxLicensePlateValidator(this.type)(control);\n    }\n}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport { NxFormfieldComponent } from '@aposin/ng-aquila/formfield';\n\n/**\n * Euro country prefix for the licence plate input.\n */\n@Component({\n    selector: 'nx-licence-plate-euro-prefix',\n    template: `<ng-content></ng-content>`,\n    styleUrls: ['licence-plate-euro-prefix.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxLicencePlateEuroPrefixComponent {\n    constructor(private _formField: NxFormfieldComponent) {}\n\n    @HostBinding('class.is-disabled')\n    get _disabled(): boolean {\n        return this._formField._control?.disabled;\n    }\n\n    @HostBinding('class.has-outline')\n    get _hasOutline(): boolean {\n        return this._formField.appearance === 'outline';\n    }\n}\n","import { ChangeDetectionStrategy, Component, HostBinding, Input } from '@angular/core';\nimport { NxFormfieldComponent } from '@aposin/ng-aquila/formfield';\n\n/**\n * Suffix for seasonal licence plate inputs.\n */\n@Component({\n    selector: 'nx-licence-plate-season-suffix',\n    template: `\n        <span>{{ _format(startMonth) }}</span>\n        <span>{{ _format(endMonth) }}</span>\n    `,\n    styleUrls: ['licence-plate-season-suffix.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxLicencePlateSeasonSuffixComponent {\n    /**\n     * Start month of the licence plate.\n     */\n    @Input()\n    startMonth = 1;\n\n    /**\n     * End month of the licence plate.\n     */\n    @Input()\n    endMonth = 1;\n\n    @HostBinding('class.is-disabled')\n    get _disabled(): boolean {\n        return this._formField._control?.disabled;\n    }\n\n    @HostBinding('class.has-outline')\n    get _hasOutline(): boolean {\n        return this._formField.appearance === 'outline';\n    }\n\n    constructor(private _formField: NxFormfieldComponent) {}\n\n    _format(value: number): string {\n        if (typeof value !== 'number') {\n            return '';\n        }\n        return value >= 10 ? value.toString() : '0' + value;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NxLicencePlateValidatorDirective } from './licence-plate.validator';\nimport { NxLicencePlateEuroPrefixComponent } from './licence-plate-euro-prefix.component';\nimport { NxLicencePlateSeasonSuffixComponent } from './licence-plate-season-suffix.component';\n\n@NgModule({\n    declarations: [NxLicencePlateValidatorDirective, NxLicencePlateEuroPrefixComponent, NxLicencePlateSeasonSuffixComponent],\n    imports: [CommonModule],\n    exports: [NxLicencePlateValidatorDirective, NxLicencePlateEuroPrefixComponent, NxLicencePlateSeasonSuffixComponent],\n})\nexport class NxLicencePlateModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}