import { coerceBooleanProperty } from '@angular/cdk/coercion';
import * as i0 from '@angular/core';
import { Component, ChangeDetectionStrategy, EventEmitter, forwardRef, ElementRef, Optional, Inject, Input, ContentChild, Output, NgModule } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { trigger, state, style, transition, animate } from '@angular/animations';
import * as i1 from '@angular/cdk/bidi';
import { CommonModule } from '@angular/common';
import { NxButtonModule } from '@aposin/ng-aquila/button';
import * as i3 from '@aposin/ng-aquila/icon';
import { NxIconModule } from '@aposin/ng-aquila/icon';
import * as i2 from '@angular/cdk/a11y';

const nxSidepanelAnimations = {
    sidepanelExpansion: trigger('sidepanelExpansion', [
        state('closed', style({
            transform: 'translateX({{ transformX }})',
            boxShadow: 'none',
            visibility: 'hidden',
        }), { params: { transformX: '100%' } }),
        state('open', style({
            transform: 'none',
            boxShadow: '*',
            visibility: 'visible',
        })),
        transition('closed => open', animate('.4s cubic-bezier(0, 0, 0.1, 1)')),
        transition('open-instant => closed, open => closed', animate('.2s cubic-bezier(0.8, 0, 1, 1)')),
    ]),
};

class NxSidepanelHeaderComponent {
}
NxSidepanelHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSidepanelHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
NxSidepanelHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxSidepanelHeaderComponent, selector: "nx-sidepanel-header", ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [":host{display:block;font-size:var(--sidepanel-header-font-size);line-height:var(--sidepanel-header-line-height);font-weight:var(--sidepanel-header-font-weight);letter-spacing:var(--sidepanel-header-letter-spacing)}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSidepanelHeaderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-sidepanel-header', template: '<ng-content></ng-content>', changeDetection: ChangeDetectionStrategy.OnPush, styles: [":host{display:block;font-size:var(--sidepanel-header-font-size);line-height:var(--sidepanel-header-line-height);font-weight:var(--sidepanel-header-font-weight);letter-spacing:var(--sidepanel-header-letter-spacing)}\n"] }]
        }] });

class NxSidepanelComponent {
    constructor(_cdr, _elementRef, _dir, _wrapper) {
        this._cdr = _cdr;
        this._elementRef = _elementRef;
        this._dir = _dir;
        this._wrapper = _wrapper;
        this._opened = true;
        /**
         * An event emitted when the opened value has changed.
         *
         * Emits the boolean value.
         */
        this.openedChange = new EventEmitter();
        this._position = 'floating';
        this._appearance = 'dark';
        this._openState = 'open-instant';
        if (this._wrapper == null) {
            console.warn(`NxSidepanelComponent needs a wrapping NxSidepanelOuterContainerComponent to work as expected.`);
        }
    }
    /** Whether the sidepanel should be opened and visible. */
    set opened(value) {
        this._opened = coerceBooleanProperty(value);
        this._setOpenState(this._opened);
        this._wrapper?._update();
        this._cdr.markForCheck();
    }
    get opened() {
        return this._opened;
    }
    /** Sets the position of the sidepanel. */
    set position(value) {
        this._position = value;
        this._cdr.markForCheck();
        this._wrapper?._update();
    }
    get position() {
        return this._position;
    }
    /** Sets the appearance of the sidepanel. Default: dark. */
    set appearance(value) {
        this._appearance = value;
        this._cdr.markForCheck();
    }
    get appearance() {
        return this._appearance;
    }
    /** Toggles the opened state of the sidepanel. */
    toggle() {
        this.opened = !this.opened;
        this.openedChange.emit(this._opened);
    }
    /** Sets the opened state of the sidepanel to true. */
    open() {
        if (!this.opened) {
            this.toggle();
        }
    }
    /** Sets the opened state of the sidepanel to false. */
    close() {
        if (this.opened) {
            this.toggle();
        }
    }
    _getWidth() {
        return this._elementRef.nativeElement.offsetWidth;
    }
    _getOpenState() {
        return this._openState;
    }
    _setOpenState(opened) {
        if (this._openState === 'open-instant' && opened) {
            return;
        }
        this._openState = opened ? 'open' : 'closed';
        if (opened) {
            this.triggerElem = document.activeElement;
        }
    }
    onAnimationDone(event) {
        this.openedChange.emit(this._opened);
        this.focusTrigger(this._opened);
    }
    focusTrigger(opened) {
        if (!opened && this.triggerElem) {
            this.triggerElem.focus();
            this.triggerElem = null;
        }
    }
    /** The text direction of the containing app. */
    get dir() {
        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
    }
}
NxSidepanelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSidepanelComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i1.Directionality, optional: true }, { token: forwardRef(() => NxSidepanelOuterContainerComponent), optional: true }], target: i0.ɵɵFactoryTarget.Component });
NxSidepanelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxSidepanelComponent, selector: "nx-sidepanel", inputs: { opened: "opened", position: "position", appearance: "appearance" }, outputs: { openedChange: "openedChange" }, host: { attributes: { "role": "complementary" }, listeners: { "@sidepanelExpansion.done": "onAnimationDone($event)" }, properties: { "class.is-closed": "!opened", "class.is-static": "position === \"static\"", "class.is-floating": "position === \"floating\"", "class.light": "appearance === \"light\"", "@sidepanelExpansion": "{ value: _wrapper ? _getOpenState() : \"\", params: { transformX: dir === \"rtl\" ? \"-100%\" : \"100%\" } }", "class.without-wrapper": "!this._wrapper" } }, queries: [{ propertyName: "_header", first: true, predicate: NxSidepanelHeaderComponent, descendants: true, read: ElementRef }], ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [":host{display:flex;flex-direction:column;position:absolute;right:0;top:0;height:100%;overflow:hidden;background:var(--sidepanel-background-color)}[dir=rtl] :host{right:auto;left:0}:host.is-floating{z-index:1;box-shadow:var(--sidepanel-floating-shadow)}:host .is-closed{transform:translate(100%)}[dir=rtl] :host .is-closed{transform:translate(-100%)}:host.light{background:var(--sidepanel-light-background-color);border-left:1px solid var(--sidepanel-light-border-color)}[dir=rtl] :host.light{border-left:unset;border-right:1px solid var(--sidepanel-light-border-color)}@media screen and (-ms-high-contrast: active){:host{border-left:1px solid windowText}[dir=rtl] :host{border-left:none;border-right:1px solid windowText}}:host.without-wrapper.is-floating{position:fixed;right:0;z-index:1;box-shadow:var(--sidepanel-floating-shadow)}[dir=rtl] :host.without-wrapper.is-floating{right:auto;left:0}:host.without-wrapper.is-static{position:-webkit-sticky;position:sticky;top:0}:host.without-wrapper.is-closed{display:none}\n"], animations: [nxSidepanelAnimations.sidepanelExpansion], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSidepanelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-sidepanel', template: '<ng-content></ng-content>', animations: [nxSidepanelAnimations.sidepanelExpansion], host: {
                        '[class.is-closed]': '!opened',
                        '[class.is-static]': 'position === "static"',
                        '[class.is-floating]': 'position === "floating"',
                        '[class.light]': 'appearance === "light"',
                        role: 'complementary',
                        // if no wrapper is used, the sidepanel currently is not animated when opening closing,
                        // since a controlled environment is needed so that the animation works as expected.
                        '[@sidepanelExpansion]': '{ value: _wrapper ? _getOpenState() : "", params: { transformX: dir === "rtl" ? "-100%" : "100%" } }',
                        '(@sidepanelExpansion.done)': 'onAnimationDone($event)',
                        '[class.without-wrapper]': '!this._wrapper',
                    }, changeDetection: ChangeDetectionStrategy.OnPush, styles: [":host{display:flex;flex-direction:column;position:absolute;right:0;top:0;height:100%;overflow:hidden;background:var(--sidepanel-background-color)}[dir=rtl] :host{right:auto;left:0}:host.is-floating{z-index:1;box-shadow:var(--sidepanel-floating-shadow)}:host .is-closed{transform:translate(100%)}[dir=rtl] :host .is-closed{transform:translate(-100%)}:host.light{background:var(--sidepanel-light-background-color);border-left:1px solid var(--sidepanel-light-border-color)}[dir=rtl] :host.light{border-left:unset;border-right:1px solid var(--sidepanel-light-border-color)}@media screen and (-ms-high-contrast: active){:host{border-left:1px solid windowText}[dir=rtl] :host{border-left:none;border-right:1px solid windowText}}:host.without-wrapper.is-floating{position:fixed;right:0;z-index:1;box-shadow:var(--sidepanel-floating-shadow)}[dir=rtl] :host.without-wrapper.is-floating{right:auto;left:0}:host.without-wrapper.is-static{position:-webkit-sticky;position:sticky;top:0}:host.without-wrapper.is-closed{display:none}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i1.Directionality, decorators: [{
                    type: Optional
                }] }, { type: NxSidepanelOuterContainerComponent, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [forwardRef(() => NxSidepanelOuterContainerComponent)]
                }] }]; }, propDecorators: { opened: [{
                type: Input
            }], position: [{
                type: Input
            }], appearance: [{
                type: Input
            }], _header: [{
                type: ContentChild,
                args: [NxSidepanelHeaderComponent, { read: ElementRef, static: false }]
            }], openedChange: [{
                type: Output
            }] } });
class NxSidepanelOuterContainerComponent {
    constructor(_dir, _cdr) {
        this._dir = _dir;
        this._cdr = _cdr;
        this._destroyed = new Subject();
        this._dir?.change.pipe(takeUntil(this._destroyed)).subscribe(() => {
            this._cdr.markForCheck();
        });
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
    _update() {
        this._cdr.markForCheck();
    }
    /** The text direction of the containing app. */
    get dir() {
        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
    }
    _getOpenState() {
        if (this._sidepanel?.position === 'static') {
            return this._sidepanel._getOpenState();
        }
        return 'closed';
    }
    _getSidepanelWidth() {
        if (this._sidepanel?.position === 'static' && this._sidepanel?.opened) {
            return this._sidepanel._getWidth();
        }
        return 0;
    }
}
NxSidepanelOuterContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSidepanelOuterContainerComponent, deps: [{ token: i1.Directionality, optional: true }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NxSidepanelOuterContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxSidepanelOuterContainerComponent, selector: "nx-sidepanel-outer-container", queries: [{ propertyName: "_sidepanel", first: true, predicate: NxSidepanelComponent, descendants: true }], ngImport: i0, template: `
        <div
            class="nx-sidepanel-outer-container__content"
            [class.with-margin]="_getOpenState() === 'open'"
            [class.without-margin]="_getOpenState() === 'closed'"
            [style.margin-right.px]="dir === 'ltr' ? _getSidepanelWidth() : 0"
            [style.margin-left.px]="dir === 'rtl' ? _getSidepanelWidth() : 0"
        >
            <ng-content></ng-content>
        </div>
        <ng-content select="nx-sidepanel"></ng-content>
    `, isInline: true, styles: [":host{position:relative;display:block;height:100%;overflow:hidden}:host .nx-sidepanel-outer-container__content{position:relative;z-index:1;display:block;height:100%;overflow:auto}:host .nx-sidepanel-outer-container__content.with-margin{transition-duration:.4s;transition-timing-function:cubic-bezier(0,0,.1,1);transition-property:margin-right}[dir=rtl] :host .nx-sidepanel-outer-container__content.with-margin{transition-property:margin-left}:host .nx-sidepanel-outer-container__content.without-margin{transition-duration:.2s;transition-timing-function:cubic-bezier(.8,0,1,1);transition-property:margin-right}[dir=rtl] :host .nx-sidepanel-outer-container__content.without-margin{transition-property:margin-left}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSidepanelOuterContainerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-sidepanel-outer-container', template: `
        <div
            class="nx-sidepanel-outer-container__content"
            [class.with-margin]="_getOpenState() === 'open'"
            [class.without-margin]="_getOpenState() === 'closed'"
            [style.margin-right.px]="dir === 'ltr' ? _getSidepanelWidth() : 0"
            [style.margin-left.px]="dir === 'rtl' ? _getSidepanelWidth() : 0"
        >
            <ng-content></ng-content>
        </div>
        <ng-content select="nx-sidepanel"></ng-content>
    `, changeDetection: ChangeDetectionStrategy.OnPush, styles: [":host{position:relative;display:block;height:100%;overflow:hidden}:host .nx-sidepanel-outer-container__content{position:relative;z-index:1;display:block;height:100%;overflow:auto}:host .nx-sidepanel-outer-container__content.with-margin{transition-duration:.4s;transition-timing-function:cubic-bezier(0,0,.1,1);transition-property:margin-right}[dir=rtl] :host .nx-sidepanel-outer-container__content.with-margin{transition-property:margin-left}:host .nx-sidepanel-outer-container__content.without-margin{transition-duration:.2s;transition-timing-function:cubic-bezier(.8,0,1,1);transition-property:margin-right}[dir=rtl] :host .nx-sidepanel-outer-container__content.without-margin{transition-property:margin-left}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.Directionality, decorators: [{
                    type: Optional
                }] }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { _sidepanel: [{
                type: ContentChild,
                args: [NxSidepanelComponent]
            }] } });

class NxSidepanelCloseButtonComponent {
    constructor(_sidepanel, _focusMonitor, _elementRef) {
        this._sidepanel = _sidepanel;
        this._focusMonitor = _focusMonitor;
        this._elementRef = _elementRef;
        this._focusMonitor.monitor(this._elementRef);
    }
    _toggle() {
        this._sidepanel.toggle();
    }
    ngOnDestroy() {
        this._focusMonitor.stopMonitoring(this._elementRef);
    }
}
NxSidepanelCloseButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSidepanelCloseButtonComponent, deps: [{ token: NxSidepanelComponent }, { token: i2.FocusMonitor }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
NxSidepanelCloseButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxSidepanelCloseButtonComponent, selector: "button[nxSidepanelCloseButton]", host: { listeners: { "click": "_toggle()" } }, ngImport: i0, template: `<nx-icon name="close" size="s" aria-hidden="true"></nx-icon>`, isInline: true, styles: [":host{cursor:pointer;background-color:transparent;border:none;outline:none;padding:0;display:flex;align-items:center}:host nx-icon{color:var(--sidepanel-close-icon-color)}@media screen and (-ms-high-contrast: active){:host nx-icon{color:buttonText}}:host.cdk-keyboard-focused nx-icon{box-shadow:var(--focus-box-shadow);border-radius:4px}@media screen and (-ms-high-contrast: active),(forced-colors: active){:host.cdk-keyboard-focused nx-icon{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}\n"], components: [{ type: i3.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSidepanelCloseButtonComponent, decorators: [{
            type: Component,
            args: [{ selector: 'button[nxSidepanelCloseButton]', template: `<nx-icon name="close" size="s" aria-hidden="true"></nx-icon>`, host: {
                        '(click)': '_toggle()',
                    }, changeDetection: ChangeDetectionStrategy.OnPush, styles: [":host{cursor:pointer;background-color:transparent;border:none;outline:none;padding:0;display:flex;align-items:center}:host nx-icon{color:var(--sidepanel-close-icon-color)}@media screen and (-ms-high-contrast: active){:host nx-icon{color:buttonText}}:host.cdk-keyboard-focused nx-icon{box-shadow:var(--focus-box-shadow);border-radius:4px}@media screen and (-ms-high-contrast: active),(forced-colors: active){:host.cdk-keyboard-focused nx-icon{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}\n"] }]
        }], ctorParameters: function () { return [{ type: NxSidepanelComponent }, { type: i2.FocusMonitor }, { type: i0.ElementRef }]; } });

class NxSidepanelContentComponent {
}
NxSidepanelContentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSidepanelContentComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
NxSidepanelContentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxSidepanelContentComponent, selector: "nx-sidepanel-content", host: { attributes: { "tabindex": "0" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [":host{display:block;overflow-y:scroll;height:100%}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSidepanelContentComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-sidepanel-content', template: '<ng-content></ng-content>', host: {
                        tabindex: '0',
                    }, changeDetection: ChangeDetectionStrategy.OnPush, styles: [":host{display:block;overflow-y:scroll;height:100%}\n"] }]
        }] });

class NxSidepanelModule {
}
NxSidepanelModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSidepanelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NxSidepanelModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSidepanelModule, declarations: [NxSidepanelComponent,
        NxSidepanelHeaderComponent,
        NxSidepanelContentComponent,
        NxSidepanelCloseButtonComponent,
        NxSidepanelOuterContainerComponent], imports: [CommonModule, NxIconModule, NxButtonModule], exports: [NxSidepanelComponent,
        NxSidepanelHeaderComponent,
        NxSidepanelContentComponent,
        NxSidepanelCloseButtonComponent,
        NxSidepanelOuterContainerComponent] });
NxSidepanelModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSidepanelModule, imports: [[CommonModule, NxIconModule, NxButtonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSidepanelModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NxIconModule, NxButtonModule],
                    declarations: [
                        NxSidepanelComponent,
                        NxSidepanelHeaderComponent,
                        NxSidepanelContentComponent,
                        NxSidepanelCloseButtonComponent,
                        NxSidepanelOuterContainerComponent,
                    ],
                    exports: [
                        NxSidepanelComponent,
                        NxSidepanelHeaderComponent,
                        NxSidepanelContentComponent,
                        NxSidepanelCloseButtonComponent,
                        NxSidepanelOuterContainerComponent,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { NxSidepanelCloseButtonComponent, NxSidepanelComponent, NxSidepanelContentComponent, NxSidepanelHeaderComponent, NxSidepanelModule, NxSidepanelOuterContainerComponent };
//# sourceMappingURL=aposin-ng-aquila-sidepanel.mjs.map
