{"version":3,"file":"aposin-ng-aquila-dynamic-table.mjs","sources":["../../../projects/ng-aquila/src/dynamic-table/dynamic-table.models.ts","../../../projects/ng-aquila/src/dynamic-table/dynamic-table.component.ts","../../../projects/ng-aquila/src/dynamic-table/dynamic-table.component.html","../../../projects/ng-aquila/src/dynamic-table/dynamic-table.module.ts","../../../projects/ng-aquila/src/dynamic-table/aposin-ng-aquila-dynamic-table.ts"],"sourcesContent":["import { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/** Dynamic table column definition consisting of key, title and type properties. */\nexport interface NxDynamicTableColumnDefinition {\n    /** Column data property name. */\n    key: string;\n    /** Column display name. */\n    title: string;\n    /** Column display type. Defaults to 'string'. */\n    type?: 'string' | 'numeric';\n    /** Add custom column header cell styles. */\n    headerCellStyle?: { [prop: string]: any };\n    /** Add custom column header cell class. */\n    headerCellClass?: string;\n    /** Add custom column cell styles. */\n    cellStyle?: { [prop: string]: any };\n    /** Add custom column cell class. */\n    cellClass?: string;\n}\n\nexport class NxDynamicTableDataSource extends DataSource<any> {\n    constructor(private _datachange: BehaviorSubject<any[]>) {\n        super();\n    }\n    /** @docs-private Connect function called by the table to retrieve one stream containing the data to render. */\n    connect(): Observable<object[]> {\n        return this._datachange;\n    }\n    /** @docs-private */\n    disconnect() {}\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { NxDynamicTableColumnDefinition, NxDynamicTableDataSource } from './dynamic-table.models';\n\n@Component({\n    selector: 'nx-dynamic-table',\n    templateUrl: './dynamic-table.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styleUrls: ['./dynamic-table.component.scss'],\n})\nexport class NxDynamicTableComponent implements OnInit {\n    private _dataChange: BehaviorSubject<any[]> = new BehaviorSubject<any[]>([]);\n    private _dataSource!: NxDynamicTableDataSource | null;\n    private _data: any[] = [];\n    private _displayedColumns!: NxDynamicTableColumnDefinition[];\n    private _columnKeys: string[] = [];\n\n    /** Sets the data that it will show in the table. */\n    @Input('nxData')\n    set data(value: any[]) {\n        this._data = value.filter(element => element);\n        // If user dont pass displayedColumns the table will show all data and the name of columns will be the key of data\n        if (!this._displayedColumns) {\n            const keys: string[] = [],\n                cArray: any[] = [];\n            // For catch keys of data Objects and assing title, key and type string by default to displayedColumns\n            this._data.forEach(element => {\n                for (const key in element) {\n                    if (!keys.includes(key)) {\n                        keys.push(key);\n                        cArray.push({ title: key, key, type: 'string' });\n                    }\n                }\n            });\n            this._columnKeys = keys;\n            this._displayedColumns = cArray;\n            // need to call markForCheck as the setter changes displayedColumns here\n            // sidenote: isn't needed for the data itself as it gets passed to the cdk-table\n            // by the datasource observable\n            this._cdr.markForCheck();\n        }\n        this._dataChange.next(this._data);\n    }\n    get data(): any[] {\n        return this._data;\n    }\n\n    /** Sets the name order and type of columns. */\n    @Input('nxDisplayedColumns')\n    set displayedColumns(value: NxDynamicTableColumnDefinition[] | undefined) {\n        this._displayedColumns = value as NxDynamicTableColumnDefinition[];\n        this._columnKeys = value ? value.map(column => column.key) : [];\n        this._cdr.markForCheck();\n    }\n    get displayedColumns(): NxDynamicTableColumnDefinition[] | undefined {\n        return this._displayedColumns;\n    }\n\n    /** An event is dispatched when a row is clicked. */\n    @Output() nxRowClick = new EventEmitter();\n\n    /** @docs-private */\n    get dataSource(): NxDynamicTableDataSource {\n        return this._dataSource as NxDynamicTableDataSource;\n    }\n\n    /** @docs-private */\n    get columnKeys(): string[] {\n        return this._columnKeys;\n    }\n\n    constructor(private _cdr: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        if (!this._data) {\n            this._data = [];\n            this._dataChange.next(this._data);\n        }\n        this._dataSource = new NxDynamicTableDataSource(this._dataChange);\n    }\n\n    /** @docs-private */\n    handleRowClick(row: object): void {\n        this.nxRowClick.emit(row);\n    }\n\n    /** @docs-private */\n    isNumeric(column: NxDynamicTableColumnDefinition): boolean {\n        return column.type === 'numeric';\n    }\n}\n","<div class=\"nx-table__container\" *ngIf=\"data && data.length > 0\">\n    <div class=\"nx-table__scroll\">\n        <cdk-table [dataSource]=\"dataSource\" class=\"nx-table\">\n            <!-- Column Definitions -->\n            <ng-container *ngFor=\"let column of displayedColumns\" cdkColumnDef=\"{{ column.key }}\">\n                <cdk-header-cell\n                    *cdkHeaderCellDef\n                    class=\"nx-table__header-cell\"\n                    [ngClass]=\"[column.headerCellClass ?? '', isNumeric(column) ? 'nx-table__header-cell--number' : '']\"\n                    [ngStyle]=\"column.headerCellStyle || null\"\n                    ><div class=\"nx-table__header-title--block\">\n                        <span class=\"nx-table__header-title\">{{ column.title }}</span>\n                    </div>\n                </cdk-header-cell>\n                <cdk-cell\n                    *cdkCellDef=\"let row\"\n                    class=\"nx-table__cell\"\n                    [ngClass]=\"[column.cellClass ?? '', isNumeric(column) ? 'nx-table__cell--number' : '']\"\n                    [ngStyle]=\"column.cellStyle ?? null\"\n                    [innerHTML]=\"row[column.key]\"\n                ></cdk-cell>\n            </ng-container>\n\n            <!-- Header and Row Declarations -->\n            <cdk-header-row *cdkHeaderRowDef=\"columnKeys\" class=\"nx-table__header-row\"></cdk-header-row>\n            <cdk-row *cdkRowDef=\"let row; columns: columnKeys\" class=\"nx-table__row\" (dblclick)=\"handleRowClick(row)\"></cdk-row>\n        </cdk-table>\n    </div>\n</div>\n<div class=\"nx-table__appendix\" *ngIf=\"data.length === 0\">\n    <ng-content></ng-content>\n</div>\n","import { ScrollingModule } from '@angular/cdk/scrolling';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NxDynamicTableComponent } from './dynamic-table.component';\n\n@NgModule({\n    declarations: [NxDynamicTableComponent],\n    exports: [NxDynamicTableComponent],\n    imports: [CommonModule, CdkTableModule, ScrollingModule],\n})\nexport class NxDynamicTableModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}