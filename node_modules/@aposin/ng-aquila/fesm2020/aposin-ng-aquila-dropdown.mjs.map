{"version":3,"file":"aposin-ng-aquila-dropdown.mjs","sources":["../../../projects/ng-aquila/src/dropdown/closed-label.directive.ts","../../../projects/ng-aquila/src/dropdown/dropdown.control.ts","../../../projects/ng-aquila/src/dropdown/dropdown-errors.ts","../../../projects/ng-aquila/src/dropdown/dropdown-position.ts","../../../projects/ng-aquila/src/dropdown/group/dropdown-group.ts","../../../projects/ng-aquila/src/dropdown/group/dropdown-group.html","../../../projects/ng-aquila/src/dropdown/item/dropdown-item.ts","../../../projects/ng-aquila/src/dropdown/item/dropdown-item.html","../../../projects/ng-aquila/src/dropdown/dropdown.ts","../../../projects/ng-aquila/src/dropdown/dropdown.html","../../../projects/ng-aquila/src/dropdown/multi-select/multi-select-option.component.ts","../../../projects/ng-aquila/src/dropdown/multi-select/multi-select-option.component.html","../../../projects/ng-aquila/src/dropdown/multi-select/multi-select.component.ts","../../../projects/ng-aquila/src/dropdown/multi-select/multi-select.component.html","../../../projects/ng-aquila/src/dropdown/dropdown.module.ts","../../../projects/ng-aquila/src/dropdown/aposin-ng-aquila-dropdown.ts"],"sourcesContent":["import { Directive, TemplateRef } from '@angular/core';\n\n// This Directive solely purpose is to mark given ng-template and project it into the required destination.\n@Directive({\n    selector: '[nxClosedLabel]',\n})\nexport class NxDropdownClosedLabelDirective {\n    constructor(public templateRef: TemplateRef<any>) {}\n}\n","import { NxFormfieldControl } from '@aposin/ng-aquila/formfield';\nimport { Observable, Subject } from 'rxjs';\n\nexport abstract class NxDropdownControl extends NxFormfieldControl<any> {\n    /**\n     * Whether the dropdown should allow multi selection and additional checkboxes are shown.\n     *\n     * Note: Please make sure the value you bind is an array. If not an error is thrown! */\n    isMultiSelect = false;\n\n    ignoreItemTrunctation = false;\n\n    readonly filterChanges!: Subject<any>;\n\n    readonly _closedStream!: Observable<void>;\n\n    abstract filterFn(search: string, itemValue: string): boolean;\n\n    abstract valueFormatter(value: any): string;\n\n    /** @docs-private */\n    abstract formatValue?(value: any): string;\n}\n","/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getNxDropdownDynamicMultipleError(): Error {\n    return Error('Cannot change `multiselect` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiselect` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getNxDropdownNonArrayValueError(): Error {\n    return Error('Value must be an array in multiselect mode.');\n}\n","import { ConnectionPositionPair } from '@angular/cdk/overlay';\nimport { AppearanceType } from '@aposin/ng-aquila/formfield';\n\nfunction defaultPositions(offsetY = 0): ConnectionPositionPair[] {\n    return [\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'top',\n            offsetY,\n        },\n        {\n            originX: 'start',\n            originY: 'center',\n            overlayX: 'start',\n            overlayY: 'center',\n        },\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'bottom',\n        },\n    ];\n}\n\nfunction outlinePositions(): ConnectionPositionPair[] {\n    return [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top',\n            offsetY: 8,\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom',\n            offsetY: -8,\n        },\n    ];\n}\n\nexport function getPositions(appearance: AppearanceType, offsetY: number): ConnectionPositionPair[] {\n    if (appearance === 'outline') {\n        return outlinePositions();\n    }\n    return defaultPositions(offsetY);\n}\n\nexport function getPositionOffset(dropdownElement: Element, formFieldElement: Element, panelHeaderElement: Element | null): number {\n    const formFieldRect = formFieldElement.getBoundingClientRect();\n    const dropdownRect = dropdownElement.getBoundingClientRect();\n    const panelHeaderPaddingTop = panelHeaderElement ? parseInt(getComputedStyle(panelHeaderElement).paddingTop, 10) : 0;\n    return formFieldRect.top - dropdownRect.top - panelHeaderPaddingTop;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'nx-dropdown-group',\n    templateUrl: 'dropdown-group.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styleUrls: ['dropdown-group.scss'],\n})\nexport class NxDropdownGroupComponent {\n    /** Label displayed in the group. */\n    @Input('nxLabel') label!: string;\n}\n","<div class=\"nx-dropdown-results__group\">\n    <div class=\"nx-dropdown-results__group-label\">{{label}}</div>\n    <ng-content></ng-content>\n</div>\n","import { Highlightable } from '@angular/cdk/a11y';\nimport { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    AfterViewChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { NxDropdownControl } from '../dropdown.control';\nimport { NxDropdownGroupComponent } from '../group/dropdown-group';\n\nexport class NxDropdownItemChange {\n    constructor(\n        /** Reference to the option that emitted the event. */\n        public item: NxDropdownItemComponent,\n        /** Whether the change in the option's value was a result of a user action. */\n        public isUserInput = false,\n    ) {}\n}\n\n/** the unique id counter */\nlet nextId = 0;\n\n@Component({\n    selector: 'nx-dropdown-item',\n    templateUrl: 'dropdown-item.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styleUrls: ['dropdown-item.scss'],\n    host: {\n        '[id]': 'id',\n        role: 'option',\n        '[attr.tabindex]': '_getTabIndex()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-selected]': '_getAriaSelected()',\n        '[class.nx-hidden]': '_hidden',\n        '[class.nx-dropdown-item--active]': 'active',\n        '[class.nx-dropdown-item--disabled]': 'disabled',\n        '[class.nx-selected]': 'selected',\n        '[class.nx-multiselect]': 'multiselect',\n        '(click)': '_onClick($event)',\n    },\n})\nexport class NxDropdownItemComponent implements Highlightable, OnDestroy, AfterViewChecked {\n    _hidden = false;\n\n    private _mostRecentViewValue = '';\n\n    private _id = `nx-dropdown-item-${nextId++}`;\n\n    /**\n     * The value of the dropdown item.\n     * You can't use undefined, null and '' (empty strings)\n     * as they are sentinel values signalling empty data.\n     */\n    @Input('nxValue') value: any;\n\n    get label(): string {\n        return this._mostRecentViewValue || this.viewValue;\n    }\n\n    /** The unique ID of the option. */\n    get id(): string {\n        return this._id;\n    }\n\n    private _disabled = false;\n\n    /** Whether the dropdown item is disabled. */\n    @Input() set disabled(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n        if (this.disabled !== newValue) {\n            this._disabled = newValue;\n            this._cdr.markForCheck();\n        }\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    private _selected = false;\n\n    /** Whether the item is selected. */\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    private _active!: boolean;\n\n    /** Whether the item is active. */\n    get active(): boolean {\n        return this._active;\n    }\n\n    /**\n     * @docs-private\n     * Whether the parent dropdown is in multiselect mode.\n     */\n    get multiselect(): boolean {\n        return this._dropdown?.isMultiSelect;\n    }\n\n    /**\n     * @docs-private\n     * Whether the parent dropdown allows item truncation.\n     */\n    get truncateItems(): boolean {\n        return !this._dropdown?.ignoreItemTrunctation;\n    }\n\n    /** Emits whenever the component is destroyed. */\n    private readonly _destroyed = new Subject<void>();\n\n    /** Event emitted when the option is selected or deselected. */\n    @Output() readonly onSelectionChange = new EventEmitter<NxDropdownItemChange>();\n\n    /** Emits when the state of the option changes and any parents have to be notified. */\n    readonly _stateChanges = new Subject<void>();\n\n    /**\n     * @docs-private\n     * The wrapping div in the template. Used by dropdown to use the container height for scrolling.\n     */\n    @ViewChild('container', { static: true }) containerElement: any;\n\n    constructor(\n        @Inject(NxDropdownControl) private _dropdown: NxDropdownControl,\n        /** @docs-private */ @Optional() readonly group: NxDropdownGroupComponent | null,\n        private _cdr: ChangeDetectorRef,\n        private _elementRef: ElementRef,\n    ) {\n        this._dropdown.filterChanges.pipe(takeUntil(this._destroyed)).subscribe(value => {\n            this._showOrHideByFilter(value);\n        });\n        // reset the hidden state when dropdown closes that on next open the user is seeing the full list again\n        this._dropdown._closedStream.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this._hidden = false;\n        });\n    }\n\n    ngAfterViewChecked() {\n        // Since the parent dropdown component could be using the item's label to display the selected values\n        // and it doesn't have a way of knowing if the item's label has changed\n        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n        // relatively cheap, however we still limit them only to selected options in order to avoid\n        // hitting the DOM too often.\n        this._updateViewValue();\n    }\n\n    private _updateViewValue() {\n        if (this._selected) {\n            const viewValue = this.viewValue;\n\n            if (viewValue !== this._mostRecentViewValue) {\n                this._mostRecentViewValue = viewValue;\n                this._stateChanges.next();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._stateChanges.complete();\n    }\n\n    _onClick(event: Event) {\n        /* preventDefault to stop triggering the event twice when you click on the checkbox or the label inside the item */\n        event.preventDefault();\n        event.stopPropagation();\n        this._selectViaInteraction();\n    }\n\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    _selectViaInteraction(): void {\n        if (!this.disabled) {\n            this._selected = this.multiselect ? !this._selected : true;\n            this._updateViewValue();\n            this._cdr.markForCheck();\n            this._emitSelectionChangeEvent(true);\n        }\n    }\n\n    /**\n     * @docs-private\n     * Gets the `aria-selected` value for the option. The attribute is omitted from the single-select dropdown\n     * for the unselected options. Including the `aria-selected=\"false\" attributes adds a lot of of noise to\n     * screen-reader users without providing useful information.\n     */\n    _getAriaSelected(): boolean | null {\n        return this.multiselect ? this.selected : null;\n    }\n\n    /** @docs-private */\n    show() {\n        this._hidden = false;\n        this._cdr.markForCheck();\n    }\n\n    /** @docs-private */\n    hide() {\n        this._hidden = true;\n        this._cdr.markForCheck();\n    }\n\n    private _showOrHideByFilter(search: string) {\n        const constraint = this._dropdown.filterFn(search, this.viewValue);\n        this._hidden = !constraint;\n        this._cdr.markForCheck();\n    }\n\n    get _formattedValue() {\n        return this._dropdown.valueFormatter(this.value);\n    }\n\n    /** @docs-private */\n    get viewValue() {\n        return (this._elementRef.nativeElement.textContent || '').trim();\n    }\n\n    /** @docs-private */\n    get elementRef() {\n        return this._elementRef;\n    }\n\n    select() {\n        if (!this._selected && !this.disabled) {\n            this._selected = true;\n            this._cdr.markForCheck();\n            this._emitSelectionChangeEvent();\n        }\n    }\n\n    /** @docs-private */\n    deselect() {\n        if (this._selected) {\n            this._selected = false;\n            this._cdr.markForCheck();\n            this._emitSelectionChangeEvent();\n        }\n    }\n\n    _initSelected(selected: boolean) {\n        this._selected = selected;\n        this._cdr.markForCheck();\n    }\n\n    /** @docs-private */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    private _emitSelectionChangeEvent(isUserInput = false) {\n        this.onSelectionChange.emit(new NxDropdownItemChange(this, isUserInput));\n    }\n\n    /** @docs-private */\n    setActiveStyles(): void {\n        this._active = true;\n        this._cdr.markForCheck();\n    }\n\n    /** @docs-private */\n    setInactiveStyles(): void {\n        this._active = false;\n        this._cdr.markForCheck();\n    }\n\n    /**\n     * Returns the list item's text label. Implemented as a part of the ListKeyManagerOption.\n     * @docs-private */\n    getLabel(): string {\n        return this.viewValue;\n    }\n\n    _isContentEmpty(element: Element) {\n        return element.children.length === 0 && !element.textContent?.trim();\n    }\n\n    _onLabelChange() {\n        // trigger change detection when the label content changes for the case that ng-content was empty before.\n        // this is also important when the label comes in deferred, e.g. by a delayed observable,\n        // then first the default label derived from the value is shown\n        // and after the value from the async observable is ready we need to trigger change detection that the derived label\n        // gets hidden again.\n        // Notice(!): the event of (cdkObserveContent) is run outside of the ngZone\n        // We run detectChanges directly here as markForCheck wasn't enough to always trigger change detection correctly\n        this._cdr.detectChanges();\n    }\n\n    /** Returns the correct tabindex for the option depending on disabled state. */\n    _getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n}\n","<div #container class=\"nx-dropdown-results__option\" [ngClass]=\"{'nx-dropdown-results__option--selected': selected}\">\n    <nx-checkbox *ngIf=\"multiselect\" [checked]=\"selected\" [disabled]=\"disabled\">\n        <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n    </nx-checkbox>\n\n    <span *ngIf=\"!multiselect\" class=\"nx-dropdown-results__option-checkicon\">\n        <nx-icon name=\"check\" aria-hidden=\"true\"></nx-icon>\n    </span>\n\n    <ng-container *ngIf=\"!multiselect\">\n        <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n    </ng-container>\n</div>\n\n<ng-template #contentTemplate>\n    <div class=\"nx-dropdown-results__option-label\">\n        <div\n            #content\n            (cdkObserveContent)=\"_onLabelChange()\"\n            [nxTooltip]=\"truncateItems && viewValue?.length > 35 ? viewValue : null\"\n            [ngClass]=\"{ 'ellipsis': truncateItems }\"\n        >\n            <ng-content></ng-content>\n        </div>\n\n        <div [nxTooltip]=\"truncateItems && value?.length > 35 ? value : null\" [ngClass]=\"{ 'ellipsis': truncateItems }\">\n            <ng-container *ngIf=\"_isContentEmpty(content)\"> {{_formattedValue }} </ng-container>\n        </div>\n    </div>\n</ng-template>\n","import { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Direction, Directionality } from '@angular/cdk/bidi';\nimport { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SHIFT, SPACE, TAB, UP_ARROW } from '@angular/cdk/keycodes';\nimport { CdkConnectedOverlay, ConnectionPositionPair, FlexibleConnectedPositionStrategy, Overlay, ScrollStrategy } from '@angular/cdk/overlay';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    isDevMode,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Self,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { NxFormfieldComponent, NxFormfieldControl } from '@aposin/ng-aquila/formfield';\nimport { ErrorStateMatcher } from '@aposin/ng-aquila/utils';\nimport { BehaviorSubject, merge, Observable, Subject } from 'rxjs';\nimport { filter, map, startWith, take, takeUntil } from 'rxjs/operators';\n\nimport { NxDropdownClosedLabelDirective } from './closed-label.directive';\nimport { NxDropdownControl } from './dropdown.control';\nimport { getNxDropdownNonArrayValueError } from './dropdown-errors';\nimport { getPositionOffset, getPositions } from './dropdown-position';\nimport { NxDropdownGroupComponent } from './group/dropdown-group';\nimport { NxDropdownItemComponent } from './item/dropdown-item';\n\nlet nextUniqueId = 0;\n\n/**\n * An option of the dropdown.\n * Contains a value and an optional label.\n * If no label is specified, the value will be displayed instead.\n */\nexport interface NxDropdownOption {\n    value: any;\n    label?: string;\n}\n\n/** Dropdown data that requires internationalization. */\nexport class NxDropdownIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    readonly changes = new Subject<void>();\n    /** A label for the multi-select component. */\n    selectAll = 'Select all';\n    /** A label for the multi-select component. */\n    clearAll = 'Clear all';\n}\n\n/** Change event object that is emitted when the select value has changed. */\nexport class NxDropdownSelectChange<T = any> {\n    constructor(\n        /** Reference to the select that emitted the change event. */\n        public source: NxDropdownComponent,\n        /** Current value of the select that emitted the event. */\n        public value: T,\n    ) {}\n}\n\n/** Injection token that determines the scroll handling while a dropdown is open. */\nexport const NX_DROPDOWN_SCROLL_STRATEGY = new InjectionToken<() => ScrollStrategy>('nx-dropdown-scroll-strategy');\n\n/** @docs-private */\nexport function NX_DROPDOWN_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => ScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const NX_DROPDOWN_SCROLL_STRATEGY_PROVIDER = {\n    provide: NX_DROPDOWN_SCROLL_STRATEGY,\n    useFactory: NX_DROPDOWN_SCROLL_STRATEGY_PROVIDER_FACTORY,\n    deps: [Overlay],\n};\n\nexport type FilterInputType = 'text' | 'number' | 'tel' | 'search' | 'date' | 'datetime' | 'month' | 'email';\n\nexport type NxDropdownFilterFn = (query: string, label: string) => boolean;\n\nconst _defaultFilterFn: NxDropdownFilterFn = (query, label) => label.toLocaleLowerCase().includes(query.toLocaleLowerCase()); // TODO why not `toLowerCase()` as in multi-select?\n\nexport type NxDropdownCompareWithFn = (o1: any, o2: any) => boolean;\n\nconst _defaultCompareWithFn: NxDropdownCompareWithFn = (o1, o2) => o1 === o2;\n\nexport type NxDropdownValueFormatterFn = (value: any) => any; // TODO why not return a string?\n\nconst _defaultValueFormatterFn: NxDropdownValueFormatterFn = value => (value == null ? '' : value.toString());\n\n@Component({\n    selector: 'nx-dropdown',\n    templateUrl: 'dropdown.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styleUrls: ['dropdown.scss'],\n    providers: [\n        { provide: NxDropdownControl, useExisting: NxDropdownComponent },\n        { provide: NxFormfieldControl, useExisting: NxDropdownComponent },\n    ],\n    host: {\n        role: 'button',\n        '[class.nx-dropdown]': 'true',\n        '[class.is-filled]': 'hasValue',\n        '[class.has-focus]': 'focused',\n        '[class.nx-dropdown--negative]': '_negative',\n        '[class.nx-dropdown--disabled]': 'disabled',\n        '[attr.aria-describedby]': 'ariaDescribedby || null',\n        '[attr.aria-required]': 'required',\n        '[attr.aria-disabled]': 'disabled',\n        '[attr.aria-labelledby]': '_getAriaLabelledBy()',\n        'aria-haspopup': 'listbox',\n        '[attr.aria-expanded]': 'panelOpen',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': 'tabIndex',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': '_onFocus()',\n        '(blur)': '_onBlur()',\n        '(click)': 'openPanel($event)',\n    },\n})\nexport class NxDropdownComponent implements NxDropdownControl, ControlValueAccessor, OnInit, AfterViewInit, AfterContentInit, OnDestroy, DoCheck {\n    // The dropdown currently doesn't support readonly of the NxFormfieldControl so we hardcode it here\n    readonly readonly: boolean = false;\n\n    private _selectionModel!: SelectionModel<NxDropdownOption>;\n\n    protected _disabled = false;\n\n    /** The ID of rendered dropdown html element. */\n    readonly renderedValueId: string = `nx-dropdown-rendered-${nextUniqueId++}`;\n\n    private _placeholder = '';\n\n    private _focused = false;\n\n    /** Whether or not the overlay panel is open. */\n    private _panelOpen = false;\n\n    /** @docs-private */\n    errorState = false;\n\n    /**\n     * Disable truncation of long item texts.\n     * We recommend following UX guidelines and always truncating long items.\n     * Please only disable truncation if it's impossible to use short descriptions.\n     */\n    private _ignoreItemTrunctation = false;\n\n    /**\n     * Name of this control that is used inside the formfield component\n     * @docs-private\n     */\n    controlType = 'nx-dropdown';\n\n    /** Holds the value from nxValue. */\n    private _value: any;\n\n    /** The minimal space between the viewport and the overlay */\n    _overlayViewportMargin: number = this.dir === 'rtl' ? 0 : 16;\n\n    /** The last measured value for the trigger's client bounding rect. */\n    _triggerRect!: ClientRect;\n\n    /** Holds the panelWidth after panel was attached. */\n    _panelWidth: number | undefined;\n\n    _positions: ConnectionPositionPair[] = getPositions('auto', 0);\n\n    /**\n     * @docs-private\n     * Emits when internal state changes to inform formfield about it.\n     */\n    readonly stateChanges = new Subject<any>();\n\n    /** @docs-private */\n    ariaDescribedby: string | undefined;\n\n    private _tabIndex = 0;\n\n    /** @docs-private */\n    currentFilter = '';\n\n    // @ts-expect-error TODO: refactor to be TS compatible\n    private _options: BehaviorSubject<NxDropdownOption[]> = new BehaviorSubject(null);\n\n    /**\n     * Array of options for the dropdown.\n     */\n    @Input()\n    set options(value: NxDropdownOption[]) {\n        this._options.next(value);\n    }\n    get options(): NxDropdownOption[] {\n        return this._options.value;\n    }\n\n    private _filterInputType: FilterInputType = 'text';\n    /**\n     * Type of filter input (default: text)\n     */\n    @Input()\n    set filterInputType(value: FilterInputType) {\n        this._filterInputType = value;\n    }\n    get filterInputType(): FilterInputType {\n        return this._filterInputType;\n    }\n\n    @Input()\n    get tabIndex(): number {\n        return this.disabled ? -1 : this._tabIndex;\n    }\n    set tabIndex(value: number) {\n        // If the specified tabIndex value is null or undefined, fall back to the default value.\n        this._tabIndex = value != null ? value : 0;\n    }\n\n    /** Selected value */\n    @Input('nxValue')\n    get value(): any {\n        return this._value;\n    }\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n            this._onChange(newValue);\n        }\n    }\n\n    /** Whether the dropdown is disabled. */\n    @Input('nxDisabled')\n    get disabled(): boolean {\n        return this._disabled;\n    }\n    set disabled(value: BooleanInput) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    /**\n     * Whether the dropdown should allow multi selection and additional checkboxes are shown.\n     * Note: Please make sure the value you bind is an array.\n     *\n     * @throws Error if true and the bound value is not an array\n     * @deprecated Please use the new `<nx-multi-select>` component instead.\n     */\n    @Input('nxIsMultiselect') isMultiSelect = false;\n\n    /** The id of the input. */\n    get id() {\n        return this.renderedValueId;\n    }\n\n    /** Whether the component is required. This adds an aria-required label to the component. */\n    @Input('nxRequired') required!: boolean;\n\n    private _style = '';\n    /** Whether the dropdown should render in its negative style or not. */\n    _negative = false;\n\n    /** If set to 'negative', the component is displayed with the negative set of styles. */\n    @Input('nxStyle')\n    set styles(value: string) {\n        if (this._style === value) {\n            return;\n        }\n\n        this._style = value;\n        this._negative = !!this._style.match(/negative/);\n    }\n\n    /** Placeholder to be shown if no value has been selected. */\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n    set placeholder(value: string) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n\n    /**\n     * Disable truncation of long item texts.\n     * We recommend following UX guidelines and always truncating long items.\n     * Please only disable truncation if it's impossible to use short descriptions.\n     */\n    @Input('nxIgnoreItemTrunctation')\n    get ignoreItemTrunctation(): boolean {\n        return this._ignoreItemTrunctation;\n    }\n    set ignoreItemTrunctation(value: BooleanInput) {\n        this._ignoreItemTrunctation = coerceBooleanProperty(value);\n    }\n\n    /** Whether the dropdown should be shown with an additional filter input. */\n    @Input('nxShowFilter') showFilter = false;\n\n    /** Text displayed as placeholder for the filter. */\n    @Input('nxFilterPlaceholder') filterPlaceholder = '';\n\n    /** Text that is displayed at the top of the overlay. If not set the formfield label is used by default. */\n    @Input('nxOverlayLabel') overlayLabel = '';\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the dropdown items get filtered. Returns the currently visible dropdown items. */\n    @Output('filterResult') readonly filterResultChange: EventEmitter<NxDropdownItemComponent[]> = new EventEmitter<NxDropdownItemComponent[]>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly _openedStream: Observable<void> = this.openedChange.pipe(\n        filter(o => o),\n        map(() => {}),\n    );\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly _closedStream: Observable<void> = this.openedChange.pipe(\n        filter(o => !o),\n        map(() => {}),\n    );\n\n    /** Event emitted when the user types in the filter input. */\n    @Output('filterInput') readonly filterChanges: Subject<any> = new Subject<any>();\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output('nxValueChange') readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Event emitted when the selected value has been changed. */\n    @Output() readonly selectionChange: EventEmitter<NxDropdownSelectChange> = new EventEmitter<NxDropdownSelectChange>();\n\n    /**\n     * @docs-private\n     * Panel containing the select options.\n     */\n    @ViewChild('panel') panel?: ElementRef;\n\n    /** @docs-private */\n    @ViewChild('panelBody') panelBody?: ElementRef;\n\n    /** @docs-private */\n    @ViewChild('trigger', { static: true }) trigger!: ElementRef;\n\n    /** @docs-private */\n    @ViewChild('filterInput') filterInput?: ElementRef;\n\n    /**\n     * @docs-private\n     * Overlay pane containing the options.\n     */\n    @ViewChild(CdkConnectedOverlay, { static: true }) overlayDir!: CdkConnectedOverlay;\n\n    @ContentChildren(NxDropdownItemComponent, { descendants: true }) _contentDropdownItems!: QueryList<NxDropdownItemComponent>;\n\n    /** @docs-private */\n    @ContentChildren(NxDropdownGroupComponent) groups: any;\n\n    @ContentChild(NxDropdownClosedLabelDirective)\n    _customClosedDropdownLabel!: NxDropdownClosedLabelDirective;\n\n    @ViewChild('defaultClosedDropdownLabel', { static: true })\n    private _defaultClosedDropdownLabel!: TemplateRef<any>;\n\n    @ViewChildren(NxDropdownItemComponent) _lazyDropdownItems!: QueryList<NxDropdownItemComponent>;\n\n    get dropdownItems(): QueryList<NxDropdownItemComponent> {\n        return this._isLazy ? this._lazyDropdownItems : this._contentDropdownItems;\n    }\n\n    /** @docs-private */\n    get closedDropdownLabel(): TemplateRef<any> {\n        return this._closedDropdownLabel;\n    }\n    private _closedDropdownLabel!: TemplateRef<any>;\n\n    private readonly _destroyed = new Subject<void>();\n\n    private _keyManager!: ActiveDescendantKeyManager<NxDropdownItemComponent>;\n\n    /** @docs-private */\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n    set panelOpen(value: boolean) {\n        this._panelOpen = value;\n    }\n\n    /** Strategy factory that will be used to handle scrolling while the dropdown panel is open. */\n    private _scrollStrategyFactory = this._defaultScrollStrategyFactory;\n\n    #valueFormatter?: NxDropdownValueFormatterFn | null;\n    #compareWith?: NxDropdownCompareWithFn | null;\n    #filterFn?: NxDropdownFilterFn | null;\n\n    /** Strategy that will be used to handle scrolling while the dropdown panel is open. */\n    _scrollStrategy = this._scrollStrategyFactory();\n\n    /** @docs-private */\n    get label(): string {\n        if (this._isInOutlineField) {\n            return '';\n        }\n\n        return this.overlayLabel ? this.overlayLabel : this.formFieldComponent?.label ?? '';\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n    /**\n     * Function that transforms the value into a string.\n     * This function is used for displaying and filtering the content.\n     *\n     * Defaults to `(value: any) => value == null ? '' : value.toString()`\n     */\n    @Input('nxValueFormatter') set valueFormatter(value: NxDropdownValueFormatterFn | null | undefined) {\n        this.#valueFormatter = value;\n    }\n    get valueFormatter(): NxDropdownValueFormatterFn {\n        return this.#valueFormatter ?? _defaultValueFormatterFn;\n    }\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     *\n     * Defaults to object equality.\n     */\n\n    @Input() set compareWith(value: NxDropdownCompareWithFn | null | undefined) {\n        this.#compareWith = value;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n\n    get compareWith(): NxDropdownCompareWithFn {\n        return this.#compareWith ?? _defaultCompareWithFn;\n    }\n\n    /**\n     * Function to be used when the user types into the search filter. The first argument is the user input,\n     * the second argument is the dropdown item value as displayed. The dropdown items will use this function\n     * to set their visibility state. A boolean should be returned.\n     *\n     * Defaults to lower case inclusion.\n     */\n\n    @Input() set filterFn(value: NxDropdownFilterFn | null | undefined) {\n        this.#filterFn = value;\n    }\n    get filterFn(): NxDropdownFilterFn {\n        return this.#filterFn ?? _defaultFilterFn;\n    }\n\n    /**\n     * @docs-private\n     * Whether the select is focused.\n     */\n    get focused(): boolean {\n        return this._focused || this.panelOpen;\n    }\n\n    /** `View -> model callback called when value changes` */\n    _onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    _onTouched = () => {};\n\n    /** @docs-private */\n    get elementRef(): ElementRef {\n        return this._elementRef;\n    }\n\n    /** The text direction of the containing app. */\n    get dir(): Direction {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    constructor(\n        private _cdr: ChangeDetectorRef,\n        private _elementRef: ElementRef,\n        private _ngZone: NgZone,\n        @Attribute('tabindex') tabIndex: string,\n        @Optional() private formFieldComponent: NxFormfieldComponent | null,\n        private _errorStateMatcher: ErrorStateMatcher,\n        /** @docs-private */ @Optional() @Self() public ngControl: NgControl | null,\n        @Optional() private _parentForm: NgForm | null,\n        @Optional() private _parentFormGroup: FormGroupDirective | null,\n        @Optional() private _dir: Directionality | null,\n        @Inject(NX_DROPDOWN_SCROLL_STRATEGY) private _defaultScrollStrategyFactory: () => ScrollStrategy,\n        private liveAnnouncer: LiveAnnouncer,\n    ) {\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex, 10) || 0;\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            this.updateErrorState();\n        }\n    }\n\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.isMultiSelect);\n    }\n\n    ngAfterViewInit() {\n        this._initKeyManager();\n    }\n\n    ngAfterContentInit() {\n        this._closedDropdownLabel = this._customClosedDropdownLabel?.templateRef || this._defaultClosedDropdownLabel;\n\n        this._selectionModel.changed.pipe(takeUntil(this._destroyed)).subscribe(event => {\n            event.added.forEach(({ value }) => {\n                this.dropdownItems.filter(option => option.value === value).forEach(option => option.select());\n            });\n\n            event.removed.forEach(({ value }) => {\n                this.dropdownItems.filter(option => option.value === value).forEach(option => option.deselect());\n            });\n        });\n\n        if (this._isLazy) {\n            this._options.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                this._initializeSelection();\n            });\n        } else {\n            this.dropdownItems.changes.pipe(startWith<any, any>(null), takeUntil(this._destroyed)).subscribe(() => {\n                this._subscribeToOptionChanges();\n                this._initializeSelection();\n            });\n        }\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n\n    /** @docs-private */\n    updateErrorState() {\n        const oldState = this.errorState;\n        const parent = this._parentFormGroup || this._parentForm;\n        const control = this.ngControl ? (this.ngControl.control as FormControl) : null;\n        const newState = this._errorStateMatcher.isErrorState(control, parent);\n\n        if (newState !== oldState) {\n            this.errorState = newState;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    private _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager<NxDropdownItemComponent>(this.dropdownItems)\n            .withTypeAhead()\n            .withHomeAndEnd()\n            .withVerticalOrientation()\n            .withHorizontalOrientation('ltr')\n            .skipPredicate(item => item._hidden || item.disabled);\n\n        this._keyManager.tabOut.pipe(takeUntil(this._closedStream), takeUntil(this._destroyed)).subscribe(() => {\n            // Restore focus to the trigger before closing. Ensures that the focus\n            // position won't be lost if the user got focus into the overlay.\n            this.closePanel();\n        });\n\n        this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollActiveOptionIntoView();\n            } else if (!this._panelOpen && !this.isMultiSelect && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n\n    private _initActiveItem() {\n        if (!this.isMultiSelect && this._selectionModel.selected[0]) {\n            const option = this.dropdownItems.find(o => o.value === this._selectionModel.selected[0].value);\n\n            if (option) {\n                this._keyManager.setActiveItem(option);\n                this._scrollActiveOptionIntoCenter();\n            }\n        } else {\n            this._keyManager.setFirstItemActive();\n        }\n    }\n\n    private _subscribeToOptionChanges(): void {\n        merge(...this.dropdownItems.map(option => option.onSelectionChange))\n            .pipe(takeUntil(this.dropdownItems.changes), takeUntil(this._destroyed))\n            .subscribe(event => {\n                this._onSelect(event.item, event.isUserInput);\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.dropdownItems.map(option => option._stateChanges))\n            .pipe(takeUntil(this.dropdownItems.changes), takeUntil(this._destroyed))\n            .subscribe(() => {\n                // defer it for the next cycle to not run in changed after checked errors\n                // the combination of dropdown-item notifying parent and when the parent\n                // tries to fetch the triggerValue from the child throws these errors\n                setTimeout(() => {\n                    this._cdr.markForCheck();\n                    this.stateChanges.next();\n                });\n            });\n    }\n\n    /** Invoked when an option is clicked. */\n    _onSelect(option: NxDropdownItemComponent, isUserInput: boolean, item?: NxDropdownOption): void {\n        const wasSelected = this._selectionModel.isSelected(option);\n        const selectedOption = item || option;\n\n        if (option.value === null && !this.isMultiSelect) {\n            option.deselect();\n            this._selectionModel.clear();\n            this._propagateChanges(selectedOption.value);\n        } else {\n            if (option.selected) {\n                this._selectionModel.select(selectedOption);\n            } else {\n                this._selectionModel.deselect(selectedOption);\n            }\n\n            if (isUserInput) {\n                this._keyManager?.setActiveItem(option);\n            }\n\n            if (this.isMultiSelect) {\n                this._sortValues();\n            }\n        }\n\n        const isSelected = this._selectionModel.isSelected(selectedOption);\n\n        if (wasSelected !== isSelected) {\n            this._propagateChanges();\n        }\n\n        this.stateChanges.next();\n\n        if (isUserInput && !this.isMultiSelect && this._panelOpen) {\n            this.closePanel();\n        }\n    }\n\n    private _initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private _setSelectionByValue(value: any | any[]): void {\n        if (!this._selectionModel) {\n            return;\n        }\n\n        this._selectionModel.clear();\n\n        if (this.isMultiSelect && value) {\n            if (!Array.isArray(value)) {\n                throw getNxDropdownNonArrayValueError();\n            }\n\n            value.forEach(v => this._selectValue(v));\n            this._sortValues();\n        } else {\n            this._selectValue(value);\n        }\n\n        this._cdr.markForCheck();\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     */\n    private _selectValue(value: any) {\n        const filterFn = (o: NxDropdownOption) => {\n            try {\n                // Treat null as a special reset value.\n                return o.value !== null && this.compareWith(o.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        };\n\n        const options = this._isLazy ? this.options : this.dropdownItems.toArray();\n        const option = options.find(filterFn) as NxDropdownOption;\n\n        if (option) {\n            this._selectionModel.select(option);\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private _propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (this.isMultiSelect) {\n            valueToEmit = this._selectionModel.selected.map(option => option.value);\n        } else {\n            const selectedOption = this._selectionModel.selected[0];\n            valueToEmit = selectedOption ? selectedOption.value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new NxDropdownSelectChange(this, valueToEmit));\n        this._cdr.markForCheck();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private _sortValues() {\n        if (this.isMultiSelect) {\n            const options = this._isLazy ? this.options : this.dropdownItems.toArray();\n            this._selectionModel.sort((a, b) => options.findIndex(o => o.value === a.value) - options.findIndex(o => o.value === b.value));\n            this.stateChanges.next();\n        }\n    }\n\n    /** Adds a offset to the overlay position, so the formfield label and the dropdown panel header are vertically aligned. */\n    private _updatePosition(): void {\n        if (this.formFieldComponent) {\n            const panelHeader = this.overlayDir.overlayRef.overlayElement.querySelector('.nx-dropdown__panel-header');\n            const offset = getPositionOffset(this._elementRef.nativeElement, this.formFieldComponent.elementRef.nativeElement, panelHeader);\n            this._positions = getPositions(this.formFieldComponent.appearance, offset);\n        }\n    }\n\n    /** Focuses the select element. */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /** Opens the panel of the dropdown. */\n    openPanel($event: Event) {\n        if (this.disabled || !(this.dropdownItems?.length || this.options?.length) || this._panelOpen) {\n            return;\n        }\n\n        $event.preventDefault();\n        this._panelOpen = true;\n\n        setTimeout(() => {\n            this._selectionModel.selected.forEach(selectedOption => {\n                const option = this.dropdownItems.find(o => o.value === selectedOption.value);\n                if (option) {\n                    option._initSelected(true);\n                }\n            });\n            this._initActiveItem();\n        });\n\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        this._cdr.markForCheck();\n    }\n\n    /** Closes the panel of the dropdown. */\n    closePanel() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._cdr.markForCheck();\n            this._onTouched();\n            this.openedChange.emit(false);\n            // defer the focus if the dropdown triggers actions that detach\n            // a template/view from the DOM to prevent changed after checked errors\n            this._ngZone.runOutsideAngular(() => {\n                setTimeout(() => this.focus());\n            });\n        }\n    }\n\n    private _scrollActiveOptionIntoCenter() {\n        if (!this.panelBody) {\n            return;\n        }\n        // reset the scrolltop to make calculation easier\n        this.panelBody.nativeElement.scrollTop = 0;\n\n        if (!this.empty) {\n            const offset = this._getItemOffset(this._keyManager.activeItem);\n            const panelHeight = this.panelBody.nativeElement.offsetHeight;\n            const panelRect = this.panelBody.nativeElement.getBoundingClientRect();\n            const middleOfPanel = panelRect.top + panelHeight / 2;\n\n            if (offset > middleOfPanel) {\n                // because we reset the scrollTop to 0 at the top we can simply take the middleOfPanel which is our\n                // target position for the item and subtract it from the offset (which is now always relative to the viewport)\n                this.panelBody.nativeElement.scrollTop = offset - middleOfPanel;\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private _scrollActiveOptionIntoView(): void {\n        if (!this.panelBody || !this.panelOpen || !this._keyManager.activeItem) {\n            return;\n        }\n\n        const activeItem = this._keyManager.activeItem.containerElement.nativeElement;\n        this.liveAnnouncer.announce(activeItem.textContent); // force screen reader to speak active option\n        const panel = this.panelBody.nativeElement;\n        const panelOffset = panel.offsetTop; // how much the overlay is repositioned on the page\n        const panelTopScrollPosition = panel.scrollTop;\n        const panelHeight = panel.clientHeight;\n        const itemTop = activeItem.offsetTop - panelOffset;\n        const itemBottom = activeItem.offsetTop - panelOffset + activeItem.getBoundingClientRect().height;\n\n        // item half or less visible on top\n        if (itemTop < panelTopScrollPosition) {\n            this.panelBody.nativeElement.scrollTop = itemTop;\n            // item half or less visible on bottom\n        } else if (itemBottom > panelTopScrollPosition + panelHeight) {\n            this.panelBody.nativeElement.scrollTop = itemBottom - panelHeight;\n        }\n    }\n\n    private _getItemOffset(item: NxDropdownItemComponent | null): number {\n        if (!item) {\n            return 0;\n        }\n\n        const itemRect = item.containerElement.nativeElement.getBoundingClientRect();\n        return itemRect.top + itemRect.height / 2; // get position of the item's center\n    }\n\n    /**\n     * @docs-private\n     * Formfield Implementation\n     */\n    setDescribedByIds(ids: string[]): void {\n        this.ariaDescribedby = ids.join(' ');\n    }\n\n    /**\n     * @docs-private\n     * aria-label support removed in favor of aria-labelledby\n     * The NxFormfieldControl abstract class requires implementation\n     * of below method.\n     */\n    setAriaLabel(value: string) {\n        return value;\n    }\n\n    /**\n     * @docs-private\n     * Returns html ids of dropdown rendered value and label (if available),\n     * separated by space.\n     */\n    _getAriaLabelledBy(): string {\n        const valueId = this.renderedValueId;\n        const labelId = this.formFieldComponent?.labelId;\n        if (labelId) {\n            return `${valueId} ${labelId}`;\n        }\n        return valueId;\n    }\n\n    get _isInOutlineField(): boolean {\n        return this.formFieldComponent !== null && this.formFieldComponent.appearance === 'outline';\n    }\n\n    /**\n     * @docs-private\n     * Whether the select has a value.\n     */\n    get empty(): boolean {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n\n    /** @docs-private */\n    get hasValue() {\n        return this._selectionModel.hasValue();\n    }\n\n    /** @docs-private */\n    get shouldLabelFloat(): boolean {\n        return this.focused || !this.empty || !!(this.placeholder && this.placeholder.length > 0);\n    }\n    /** End Formfield */\n\n    /** ControlValueAccessor */\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * setTimeout allows to write value after ngOnInit (happens before it right now),\n     * so that we have the input `options` set, and it's shown properly in the dropdown\n     * https://github.com/angular/angular/issues/29218#issuecomment-592015773\n     * It can be removed after the Angular issue is resolved\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value: any): void {\n        Promise.resolve().then(() => {\n            this._setSelectionByValue(value);\n        });\n    }\n\n    registerOnChange(fn: any): void {\n        this._onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this._onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this._cdr.markForCheck();\n        this.stateChanges.next();\n    }\n    /** End ControlValueAccessor */\n\n    _handleKeydown(event: KeyboardEvent) {\n        this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n\n    private get _isLazy(): boolean {\n        return Array.isArray(this.options);\n    }\n\n    private setNextItemActive() {\n        const options = this._isLazy ? this.options : this.dropdownItems.toArray();\n        const next = Math.min(options.length - 1, options.indexOf(this._selectionModel.selected[0] as NxDropdownItemComponent) + 1);\n        this._selectionModel.select(options[next]);\n        this._propagateChanges();\n    }\n\n    private setPreviousItemActive() {\n        const options = this._isLazy ? this.options : this.dropdownItems.toArray();\n        const prev = Math.max(0, options.indexOf(this._selectionModel.selected[0] as NxDropdownItemComponent) - 1);\n        this._selectionModel.select(options[prev]);\n        this._propagateChanges();\n    }\n\n    private _handleClosedKeydown(event: KeyboardEvent) {\n        if (this.disabled) {\n            return;\n        }\n\n        // TODO use event.code after removing IE11 support\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW || keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.isMultiSelect || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.openPanel(event);\n        } else if (!this.isMultiSelect) {\n            switch (keyCode) {\n                case DOWN_ARROW:\n                    this.setNextItemActive();\n                    event.preventDefault();\n                    break;\n                case UP_ARROW:\n                    this.setPreviousItemActive();\n                    event.preventDefault();\n                    break;\n                default:\n                    this._keyManager.onKeydown(event);\n            }\n        }\n    }\n\n    private _handleOpenKeydown(event: KeyboardEvent) {\n        // TODO use event.code after removing IE11 support\n        const keyCode = event.keyCode;\n        // if has filter all events other than the listed ones should be ignored or handled in _onFilter()\n        if (![DOWN_ARROW, UP_ARROW, HOME, END, ENTER, LEFT_ARROW, RIGHT_ARROW, SHIFT, SPACE, TAB].includes(keyCode) && this.showFilter) {\n            return;\n        }\n\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const manager = this._keyManager;\n\n        const allHidden = this.dropdownItems.map(option => option._hidden).every(option => Boolean(option));\n\n        if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n            keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        } else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.closePanel();\n        } else if (keyCode === ENTER && manager.activeItem && !allHidden) {\n            event.preventDefault();\n\n            manager.activeItem._selectViaInteraction();\n        } else if (keyCode === ENTER && allHidden) {\n            event.preventDefault();\n\n            this.closePanel();\n        } else if (!this.showFilter && keyCode === SPACE && manager.activeItem) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        } else if (keyCode === TAB) {\n            this.closePanel();\n        } else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n\n            if (this.isMultiSelect && isArrowKey && event.shiftKey && manager.activeItem && manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n\n    /** @docs-private */\n    formatValue(value: any): string {\n        return this.valueFormatter(value);\n    }\n\n    /** Called when the user types in the filter input */\n    _onFilter(event: Event) {\n        event.preventDefault();\n        this.currentFilter = (event.target as HTMLInputElement).value;\n        this.filterChanges.next((event.target as HTMLInputElement).value);\n        const allHidden = this.dropdownItems.toArray().every(option => option._hidden);\n        if (allHidden) {\n            // @ts-expect-error: not possible according to TS, but has been working already\n            this._keyManager.setActiveItem(null);\n        } else {\n            this._keyManager.setFirstItemActive();\n        }\n\n        const visibleItems = this.dropdownItems.filter(option => !option._hidden);\n        this.filterResultChange.next(visibleItems);\n    }\n\n    /**\n     * @docs-private\n     * The value displayed in the trigger.\n     */\n    get triggerValue(): string {\n        if (this.empty) {\n            return '';\n        }\n\n        if (this.isMultiSelect) {\n            return this._selectionModel.selected.map(option => this._getLabel(option)).join(', ');\n        }\n        return this._getLabel(this._selectionModel.selected[0]);\n    }\n\n    _getLabel(option: NxDropdownOption) {\n        return option.label || this.formatValue(option.value);\n    }\n\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached(): void {\n        this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            const overlayRef = this.overlayDir.overlayRef;\n            const positionStrategy = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n            this._updatePosition();\n            positionStrategy.withPositions(this._positions);\n            overlayRef.updatePosition();\n\n            this._cdr.markForCheck();\n            this.openedChange.emit(true);\n\n            if (this.showFilter) {\n                this.filterInput?.nativeElement.focus();\n            } else {\n                this.panelBody?.nativeElement.focus();\n            }\n        });\n    }\n\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n\n        if (this.filterInput && this.showFilter) {\n            this._clearFilter();\n        }\n\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._cdr.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /** @docs-private */\n    get isFilterEmpty() {\n        return this.currentFilter.length === 0;\n    }\n\n    _clearFilter() {\n        if (!this.filterInput) {\n            return;\n        }\n        this.filterInput.nativeElement.value = '';\n        this.currentFilter = '';\n        this.filterChanges.next('');\n    }\n\n    /** determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant(): string | null {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n\n        return null;\n    }\n}\n","<!-- input and stuff-->\n<div cdkOverlayOrigin #origin=\"cdkOverlayOrigin\" class=\"nx-dropdown__container\" #trigger>\n    <div class=\"nx-dropdown__rendered\" [id]=\"renderedValueId\">\n        <span *ngIf=\"empty && placeholder\">{{ placeholder }}</span>\n        <ng-container *ngIf=\"!empty\">\n            <ng-container *ngTemplateOutlet=\"closedDropdownLabel\"></ng-container>\n        </ng-container>\n    </div>\n    <div class=\"nx-dropdown__icon\">\n        <nx-icon class=\"nx-dropdown__chevron\" name=\"chevron-down\"></nx-icon>\n    </div>\n</div>\n\n<ng-template #defaultClosedDropdownLabel>\n    <span *ngIf=\"triggerValue\">{{ triggerValue }}</span>\n</ng-template>\n\n<!-- overlay -->\n<ng-template\n    cdkConnectedOverlay\n    cdkConnectedOverlayHasBackdrop\n    cdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\n    [cdkConnectedOverlayScrollStrategy]=\"_scrollStrategy\"\n    [cdkConnectedOverlayOrigin]=\"origin\"\n    [cdkConnectedOverlayOpen]=\"panelOpen\"\n    [cdkConnectedOverlayPositions]=\"_positions\"\n    [cdkConnectedOverlayMinWidth]=\"_triggerRect?.width!\"\n    [cdkConnectedOverlayFlexibleDimensions]=\"true\"\n    [cdkConnectedOverlayViewportMargin]=\"_overlayViewportMargin\"\n    [cdkConnectedOverlayPush]=\"true\"\n    (backdropClick)=\"closePanel()\"\n    (attach)=\"_onAttached()\"\n    (detach)=\"closePanel()\"\n>\n    <div\n        class=\"nx-dropdown__panel\"\n        [class.has-filter]=\"showFilter\"\n        [class.nx-dropdown__panel--in-outline-field]=\"_isInOutlineField\"\n        (keydown)=\"_handleKeydown($event)\"\n        [dir]=\"dir\"\n        #panel\n    >\n        <div class=\"nx-dropdown__panel-header\" *ngIf=\"label\"> {{ label }} </div>\n        <div class=\"nx-dropdown__filter\" *ngIf=\"showFilter\">\n            <input\n                class=\"nx-dropdown__filter-input\"\n                [class.is-filled]=\"!isFilterEmpty\"\n                #filterInput\n                [type]=\"filterInputType\"\n                (input)=\"_onFilter($event)\"\n                [placeholder]=\"filterPlaceholder\"\n            />\n            <span class=\"nx-dropdown__filter-icon\" *ngIf=\"!isFilterEmpty\" (click)=\"_clearFilter()\">\n                <nx-icon name=\"close\"></nx-icon>\n            </span>\n        </div>\n\n        <div\n            class=\"nx-dropdown__panel-body\"\n            tabindex=\"-1\"\n            role=\"listbox\"\n            #panelBody\n            [attr.aria-activedescendant]=\"_getAriaActiveDescendant()\"\n            [attr.aria-multiselectable]=\"isMultiSelect\"\n        >\n            <ng-content></ng-content>\n            <ng-container *ngFor=\"let option of options\">\n                <nx-dropdown-item (onSelectionChange)=\"_onSelect($event.item, $event.isUserInput, option)\" [nxValue]=\"option.value\"\n                    >{{ _getLabel(option) }}</nx-dropdown-item\n                >\n            </ng-container>\n        </div>\n    </div>\n</ng-template>\n","import { Highlightable } from '@angular/cdk/a11y';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, HostListener, Input, Output } from '@angular/core';\nimport { AppearanceType } from '@aposin/ng-aquila/formfield';\n\nlet optionId = 0;\n\n/**\n * A single option witin the multi select.\n *\n * @docs-private\n */\n@Component({\n    selector: 'nx-multi-select-option',\n    styleUrls: ['./multi-select-option.component.scss'],\n    templateUrl: './multi-select-option.component.html',\n    host: {\n        role: 'option',\n        '[id]': 'id',\n        '[attr.aria-selected]': 'selected || null',\n        '[attr.aria-disabled]': 'disabled || null',\n        '[class.is-outline]': 'appearance === \"outline\"',\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxMultiSelectOptionComponent<T> implements Highlightable {\n    private _active = false;\n\n    id = `nx-multi-select-option-${optionId++}`;\n\n    @Input()\n    appearance: AppearanceType = 'auto';\n\n    /**\n     * Value of this option.\n     */\n    @Input()\n    value?: T;\n\n    /**\n     * Label of this option.\n     */\n    @Input()\n    label = '';\n\n    /**\n     * Whether this option is selected.\n     */\n    @Input()\n    selected = false;\n\n    /**\n     * Whether thisoption is disabled.\n     */\n    @Input()\n    disabled = false;\n\n    /**\n     * Emits an event when this option is selected or unselected by the user.\n     */\n    @Output()\n    selectedChange: EventEmitter<boolean> = new EventEmitter();\n\n    /**\n     * Sets this option active highlighting it to the user.\n     */\n    set active(value: boolean) {\n        this._active = value;\n        this._cdr.markForCheck();\n    }\n\n    get active() {\n        return this._active;\n    }\n\n    constructor(private _cdr: ChangeDetectorRef, public elementRef: ElementRef) {}\n\n    setActiveStyles(): void {\n        this.active = true;\n    }\n\n    setInactiveStyles(): void {\n        this.active = false;\n    }\n\n    @HostListener('click')\n    _onClick() {\n        if (!this.disabled) {\n            this.selected = !this.selected;\n            this.selectedChange.emit(this.selected);\n        }\n    }\n\n    /**\n     * Selects this option as if the user clicked on it.\n     */\n    selectViaInteraction() {\n        this._onClick();\n        this._cdr.markForCheck();\n    }\n}\n","<div class=\"nx-checkbox\" [class.is-active]=\"active\" [class.is-selected]=\"selected\" [class.is-disabled]=\"disabled\">\n    <span class=\"nx-checkbox__control\">\n        <nx-icon *ngIf=\"selected\" name=\"check\" aria-hidden=\"true\"></nx-icon>\n    </span>\n\n    <span class=\"nx-checkbox__label\">\n        {{ label }}\n    </span>\n</div>\n","import { ActiveDescendantKeyManager, FocusOrigin } from '@angular/cdk/a11y';\nimport { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { CdkConnectedOverlay, ConnectionPositionPair, FlexibleConnectedPositionStrategy } from '@angular/cdk/overlay';\nimport {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    Self,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { AppearanceType, NxFormfieldComponent, NxFormfieldControl } from '@aposin/ng-aquila/formfield';\nimport { ErrorStateMatcher } from '@aposin/ng-aquila/utils';\nimport { Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\n\nimport { NxDropdownIntl } from '../dropdown';\nimport { getPositionOffset, getPositions } from '../dropdown-position';\nimport { NxMultiSelectOptionComponent } from './multi-select-option.component';\n\nlet id = 0;\n\nconst OVERLAY_MIN_WIDTH = 260;\n\nexport type NxMultiSelectFilterFn = (query: string, label: string) => boolean;\n\nconst _defaultFilterFn: NxMultiSelectFilterFn = (query, label) => label.toLowerCase().includes(query.toLowerCase());\n\n/**\n * Multi Select component.\n * @typeParam S Type of the items in the options array\n * @typeParam T Type of the ngModel value\n */\n@Component({\n    selector: 'nx-multi-select',\n    templateUrl: './multi-select.component.html',\n    styleUrls: ['./multi-select.component.scss'],\n    providers: [{ provide: NxFormfieldControl, useExisting: NxMultiSelectComponent }],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxMultiSelectComponent<S, T> implements ControlValueAccessor, NxFormfieldControl<T[]>, DoCheck, OnDestroy, AfterViewInit {\n    get value(): T[] {\n        return this.options.filter(option => this.selectedItems.has(option)).map(option => this._selectValue(option));\n    }\n\n    get _isOutline() {\n        return this._appearance === 'outline';\n    }\n\n    get _appearance(): AppearanceType {\n        return this._formFieldComponent?.appearance as AppearanceType;\n    }\n\n    get _overlayLabel(): string | null | undefined {\n        return this._formFieldComponent?.label;\n    }\n\n    /**\n     * Whether the value is empty.\n     */\n    get empty(): boolean {\n        return this.selectedItems.size === 0;\n    }\n\n    get focused(): boolean {\n        return this._isOpen || this._inputFocused;\n    }\n\n    // @Input()\n    // selectValue(value: string | () )\n\n    @Input()\n    get required() {\n        return this._required;\n    }\n    set required(value: boolean) {\n        this._required = value;\n    }\n\n    /** Whether the multi select is disabled. */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value: boolean) {\n        this._disabled = value;\n    }\n\n    /** Whether the multi select should be read only. */\n    @Input()\n    get readonly(): boolean {\n        return this._readonly;\n    }\n    set readonly(value: BooleanInput) {\n        this._readonly = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n\n    /** The placeholder shown in the multi select field. */\n    @Input()\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(value: string) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n\n    /**\n     * Whether this multi select can be filtered.\n     */\n    @Input()\n    set filter(value: BooleanInput) {\n        this._filter = coerceBooleanProperty(value);\n    }\n    get filter(): boolean {\n        return this._filter;\n    }\n\n    /** Whether the (select all / clear all) should be disabled and hidden. */\n    @Input()\n    set disableSelectAll(value: BooleanInput) {\n        const coercedValue = coerceBooleanProperty(value);\n        if (this.#disableSelectAll !== coercedValue) {\n            this.#disableSelectAll = coercedValue;\n            this._cdr.markForCheck();\n        }\n    }\n    get disableSelectAll(): boolean {\n        return this.#disableSelectAll;\n    }\n    #disableSelectAll = false;\n\n    /**\n     * Function to be used when the user types into the search filter. The first argument is the user input,\n     * the second argument is the dropdown item value as displayed. The dropdown items will use this function\n     * to set their visibility state. A boolean should be returned.\n     *\n     * Defaults to lower case inclusion.\n     */\n    @Input() set filterFn(value: NxMultiSelectFilterFn | null | undefined) {\n        this.#filterFn = value;\n    }\n    get filterFn(): NxMultiSelectFilterFn {\n        return this.#filterFn ?? _defaultFilterFn;\n    }\n    #filterFn?: NxMultiSelectFilterFn | null;\n\n    /** @docs-private */\n    get shouldLabelFloat(): boolean {\n        return this.focused || !this.empty || !!(this.placeholder && this.placeholder.length > 0);\n    }\n\n    /** @docs-private */\n    get elementRef(): ElementRef<any> {\n        return this._elementRef;\n    }\n\n    get _allSelected(): boolean {\n        return this.selectedItems.size === this.options.filter(option => !this._isDisabled(option)).length;\n    }\n\n    get _someSelected(): boolean {\n        return this.selectedItems.size > 0 && !this._allSelected;\n    }\n\n    constructor(\n        public _intl: NxDropdownIntl,\n        private _elementRef: ElementRef,\n        private _errorStateMatcher: ErrorStateMatcher,\n        private _cdr: ChangeDetectorRef,\n        @Optional() private _formFieldComponent: NxFormfieldComponent | null,\n        @Optional() @Self() public ngControl: NgControl | null,\n        @Optional() private _parentForm: NgForm | null,\n        @Optional() private _parentFormGroup: FormGroupDirective | null,\n    ) {\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        this._isDisabled = this._isDisabled.bind(this);\n\n        _intl.changes.pipe(takeUntil(this._destroyed)).subscribe(() => _cdr.markForCheck());\n    }\n\n    private get _isActiveItemFiltered(): boolean {\n        return (\n            typeof this._keyManager.activeItem !== 'undefined' &&\n            !this.listItems.some(option => this._selectValue(option) === this._keyManager.activeItem?.value)\n        );\n    }\n\n    @ViewChildren(NxMultiSelectOptionComponent)\n    private _options!: QueryList<NxMultiSelectOptionComponent<T>>;\n\n    private _required = false;\n\n    private _disabled = false;\n\n    private _readonly = false;\n\n    private _placeholder = '';\n\n    private _filter = false;\n\n    private _openedBy: FocusOrigin = 'mouse';\n\n    /** @docs-private */\n    _divider = 0;\n\n    @ViewChild('panelContent') private _panelContent?: ElementRef;\n\n    @ViewChild('filterInput')\n    private _filterInput?: ElementRef;\n\n    @ViewChild('itemsList')\n    private _optionsList?: ElementRef;\n\n    @ViewChild('trigger')\n    private _trigger?: ElementRef;\n\n    @ViewChild('panelHeader')\n    private _panelHeader?: ElementRef;\n\n    @ViewChild(CdkConnectedOverlay, { static: true })\n    private _overlayDir?: CdkConnectedOverlay;\n\n    /** Event emitted when the selected value has been changed. */\n    @Output() readonly selectionChange = new EventEmitter<T[]>();\n\n    /** @docs-private */\n    readonly controlType: string = 'nx-multi-select';\n\n    /** @docs-private */\n    errorState = false;\n\n    _positions: ConnectionPositionPair[] = getPositions('auto', 0);\n\n    _inputFocused = false;\n\n    _ariaDescribedby = '';\n\n    _width = 0;\n\n    _filterValue = '';\n\n    _tooltipText = '';\n\n    listItems: S[] = [];\n\n    selectedItems: Set<S> = new Set();\n\n    id = `nx-multi-select-${id++}`;\n\n    _comboboxId = `${this.id}-combobox`;\n\n    readonly stateChanges = new Subject<any>();\n\n    _keyManager!: ActiveDescendantKeyManager<NxMultiSelectOptionComponent<T>>;\n\n    /**\n     * List of options to choose from.\n     */\n    @Input()\n    options: S[] = [];\n\n    /**\n     * Placeholder for the filter input.\n     */\n    @Input()\n    filterPlaceholder = 'Type to filter';\n\n    /**\n     * Selector to get the value of an option.\n     * Can be either a property name or a selector function.\n     * When empty the whole option is treated as the value.\n     */\n    @Input()\n    selectValue: string | ((option: S) => T) = '';\n\n    /**\n     * Selector to get the label of an option.\n     * Can be either a property name or a selector function.\n     * When empty the whole option is treated as the label.\n     */\n    @Input()\n    selectLabel: string | ((option: S) => string) = '';\n\n    /**\n     * Selector to get the disabled state of an option.\n     * Can be either a property name or a selector function.\n     */\n    @Input()\n    selectDisabled?: string | ((option: S) => boolean);\n\n    @HostBinding('class.is-open')\n    _isOpen = false;\n\n    private readonly _destroyed = new Subject<void>();\n\n    ngOnDestroy(): void {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this._cdr.markForCheck();\n        this.stateChanges.next();\n    }\n\n    private _onChange: (value: T[]) => void = () => {};\n\n    private _onTouched: () => void = () => {};\n\n    _selectValue(option: S): T {\n        if (!this.selectValue) {\n            return option as unknown as T;\n        }\n\n        if (typeof this.selectValue === 'string') {\n            return (option as any)[this.selectValue] as T;\n        }\n\n        return this.selectValue(option);\n    }\n\n    _selectLabel(option: S): string {\n        if (!this.selectLabel) {\n            return String(this._selectValue(option));\n        }\n\n        if (typeof this.selectLabel === 'string') {\n            return String((option as any)[this.selectLabel]);\n        }\n\n        return this.selectLabel(option);\n    }\n\n    private _updatePositions() {\n        if (this._formFieldComponent) {\n            const offset = getPositionOffset(\n                this._elementRef.nativeElement,\n                this._formFieldComponent.elementRef.nativeElement,\n                this._panelHeader?.nativeElement,\n            );\n            this._positions = getPositions(this._appearance, offset);\n        }\n    }\n\n    _isDisabled(option: S): boolean {\n        if (typeof this.selectDisabled === 'string') {\n            return (option as any)[this.selectDisabled];\n        }\n\n        if (typeof this.selectDisabled === 'function') {\n            return this.selectDisabled(option);\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns html ids of multi select rendered value and label (if available),\n     * separated by space.\n     */\n    _getAriaLabelledBy(): string {\n        const valueId = this.id;\n        const labelId = this._formFieldComponent?.labelId;\n\n        if (labelId) {\n            return `${valueId} ${labelId}`;\n        }\n        return valueId;\n    }\n\n    /** @docs-private */\n    setDescribedByIds(ids: string[]): void {\n        this._ariaDescribedby = ids.join(' ');\n    }\n\n    ngAfterViewInit() {\n        this._initKeyManager();\n    }\n\n    open($event: Event, origin: FocusOrigin) {\n        this._open($event, origin);\n    }\n\n    _open($event: Event, origin: FocusOrigin) {\n        if (this._isOpen || this.disabled) {\n            return;\n        }\n\n        const sortSelectedToTop = (a: S, b: S) => {\n            const aSelected = this.selectedItems.has(a);\n            const bSelected = this.selectedItems.has(b);\n            if (aSelected && !bSelected) {\n                return -1;\n            } else if (!aSelected && bSelected) {\n                return 1;\n            }\n            return 0;\n        };\n\n        $event.preventDefault();\n        this._filterValue = '';\n        this._width = Math.max(OVERLAY_MIN_WIDTH, this._trigger?.nativeElement.getBoundingClientRect().width);\n        this._isOpen = true;\n        this.listItems = this.options.slice().sort(sortSelectedToTop);\n        this._divider = this.selectedItems.size - 1;\n        this._openedBy = origin;\n        this._cdr.markForCheck();\n    }\n\n    _close() {\n        this._isOpen = false;\n        this._updateTooltipText();\n        this._trigger?.nativeElement.focus();\n    }\n\n    _onSelect(item: S, selected: boolean) {\n        if (selected) {\n            this.selectedItems.add(item);\n        } else {\n            this.selectedItems.delete(item);\n        }\n\n        this._onChange(this.value);\n        this.selectionChange.emit(this.value);\n    }\n\n    _onKeydown($event: KeyboardEvent) {\n        if (!this._isOpen || this.disabled) {\n            return;\n        }\n\n        const key = $event.key;\n\n        if (key === 'ArrowUp' || key === 'ArrowDown' || key === 'Home' || key === 'End') {\n            this._keyManager.onKeydown($event);\n            this._scrollActiveOptionIntoView();\n            $event.preventDefault();\n        }\n\n        if ((window.navigator.platform.match('Mac') ? $event.metaKey : $event.ctrlKey) && key === 'a') {\n            this._onSelectAll();\n            $event.preventDefault();\n        }\n\n        if (key === 'Tab') {\n            this._keyManager.onKeydown($event);\n        }\n\n        if (key === 'Enter' || (this._filterValue.trim() === '' && key === ' ')) {\n            this._keyManager.activeItem?.selectViaInteraction();\n            $event.preventDefault();\n        }\n    }\n\n    _onTriggerBlur() {\n        this._onTouched();\n    }\n\n    _onFocusWithinOverlay($event: Event) {\n        // Keeps focus on the filter when clicking around in the overlay\n        if (this._filterInput && $event.target !== this._filterInput.nativeElement) {\n            this._filterInput.nativeElement.focus();\n        }\n    }\n\n    _getAriaActiveDescendant(): string | null {\n        if (this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n\n        return null;\n    }\n\n    _onFilterChange(query: string | null | undefined) {\n        if (query) {\n            this.listItems = this.options.filter(item => this.filterFn(query, this._selectLabel(item)));\n        } else {\n            this.listItems = this.options.slice();\n        }\n\n        if (this._isActiveItemFiltered) {\n            setTimeout(() => {\n                this._keyManager.setFirstItemActive();\n            });\n        }\n\n        this._optionsList?.nativeElement.scrollTo(0, 0);\n    }\n\n    _getValueText() {\n        return this.options\n            .filter(option => this.selectedItems.has(option))\n            .map(option => this._selectLabel(option))\n            .join(', ');\n    }\n\n    _onAttach() {\n        this._overlayDir?.positionChange.pipe(take(1)).subscribe(() => {\n            const overlayRef = (this._overlayDir as CdkConnectedOverlay).overlayRef;\n            const positionStrategy = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n            this._updatePositions();\n            positionStrategy.withPositions(this._positions);\n            overlayRef.updatePosition();\n\n            this._filterInput?.nativeElement.focus();\n            this._panelContent?.nativeElement.focus();\n\n            if (this._openedBy === 'keyboard') {\n                this._keyManager.setFirstItemActive();\n                this._scrollActiveOptionIntoView();\n            }\n            this._cdr.markForCheck();\n        });\n    }\n\n    _onDetach() {\n        this._close();\n    }\n\n    _onSelectAll() {\n        if (this._allSelected) {\n            this.selectedItems.clear();\n        } else {\n            this.listItems.filter(option => !this._isDisabled(option)).forEach(option => this.selectedItems.add(option));\n        }\n        this._onChange(this.value);\n        this.selectionChange.emit(this.value);\n    }\n\n    _clear() {\n        this.selectedItems.clear();\n        this._onChange(this.value);\n        this.selectionChange.emit(this.value);\n    }\n\n    _clearFilter() {\n        this._filterValue = '';\n        this._onFilterChange(this._filterValue);\n    }\n\n    writeValue(value: T[]): void {\n        this.selectedItems.clear();\n\n        if (Array.isArray(value)) {\n            for (const item of value) {\n                const selectedItem = this.options.find(option => this._selectValue(option) === item);\n                if (selectedItem) {\n                    this.selectedItems.add(selectedItem);\n                } else {\n                    console.warn('NxMultiSelect: Model contains value that does not exist in given options', item);\n                }\n            }\n        }\n        this._cdr.markForCheck();\n    }\n\n    registerOnChange(fn: any): void {\n        this._onChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this._onTouched = fn;\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            this.updateErrorState();\n        }\n    }\n\n    updateErrorState() {\n        const oldState = this.errorState;\n        const parent = this._parentFormGroup || this._parentForm;\n        const control = this.ngControl ? (this.ngControl.control as FormControl) : null;\n        const newState = this._errorStateMatcher.isErrorState(control, parent);\n\n        if (newState !== oldState) {\n            this.errorState = newState;\n            this.stateChanges.next();\n        }\n    }\n\n    private _updateTooltipText() {\n        if (!this._trigger) {\n            return;\n        }\n\n        const [label, suffix, icon] = this._trigger.nativeElement.children;\n        const { paddingLeft, paddingRight } = getComputedStyle(this._trigger.nativeElement);\n        const triggerContentWidth = this._trigger.nativeElement.clientWidth - parseInt(paddingLeft, 10) - parseInt(paddingRight, 10);\n\n        if (triggerContentWidth - suffix.offsetWidth - icon.offsetWidth <= label.offsetWidth) {\n            this._tooltipText = this._getValueText();\n        } else {\n            this._tooltipText = '';\n        }\n    }\n\n    private _scrollActiveOptionIntoView() {\n        if (!this._keyManager.activeItem) {\n            return;\n        }\n\n        const activeItem = this._keyManager.activeItem.elementRef.nativeElement;\n        const list = this._optionsList?.nativeElement;\n        const listTopScrollPosition = list.scrollTop;\n        const listHeight = list.clientHeight;\n        const itemTop = activeItem.offsetTop;\n        const itemBottom = activeItem.offsetTop + activeItem.offsetHeight;\n\n        // item half or less visible on top\n        if (itemTop < listTopScrollPosition) {\n            list.scrollTop = itemTop;\n            // item half or less visible on bottom\n        } else if (itemBottom > listTopScrollPosition + listHeight) {\n            list.scrollTop = itemBottom - listHeight;\n        }\n    }\n\n    private _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager<NxMultiSelectOptionComponent<T>>(this._options)\n            .withHomeAndEnd()\n            .withVerticalOrientation()\n            .withHorizontalOrientation('ltr')\n            .skipPredicate(item => item.disabled);\n\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => this._close());\n    }\n}\n","<div\n    [nxTooltip]=\"_tooltipText\"\n    class=\"value\"\n    (click)=\"_open($event, 'mouse')\"\n    (keydown.enter)=\"_open($event, 'keyboard')\"\n    (keydown.space)=\"_open($event, 'keyboard')\"\n    cdkOverlayOrigin\n    #trigger\n    #origin=\"cdkOverlayOrigin\"\n    role=\"combobox\"\n    tabindex=\"0\"\n    aria-haspopup=\"listbox\"\n    [attr.aria-controls]=\"_comboboxId\"\n    (blur)=\"_onTriggerBlur(); _inputFocused = false\"\n    [attr.aria-expanded]=\"_isOpen\"\n    [attr.aria-labelledby]=\"_getAriaLabelledBy()\"\n    [id]=\"id\"\n    (focus)=\"disabled ? null : (_inputFocused = true)\"\n    (keydown)=\"_onKeydown($event)\"\n>\n    <span class=\"value-text\">{{ empty ? placeholder : _getValueText() }}</span>\n    <span>{{ selectedItems.size ? '(' + selectedItems.size + ')' : '' }}</span>\n    <nx-icon size=\"s\" aria-hidden=\"true\" class=\"indicator\" name=\"chevron-down\"></nx-icon>\n</div>\n<ng-template\n    cdkConnectedOverlay\n    cdkConnectedOverlayHasBackdrop\n    cdkConnectedOverlayPush\n    cdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\n    [cdkConnectedOverlayPositions]=\"_positions\"\n    [cdkConnectedOverlayWidth]=\"_width\"\n    [cdkConnectedOverlayOrigin]=\"origin\"\n    [cdkConnectedOverlayOpen]=\"_isOpen\"\n    (overlayOutsideClick)=\"_close()\"\n    (attach)=\"_onAttach()\"\n    (detach)=\"_onDetach()\"\n>\n    <div\n        class=\"panel\"\n        [class.is-outline]=\"_isOutline\"\n        (keydown)=\"_onKeydown($event)\"\n        [attr.aria-owns]=\"_comboboxId\"\n        aria-expanded=\"true\"\n        (focusin)=\"_onFocusWithinOverlay($event)\"\n        role=\"combobox\"\n        [attr.aria-activedescendant]=\"_getAriaActiveDescendant()\"\n        tabindex=\"-1\"\n        [attr.aria-labelledby]=\"_getAriaLabelledBy()\"\n        #panelContent\n    >\n        <div *ngIf=\"!_isOutline && _overlayLabel\" class=\"panel-header\" #panelHeader>\n            {{ _overlayLabel }}\n        </div>\n        <div *ngIf=\"filter\" class=\"filter-wrapper\">\n            <nx-formfield class=\"filter\" appearance=\"auto\">\n                <input\n                    nxInput\n                    #filterInput\n                    [(ngModel)]=\"_filterValue\"\n                    (ngModelChange)=\"_onFilterChange($event)\"\n                    [placeholder]=\"filterPlaceholder\"\n                    autocomplete=\"off\"\n                    [attr.aria-controls]=\"_comboboxId\"\n                    [attr.aria-labelledby]=\"_getAriaLabelledBy()\"\n                    [attr.aria-activedescendant]=\"_getAriaActiveDescendant()\"\n                />\n                <nx-icon\n                    aria-hidden=\"true\"\n                    nxFormfieldSuffix\n                    [class.hidden]=\"!_filterValue.length\"\n                    class=\"clear\"\n                    (click)=\"_clearFilter()\"\n                    name=\"close\"\n                ></nx-icon>\n            </nx-formfield>\n        </div>\n        <div class=\"item actions\" *ngIf=\"_isOutline && !disableSelectAll\">\n            <nx-checkbox [ngModel]=\"_allSelected\" (ngModelChange)=\"_onSelectAll()\" [indeterminate]=\"_someSelected\"> {{ _intl.selectAll }} </nx-checkbox>\n            <button type=\"button\" nxPlainButton (click)=\"_clear()\" [disabled]=\"selectedItems.size === 0\"> {{ _intl.clearAll }} </button>\n        </div>\n        <div class=\"items\" #itemsList [id]=\"_comboboxId\" role=\"listbox\" aria-multiselectable=\"true\">\n            <nx-multi-select-option\n                *ngFor=\"let option of listItems; let i = index\"\n                class=\"item\"\n                [class.divider]=\"_divider === i\"\n                (selectedChange)=\"_onSelect(option, $event)\"\n                [value]=\"_selectValue(option)\"\n                [label]=\"_selectLabel(option)\"\n                [selected]=\"this.selectedItems.has(option)\"\n                [disabled]=\"this._isDisabled(option)\"\n                [appearance]=\"_appearance\"\n            ></nx-multi-select-option>\n        </div>\n    </div>\n</ng-template>\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NxButtonModule } from '@aposin/ng-aquila/button';\nimport { NxCheckboxModule } from '@aposin/ng-aquila/checkbox';\nimport { NxFormfieldModule } from '@aposin/ng-aquila/formfield';\nimport { NxIconModule } from '@aposin/ng-aquila/icon';\nimport { NxInputModule } from '@aposin/ng-aquila/input';\nimport { NxTooltipModule } from '@aposin/ng-aquila/tooltip';\n\nimport { NxDropdownClosedLabelDirective } from './closed-label.directive';\nimport { NX_DROPDOWN_SCROLL_STRATEGY_PROVIDER, NxDropdownComponent, NxDropdownIntl } from './dropdown';\nimport { NxDropdownGroupComponent } from './group/dropdown-group';\nimport { NxDropdownItemComponent } from './item/dropdown-item';\nimport { NxMultiSelectComponent } from './multi-select/multi-select.component';\nimport { NxMultiSelectOptionComponent } from './multi-select/multi-select-option.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        NxFormfieldModule,\n        NxCheckboxModule,\n        OverlayModule,\n        A11yModule,\n        NxIconModule,\n        ObserversModule,\n        FormsModule,\n        NxTooltipModule,\n        NxButtonModule,\n        NxInputModule,\n    ],\n    declarations: [\n        NxDropdownComponent,\n        NxDropdownItemComponent,\n        NxDropdownGroupComponent,\n        NxDropdownClosedLabelDirective,\n        NxMultiSelectComponent,\n        NxMultiSelectOptionComponent,\n    ],\n    providers: [NxDropdownIntl, NX_DROPDOWN_SCROLL_STRATEGY_PROVIDER],\n    exports: [NxDropdownComponent, NxDropdownItemComponent, NxDropdownGroupComponent, NxDropdownClosedLabelDirective, NxMultiSelectComponent],\n})\nexport class NxDropdownModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.NxDropdownGroupComponent","_defaultFilterFn","i1","i2","i3","i4","i5","i6","i7.NxDropdownItemComponent","i9","i1.NxDropdownIntl","i8.NxMultiSelectOptionComponent","i10","i11"],"mappings":"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"}