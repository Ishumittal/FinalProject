{"version":3,"file":"aposin-ng-aquila-context-menu.mjs","sources":["../../../projects/ng-aquila/src/context-menu/context-menu-animations.ts","../../../projects/ng-aquila/src/context-menu/context-menu-content.directive.ts","../../../projects/ng-aquila/src/context-menu/context-menu-item.component.ts","../../../projects/ng-aquila/src/context-menu/context-menu.component.ts","../../../projects/ng-aquila/src/context-menu/context-menu.component.html","../../../projects/ng-aquila/src/context-menu/context-menu-header.component.ts","../../../projects/ng-aquila/src/context-menu/context-menu-errors.ts","../../../projects/ng-aquila/src/context-menu/context-menu-trigger.directive.ts","../../../projects/ng-aquila/src/context-menu/context-menu.module.ts","../../../projects/ng-aquila/src/context-menu/aposin-ng-aquila-context-menu.ts"],"sourcesContent":["import { animate, AnimationTriggerMetadata, group, query, state, style, transition, trigger } from '@angular/animations';\n\n/**\n * Animations used by the NxContextMenuComponent.\n * @docs-private\n */\nexport const nxContextMenuAnimations: {\n    readonly transformContextMenu: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation controls the context menu panel's entry and exit from the page.\n     * When the context menu panel is added to the DOM, it scales in and fades in its border.\n     * When the context menu panel is removed from the DOM, it simply fades out.\n     */\n    transformContextMenu: trigger('transformContextMenu', [\n        state(\n            'void',\n            style({\n                opacity: 0,\n                transform: 'scale(0.8)',\n            }),\n        ),\n        transition(\n            'void => enter',\n            group([\n                query(\n                    '.nx-context-menu__content',\n                    animate(\n                        '100ms linear',\n                        style({\n                            opacity: 1,\n                        }),\n                    ),\n                ),\n                animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'scale(1)' })),\n            ]),\n        ),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 }))),\n    ]),\n};\n","import { DomPortalOutlet, TemplatePortal } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\nimport { ApplicationRef, ComponentFactoryResolver, Directive, Inject, Injector, OnDestroy, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n/**\n * Context menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n    selector: 'ng-template[nxContextMenuContent]',\n})\nexport class NxContextMenuContentDirective implements OnDestroy {\n    private _portal!: TemplatePortal<any>;\n    private _outlet!: DomPortalOutlet;\n\n    /** Emits when the menu content has been attached. */\n    _attached = new Subject<void>();\n\n    constructor(\n        private _template: TemplateRef<any>,\n        private _componentFactoryResolver: ComponentFactoryResolver,\n        private _appRef: ApplicationRef,\n        private _injector: Injector,\n        private _viewContainerRef: ViewContainerRef,\n        @Inject(DOCUMENT) private _document: Document,\n    ) {}\n\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context: any = {}) {\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n\n        this.detach();\n\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n        }\n\n        const element: HTMLElement = this._template.elementRef.nativeElement;\n\n        // Because we support opening the same menu from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        if (element.parentNode) {\n            element.parentNode.insertBefore(this._outlet.outletElement, element);\n        }\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n}\n","import { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\nimport { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    QueryList,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\n/**\n * This directive is intended to be used inside an nx-context-menu tag.\n * It exists mostly to set the role attribute, disabled state and styling.\n */\n@Component({\n    selector: '[nxContextMenuItem]',\n    exportAs: 'nxContextMenuItem',\n    host: {\n        class: 'nx-context-menu-item',\n        role: 'menuitem',\n        '[class.is-highlighted]': '_highlighted',\n        '[attr.tabindex]': '_getTabIndex()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.disabled]': 'disabled || null',\n        '(mouseenter)': '_handleMouseEnter()',\n        '(click)': '_checkDisabled($event)',\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: `\n        <div class=\"nx-context-menu-item__content-wrapper\" [class.has-submenu]=\"_triggersSubmenu\">\n            <ng-content></ng-content>\n            <nx-icon *ngIf=\"_triggersSubmenu\" class=\"nx-context-menu-item__expand\" name=\"chevron-right-small\"> </nx-icon>\n        </div>\n    `,\n    styleUrls: ['./context-menu-item.component.scss'],\n})\nexport class NxContextMenuItemComponent implements OnDestroy {\n    /** Stream that emits when the context menu item is hovered. */\n    readonly _hovered: Subject<NxContextMenuItemComponent> = new Subject<NxContextMenuItemComponent>();\n\n    /** Whether the context menu item is disabled. */\n    @Input()\n    set disabled(value: BooleanInput) {\n        this._disabled = coerceBooleanProperty(value);\n        this._cdr.markForCheck();\n    }\n    get disabled(): boolean {\n        return this._disabled;\n    }\n    private _disabled = false;\n\n    /** Whether the context menu close on select. */\n    @Input()\n    set disableCloseOnSelect(value: BooleanInput) {\n        this._disableCloseOnSelect = coerceBooleanProperty(value);\n        this._cdr.markForCheck();\n    }\n    get disableCloseOnSelect(): boolean {\n        return this._disableCloseOnSelect;\n    }\n    private _disableCloseOnSelect = false;\n\n    /** Whether the context menu item is highlighted. */\n    _highlighted = false;\n\n    /** Whether the context menu item acts as a trigger for a sub-menu. */\n    _triggersSubmenu = false;\n\n    constructor(\n        private _elementRef: ElementRef<HTMLElement>,\n        @Optional() @Inject(DOCUMENT) private _document: Document | null,\n        private _cdr: ChangeDetectorRef,\n        private _focusMonitor: FocusMonitor,\n    ) {\n        this._focusMonitor.monitor(this._elementRef);\n    }\n\n    /** Focuses this context menu item. */\n    focus(origin?: FocusOrigin): void {\n        if (origin) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin);\n        } else {\n            this._getHostElement().focus();\n        }\n    }\n\n    ngOnDestroy() {\n        this._hovered.complete();\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    /** Used to set the `tabindex`. */\n    _getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    /** Returns the host DOM element. */\n    _getHostElement(): HTMLElement {\n        return this._elementRef.nativeElement;\n    }\n\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event: Event): void {\n        if (this.disableCloseOnSelect) {\n            event.stopPropagation();\n        }\n\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    /** Emits to the hover stream. */\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string {\n        const element: HTMLElement = this._elementRef.nativeElement.childNodes[0] as HTMLElement;\n        const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n        let output = '';\n\n        if (element.childNodes) {\n            const length = element.childNodes.length;\n\n            // Go through all the top-level text nodes and extract their text.\n            // We skip anything that's not a text node to prevent the text from\n            // being thrown off by something like an icon.\n            for (let i = 0; i < length; i++) {\n                if (element.childNodes[i].nodeType === textNodeType) {\n                    output += element.childNodes[i].textContent;\n                }\n            }\n        }\n\n        return output.trim();\n    }\n}\n\n/**\n * This directive is need when [nx-context-menu-item] is not directly under [nx-context-menu].\n *\n * <nx-context-menu>\n *      <something else> // blocker\n *        <nx-context-menu-item-wrap> // come to rescue\n *          <nx-context-menu-item/>\n *          <nx-context-menu-item/>\n *        </nx-context-menu-item-wrap>\n *      </something else>\n * </nx-context-menu>\n */\n@Component({\n    selector: 'nx-context-menu-item-wrap',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: `<ng-content></ng-content> `,\n})\nexport class NxContextMenuItemWrapComponent {\n    @ContentChildren(NxContextMenuItemComponent)\n    _items!: QueryList<NxContextMenuItemComponent>;\n}\n","import { AnimationEvent } from '@angular/animations';\nimport { FocusKeyManager, FocusOrigin } from '@angular/cdk/a11y';\nimport { Direction } from '@angular/cdk/bidi';\nimport { END, ESCAPE, hasModifierKey, HOME, LEFT_ARROW, RIGHT_ARROW } from '@angular/cdk/keycodes';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    ContentChildren,\n    EventEmitter,\n    HostListener,\n    NgZone,\n    OnDestroy,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n} from '@angular/core';\nimport { merge, Observable, ReplaySubject, Subject } from 'rxjs';\nimport { startWith, switchMap, take, takeUntil } from 'rxjs/operators';\n\nimport { nxContextMenuAnimations } from './context-menu-animations';\nimport { NxContextMenuContentDirective } from './context-menu-content.directive';\nimport { NxContextMenuItemComponent, NxContextMenuItemWrapComponent } from './context-menu-item.component';\n\n@Component({\n    selector: 'nx-context-menu',\n    templateUrl: './context-menu.component.html',\n    styleUrls: ['./context-menu.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'nxContextMenu',\n    animations: [nxContextMenuAnimations.transformContextMenu],\n})\nexport class NxContextMenuComponent implements AfterContentInit, OnDestroy {\n    private _keyManager!: FocusKeyManager<NxContextMenuItemComponent>;\n\n    @ContentChildren(NxContextMenuItemComponent)\n    private _items!: QueryList<NxContextMenuItemComponent>;\n\n    @ContentChild(NxContextMenuItemWrapComponent)\n    private _wrap!: NxContextMenuItemWrapComponent;\n\n    private _init: ReplaySubject<void> = new ReplaySubject(1);\n\n    /** Config object to be passed into the menu's ngClass */\n    _classList: { [key: string]: boolean } = {};\n\n    /** Current state of the panel animation. */\n    _panelAnimationState: 'void' | 'enter' = 'void';\n\n    /** Emits whenever an animation on the menu completes. */\n    _animationDone = new Subject<AnimationEvent>();\n\n    /** Whether the menu is animating. */\n    _isAnimating = false;\n\n    /** Parent menu of the current menu panel. */\n    parentMenu: NxContextMenuComponent | undefined;\n\n    /**\n     * @docs-private\n     * Layout direction of the menu.\n     */\n    direction: Direction = 'ltr';\n\n    /** @docs-private */\n    @ViewChild(TemplateRef)\n    templateRef!: TemplateRef<any>;\n\n    /**\n     * Menu content that will be rendered lazily.\n     * @docs-private\n     */\n    @ContentChild(NxContextMenuContentDirective)\n    lazyContent!: NxContextMenuContentDirective;\n\n    /** Event emitted when the menu is closed. */\n    @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> = new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n    private readonly _destroyed = new Subject<void>();\n\n    @HostListener('click')\n    private _onClick(event: Event) {\n        event.preventDefault();\n    }\n\n    constructor(private _ngZone: NgZone) {}\n\n    ngAfterContentInit() {\n        this._items = this._wrap ? this._wrap?._items : this._items;\n        this._keyManager = new FocusKeyManager<NxContextMenuItemComponent>(this._items).withWrap().withTypeAhead().setFocusOrigin('keyboard');\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => this.closed.emit('tab'));\n        this._init.next();\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.closed.complete();\n        this._init.complete();\n    }\n\n    /** Stream that emits whenever the hovered menu item changes. */\n    _hovered(): Observable<NxContextMenuItemComponent> {\n        return this._init.pipe(\n            switchMap(() => this._items.changes.pipe(startWith(this._items))),\n            switchMap((items: QueryList<NxContextMenuItemComponent>) => merge(...items.map(item => item._hovered))),\n        );\n    }\n\n    /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n    _handleKeydown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        const manager = this._keyManager;\n\n        switch (keyCode) {\n            case ESCAPE:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this.closed.emit('keydown');\n                }\n                break;\n            case LEFT_ARROW:\n                if (this.parentMenu && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parentMenu && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case HOME:\n            case END:\n                if (!hasModifierKey(event)) {\n                    keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n                    event.preventDefault();\n                }\n                break;\n            default:\n                manager.onKeydown(event);\n        }\n    }\n\n    /**\n     * Focus the first item in the menu.\n     */\n    focusFirstItem(origin?: FocusOrigin): void {\n        // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                this._keyManager.setFirstItemActive();\n                this._keyManager.activeItem?.focus(origin);\n            });\n    }\n\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n\n    /** Starts the enter animation. */\n    _startAnimation() {\n        this._panelAnimationState = 'enter';\n    }\n\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation() {\n        this._panelAnimationState = 'void';\n    }\n\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event: AnimationEvent) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    }\n\n    _onAnimationStart(event: AnimationEvent) {\n        this._isAnimating = true;\n\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the menu already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n}\n","<ng-template>\n    <div\n        class=\"nx-context-menu\"\n        [ngClass]=\"_classList\"\n        (keydown)=\"_handleKeydown($event)\"\n        (click)=\"closed.emit('click')\"\n        [@transformContextMenu]=\"_panelAnimationState\"\n        (@transformContextMenu.start)=\"_onAnimationStart($event)\"\n        (@transformContextMenu.done)=\"_onAnimationDone($event)\"\n        tabindex=\"-1\"\n        role=\"menu\"\n    >\n        <div class=\"nx-context-menu__content\">\n            <ng-content></ng-content>\n        </div>\n    </div>\n</ng-template>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n    selector: 'nx-context-menu-header',\n    template: '<ng-content></ng-content>',\n    host: {\n        class: 'nx-context-menu-header',\n    },\n    styleUrls: ['./context-menu-header.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxContextMenuHeaderComponent {}\n","/**\n * Throws an exception for the case when menu trigger doesn't have a valid nx-context-menu instance\n * @docs-private\n */\nexport function throwNxContextMenuMissingError() {\n    throw Error(`nxContextMenuTriggerFor: must pass in an nx-context-menu instance.\n    Example:\n      <nx-context-menu #contextMenu=\"nxContextMenu\"></nx-context-menu>\n      <button [nxContextMenuTriggerFor]=\"contextMenu\"></button>`);\n}\n","import { FocusOrigin } from '@angular/cdk/a11y';\nimport { Direction, Directionality } from '@angular/cdk/bidi';\nimport { LEFT_ARROW, RIGHT_ARROW } from '@angular/cdk/keycodes';\nimport { ConnectedPosition, FlexibleConnectedPositionStrategy, Overlay, OverlayConfig, OverlayRef, ScrollStrategy } from '@angular/cdk/overlay';\nimport { _getEventTarget } from '@angular/cdk/platform';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport {\n    AfterContentInit,\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    Self,\n    ViewContainerRef,\n} from '@angular/core';\nimport { NxTriggerButton } from '@aposin/ng-aquila/overlay';\nimport { asapScheduler, fromEvent, merge, Observable, of as observableOf, Subject, Subscription } from 'rxjs';\nimport { delay, filter, map, take, takeUntil } from 'rxjs/operators';\n\nimport { NxContextMenuComponent } from './context-menu.component';\nimport { throwNxContextMenuMissingError } from './context-menu-errors';\nimport { NxContextMenuItemComponent } from './context-menu-item.component';\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\nexport const MENU_PANEL_OFFSET_Y = 8;\n\nexport const MENU_PANEL_OFFSET_X = 8;\n\nexport type NxContextMenuScrollStrategy = 'close' | 'reposition';\n\nexport type NxContextMenuMode = 'button' | 'cursor';\n\n/** Injection token that determines the scroll handling while a context-menu is open. */\nexport const NX_CONTEXT_MENU_SCROLL_STRATEGY = new InjectionToken<() => ScrollStrategy>('nx-context-menu-scroll-strategy');\n\n/** @docs-private */\nexport function NX_CONTEXT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => ScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const NX_CONTEXT_MENU_SCROLL_STRATEGY_PROVIDER = {\n    provide: NX_CONTEXT_MENU_SCROLL_STRATEGY,\n    useFactory: NX_CONTEXT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n    deps: [Overlay],\n};\n\ninterface Point {\n    x: number;\n    y: number;\n}\n\n/**\n * This directive is intended to be used in conjunction with an nx-context-menu tag.\n * It is responsible for toggling the display of the provided context menu instance.\n */\n@Directive({\n    selector: `[nxContextMenuTriggerFor]`,\n    host: {\n        'aria-haspopup': 'true',\n        '[attr.aria-expanded]': 'contextMenuOpen || null',\n        '(mousedown)': '_handleMousedown($event)',\n        '(keydown)': '_handleKeydown($event)',\n        '(click)': '_handleClick($event)',\n        '(contextmenu)': '_handleRightClick($event)',\n    },\n    exportAs: 'nxContextMenuTrigger',\n})\nexport class NxContextMenuTriggerDirective implements AfterContentInit, OnDestroy {\n    private _portal!: TemplatePortal;\n    private _overlayRef: OverlayRef | null = null;\n    private _contextMenuOpen = false;\n    private _closingActionsSubscription = Subscription.EMPTY;\n    private _contextMenuCloseSubscription = Subscription.EMPTY;\n    private _documentClickObservable: Observable<MouseEvent>;\n\n    /** Strategy factory that will be used to handle scrolling while the context-menu panel is open. */\n    private _scrollStrategyFactory = this._defaultScrollStrategyFactory;\n\n    /** References the context menu instance that the trigger is associated with. */\n    @Input('nxContextMenuTriggerFor')\n    get contextMenu() {\n        return this._contextMenu;\n    }\n    set contextMenu(contextMenu: NxContextMenuComponent) {\n        if (contextMenu === this._contextMenu) {\n            return;\n        }\n\n        this._contextMenu = contextMenu;\n        this._contextMenuCloseSubscription.unsubscribe();\n\n        if (contextMenu) {\n            this._contextMenuCloseSubscription = contextMenu.closed.asObservable().subscribe(reason => {\n                this._destroyMenu();\n\n                // If a click closed the menu, we should close the entire chain of nested menus.\n                if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n                    this._parentMenu.closed.emit(reason);\n                }\n            });\n        }\n    }\n    private _contextMenu!: NxContextMenuComponent;\n\n    @Input()\n    set scrollStrategy(value: NxContextMenuScrollStrategy | null | undefined) {\n        if (this.#scrollStrategy !== value) {\n            this.#scrollStrategy = value;\n            this._scrollStrategyFactory = value ? this.getScrollStrtegyFactory(value) : this._defaultScrollStrategyFactory;\n            this._cdr.markForCheck();\n        }\n    }\n    get scrollStrategy(): NxContextMenuScrollStrategy | null | undefined {\n        return this.#scrollStrategy;\n    }\n    #scrollStrategy?: NxContextMenuScrollStrategy | null;\n\n    /** Whether the context menu is open. */\n    get contextMenuOpen(): boolean {\n        return this._contextMenuOpen;\n    }\n\n    /** The text direction of the containing app. */\n    private get dir(): Direction {\n        return this._dir?.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    /** Data to be passed along to any lazily-rendered content. */\n    @Input('nxContextMenuTriggerData') contextMenuData!: object;\n\n    /**\n     * Sets the mode of this context menu trigger.\n     * 'button' (default): Opens by clicking the trigger\n     * 'cursor': Opens at the cursor position by right clicking anywhere on the trigger.\n     */\n    @Input('nxContextMenuTriggerMode')\n    mode: NxContextMenuMode = 'button';\n\n    /** Event emitted when the associated context menu is opened. */\n    @Output() readonly contextMenuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event emitted when the associated context menu is closed. */\n    @Output() readonly contextMenuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n    private readonly _destroyed = new Subject<void>();\n\n    private _rightClicked = false;\n\n    constructor(\n        private _overlay: Overlay,\n        private _element: ElementRef<HTMLElement>,\n        private _viewContainerRef: ViewContainerRef,\n        @Optional() private _parentMenu: NxContextMenuComponent | null,\n        @Optional() @Self() private _contextMenuItemInstance: NxContextMenuItemComponent | null,\n        @Optional() private _dir: Directionality | null,\n        @Optional() @Self() private _triggerButton: NxTriggerButton | null,\n        @Inject(NX_CONTEXT_MENU_SCROLL_STRATEGY) private _defaultScrollStrategyFactory: () => ScrollStrategy,\n        private _cdr: ChangeDetectorRef,\n    ) {\n        if (_contextMenuItemInstance) {\n            _contextMenuItemInstance._triggersSubmenu = this.triggersSubmenu();\n        }\n        this._documentClickObservable = fromEvent<MouseEvent>(document, 'click');\n\n        this._dir?.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            if (this.contextMenuOpen) {\n                // HINT: closing menu on direction change.\n                // When user re-opens it, the overlay and menu will be initialized properly, based on new direction.\n                this.closeContextMenu();\n            }\n        });\n    }\n\n    ngAfterContentInit() {\n        this._checkContextMenu();\n        this._handleHover();\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n\n        this._contextMenuCloseSubscription.unsubscribe();\n        this._closingActionsSubscription.unsubscribe();\n    }\n\n    /** Whether the context menu triggers a sub-menu or a top-level one. */\n    triggersSubmenu(): boolean {\n        return !!(this._contextMenuItemInstance && this._parentMenu);\n    }\n\n    /** Toggles the context menu between the open and closed states. */\n    toggleContextMenu(origin?: FocusOrigin): void {\n        return this.contextMenuOpen ? this.closeContextMenu() : this.openContextMenu(origin);\n    }\n\n    /** Opens the context menu. */\n    openContextMenu(origin?: FocusOrigin, position?: Point): void {\n        if (this.contextMenuOpen) {\n            return;\n        }\n\n        this._checkContextMenu();\n\n        const overlayRef = this._createOverlay();\n        const overlayConfig = overlayRef.getConfig();\n\n        if (position) {\n            this._setPositionToCursor(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy, position);\n        } else {\n            this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n        }\n\n        overlayRef.attach(this._getPortal());\n\n        if (this.contextMenu.lazyContent) {\n            this.contextMenu.lazyContent.attach(this.contextMenuData);\n        }\n\n        this._closingActionsSubscription = this._contextMenuClosingActions().subscribe(() => this.closeContextMenu());\n\n        this._initContextMenu(origin);\n\n        if (this.contextMenu instanceof NxContextMenuComponent) {\n            this.contextMenu._startAnimation();\n        }\n\n        if (this._triggerButton) {\n            this._triggerButton.setTriggerActive();\n            this.contextMenu.closed.pipe(take(1)).subscribe(() => this._triggerButton?.setTriggerInactive());\n        }\n\n        this._waitForClose();\n    }\n\n    /** Closes the context menu. */\n    closeContextMenu(): void {\n        this._rightClicked = false;\n        this.contextMenu.closed.emit();\n    }\n\n    private getScrollStrtegyFactory(scrollStrategy: NxContextMenuScrollStrategy): () => ScrollStrategy {\n        switch (scrollStrategy) {\n            case 'close':\n                return this._overlay.scrollStrategies.close;\n            default:\n                return this._overlay.scrollStrategies.reposition;\n        }\n    }\n\n    /** Closes the context menu and does the necessary cleanup. */\n    private _destroyMenu() {\n        if (!this._overlayRef || !this.contextMenuOpen) {\n            return;\n        }\n\n        const contextMenu = this.contextMenu;\n\n        this._closingActionsSubscription.unsubscribe();\n        this._overlayRef.detach();\n\n        contextMenu._resetAnimation();\n\n        if (contextMenu.lazyContent) {\n            // Wait for the exit animation to finish before detaching the content.\n            contextMenu._animationDone\n                .pipe(\n                    filter(event => event.toState === 'void'),\n                    take(1),\n                    // Interrupt if the content got re-attached.\n                    takeUntil(contextMenu.lazyContent._attached),\n                )\n                .subscribe({\n                    next: () => contextMenu.lazyContent?.detach(),\n                    // No matter whether the content got re-attached, reset the menu.\n                    complete: () => this._resetContextMenu(),\n                });\n        } else {\n            this._resetContextMenu();\n        }\n    }\n\n    /**\n     * This method sets the context menu state to open and focuses the first item if\n     * the context menu was opened via the keyboard.\n     */\n    private _initContextMenu(origin?: FocusOrigin): void {\n        this.contextMenu.parentMenu = this.triggersSubmenu() ? this._parentMenu ?? undefined : undefined;\n        this.contextMenu.direction = this.dir;\n        this._setIsContextMenuOpen(true);\n        this.contextMenu.focusFirstItem(origin);\n    }\n\n    /**\n     * Focuses the context menu trigger.\n     */\n    focus() {\n        this._element.nativeElement.focus();\n    }\n\n    /**\n     * This method resets the context menu when it's closed, most importantly restoring\n     * focus to the context menu trigger if the context menu was opened via the keyboard.\n     */\n    private _resetContextMenu(): void {\n        this._setIsContextMenuOpen(false);\n        this.focus();\n    }\n\n    /** Set state rather than toggle to support triggers sharing a menu. */\n    private _setIsContextMenuOpen(isOpen: boolean): void {\n        this._contextMenuOpen = isOpen;\n        this._contextMenuOpen ? this.contextMenuOpened.emit() : this.contextMenuClosed.emit();\n\n        if (this.triggersSubmenu()) {\n            this._contextMenuItemInstance!._highlighted = isOpen;\n        }\n    }\n\n    /**\n     * This method checks that a valid instance of NxContextMenuComponent has been passed into\n     * nxContextMenuTriggerFor. If not, an exception is thrown.\n     */\n    private _checkContextMenu() {\n        if (!this.contextMenu) {\n            throwNxContextMenuMissingError();\n        }\n    }\n\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openContextMenu is called.\n     */\n    private _createOverlay(): OverlayRef {\n        if (!this._overlayRef) {\n            const config = this._getOverlayConfig();\n            this._overlayRef = this._overlay.create(config);\n\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            this._overlayRef.keydownEvents().pipe(takeUntil(this._destroyed)).subscribe();\n        }\n\n        return this._overlayRef;\n    }\n\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    private _getOverlayConfig(): OverlayConfig {\n        return new OverlayConfig({\n            positionStrategy: this._overlay\n                .position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withFlexibleDimensions(false)\n                .withTransformOriginOn('.nx-context-menu'),\n            scrollStrategy: this._scrollStrategyFactory(),\n            direction: this._dir ?? undefined,\n        });\n    }\n\n    /**\n     * Sets the position on a position strategy so the overlay is placed at the cursor.\n     * @param positionStrategy Strategy whose position to update.\n     * @param position Position of the cursor.\n     */\n    private _setPositionToCursor(positionStrategy: FlexibleConnectedPositionStrategy, cursorPosition: Point) {\n        positionStrategy.setOrigin(cursorPosition);\n        positionStrategy.withPositions([\n            {\n                overlayX: 'start',\n                overlayY: 'top',\n                originX: 'center',\n                originY: 'center',\n            },\n            {\n                overlayX: 'start',\n                overlayY: 'bottom',\n                originX: 'center',\n                originY: 'center',\n            },\n            {\n                overlayX: 'end',\n                overlayY: 'top',\n                originX: 'center',\n                originY: 'center',\n            },\n            {\n                overlayX: 'end',\n                overlayY: 'bottom',\n                originX: 'center',\n                originY: 'center',\n            },\n        ]);\n    }\n\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n        let originX = 'start';\n        let originFallbackX = 'end';\n        const overlayY = 'top';\n        const overlayFallbackY = 'bottom';\n        let originY = overlayY;\n        let originFallbackY = overlayFallbackY;\n        let overlayX = originX;\n        let overlayFallbackX = originFallbackX;\n        let offsetX = 0;\n        let offsetY = 0;\n\n        if (this.triggersSubmenu()) {\n            // When the menu is a sub-menu, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = 'end';\n            originFallbackX = overlayX = 'start';\n            offsetX = this.dir === 'rtl' ? -MENU_PANEL_OFFSET_X : MENU_PANEL_OFFSET_X;\n            offsetY = -MENU_PANEL_TOP_PADDING;\n        } else {\n            offsetY = MENU_PANEL_OFFSET_Y;\n            originY = 'bottom';\n            originFallbackY = 'top';\n        }\n\n        positionStrategy.withPositions([\n            { originX, originY, overlayX, overlayY, offsetX, offsetY },\n            {\n                originX: originFallbackX,\n                originY,\n                overlayX: overlayFallbackX,\n                overlayY,\n                offsetX: -offsetX,\n                offsetY,\n            },\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetX,\n                offsetY: -offsetY,\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetX: -offsetX,\n                offsetY: -offsetY,\n            },\n        ] as ConnectedPosition[]);\n    }\n\n    /**\n     * Returns a stream that emits whenever an action that should close the context menu occurs. */\n    private _contextMenuClosingActions() {\n        let backdrop: Observable<MouseEvent>;\n        let detachments: Observable<void>;\n\n        if (this._overlayRef) {\n            backdrop = this._overlayRef.backdropClick();\n            detachments = this._overlayRef.detachments();\n        }\n\n        const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n\n        const hover = this._parentMenu\n            ? this._parentMenu._hovered().pipe(\n                  filter(active => active !== this._contextMenuItemInstance),\n                  filter(() => this._contextMenuOpen),\n              )\n            : observableOf();\n\n        return merge(backdrop!, parentClose, hover, detachments!);\n    }\n\n    /** Handles mouse presses on the trigger. */\n    _handleMousedown(event: MouseEvent): void {\n        // Since right or middle button clicks won't trigger the `click` event,\n        // we shouldn't consider the menu as opened by mouse in those cases.\n        // this._openedBy = event.button === 0 ? 'mouse' : null;\n\n        // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n        // we should prevent focus from moving onto it via click to avoid the\n        // highlight from lingering on the menu item.\n        if (this.triggersSubmenu()) {\n            event.preventDefault();\n        }\n    }\n\n    _handleRightClick(event: MouseEvent) {\n        if (this.mode !== 'cursor') {\n            return;\n        }\n        this._rightClicked = true;\n\n        event.preventDefault();\n        if (this._contextMenuOpen) {\n            this.closeContextMenu();\n        }\n        const position = {\n            x: event.clientX,\n            y: event.clientY,\n        };\n        this.openContextMenu('mouse', position);\n    }\n\n    /** Handles key presses on the trigger. */\n    _handleKeydown(event: KeyboardEvent): void {\n        if (this.mode !== 'button') {\n            return;\n        }\n\n        const keyCode = event.keyCode;\n\n        if (this.triggersSubmenu() && ((keyCode === RIGHT_ARROW && this.dir === 'ltr') || (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this.openContextMenu('keyboard');\n        }\n    }\n\n    /** Handles click events on the trigger. */\n    _handleClick(event: MouseEvent): void {\n        if (this.mode !== 'button') {\n            return;\n        }\n        event.preventDefault();\n\n        const origin: FocusOrigin = event.detail ? 'program' : 'keyboard';\n\n        if (this.triggersSubmenu()) {\n            // Stop event propagation to avoid closing the parent menu.\n            event.stopPropagation();\n            this.openContextMenu(origin);\n        } else {\n            this.toggleContextMenu(origin);\n        }\n    }\n\n    /* Subscribes to document clicks to close the context menu on clicks on the background. */\n    private _waitForClose() {\n        if (this._rightClicked) {\n            return this._documentClickObservable\n                .pipe(\n                    filter(event => !event.defaultPrevented),\n                    takeUntil(this.contextMenu.closed),\n                )\n                .subscribe(() => {\n                    this.closeContextMenu();\n                });\n        }\n\n        return this._documentClickObservable\n            .pipe(\n                map(event => _getEventTarget(event)),\n                filter(target => !this._element.nativeElement.contains(target as Node | null)),\n                takeUntil(this.contextMenu.closed),\n            )\n            .subscribe(() => {\n                this.closeContextMenu();\n            });\n    }\n\n    /** Handles the cases where the user hovers over the trigger. */\n    private _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersSubmenu()) {\n            return;\n        }\n\n        this._parentMenu!._hovered()\n            // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n            // with different data and triggers), we have to delay it by a tick to ensure that\n            // it won't be closed immediately after it is opened.\n            .pipe(\n                filter(active => active === this._contextMenuItemInstance && !active.disabled),\n                delay(0, asapScheduler),\n                takeUntil(this._destroyed), // TODO this may not be sufficient, subscriptions may be piling up\n            )\n            .subscribe(() => {\n                // If the same menu is used between multiple triggers, it might still be animating\n                // while the new trigger tries to re-open it. Wait for the animation to finish\n                // before doing so. Also interrupt if the user moves to another item.\n                if (this.contextMenu._isAnimating) {\n                    // We need the `delay(0)` here in order to avoid\n                    // 'changed after checked' errors in some cases.\n                    this.contextMenu._animationDone\n                        .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu!._hovered()))\n                        .subscribe(() => this.openContextMenu('mouse'));\n                } else {\n                    this.openContextMenu('mouse');\n                }\n            });\n    }\n\n    /** Gets the portal that should be attached to the overlay. */\n    private _getPortal(): TemplatePortal {\n        // Note that we can avoid this check by keeping the portal on the context menu panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `NxContextMenuPanelComponent`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== this.contextMenu.templateRef) {\n            this._portal = new TemplatePortal(this.contextMenu.templateRef, this._viewContainerRef);\n        }\n\n        return this._portal;\n    }\n}\n","import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxIconModule } from '@aposin/ng-aquila/icon';\n\nimport { NxContextMenuComponent } from './context-menu.component';\nimport { NxContextMenuContentDirective } from './context-menu-content.directive';\nimport { NxContextMenuHeaderComponent } from './context-menu-header.component';\nimport { NxContextMenuItemComponent, NxContextMenuItemWrapComponent } from './context-menu-item.component';\nimport { NX_CONTEXT_MENU_SCROLL_STRATEGY_PROVIDER, NxContextMenuTriggerDirective } from './context-menu-trigger.directive';\n\nconst EXPORTED_MODULES = [\n    NxContextMenuComponent,\n    NxContextMenuContentDirective,\n    NxContextMenuItemComponent,\n    NxContextMenuItemWrapComponent,\n    NxContextMenuTriggerDirective,\n    NxContextMenuHeaderComponent,\n];\n\n@NgModule({\n    imports: [CommonModule, OverlayModule, NxIconModule],\n    exports: EXPORTED_MODULES,\n    declarations: EXPORTED_MODULES,\n    providers: [NX_CONTEXT_MENU_SCROLL_STRATEGY_PROVIDER],\n})\nexport class NxContextMenuModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1","observableOf"],"mappings":"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"}