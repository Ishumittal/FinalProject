{"version":3,"file":"aposin-ng-aquila-input.mjs","sources":["../../../projects/ng-aquila/src/input/input.directive.ts","../../../projects/ng-aquila/src/input/password-toggle.component.ts","../../../projects/ng-aquila/src/input/input.module.ts","../../../projects/ng-aquila/src/input/aposin-ng-aquila-input.ts"],"sourcesContent":["import { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { AutofillMonitor } from '@angular/cdk/text-field';\nimport { Directive, DoCheck, ElementRef, Inject, InjectionToken, Input, OnChanges, OnDestroy, OnInit, Optional, Self } from '@angular/core';\nimport { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { NxFormfieldControl } from '@aposin/ng-aquila/formfield';\nimport { ErrorStateMatcher } from '@aposin/ng-aquila/utils';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nexport const NX_INPUT_VALUE_ACCESSOR = new InjectionToken<{ value: any }>('NX_INPUT_VALUE_ACCESSOR');\n\nconst INVALID_TYPES = ['button', 'checkbox', 'file', 'hidden', 'image', 'radio', 'range', 'reset', 'submit'];\n\nconst NEVER_EMPTY = ['date', 'datetime', 'datetime-local', 'month', 'time', 'week'].filter(t => getSupportedInputTypes().has(t));\n\nlet nextUniqueId = 0;\n\n@Directive({\n    selector: 'input[nxInput], textarea[nxInput], select[nxInput]',\n    exportAs: 'nxInput',\n    host: {\n        '[class.c-input]': 'true',\n        '[class.nx-input]': 'true',\n        '[attr.id]': 'id',\n        '[class.is-filled]': 'empty === false',\n        '[class.is-disabled]': 'disabled',\n        '[class.has-error]': 'errorState',\n        '[class.is-focused]': 'focused',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.readonly]': 'readonly || null',\n        '[attr.required]': 'required || null',\n        '[attr.aria-label]': '_ariaLabel || null',\n        '[attr.aria-describedby]': '_ariaDescribedby || null',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.aria-required]': 'required.toString()',\n        '[attr.placeholder]': 'placeholder || null',\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(input)': '_onInput()',\n    },\n    providers: [{ provide: NxFormfieldControl, useExisting: NxInputDirective }],\n})\nexport class NxInputDirective implements OnInit, DoCheck, OnChanges, OnDestroy, NxFormfieldControl<any> {\n    protected _type = 'text';\n\n    protected _id!: string;\n    protected _uid = `nx-input-${nextUniqueId++}`;\n    protected _previousNativeValue: any;\n    protected _disabled = false;\n    protected _required = false;\n    private _readonly = false;\n    private _inputValueAccessor: { value: any };\n    _ariaDescribedby!: string;\n    private _placeholder!: string;\n\n    @Input('nxAriaLabel') _ariaLabel!: string;\n\n    /** @docs-private */\n    errorState = false;\n\n    /**\n     * Name of this control that is used inside the formfield component\n     * @docs-private\n     */\n    controlType = 'nx-input';\n\n    /**\n     * @docs-private\n     */\n    autofilled = false;\n\n    /** @docs-private */\n    stateChanges = new Subject<void>();\n\n    /** @docs-private */\n    focused = false;\n\n    /** The id of the input. */\n    @Input()\n    get id() {\n        return this._id;\n    }\n    set id(value: string) {\n        this._id = value || this._uid;\n    }\n\n    /** The input element's value. */\n    @Input()\n    get value(): any {\n        return this._inputValueAccessor.value;\n    }\n    set value(value: any) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n        }\n    }\n\n    /** Whether the element is readonly. */\n    @Input()\n    get readonly(): boolean {\n        return this._readonly;\n    }\n    set readonly(value: BooleanInput) {\n        this._readonly = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n\n    /** Whether the input is disabled. */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl?.disabled != null) {\n            return this.ngControl.disabled;\n        }\n        return this._disabled;\n    }\n    set disabled(value: BooleanInput) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Whether the element is required. */\n    @Input()\n    get required() {\n        return this._required;\n    }\n    set required(value: any) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    /** Sets the type of the input element (e.g. password, text etc). */\n    @Input()\n    get type() {\n        return this._type;\n    }\n    set type(value: string) {\n        this._type = value || 'text';\n        this._validateType();\n\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n\n    /**\n     * Sets the text for the input placeholder\n     */\n    @Input()\n    get placeholder() {\n        return this.empty ? this._placeholder : '';\n    }\n    set placeholder(value: string) {\n        this._placeholder = value;\n    }\n\n    private readonly _destroyed = new Subject<void>();\n\n    constructor(\n        protected _elementRef: ElementRef,\n        protected _platform: Platform,\n        /** @docs-private */ @Optional() @Self() public ngControl: NgControl | null,\n        @Optional() private _parentForm: NgForm | null,\n        @Optional() private _parentFormGroup: FormGroupDirective | null,\n        private _errorStateMatcher: ErrorStateMatcher,\n        @Optional() @Self() @Inject(NX_INPUT_VALUE_ACCESSOR) inputValueAccessor: { value: any } | null,\n        private _autofillMonitor: AutofillMonitor,\n    ) {\n        const id = this.id;\n        this.id = id; // invoke setter\n\n        // This will enable other directives to plugin itself as the value accessor\n        // by using the NX_INPUT_VALUE_ACCESSOR Token. Default is the given input field.\n        // TODO eliminate injected dateValueAccessor once we have intra-package support in ng-packagr\n        // See the datefield for details.\n        this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n        this._previousNativeValue = this.value;\n\n        if (this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea') {\n            this.controlType = 'textarea';\n        }\n    }\n\n    ngOnInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor\n                .monitor(this._elementRef.nativeElement)\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(event => {\n                    this.autofilled = event.isAutofilled;\n                    this.stateChanges.next();\n                });\n        }\n    }\n\n    /** @docs-private */\n    get elementRef(): ElementRef {\n        return this._elementRef;\n    }\n\n    _onInput() {\n        // force to to run change detection so we know about changes in the native form input\n    }\n\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused && !this.readonly) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.stateChanges.complete();\n\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n\n    /** @docs-private */\n    updateErrorState() {\n        const oldState = this.errorState;\n        const parent = this._parentFormGroup || this._parentForm;\n        const control = this.ngControl ? (this.ngControl.control as FormControl) : null;\n        const newState = this._errorStateMatcher.isErrorState(control, parent);\n\n        if (newState !== oldState) {\n            this.errorState = newState;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Set a list of ids that is currently describing this input\n     * (if you have hints and errors for example).\n     */\n    setDescribedByIds(ids: string[]) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n\n    // allow to set a arial label value in case there\n    // is not possibility to display a proper label\n    /**\n     * Method to set the aria label.\n     * This is required if you use the input outside of a formfield\n     * where you don't have a label connected.\n     */\n    setAriaLabel(value: string) {\n        this._ariaLabel = value;\n    }\n\n    protected _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n        return validity?.badInput;\n    }\n\n    /** @docs-private */\n    get empty(): boolean {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() && !this.autofilled;\n    }\n\n    protected _isNeverEmpty() {\n        return NEVER_EMPTY.includes(this._type);\n    }\n\n    protected _isTextarea() {\n        const nativeElement = this._elementRef.nativeElement;\n        return nativeElement.nodeName ? nativeElement.nodeName.toLowerCase() === 'textarea' : false;\n    }\n\n    protected _validateType() {\n        if (INVALID_TYPES.includes(this._type)) {\n            throw new Error(`Input of type '${this._type}' is not supported`);\n        }\n    }\n\n    /** @docs-private */\n    get shouldLabelFloat(): boolean {\n        return !!(this.focused || !this.empty || (this.placeholder && this.placeholder.length > 0));\n    }\n\n    protected _dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n}\n","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Input, OnDestroy } from '@angular/core';\n\nconst visibilityIcons = {\n    show: 'password-show-o',\n    hide: 'password-hide-o',\n};\n\n@Component({\n    selector: 'nx-password-toggle',\n    template: `<nx-icon aria-hidden=\"true\" [name]=\"_currentIcon\"> </nx-icon>`,\n    styleUrls: ['./password-toggle.component.scss'],\n    host: {\n        '[attr.aria-label]': 'ariaLabel',\n        '[attr.tabindex]': 'tabindex',\n        '[attr.aria-pressed]': '_pressed',\n        role: 'button',\n        '(click)': 'toggleInputType()',\n        '(keydown)': '_onKeydown($event)',\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxPasswordToggleComponent implements AfterViewInit, OnDestroy {\n    /** Input element using the toggle functionality. */\n    @Input() control!: HTMLInputElement;\n\n    /** @docs-private */\n    _currentIcon: string = visibilityIcons['show'];\n    /** @docs-private */\n    _pressed = false;\n    private _ariaLabel = 'Show password';\n\n    /** Sets the aria-label needed for accessibility.\n     * Notice that this `aria-label` should describe the initial action according to the status of the visibility.\n     * E.g if you have an `input[type=password]` at the beginning then the\n     * password will be hidden and the correct aria-label would be 'Show password.'\n     */\n    @Input()\n    set ariaLabel(value: string) {\n        if (value !== this._ariaLabel) {\n            this._ariaLabel = value;\n            this._cdr.markForCheck();\n        }\n    }\n    get ariaLabel(): string {\n        return this._ariaLabel;\n    }\n\n    constructor(private _cdr: ChangeDetectorRef, private _elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        this._focusMonitor.monitor(this._elementRef);\n    }\n\n    ngAfterViewInit() {\n        if (!this.control) {\n            console.warn('You need to pass an input as a control to the password toggle.');\n            return;\n        }\n        // show the right icon according to the initial type of the input\n        this._currentIcon = this.control.type === 'password' ? visibilityIcons['show'] : visibilityIcons['hide'];\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    /** Toggles the type of the input. */\n    toggleInputType(): void {\n        if (this.control) {\n            this.control.type = this.control.type === 'password' ? 'text' : 'password';\n            this._pressed = !this._pressed;\n            this.toggleIcon();\n            this._cdr.markForCheck();\n        }\n    }\n\n    /** @docs-private */\n    toggleIcon(): void {\n        this._currentIcon = this._currentIcon === visibilityIcons['show'] ? visibilityIcons['hide'] : visibilityIcons['show'];\n    }\n\n    /** @docs-private */\n    _onKeydown($event: KeyboardEvent) {\n        if ($event && ($event.keyCode === ENTER || $event.keyCode === SPACE)) {\n            this.toggleInputType();\n        }\n    }\n\n    /** @docs-private */\n    get tabindex(): number | null {\n        if (this.control) {\n            return this.control.disabled ? -1 : 0;\n        }\n        return null;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxFormfieldModule } from '@aposin/ng-aquila/formfield';\nimport { NxIconModule } from '@aposin/ng-aquila/icon';\n\nimport { NxInputDirective } from './input.directive';\nimport { NxPasswordToggleComponent } from './password-toggle.component';\n\n@NgModule({\n    imports: [CommonModule, NxFormfieldModule, NxIconModule],\n    declarations: [NxInputDirective, NxPasswordToggleComponent],\n    exports: [NxFormfieldModule, NxInputDirective, NxPasswordToggleComponent],\n})\nexport class NxInputModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1","i2"],"mappings":"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"}