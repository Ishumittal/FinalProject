import { coerceBooleanProperty } from '@angular/cdk/coercion';
import * as i0 from '@angular/core';
import { Directive, HostBinding, Input, Injectable, forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewChild, Output, NgModule } from '@angular/core';
import { getFontShorthand, mapClassNames, pad } from '@aposin/ng-aquila/utils';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule } from '@angular/forms';
import { MappedStyles } from '@aposin/ng-aquila/core';
import { Decimal } from 'decimal.js';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i2 from '@aposin/ng-aquila/button';
import { NxButtonModule } from '@aposin/ng-aquila/button';
import * as i3 from '@aposin/ng-aquila/icon';
import { NxIconModule } from '@aposin/ng-aquila/icon';
import * as i4 from '@angular/common';
import { CommonModule } from '@angular/common';
import { NxInputModule } from '@aposin/ng-aquila/input';

/** @docs-private */
class NxAutoResizeDirective {
    constructor(_element, _renderer, _cdr) {
        this._element = _element;
        this._renderer = _renderer;
        this._cdr = _cdr;
        this._resize = true;
        this.updateInputWidth = this.updateInputWidth.bind(this);
    }
    set resize(value) {
        this._resize = coerceBooleanProperty(value);
        if (this._resize) {
            this._addEventListener();
            this.updateInputWidth();
        }
        else {
            this._removeEventListener();
        }
    }
    get resize() {
        return this._resize;
    }
    ngAfterViewInit() {
        if (this.resize) {
            this._addEventListener();
        }
    }
    ngOnDestroy() {
        this._removeEventListener();
    }
    updateInputWidth() {
        const measureCanvas = this._renderer.createElement('canvas');
        const ctx = measureCanvas.getContext('2d');
        const styles = window.getComputedStyle(this._element.nativeElement);
        ctx.font = getFontShorthand(styles);
        const metrics = ctx.measureText(this._element.nativeElement.value);
        const padding = this.sumStyles(styles.paddingLeft, styles.paddingRight);
        const border = this.sumStyles(styles.borderLeftWidth, styles.borderRightWidth);
        // the pixels are needed, because despite the correct calculation the last pixels of a number are always cut
        const newWidth = metrics.width + padding + border + 16;
        // Limit to own given minimal width
        const parsed = parseFloat(styles.minWidth);
        this.width = Math.max(Number.isNaN(parsed) ? 0 : parsed, newWidth);
        // needed when the outer component is onPush
        this._cdr.markForCheck();
    }
    _addEventListener() {
        this._element.nativeElement.addEventListener('input', this.updateInputWidth, true);
        this._element.nativeElement.addEventListener('change', this.updateInputWidth, true);
    }
    _removeEventListener() {
        this._element.nativeElement.removeEventListener('input', this.updateInputWidth, true);
        this._element.nativeElement.removeEventListener('change', this.updateInputWidth, true);
    }
    sumStyles(left, right) {
        return (parseInt(left, 10) || 0) + (parseInt(right, 10) || 0);
    }
}
NxAutoResizeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxAutoResizeDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
NxAutoResizeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxAutoResizeDirective, selector: "input[nxAutoResize]", inputs: { resize: ["nxAutoResize", "resize"] }, host: { properties: { "style.width.px": "this.width" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxAutoResizeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[nxAutoResize]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { width: [{
                type: HostBinding,
                args: ['style.width.px']
            }], resize: [{
                type: Input,
                args: ['nxAutoResize']
            }] } });

class NxNumberStepperIntl {
    constructor() {
        /**
         * Stream that emits whenever the labels here are changed. Use this to notify
         * components if the labels have changed after initialization.
         */
        this.changes = new Subject();
        /** The aria label for the decrement '-' button */
        this.decrementAriaLabel = 'Decrement';
        /** The aria label for the increment '+' button */
        this.incrementAriaLabel = 'Increment';
    }
}
NxNumberStepperIntl.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNumberStepperIntl, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NxNumberStepperIntl.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNumberStepperIntl });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNumberStepperIntl, decorators: [{
            type: Injectable
        }] });

const SIZE_MAPPING = {
    big: 'nx-stepper--big',
    normal: '',
};
const DEFAULT_CLASSES = ['nx-stepper'];
const INPUT_CLASSES = ['nx-stepper__input'];
const ALLOWED_CHARACTERS = new RegExp(/^-?\d+(\.\d+)?$/g);
const CUSTOM_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NxNumberStepperComponent),
    multi: true,
};
const CUSTOM_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(() => NxNumberStepperComponent),
    multi: true,
};
let nextUniqueId = 0;
/**
 * `Input('nxSize') classNames` defines the size of the number stepper.
 * Values: big | normal. Default: normal
 */
class NxNumberStepperComponent extends MappedStyles {
    constructor(_cdr, _renderer, _elementRef, _intl) {
        super(SIZE_MAPPING, _elementRef, _renderer, DEFAULT_CLASSES);
        this._cdr = _cdr;
        this._intl = _intl;
        this._step = 1;
        this._min = 0;
        this._max = 100;
        this._value = 0;
        this._incrementAriaLabel = '';
        this._decrementAriaLabel = '';
        this._inputAriaLabel = '';
        this._resize = false;
        this._negative = false;
        this._leadingZero = true;
        this._disabled = false;
        /** @docs-private */
        this.inputClassNames = mapClassNames('regular', INPUT_CLASSES);
        /** @docs-private */
        this.inputId = `nx-number-stepper-${nextUniqueId++}`;
        /** @docs-private */
        this.ariaDescribedBy = null;
        /** An event emitted on value change. */
        this.valueChange = new EventEmitter();
        this._destroyed = new Subject();
        this.onChangeCallback = () => { };
        /** @docs-private */
        this.onTouchedCallback = () => { };
        this._intl.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._cdr.markForCheck());
    }
    /** Whether the input should be resized. Default: false */
    set resize(value) {
        this._resize = coerceBooleanProperty(value);
        this._cdr.markForCheck();
    }
    get resize() {
        return this._resize;
    }
    get label() {
        return this._label;
    }
    /** Defines the the label shown above the stepper input. */
    set label(value) {
        if (this._label !== value) {
            this._label = value;
            this._cdr.markForCheck();
        }
    }
    /** Sets the aria-label for the increment button. */
    set incrementAriaLabel(value) {
        this._incrementAriaLabel = value;
    }
    get incrementAriaLabel() {
        return this._incrementAriaLabel;
    }
    /** Sets the aria-label for the decrement button. */
    set decrementAriaLabel(value) {
        this._decrementAriaLabel = value;
    }
    get decrementAriaLabel() {
        return this._decrementAriaLabel;
    }
    /** Sets the aria-label for the input of the number stepper. */
    set inputAriaLabel(value) {
        this._inputAriaLabel = value;
    }
    get inputAriaLabel() {
        return this._inputAriaLabel;
    }
    /** Sets the step size. Default: 1 */
    set step(value) {
        // only internal changes no need to call markForCheck
        this._step = Number(value);
    }
    get step() {
        return this._step;
    }
    /** Sets the minimum accepted number. Default: 0 */
    set min(value) {
        this._min = Number(value);
    }
    get min() {
        return this._min;
    }
    /** Sets the maximum accepted number. Default: 100 */
    set max(value) {
        this._max = Number(value);
    }
    get max() {
        return this._max;
    }
    get value() {
        return this._value;
    }
    /** Sets the value of the number-stepper. */
    set value(value) {
        this._value = value;
        if (this._value) {
            this.setInputValue(this._value);
        }
        else {
            this.setInputValue(0);
        }
        this._cdr.markForCheck();
    }
    /** Whether the negative set of styling should be used. */
    set negative(value) {
        if (this._negative !== value) {
            this._negative = coerceBooleanProperty(value);
            this._cdr.markForCheck();
        }
    }
    get negative() {
        return this._negative;
    }
    /** Whether the number stepper value should have a leading zero.
     *
     * Default value is true.
     */
    set leadingZero(value) {
        if (this._leadingZero !== value) {
            this._leadingZero = coerceBooleanProperty(value);
            this.setInputValue(this.value);
            this._cdr.markForCheck();
        }
    }
    get leadingZero() {
        return this._leadingZero;
    }
    /** Whether the user input in the number stepper should be disabled.
     *
     * Default value is false.
     */
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
    }
    get disabled() {
        return this._disabled;
    }
    ngAfterViewInit() {
        if (this.ngContentWrapper) {
            this.ariaDescribedBy = this.ngContentWrapper.nativeElement.children.length > 0 ? `label-for-${this.inputId}` : '';
        }
        this.setInputValue(this._value);
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
    /** @docs-private */
    setInputValue(value) {
        const parsedValue = value ? value : 0;
        if (this.leadingZero) {
            this.numberInputValue = pad(parsedValue.toString(), 2);
        }
        else {
            this.numberInputValue = parsedValue.toString();
        }
        if (this.nativeInput) {
            // update the native input value with the transformed value.
            this.nativeInput.nativeElement.value = this.numberInputValue;
        }
        // use timeout to get the current value of numberInputValue
        setTimeout(() => {
            this.triggerResize();
        });
    }
    /* ControlValueAccessor Implementations */
    writeValue(value) {
        this.value = value;
    }
    registerOnChange(onChange) {
        this.onChangeCallback = onChange;
    }
    registerOnTouched(onTouched) {
        this.onTouchedCallback = onTouched;
    }
    /**
     * Disables the stepper. Part of the ControlValueAccessor interface required
     * to integrate with Angular's core forms API.
     *
     * @param isDisabled Sets whether the component is disabled.
     */
    setDisabledState(isDisabled) {
        this._disabled = isDisabled;
        this._cdr.markForCheck();
    }
    /** @docs-private */
    onInputChange(event) {
        if (this.validateUserInput(event.target.value)) {
            this._value = Number(event.target.value);
        }
        else {
            this._value = null;
        }
        // setInputValue() should be called so that numberInputValue is updated with the user input
        if (this._value !== null) {
            this.setInputValue(this._value);
        }
        this.valueChange.emit(this._value);
        this.onChangeCallback(this._value);
    }
    /** @docs-private */
    validateUserInput(input) {
        return !!input.match(ALLOWED_CHARACTERS);
    }
    /** @docs-private */
    incrementOnClick() {
        this._increment();
        this.onTouchedCallback();
    }
    /** @docs-private */
    incrementOnKey(event) {
        this._increment();
        event.preventDefault();
    }
    /** @docs-private */
    _increment() {
        let newValue;
        if (this.isBetweenLimits(this._value || 0)) {
            newValue = this.getNextGreaterValue(this._value || 0);
        }
        else {
            newValue = this.enforceLimits(this._value || 0);
        }
        this.value = newValue;
        this.setInputValue(this.value);
        this.valueChange.emit(this._value);
        this.onChangeCallback(this._value);
    }
    /** @docs-private */
    triggerResize() {
        if (this.resize) {
            this.autoResize.updateInputWidth();
            this._cdr.markForCheck();
        }
    }
    /** @docs-private */
    decrementOnClick() {
        this._decrement();
        this.onTouchedCallback();
    }
    /** @docs-private */
    decrementOnKey(event) {
        this._decrement();
        event.preventDefault();
    }
    /** @docs-private */
    _decrement() {
        let newValue;
        if (this.isBetweenLimits(this._value || 0)) {
            newValue = this.getNextLowerValue(this._value || 0);
        }
        else {
            newValue = this.enforceLimits(this._value || 0);
        }
        this.value = newValue;
        this.setInputValue(this.value);
        this.valueChange.emit(this._value);
        this.onChangeCallback(this._value);
    }
    /** @docs-private */
    enforceLimits(value) {
        if (value > this._max) {
            return this._max;
        }
        else if (value < this._min) {
            return this._min;
        }
        return value;
    }
    /** @docs-private */
    getNextLowerValue(start) {
        // if there is an invalid input start is null
        if (!start) {
            start = 0;
        }
        let next;
        if (this.isValidStep(start)) {
            next = new Decimal(start).minus(new Decimal(this._step)).toNumber();
        }
        else {
            next = new Decimal(start).toNearest(this._step, Decimal.ROUND_DOWN).toNumber();
        }
        return this.enforceLimits(next);
    }
    /** @docs-private */
    getNextGreaterValue(start) {
        let next;
        if (!start) {
            start = 0;
        }
        if (this.isValidStep(start)) {
            next = new Decimal(start).plus(new Decimal(this._step)).toNumber();
        }
        else {
            next = new Decimal(start).toNearest(this._step, Decimal.ROUND_UP).toNumber();
        }
        return this.enforceLimits(next);
    }
    /** @docs-private */
    isBetweenLimits(value) {
        return value <= this._max && value >= this._min;
    }
    /** @docs-private */
    isMinimum() {
        return this._value === this._min;
    }
    /** @docs-private */
    isMaximum() {
        return this._value === this._max;
    }
    /** @docs-private */
    isValidStep(value) {
        if (value === null) {
            value = new Decimal(0);
        }
        const min = new Decimal(this._min);
        const valueDec = new Decimal(value);
        const checkValue = min.minus(valueDec).mod(new Decimal(this._step)).toNumber();
        if (this.isBetweenLimits(value) && (this.isMinimum() || this.isMaximum() || checkValue === 0)) {
            return true;
        }
        return false;
    }
    /** @docs-private */
    userInputToNumber(value) {
        return parseInt(value, 10) || 0;
    }
    _validateFn() {
        // the manual user input must match min + n * step, e.g. minimum 1 step 2: 1, 3, 5, 7 etc.
        if (!this.isValidStep(this._value)) {
            return { nxNumberStepperStepError: 'Value is not a valid step' };
        }
        else if (this._value === null) {
            return { nxNumberStepperFormatError: 'Not a valid number' };
        }
        return null;
    }
    /** @docs-private */
    validate(c) {
        return this._validateFn();
    }
    get _buttonType() {
        return 'secondary' + (this.negative ? ' negative' : '');
    }
}
NxNumberStepperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNumberStepperComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.Renderer2 }, { token: i0.ElementRef }, { token: NxNumberStepperIntl }], target: i0.ɵɵFactoryTarget.Component });
NxNumberStepperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxNumberStepperComponent, selector: "nx-number-stepper", inputs: { classNames: ["nxSize", "classNames"], resize: ["nxResize", "resize"], label: ["nxLabel", "label"], incrementAriaLabel: "incrementAriaLabel", decrementAriaLabel: "decrementAriaLabel", inputAriaLabel: "inputAriaLabel", step: ["nxStep", "step"], min: ["nxMin", "min"], max: ["nxMax", "max"], value: ["nxValue", "value"], negative: "negative", leadingZero: "leadingZero", disabled: ["nxDisabled", "disabled"] }, outputs: { valueChange: "nxValueChange" }, host: { properties: { "class.is-negative": "negative", "class.is-disabled": "disabled" } }, providers: [CUSTOM_VALUE_ACCESSOR, CUSTOM_VALIDATOR], viewQueries: [{ propertyName: "ngContentWrapper", first: true, predicate: ["customLabel"], descendants: true }, { propertyName: "autoResize", first: true, predicate: NxAutoResizeDirective, descendants: true, static: true }, { propertyName: "nativeInput", first: true, predicate: ["nativeInput"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<div *ngIf=\"label\" class=\"nx-stepper__label\">\n    <label [for]=\"inputId\">\n        {{ label }}\n    </label>\n</div>\n<div class=\"nx-stepper__label\" #customLabel *ngIf=\"!label\" [id]=\"ariaDescribedBy\">\n    <ng-content></ng-content>\n</div>\n<div class=\"nx-stepper__input-container\">\n    <button\n        [attr.aria-label]=\"decrementAriaLabel || _intl.decrementAriaLabel\"\n        [nxButton]=\"_buttonType\"\n        class=\"nx-stepper__down nx-stepper__control\"\n        (click)=\"decrementOnClick()\"\n        [disabled]=\"disabled || (value || 0) <= min\"\n        type=\"button\"\n    >\n        <nx-icon name=\"minus\" size=\"s\"></nx-icon>\n    </button>\n    <div class=\"nx-stepper__input-wrapper\">\n        <div class=\"nx-stepper__inner-wrapper\">\n            <ng-content select=\"nx-number-stepper-prefix\"></ng-content>\n\n            <input\n                type=\"number\"\n                [nxAutoResize]=\"resize\"\n                [attr.aria-describedby]=\"ariaDescribedBy\"\n                [attr.aria-label]=\"inputAriaLabel\"\n                [id]=\"inputId\"\n                [ngClass]=\"inputClassNames\"\n                (input)=\"onInputChange($event)\"\n                (blur)=\"onTouchedCallback()\"\n                (keydown.arrowup)=\"incrementOnKey($event)\"\n                (keydown.arrowdown)=\"decrementOnKey($event)\"\n                #nativeInput\n                spellcheck=\"false\"\n                [disabled]=\"disabled\"\n            />\n\n            <ng-content select=\"nx-number-stepper-suffix\"></ng-content>\n        </div>\n        <div class=\"nx-stepper__input-underline\"></div>\n    </div>\n\n    <button\n        [attr.aria-label]=\"incrementAriaLabel || _intl.incrementAriaLabel\"\n        [nxButton]=\"_buttonType\"\n        class=\"nx-stepper__up nx-stepper__control\"\n        (click)=\"incrementOnClick()\"\n        [disabled]=\"disabled || (value || 0) >= max\"\n        type=\"button\"\n    >\n        <nx-icon name=\"plus\" size=\"s\"></nx-icon>\n    </button>\n</div>\n", styles: [":host{display:block}:host input::-webkit-outer-spin-button,:host input::-webkit-inner-spin-button{-webkit-appearance:none;margin:0}:host input[type=number]{-moz-appearance:textfield}:host input[type=number]:invalid{box-shadow:none}:host label:not(:empty)+.nx-stepper__input-container,:host .nx-stepper__label:not(:empty)+.nx-stepper__input-container{margin-top:12px}:host input{padding:0}.nx-stepper__input-container{align-items:flex-end;display:flex}.nx-stepper__label{display:flex;font-size:var(--number-stepper-label-font-size);line-height:var(--number-stepper-label-line-height);font-weight:var(--number-stepper-label-font-weight);letter-spacing:var(--number-stepper-label-letter-spacing)}.nx-stepper__control{width:32px;height:32px;min-height:32px;font-size:24px;margin:0;padding:0}.nx-stepper__input{width:56px;min-width:56px}.nx-stepper__input:disabled{color:var(--number-stepper-disabled-color);-webkit-text-fill-color:var(--number-stepper-disabled-color);cursor:not-allowed}.nx-stepper__input,::ng-deep .nx-stepper__prefix,::ng-deep .nx-stepper__suffix{font-size:var(--number-stepper-small-font-size);line-height:var(--number-stepper-small-line-height);font-weight:var(--number-stepper-small-font-weight);letter-spacing:var(--number-stepper-small-letter-spacing);color:var(--number-stepper-color);background:0 0;outline:0;border:0;text-align:center}::ng-deep .nx-stepper__suffix{margin-left:4px}:host-context([dir=rtl]) ::ng-deep .nx-stepper__suffix{margin-left:0;margin-left:initial;margin-right:4px}::ng-deep .nx-stepper__prefix{margin-right:4px}:host-context([dir=rtl]) ::ng-deep .nx-stepper__prefix{margin-right:0;margin-right:initial;margin-left:4px}.nx-stepper__input-wrapper{display:flex;align-items:center;flex-direction:column;margin:0 16px}.nx-stepper__inner-wrapper{height:28px;display:flex;align-items:baseline}.nx-stepper__input-underline{width:100%;margin-top:2px;height:2px;background:var(--number-stepper-underline-color)}.nx-stepper__input-underline--disabled{background:var(--number-stepper-disabled-underline-color)}:host.nx-stepper--big .nx-stepper__control{width:72px;min-height:48px;margin-bottom:0}:host.nx-stepper--big .nx-stepper__input{width:72px;min-width:72px}:host.nx-stepper--big .nx-stepper__input,:host.nx-stepper--big ::ng-deep .nx-stepper__prefix,:host.nx-stepper--big ::ng-deep .nx-stepper__suffix{font-size:var(--number-stepper-large-font-size);line-height:var(--number-stepper-large-line-height);font-weight:var(--number-stepper-large-font-weight);letter-spacing:var(--number-stepper-large-letter-spacing);height:48px;padding:0;margin-bottom:0}:host.nx-stepper--big .nx-stepper__input-wrapper{margin:0 24px}:host.nx-stepper--big .nx-stepper__input-underline{margin-top:-nx-spacer(4xs)}:host.nx-stepper--big .nx-stepper__inner-wrapper{height:48px}:host.is-negative .nx-stepper__label,:host.is-negative ::ng-deep .nx-stepper__prefix,:host.is-negative ::ng-deep .nx-stepper__suffix{color:var(--negative)}:host.is-negative .nx-stepper__input{color:var(--negative)}:host.is-negative .nx-stepper__input-underline{background:var(--negative)}:host.is-disabled .nx-stepper__input-underline{background:var(--number-stepper-disabled-underline-color)}:host.is-disabled ::ng-deep .nx-stepper__prefix,:host.is-disabled ::ng-deep .nx-stepper__suffix{color:var(--number-stepper-disabled-color)}@media screen and (-ms-high-contrast: active){button.nx-stepper__control:disabled{border-color:GrayText;color:GrayText;opacity:1}.nx-stepper__input{color:buttonText}.nx-stepper__input:disabled{color:GrayText;-webkit-text-fill-color:GrayText}::ng-deep .nx-stepper__prefix,::ng-deep .nx-stepper__suffix,:host.nx-stepper--big ::ng-deep .nx-stepper__prefix,:host.nx-stepper--big ::ng-deep .nx-stepper__suffix{-ms-high-contrast-adjust:none;color:windowText}.nx-stepper__inner-wrapper{background:buttonFace}.nx-stepper__input-underline,:host.is-negative .nx-stepper__input-underline{background:buttonText}:host.is-disabled .nx-stepper__input-underline{background:GrayText}:host.is-disabled ::ng-deep .nx-stepper__prefix,:host.is-disabled ::ng-deep .nx-stepper__suffix{color:GrayText}}\n"], components: [{ type: i2.NxButtonComponent, selector: "button[nxButton]", inputs: ["nxButton"] }, { type: i3.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: NxAutoResizeDirective, selector: "input[nxAutoResize]", inputs: ["nxAutoResize"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNumberStepperComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-number-stepper', changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['classNames: nxSize'], host: {
                        '[class.is-negative]': 'negative',
                        '[class.is-disabled]': 'disabled',
                    }, providers: [CUSTOM_VALUE_ACCESSOR, CUSTOM_VALIDATOR], template: "<div *ngIf=\"label\" class=\"nx-stepper__label\">\n    <label [for]=\"inputId\">\n        {{ label }}\n    </label>\n</div>\n<div class=\"nx-stepper__label\" #customLabel *ngIf=\"!label\" [id]=\"ariaDescribedBy\">\n    <ng-content></ng-content>\n</div>\n<div class=\"nx-stepper__input-container\">\n    <button\n        [attr.aria-label]=\"decrementAriaLabel || _intl.decrementAriaLabel\"\n        [nxButton]=\"_buttonType\"\n        class=\"nx-stepper__down nx-stepper__control\"\n        (click)=\"decrementOnClick()\"\n        [disabled]=\"disabled || (value || 0) <= min\"\n        type=\"button\"\n    >\n        <nx-icon name=\"minus\" size=\"s\"></nx-icon>\n    </button>\n    <div class=\"nx-stepper__input-wrapper\">\n        <div class=\"nx-stepper__inner-wrapper\">\n            <ng-content select=\"nx-number-stepper-prefix\"></ng-content>\n\n            <input\n                type=\"number\"\n                [nxAutoResize]=\"resize\"\n                [attr.aria-describedby]=\"ariaDescribedBy\"\n                [attr.aria-label]=\"inputAriaLabel\"\n                [id]=\"inputId\"\n                [ngClass]=\"inputClassNames\"\n                (input)=\"onInputChange($event)\"\n                (blur)=\"onTouchedCallback()\"\n                (keydown.arrowup)=\"incrementOnKey($event)\"\n                (keydown.arrowdown)=\"decrementOnKey($event)\"\n                #nativeInput\n                spellcheck=\"false\"\n                [disabled]=\"disabled\"\n            />\n\n            <ng-content select=\"nx-number-stepper-suffix\"></ng-content>\n        </div>\n        <div class=\"nx-stepper__input-underline\"></div>\n    </div>\n\n    <button\n        [attr.aria-label]=\"incrementAriaLabel || _intl.incrementAriaLabel\"\n        [nxButton]=\"_buttonType\"\n        class=\"nx-stepper__up nx-stepper__control\"\n        (click)=\"incrementOnClick()\"\n        [disabled]=\"disabled || (value || 0) >= max\"\n        type=\"button\"\n    >\n        <nx-icon name=\"plus\" size=\"s\"></nx-icon>\n    </button>\n</div>\n", styles: [":host{display:block}:host input::-webkit-outer-spin-button,:host input::-webkit-inner-spin-button{-webkit-appearance:none;margin:0}:host input[type=number]{-moz-appearance:textfield}:host input[type=number]:invalid{box-shadow:none}:host label:not(:empty)+.nx-stepper__input-container,:host .nx-stepper__label:not(:empty)+.nx-stepper__input-container{margin-top:12px}:host input{padding:0}.nx-stepper__input-container{align-items:flex-end;display:flex}.nx-stepper__label{display:flex;font-size:var(--number-stepper-label-font-size);line-height:var(--number-stepper-label-line-height);font-weight:var(--number-stepper-label-font-weight);letter-spacing:var(--number-stepper-label-letter-spacing)}.nx-stepper__control{width:32px;height:32px;min-height:32px;font-size:24px;margin:0;padding:0}.nx-stepper__input{width:56px;min-width:56px}.nx-stepper__input:disabled{color:var(--number-stepper-disabled-color);-webkit-text-fill-color:var(--number-stepper-disabled-color);cursor:not-allowed}.nx-stepper__input,::ng-deep .nx-stepper__prefix,::ng-deep .nx-stepper__suffix{font-size:var(--number-stepper-small-font-size);line-height:var(--number-stepper-small-line-height);font-weight:var(--number-stepper-small-font-weight);letter-spacing:var(--number-stepper-small-letter-spacing);color:var(--number-stepper-color);background:0 0;outline:0;border:0;text-align:center}::ng-deep .nx-stepper__suffix{margin-left:4px}:host-context([dir=rtl]) ::ng-deep .nx-stepper__suffix{margin-left:0;margin-left:initial;margin-right:4px}::ng-deep .nx-stepper__prefix{margin-right:4px}:host-context([dir=rtl]) ::ng-deep .nx-stepper__prefix{margin-right:0;margin-right:initial;margin-left:4px}.nx-stepper__input-wrapper{display:flex;align-items:center;flex-direction:column;margin:0 16px}.nx-stepper__inner-wrapper{height:28px;display:flex;align-items:baseline}.nx-stepper__input-underline{width:100%;margin-top:2px;height:2px;background:var(--number-stepper-underline-color)}.nx-stepper__input-underline--disabled{background:var(--number-stepper-disabled-underline-color)}:host.nx-stepper--big .nx-stepper__control{width:72px;min-height:48px;margin-bottom:0}:host.nx-stepper--big .nx-stepper__input{width:72px;min-width:72px}:host.nx-stepper--big .nx-stepper__input,:host.nx-stepper--big ::ng-deep .nx-stepper__prefix,:host.nx-stepper--big ::ng-deep .nx-stepper__suffix{font-size:var(--number-stepper-large-font-size);line-height:var(--number-stepper-large-line-height);font-weight:var(--number-stepper-large-font-weight);letter-spacing:var(--number-stepper-large-letter-spacing);height:48px;padding:0;margin-bottom:0}:host.nx-stepper--big .nx-stepper__input-wrapper{margin:0 24px}:host.nx-stepper--big .nx-stepper__input-underline{margin-top:-nx-spacer(4xs)}:host.nx-stepper--big .nx-stepper__inner-wrapper{height:48px}:host.is-negative .nx-stepper__label,:host.is-negative ::ng-deep .nx-stepper__prefix,:host.is-negative ::ng-deep .nx-stepper__suffix{color:var(--negative)}:host.is-negative .nx-stepper__input{color:var(--negative)}:host.is-negative .nx-stepper__input-underline{background:var(--negative)}:host.is-disabled .nx-stepper__input-underline{background:var(--number-stepper-disabled-underline-color)}:host.is-disabled ::ng-deep .nx-stepper__prefix,:host.is-disabled ::ng-deep .nx-stepper__suffix{color:var(--number-stepper-disabled-color)}@media screen and (-ms-high-contrast: active){button.nx-stepper__control:disabled{border-color:GrayText;color:GrayText;opacity:1}.nx-stepper__input{color:buttonText}.nx-stepper__input:disabled{color:GrayText;-webkit-text-fill-color:GrayText}::ng-deep .nx-stepper__prefix,::ng-deep .nx-stepper__suffix,:host.nx-stepper--big ::ng-deep .nx-stepper__prefix,:host.nx-stepper--big ::ng-deep .nx-stepper__suffix{-ms-high-contrast-adjust:none;color:windowText}.nx-stepper__inner-wrapper{background:buttonFace}.nx-stepper__input-underline,:host.is-negative .nx-stepper__input-underline{background:buttonText}:host.is-disabled .nx-stepper__input-underline{background:GrayText}:host.is-disabled ::ng-deep .nx-stepper__prefix,:host.is-disabled ::ng-deep .nx-stepper__suffix{color:GrayText}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.Renderer2 }, { type: i0.ElementRef }, { type: NxNumberStepperIntl }]; }, propDecorators: { ngContentWrapper: [{
                type: ViewChild,
                args: ['customLabel']
            }], autoResize: [{
                type: ViewChild,
                args: [NxAutoResizeDirective, { static: true }]
            }], nativeInput: [{
                type: ViewChild,
                args: ['nativeInput']
            }], valueChange: [{
                type: Output,
                args: ['nxValueChange']
            }], resize: [{
                type: Input,
                args: ['nxResize']
            }], label: [{
                type: Input,
                args: ['nxLabel']
            }], incrementAriaLabel: [{
                type: Input
            }], decrementAriaLabel: [{
                type: Input
            }], inputAriaLabel: [{
                type: Input
            }], step: [{
                type: Input,
                args: ['nxStep']
            }], min: [{
                type: Input,
                args: ['nxMin']
            }], max: [{
                type: Input,
                args: ['nxMax']
            }], value: [{
                type: Input,
                args: ['nxValue']
            }], negative: [{
                type: Input
            }], leadingZero: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: ['nxDisabled']
            }] } });

/** Directive used to pass a suffix to the number stepper. */
class NxNumberStepperPrefixDirective {
}
NxNumberStepperPrefixDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNumberStepperPrefixDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NxNumberStepperPrefixDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxNumberStepperPrefixDirective, selector: "nx-number-stepper-prefix", host: { classAttribute: "nx-stepper__prefix" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNumberStepperPrefixDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'nx-number-stepper-prefix',
                    host: {
                        class: 'nx-stepper__prefix',
                    },
                }]
        }] });

/** Directive used to pass a suffix to the number stepper. */
class NxNumberStepperSuffixDirective {
}
NxNumberStepperSuffixDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNumberStepperSuffixDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NxNumberStepperSuffixDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxNumberStepperSuffixDirective, selector: "nx-number-stepper-suffix", host: { classAttribute: "nx-stepper__suffix" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNumberStepperSuffixDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'nx-number-stepper-suffix',
                    host: {
                        class: 'nx-stepper__suffix',
                    },
                }]
        }] });

class NxNumberStepperModule {
}
NxNumberStepperModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNumberStepperModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NxNumberStepperModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNumberStepperModule, declarations: [NxNumberStepperComponent, NxAutoResizeDirective, NxNumberStepperPrefixDirective, NxNumberStepperSuffixDirective], imports: [NxInputModule, FormsModule, NxIconModule, NxButtonModule, CommonModule], exports: [NxNumberStepperComponent, NxAutoResizeDirective, NxNumberStepperPrefixDirective, NxNumberStepperSuffixDirective] });
NxNumberStepperModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNumberStepperModule, providers: [NxNumberStepperIntl], imports: [[NxInputModule, FormsModule, NxIconModule, NxButtonModule, CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNumberStepperModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [NxInputModule, FormsModule, NxIconModule, NxButtonModule, CommonModule],
                    exports: [NxNumberStepperComponent, NxAutoResizeDirective, NxNumberStepperPrefixDirective, NxNumberStepperSuffixDirective],
                    declarations: [NxNumberStepperComponent, NxAutoResizeDirective, NxNumberStepperPrefixDirective, NxNumberStepperSuffixDirective],
                    providers: [NxNumberStepperIntl],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { NxAutoResizeDirective, NxNumberStepperComponent, NxNumberStepperIntl, NxNumberStepperModule, NxNumberStepperPrefixDirective, NxNumberStepperSuffixDirective };
//# sourceMappingURL=aposin-ng-aquila-number-stepper.mjs.map
