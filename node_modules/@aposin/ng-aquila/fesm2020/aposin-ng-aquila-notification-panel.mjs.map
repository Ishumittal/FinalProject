{"version":3,"file":"aposin-ng-aquila-notification-panel.mjs","sources":["../../../projects/ng-aquila/src/notification-panel/notification-item/notification-item.component.ts","../../../projects/ng-aquila/src/notification-panel/notification-item/notification-item.component.html","../../../projects/ng-aquila/src/notification-panel/notification-item/notification-item-slots.ts","../../../projects/ng-aquila/src/notification-panel/notification-panel-trigger.directive.ts","../../../projects/ng-aquila/src/notification-panel/panel/notification-panel.component.ts","../../../projects/ng-aquila/src/notification-panel/panel/notification-panel.component.html","../../../projects/ng-aquila/src/notification-panel/notification-panel.module.ts","../../../projects/ng-aquila/src/notification-panel/aposin-ng-aquila-notification-panel.ts"],"sourcesContent":["import { FocusableOption, FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\nimport { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Component, ElementRef, Input, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Component({\n    selector: 'nx-notification-panel-item, [nxNotificationPanelItem]',\n    templateUrl: 'notification-item.component.html',\n    styleUrls: ['./notification-item.component.scss'],\n    host: {\n        '[class.nx-notification-item--read]': 'read',\n        '[class.nx-notification-item--clickable]': 'clickable',\n        tabindex: '0',\n        '(focus)': 'focus()',\n        '(blur)': '_blur()',\n    },\n})\nexport class NxNotificationPanelItemComponent implements FocusableOption, OnDestroy {\n    private _read = false;\n    private _clickable = true;\n    private _hasFocus = false;\n\n    focused = new Subject<NxNotificationPanelItemComponent>();\n\n    @Input()\n    set read(value: BooleanInput) {\n        this._read = coerceBooleanProperty(value);\n    }\n    get read() {\n        return this._read;\n    }\n\n    @Input()\n    set clickable(value: BooleanInput) {\n        this._clickable = coerceBooleanProperty(value);\n    }\n    get clickable() {\n        return this._clickable;\n    }\n\n    constructor(private _elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        this._focusMonitor.monitor(this._elementRef);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    focus(focusOrigin?: FocusOrigin) {\n        // the focus key manager calls this method with the focusOrigin\n        // property. if it is not set we know the focus comes from another source\n        // like the user using TAB to go through the list. Then we want to notify\n        // the focus manager about this change of focus.\n        if (typeof focusOrigin === 'undefined' && !this._hasFocus) {\n            this.focused.next(this);\n            this._hasFocus = true;\n            this._focusMonitor.focusVia(this._elementRef, 'keyboard');\n        }\n\n        if (!this._hasFocus) {\n            this._elementRef.nativeElement.focus();\n            this._hasFocus = true;\n        }\n    }\n\n    _blur() {\n        this._hasFocus = false;\n    }\n}\n","<ng-content select=\"nx-notification-item-metadata\"></ng-content>\n\n<ng-content select=\"nx-notification-item-content\"></ng-content>\n<ng-content></ng-content>\n\n<ng-content select=\"nx-notification-item-actions\"></ng-content>\n","import { Directive } from '@angular/core';\n\n@Directive({ selector: 'nx-notification-item-metadata' })\nexport class NxNotificationItemMetadataDirective {}\n\n@Directive({ selector: 'nx-notification-item-content' })\nexport class NxNotificationItemContentDirective {}\n\n@Directive({ selector: 'nx-notification-item-actions' })\nexport class NxNotificationItemActionsDirective {}\n\n@Directive({ selector: 'nx-notification-header' })\nexport class NxNotificationItemHeaderDirective {}\n","import { Overlay, ScrollStrategy } from '@angular/cdk/overlay';\nimport { Directive, ElementRef, Inject, InjectionToken, Input, Optional, Self, TemplateRef } from '@angular/core';\nimport { NxOverlayConfig, NxOverlayRef, NxOverlayService, NxTriggerButton } from '@aposin/ng-aquila/overlay';\nimport { take } from 'rxjs/operators';\n\n/** Injection token that determines the scroll handling while a notification-panel is open. */\nexport const NX_NOTIFICATION_PANEL_SCROLL_STRATEGY = new InjectionToken<() => ScrollStrategy>('nx-notification-panel-scroll-strategy');\n\n/** @docs-private */\nexport function NX_NOTIFICATION_PANEL_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => ScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const NX_NOTIFICATION_PANEL_SCROLL_STRATEGY_PROVIDER = {\n    provide: NX_NOTIFICATION_PANEL_SCROLL_STRATEGY,\n    useFactory: NX_NOTIFICATION_PANEL_SCROLL_STRATEGY_PROVIDER_FACTORY,\n    deps: [Overlay],\n};\n\nconst DEFAULT_CONFIG: NxOverlayConfig = {\n    direction: 'bottom-start',\n    fallbackOrientation: 'vertical',\n    autoFocus: true,\n    offset: 8,\n};\n\n@Directive({\n    selector: '[nxNotificationPanelTriggerFor]',\n    host: {\n        '(click)': 'open()',\n    },\n})\nexport class NxNotificationPanelTriggerDirective {\n    private _panelTemplate!: TemplateRef<any>;\n    private _overlayRef!: NxOverlayRef<any> | null;\n\n    @Input('nxNotificationPanelTriggerFor')\n    set notificationPanel(value: TemplateRef<any>) {\n        this._panelTemplate = value;\n    }\n    get notificationPanel() {\n        return this._panelTemplate;\n    }\n\n    /** Strategy factory that will be used to handle scrolling while the notification-panel panel is open. */\n    private _scrollStrategyFactory = this._defaultScrollStrategyFactory;\n\n    constructor(\n        private _nxOverlay: NxOverlayService,\n        private _element: ElementRef<HTMLElement>,\n        @Optional() @Self() private _triggerButton: NxTriggerButton | null,\n        @Inject(NX_NOTIFICATION_PANEL_SCROLL_STRATEGY) private _defaultScrollStrategyFactory: () => ScrollStrategy,\n    ) {}\n\n    open() {\n        if (this._overlayRef) {\n            return;\n        }\n        const config: NxOverlayConfig = { ...DEFAULT_CONFIG, scrollStrategy: this._scrollStrategyFactory(), triggerButton: this._triggerButton ?? undefined };\n        this._overlayRef = this._nxOverlay.open(this._panelTemplate, this._element, config);\n        this._overlayRef\n            .afterClosed()\n            .pipe(take(1))\n            .subscribe(() => this.close());\n    }\n\n    close() {\n        if (this._overlayRef) {\n            this._overlayRef.close();\n            this._overlayRef = null;\n        }\n    }\n}\n","import { FocusKeyManager } from '@angular/cdk/a11y';\nimport { AfterContentInit, Component, ContentChildren, OnDestroy, QueryList, TemplateRef, ViewChild } from '@angular/core';\nimport { merge, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { NxNotificationPanelItemComponent } from './../notification-item/notification-item.component';\n\n@Component({\n    selector: 'nx-notification-panel',\n    templateUrl: 'notification-panel.component.html',\n    styleUrls: ['./notification-panel.component.scss'],\n    exportAs: 'nxNotificationPanel',\n    host: {\n        '[class.nx-notification-panel]': 'true',\n        '(keydown)': '_handleKeydown($event)',\n    },\n})\nexport class NxNotificationPanelComponent implements OnDestroy, AfterContentInit {\n    @ViewChild(TemplateRef)\n    templateRef!: TemplateRef<any>;\n\n    @ContentChildren(NxNotificationPanelItemComponent, { descendants: true }) items!: QueryList<NxNotificationPanelItemComponent>;\n\n    private _keyManager!: FocusKeyManager<NxNotificationPanelItemComponent>;\n\n    private readonly _destroyed = new Subject<void>();\n\n    ngAfterContentInit() {\n        this._initKeyManager();\n    }\n\n    ngOnDestroy(): void {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n\n    private _initKeyManager() {\n        this._keyManager = new FocusKeyManager<NxNotificationPanelItemComponent>(this.items).withVerticalOrientation().withHorizontalOrientation('ltr');\n\n        if (this.items.length > 0) {\n            merge(...this.items.map(item => item.focused))\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(item => {\n                    this._keyManager.updateActiveItem(item);\n                });\n        }\n    }\n\n    _handleKeydown(event: KeyboardEvent) {\n        this._keyManager.onKeydown(event);\n    }\n}\n","<ng-content></ng-content>\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { NxOverlayModule } from '@aposin/ng-aquila/overlay';\n\nimport { NxNotificationPanelItemComponent } from './notification-item/notification-item.component';\nimport {\n    NxNotificationItemActionsDirective,\n    NxNotificationItemContentDirective,\n    NxNotificationItemHeaderDirective,\n    NxNotificationItemMetadataDirective,\n} from './notification-item/notification-item-slots';\nimport { NX_NOTIFICATION_PANEL_SCROLL_STRATEGY_PROVIDER, NxNotificationPanelTriggerDirective } from './notification-panel-trigger.directive';\nimport { NxNotificationPanelComponent } from './panel/notification-panel.component';\n\n@NgModule({\n    imports: [NxOverlayModule, RouterModule],\n    exports: [\n        NxNotificationPanelComponent,\n        NxNotificationPanelItemComponent,\n        NxNotificationPanelTriggerDirective,\n        NxNotificationItemActionsDirective,\n        NxNotificationItemContentDirective,\n        NxNotificationItemMetadataDirective,\n        NxNotificationItemHeaderDirective,\n    ],\n    declarations: [\n        NxNotificationPanelComponent,\n        NxNotificationPanelItemComponent,\n        NxNotificationPanelTriggerDirective,\n        NxNotificationItemActionsDirective,\n        NxNotificationItemContentDirective,\n        NxNotificationItemMetadataDirective,\n        NxNotificationItemHeaderDirective,\n    ],\n    providers: [NX_NOTIFICATION_PANEL_SCROLL_STRATEGY_PROVIDER],\n})\nexport class NxNotificationPanelModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}