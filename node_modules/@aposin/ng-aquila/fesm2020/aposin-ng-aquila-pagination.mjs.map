{"version":3,"file":"aposin-ng-aquila-pagination.mjs","sources":["../../../projects/ng-aquila/src/pagination/pagination-texts.ts","../../../projects/ng-aquila/src/pagination/pagination-utils.ts","../../../projects/ng-aquila/src/pagination/pagination.component.ts","../../../projects/ng-aquila/src/pagination/pagination.component.html","../../../projects/ng-aquila/src/pagination/pagination.module.ts","../../../projects/ng-aquila/src/pagination/aposin-ng-aquila-pagination.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\n/**\n * Interface for providing custom labels in a simple pagination.\n * With an implementation you can localize your pagination with the NX_PAGINATION_TEXTS injection token.\n */\nexport interface IPaginationTexts {\n    /** Label that should replace 'previous'. */\n    previous: string;\n\n    /** Label that should replace 'next'. */\n    next: string;\n\n    /** Label that should replace 'first'.\n     *\n     * Optional attribute needed only for the advanced pagination.\n     */\n    first?: string;\n\n    /** Label that should replace 'last'.\n     *\n     * Optional attribute needed only for the advanced pagination.\n     */\n    last?: string;\n\n    /** Label that should replace 'of'. */\n    ofLabel: string;\n\n    /** Label that should replace the aria label. */\n    ariaLabel: string;\n}\n\nexport const DefaultPaginationTexts = {\n    previous: 'Previous',\n    next: 'Next',\n    first: 'First',\n    last: 'Last',\n    ofLabel: 'of',\n    ariaLabel: 'Please select your page',\n};\n\n/** InjectionToken for pagination that can be used to override default locale code. */\nexport const NX_PAGINATION_TEXTS = new InjectionToken<IPaginationTexts>('nx-pagination-texts');\n","import { Injectable } from '@angular/core';\n\nimport { Page } from './pagination.component';\n\ninterface PaginationItem {\n    label: string | number;\n    value: number;\n    class: string;\n}\n\n/** @docs-private */\n@Injectable()\nexport class NxPaginationUtils {\n    private _pagesMobile = 3;\n    private _elipsisText = '...';\n    private _classExpanded = 'expanded-view';\n\n    getPages(currentPage: number, totalPages: number): Page[] {\n        let pages = [];\n        let start = [],\n            middle = [],\n            end = [];\n\n        // First array -> start\n        start = this.getStartArray(currentPage, totalPages);\n        // Second array -> middle\n        middle = this.getMiddleArray(currentPage, totalPages);\n        // Third array -> end\n        end = this.getEndArray(currentPage, totalPages);\n\n        pages = [...start, ...middle, ...end];\n\n        return pages;\n    }\n\n    getMiddleArray(currentPage: number, totalPages: number): any[] {\n        let pageNumber = currentPage < 6 ? 4 : currentPage - 1;\n        const middle = [];\n\n        while (middle.length < 3 && pageNumber >= 2 && pageNumber <= totalPages - 3 && pageNumber <= currentPage + 1 && pageNumber >= currentPage - 1) {\n            middle.push(this.createPaginationItem(pageNumber, pageNumber));\n            pageNumber++;\n        }\n        return middle;\n    }\n    getEndArray(currentPage: number, totalPages: number): any[] {\n        const end = [];\n        let currentItemToShow: number = totalPages <= 3 ? totalPages + 1 : totalPages <= 6 ? totalPages - (totalPages - 4) : totalPages - 2;\n        const showEllipsis = currentPage < totalPages - 4;\n\n        while (currentItemToShow <= totalPages) {\n            const endItem: PaginationItem =\n                end.length === 0 && showEllipsis\n                    ? this.createPaginationItem(this._elipsisText, currentItemToShow, true)\n                    : this.createPaginationItem(currentItemToShow, currentItemToShow, true);\n            end.push(endItem);\n            currentItemToShow++;\n        }\n\n        return end;\n    }\n    getStartArray(currentPage: number, totalPages: number): any[] {\n        let counterPages = 0;\n        const start = [];\n        const maxSizeArray = 3;\n\n        while (counterPages < maxSizeArray && counterPages < totalPages) {\n            const startItem =\n                counterPages === 2 && currentPage > 5\n                    ? this.createPaginationItem(this._elipsisText, counterPages, true)\n                    : this.createPaginationItem(counterPages + 1, counterPages + 1, true);\n\n            start.push(startItem);\n            counterPages++;\n        }\n\n        return start;\n    }\n\n    getMobilePages(currentPage: number, totalPages: number): any[] {\n        // if we have less pages than the number we want to display take all\n        if (totalPages < this._pagesMobile) {\n            return Array.from(Array(totalPages).keys()).map(item => this.createPaginationItem(item + 1, item + 1));\n        }\n\n        switch (currentPage) {\n            // first page active\n            case 1:\n                return [1, 2, 3].map(item => this.createPaginationItem(item, item));\n            // last page active\n            case totalPages:\n                return [totalPages - 2, totalPages - 1, totalPages].map(item => this.createPaginationItem(item, item));\n            // any other page active\n            default:\n                return [currentPage - 1, currentPage, currentPage + 1].map(item => this.createPaginationItem(item, item));\n        }\n    }\n\n    private createPaginationItem(label: string | number, value: number, classExpanded?: boolean): PaginationItem {\n        return { label, value, class: classExpanded ? this._classExpanded : '' };\n    }\n}\n","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    ViewChildren,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { DefaultPaginationTexts, IPaginationTexts, NX_PAGINATION_TEXTS } from './pagination-texts';\nimport { NxPaginationUtils } from './pagination-utils';\n\n/** @docs-private */\nexport interface Page {\n    label: string;\n    value: any;\n    class: string;\n}\n\n@Component({\n    selector: 'nx-pagination',\n    templateUrl: './pagination.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styleUrls: ['./pagination.component.scss'],\n})\nexport class NxPaginationComponent implements OnInit, AfterContentInit, AfterViewInit, OnDestroy {\n    @ViewChildren('link') _linkElements!: QueryList<ElementRef>;\n\n    /** Preserves the current value of the _linkElements ViewChildren in case _linkElements changes. */\n    _linkElementsPrevious!: QueryList<ElementRef>;\n\n    private _page!: number;\n    private _count!: number;\n    private _perPage!: number;\n    private _type = 'simple';\n\n    /** @docs-private */\n    paginationTexts: IPaginationTexts;\n\n    /** @docs-private */\n    totalNumberPages = 0;\n\n    get page(): number {\n        return this._page;\n    }\n\n    /** Sets the current page. */\n    @Input('nxPage') // the current page\n    set page(value: number) {\n        this._page = value;\n        this._cdr.markForCheck();\n    }\n    get count(): number {\n        return this._count;\n    }\n\n    /** Number of total items over all pages. */\n    @Input('nxCount') // how many total items there are in all pages\n    set count(value: number) {\n        this._count = value;\n        this.totalNumberPages = this.calculateTotalPages();\n        this._cdr.markForCheck();\n    }\n    get perPage(): number {\n        return this._perPage;\n    }\n\n    /** Sets the number of items you want to show per page. */\n    @Input('nxPerPage') // how many items we want to show per page\n    set perPage(value: number) {\n        this._perPage = value;\n        this.totalNumberPages = this.calculateTotalPages();\n        this._cdr.markForCheck();\n    }\n    get type(): string {\n        return this._type;\n    }\n\n    /**\n     * Determines the type of pagination.\n     *\n     * Values: simple | advanced, default: simple.\n     */\n    @Input('nxType')\n    set type(value: string) {\n        // type advanced or simple\n        this._type = value;\n        this._cdr.markForCheck();\n    }\n\n    /** An event emitted when the previous page button is clicked. */\n    @Output() nxGoPrev = new EventEmitter<void>();\n\n    /** An event emitted when the next page button is clicked */\n    @Output() nxGoNext = new EventEmitter<void>();\n\n    /**\n     * An event emitted when a page number is clicked.\n     * Provides the number of the page as parameter.\n     */\n    @Output() nxGoPage = new EventEmitter<number>();\n\n    private readonly _destroyed = new Subject<void>();\n\n    constructor(\n        @Optional() @Inject(NX_PAGINATION_TEXTS) paginationTexts: IPaginationTexts | null,\n        @Optional() private _dir: Directionality | null,\n        private paginationUtilsService: NxPaginationUtils,\n        private _cdr: ChangeDetectorRef,\n        private _focusMonitor: FocusMonitor,\n    ) {\n        this.paginationTexts = paginationTexts || DefaultPaginationTexts;\n\n        this._dir?.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this._cdr.detectChanges();\n        });\n    }\n\n    ngOnInit() {\n        this.totalNumberPages = this.calculateTotalPages();\n    }\n\n    ngAfterContentInit() {\n        if (this.type === 'advanced' && (!this.paginationTexts.last || !this.paginationTexts.first)) {\n            console.warn('Please define aria labels for the last and first arrows.');\n        }\n    }\n\n    ngAfterViewInit() {\n        this._linkElements.forEach(link => this._focusMonitor.monitor(link));\n        this._linkElementsPrevious = this._linkElements;\n        this._linkElements.changes.subscribe(_linkElements => {\n            this._linkElementsPrevious.forEach(link => this._focusMonitor.stopMonitoring(link));\n            this._linkElementsPrevious = this._linkElements;\n            this._linkElements.forEach(link => this._focusMonitor.monitor(link));\n        });\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._linkElements?.forEach(link => this._focusMonitor.stopMonitoring(link));\n    }\n\n    /** Returns the number of the first page. */\n    getMin(): number {\n        return this.totalNumberPages > 0 ? 1 : 0;\n    }\n\n    /** Returns the number of the last page. */\n    getMax(): number {\n        let max = this._perPage * this._page;\n        if (max > this._count) {\n            max = this._count;\n        }\n        return max;\n    }\n\n    /** Returns the total number of pages */\n    calculateTotalPages(): number {\n        return Math.ceil(this._count / this._perPage) || 0;\n    }\n\n    /** Directs to the page with number n. */\n    onPage(n: number): void {\n        this.nxGoPage.emit(n);\n    }\n\n    /** Directs to the previous page. */\n    onPrev(): void {\n        if (!this._isPaginationPreviousDisabled()) {\n            this.nxGoPrev.emit();\n        }\n    }\n\n    /** Directs to the next page. */\n    onNext(): void {\n        if (!this._isPaginationNextDisabled()) {\n            this.nxGoNext.emit();\n        }\n    }\n\n    /** Directs to the first page. */\n    onFirst() {\n        if (!this._isPaginationPreviousDisabled()) {\n            this.onPage(1);\n        }\n    }\n\n    /** Directs to the last page. */\n    onLast() {\n        if (!this._isPaginationNextDisabled()) {\n            this.onPage(this.totalNumberPages);\n        }\n    }\n\n    /** Returns if the current page is the last page. */\n    lastPage(): boolean {\n        return this._perPage * this._page >= this._count;\n    }\n\n    /** @docs-private */\n    getPages(): Page[] {\n        return this.paginationUtilsService.getPages(this._page, this.totalNumberPages);\n    }\n\n    /** @docs-private */\n    getMobilePages(): Page[] {\n        return this.paginationUtilsService.getMobilePages(this._page, this.totalNumberPages);\n    }\n\n    /** @docs-private */\n    getPaginationItemClasses(page: Page): object {\n        const classes = {\n            'is-ellipsis': page.label === '...',\n            'nx-pagination__item--expanded-view': page.class === 'expanded-view',\n        };\n        return classes;\n    }\n\n    /** @docs-private */\n    getPaginationNumberClasses(page: Page): object {\n        const classes = {\n            'is-active': page.value === this.page,\n            'nx-pagination__ellipsis': page.label === '...',\n            'nx-pagination__link': page.label !== '...',\n        };\n        return classes;\n    }\n\n    /** Returns true, if `nxCount` is greater than 0, else false. */\n    isPaginationVisible(): boolean {\n        return this.count > 0;\n    }\n\n    /** Returns true, if `nxCount` is greater than 0 and the type of pagination is 'simple', else false. */\n    isPaginationCompactVisible(): boolean {\n        return this.type.includes('simple') && this.count > 0;\n    }\n\n    /** @docs-private */\n    isPaginationContainerVisible(): boolean {\n        return this.type.includes('advanced');\n    }\n\n    _isPaginationPreviousDisabled(): boolean {\n        return this.page === this.getMin();\n    }\n\n    _isPaginationNextDisabled(): boolean {\n        return this.page === this.totalNumberPages;\n    }\n\n    get _isRTL(): boolean {\n        return this._dir?.value === 'rtl';\n    }\n}\n","<nav *ngIf=\"isPaginationVisible()\" aria-label=\"Page navigation\" class=\"nx-pagination\">\n    <ul *ngIf=\"isPaginationContainerVisible()\" [attr.aria-label]=\"paginationTexts.ariaLabel\" class=\"nx-pagination__container\">\n        <li class=\"nx-pagination__item\">\n            <button\n                #link\n                [disabled]=\"_isPaginationPreviousDisabled()\"\n                [attr.aria-label]=\"paginationTexts.first\"\n                [class.is-disabled]=\"_isPaginationPreviousDisabled()\"\n                class=\"nx-pagination__link nx-pagination__link--first\"\n                (click)=\"onFirst()\"\n            >\n                <nx-icon class=\"nx-pagination__arrow\" [name]=\"_isRTL ? 'arrow-last' : 'arrow-first'\"></nx-icon>\n            </button>\n        </li>\n        <li class=\"nx-pagination__item nx-pagination__item-previous\">\n            <button\n                #link\n                [disabled]=\"_isPaginationPreviousDisabled()\"\n                [attr.aria-label]=\"paginationTexts.previous\"\n                [class.is-disabled]=\"_isPaginationPreviousDisabled()\"\n                class=\"nx-pagination__link nx-pagination__link--previous\"\n                (click)=\"onPrev()\"\n            >\n                <nx-icon class=\"nx-pagination__arrow\" [name]=\"_isRTL ? 'arrow-right' : 'arrow-left'\"></nx-icon>\n            </button>\n        </li>\n        <li *ngFor=\"let pageNum of getPages()\" class=\"nx-pagination__item nx-pagination__item--desktop\" [ngClass]=\"getPaginationItemClasses(pageNum)\">\n            <button\n                #link\n                class=\"nx-pagination--number\"\n                *ngIf=\"pageNum.label !== '...'\"\n                (click)=\"onPage(pageNum.value)\"\n                [attr.aria-current]=\"pageNum.value === page ? 'page' : ''\"\n                [ngClass]=\"getPaginationNumberClasses(pageNum)\"\n            >\n                {{ pageNum.label }}\n            </button>\n            <span *ngIf=\"pageNum.label === '...'\">\n                {{ pageNum.label }}\n            </span>\n        </li>\n        <li *ngFor=\"let pageNum of getMobilePages()\" class=\"nx-pagination__item nx-pagination__item--mobile\" [ngClass]=\"getPaginationItemClasses(pageNum)\">\n            <button\n                #link\n                class=\"nx-pagination--number\"\n                (click)=\"onPage(pageNum.value)\"\n                [attr.aria-current]=\"pageNum.value === page ? 'page' : ''\"\n                [ngClass]=\"getPaginationNumberClasses(pageNum)\"\n            >\n                {{ pageNum.label }}\n            </button>\n        </li>\n        <li class=\"nx-pagination__item nx-pagination__item-next\">\n            <button\n                #link\n                [disabled]=\"_isPaginationNextDisabled()\"\n                [attr.aria-label]=\"paginationTexts.next\"\n                [class.is-disabled]=\"_isPaginationNextDisabled()\"\n                class=\"nx-pagination__link nx-pagination__link--next\"\n                (click)=\"onNext()\"\n            >\n                <nx-icon class=\"nx-pagination__arrow\" [name]=\"_isRTL ? 'arrow-left' : 'arrow-right'\"></nx-icon>\n            </button>\n        </li>\n        <li class=\"nx-pagination__item\">\n            <button\n                #link\n                [disabled]=\"_isPaginationNextDisabled()\"\n                [attr.aria-label]=\"paginationTexts.last\"\n                [class.is-disabled]=\"_isPaginationNextDisabled()\"\n                class=\"nx-pagination__link nx-pagination__link--last\"\n                (click)=\"onLast()\"\n            >\n                <nx-icon class=\"nx-pagination__arrow\" [name]=\"_isRTL ? 'arrow-first' : 'arrow-last'\"></nx-icon>\n            </button>\n        </li>\n    </ul>\n</nav>\n<nav *ngIf=\"isPaginationCompactVisible()\" [attr.aria-label]=\"paginationTexts.ariaLabel\" class=\"nx-pagination-compact\">\n    <button\n        #link\n        [attr.aria-label]=\"paginationTexts.previous\"\n        class=\"nx-pagination-compact__previous\"\n        [disabled]=\"_isPaginationPreviousDisabled()\"\n        [class.is-disabled]=\"_isPaginationPreviousDisabled()\"\n        (click)=\"onPrev()\"\n    >\n        <nx-icon class=\"nx-pagination__arrow\" [name]=\"_isRTL ? 'arrow-right' : 'arrow-left'\"></nx-icon>\n        <span class=\"nx-pagination-compact__direction-label\">\n            {{ paginationTexts.previous }}\n        </span>\n    </button>\n    <div class=\"nx-pagination-compact__display\">\n        <span class=\"nx-pagination-compact__current-page\">{{ page }}</span>\n        <span class=\"nx-pagination-compact__page-separator\"> {{ paginationTexts.ofLabel }} </span>\n        <span class=\"nx-pagination-compact__total-pages\">{{ totalNumberPages }}</span>\n    </div>\n    <button\n        #link\n        class=\"nx-pagination-compact__next\"\n        [disabled]=\"_isPaginationNextDisabled()\"\n        [class.is-disabled]=\"_isPaginationNextDisabled()\"\n        [attr.aria-label]=\"paginationTexts.next\"\n        (click)=\"onNext()\"\n    >\n        <span class=\"nx-pagination-compact__direction-label\"> {{ paginationTexts.next }} </span>\n        <nx-icon class=\"nx-pagination__arrow\" [name]=\"_isRTL ? 'arrow-left' : 'arrow-right'\"></nx-icon>\n    </button>\n</nav>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxIconModule } from '@aposin/ng-aquila/icon';\n\nimport { NxPaginationComponent } from './pagination.component';\nimport { NxPaginationUtils } from './pagination-utils';\n\n@NgModule({\n    imports: [CommonModule, NxIconModule],\n    declarations: [NxPaginationComponent],\n    exports: [NxPaginationComponent],\n    providers: [NxPaginationUtils],\n})\nexport class NxPaginationModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i2.NxPaginationUtils"],"mappings":"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"}