import * as i0 from '@angular/core';
import { Component, ChangeDetectionStrategy, InjectionToken, EventEmitter, Optional, Self, Inject, ContentChildren, ViewChild, Output, Input, HostBinding, NgModule } from '@angular/core';
import * as i1 from '@angular/cdk/a11y';
import * as i5 from '@angular/common';
import { CommonModule } from '@angular/common';
import { NxErrorComponent, NxErrorModule } from '@aposin/ng-aquila/base';
import { NxCheckboxModule } from '@aposin/ng-aquila/checkbox';
import * as i4 from '@aposin/ng-aquila/icon';
import { NxIconModule } from '@aposin/ng-aquila/icon';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i1$1 from '@aposin/ng-aquila/utils';
import * as i2 from '@angular/forms';

class NxCardComponent {
    constructor(_elementRef, _focusMonitor) {
        this._elementRef = _elementRef;
        this._focusMonitor = _focusMonitor;
        // we still listen for focus in case the user set a tabindex on the element
        // the focus monitor only adds the cdk-keyboard-focus class if the element is focusable
        // meaning it needs a tabindex in this case
        this._focusMonitor.monitor(this._elementRef);
    }
    ngOnDestroy() {
        this._focusMonitor.stopMonitoring(this._elementRef);
    }
}
NxCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxCardComponent, deps: [{ token: i0.ElementRef }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });
NxCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxCardComponent, selector: "nx-card", host: { classAttribute: "nx-card" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [":host{background:var(--card-background-color);border-color:var(--card-border-color);border-width:var(--card-border-width);border-style:solid;border-radius:var(--card-border-radius);box-shadow:none;display:inline-block;padding:23px;transition:background-color .2s ease,box-shadow .2s ease}:host:hover,:host:focus{outline:none}:host.cdk-keyboard-focused{box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){:host.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxCardComponent, decorators: [{
            type: Component,
            args: [{ template: '<ng-content></ng-content>', selector: 'nx-card', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        class: 'nx-card',
                    }, styles: [":host{background:var(--card-background-color);border-color:var(--card-border-color);border-width:var(--card-border-width);border-style:solid;border-radius:var(--card-border-radius);box-shadow:none;display:inline-block;padding:23px;transition:background-color .2s ease,box-shadow .2s ease}:host:hover,:host:focus{outline:none}:host.cdk-keyboard-focused{box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){:host.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.FocusMonitor }]; } });

/**
 * @deprecated Place all your content directly into the <nx-card> or <nx-selectable-card> instead.
 * @deletion-target 13.0.0
 */
class NxCardFooterComponent {
}
NxCardFooterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxCardFooterComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
NxCardFooterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxCardFooterComponent, selector: "nx-card-footer", ngImport: i0, template: "<ng-content></ng-content>\n", changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxCardFooterComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-card-footer', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-content></ng-content>\n" }]
        }] });

/**
 * @deprecated Place all your content directly into the <nx-card> or <nx-selectable-card> instead.
 * @deletion-target 13.0.0
 */
class NxCardHeaderComponent {
}
NxCardHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxCardHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
NxCardHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxCardHeaderComponent, selector: "nx-card-header", ngImport: i0, template: "<ng-content></ng-content>\n", changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxCardHeaderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-card-header', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-content></ng-content>\n" }]
        }] });

class NxSelectableCardChangeEvent {
    constructor(
    /** The checked value of the selectable card. */
    checked, 
    /** The value of the selectable card. */
    value, 
    /** The component instance of the selectable card which emitted the change event. */
    card) {
        this.checked = checked;
        this.value = value;
        this.card = card;
    }
}

let nextId = 0;
const SELECTABLE_CARD_DEFAULT_OPTIONS = new InjectionToken('SELECTABLE_CARD_DEFAULT_OPTIONS');
class NxSelectableCardComponent {
    constructor(_cdr, _errorStateMatcher, ngControl, _parentForm, _parentFormGroup, _focusMonitor, _defaultOptions) {
        this._cdr = _cdr;
        this._errorStateMatcher = _errorStateMatcher;
        this.ngControl = ngControl;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this._focusMonitor = _focusMonitor;
        this._defaultOptions = _defaultOptions;
        this._id = `nx-selectable-card-${nextId++}`;
        this._checked = false;
        this._disabled = false;
        this._value = '';
        this._name = '';
        this._negative = false;
        this._tabindex = '0';
        this._errorListIds = '';
        this._errorState = false;
        /** An event is dispatched each time the selectable card value is changed */
        this.selectionChange = new EventEmitter();
        /** An event is dispatched each time the selectable card value is changed */
        this.checkedChange = new EventEmitter();
        this._destroyed = new Subject();
        /** @docs-private */
        this.onChangeCallback = (_) => { };
        this.onTouchedCallback = (_) => { };
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
    }
    /**
     * ** Expert option **
     *
     * Sets the appearance of the small stage. Default: 'default'
     */
    set appearance(value) {
        if (value !== this.appearance) {
            this._appearance = value;
            this._cdr.markForCheck();
        }
    }
    get appearance() {
        return this._appearance || this._defaultOptions?.appearance || 'default';
    }
    /**
     * Id of the selectable card.
     *
     * If not set, the selectable card gets an incremented value by default.
     */
    set id(value) {
        if (value !== this._id) {
            this._id = value;
            this._cdr.markForCheck();
        }
    }
    get id() {
        return this._id;
    }
    /** Whether the selectable card  is checked. */
    set checked(value) {
        const newValue = coerceBooleanProperty(value);
        if (newValue !== this._checked) {
            this._checked = newValue;
            this._cdr.markForCheck();
        }
    }
    get checked() {
        return this._checked;
    }
    /** The value attribute of the native input element  */
    get value() {
        return this._value;
    }
    set value(value) {
        if (value) {
            this._value = value;
        }
        this._cdr.markForCheck();
    }
    /** Whether the selectable card is disabled. */
    set disabled(value) {
        const newValue = coerceBooleanProperty(value);
        if (newValue !== this._disabled) {
            this._disabled = newValue;
            this._cdr.markForCheck();
        }
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * Whether the selectable card is negative.
     * @deprecated Obsolete as negative state is not implemented.
     * @deletion-target 12.0.0
     */
    set negative(value) {
        const newValue = coerceBooleanProperty(value);
        if (newValue !== this._negative) {
            this._negative = newValue;
            this._cdr.markForCheck();
        }
    }
    get negative() {
        return this._negative;
    }
    /** Whether the selectable card is required. */
    get required() {
        return !!this._required;
    }
    set required(value) {
        this._required = coerceBooleanProperty(value);
    }
    /** Name of the selectable card. */
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    /** The tabindex of the selectable card. */
    get tabindex() {
        if (this.disabled) {
            return '-1';
        }
        return this._tabindex;
    }
    set tabindex(value) {
        this._tabindex = value;
    }
    get _isExpert() {
        return this.appearance === 'expert';
    }
    ngAfterViewInit() {
        this._focusMonitor.monitor(this._nativeInput);
    }
    ngAfterContentInit() {
        this._errorList.changes.pipe(takeUntil(this._destroyed)).subscribe(() => {
            this._errorListIds = this._getErrorListIds();
            this._cdr.markForCheck();
        });
        this._errorListIds = this._getErrorListIds();
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this._focusMonitor.stopMonitoring(this._nativeInput);
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(onTouched) {
        this.onTouchedCallback = onTouched;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    writeValue(value) {
        this.checked = !!value;
    }
    ngDoCheck() {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribed to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this._updateErrorState();
        }
    }
    _updateErrorState() {
        const oldState = this._errorState;
        const parent = this._parentFormGroup || this._parentForm;
        const control = this.ngControl ? this.ngControl.control : null;
        const newState = this._errorStateMatcher.isErrorState(control, parent);
        if (newState !== oldState) {
            this._errorState = newState;
            this._cdr.markForCheck();
        }
    }
    /** Toggles the checked state of the selectable card . */
    toggle() {
        if (!this.disabled) {
            this.checked = !this.checked;
        }
    }
    _onInputClick(event) {
        // We have to stop propagation for click events on the visual hidden input element.
        // By default, when a user clicks on a label element, a generated click event will be
        // stop the propagation of the native click on the checkbox input so that a click is not triggered twice
        // Preventing bubbling for the second event will solve that issue.
        event.stopPropagation();
        if (!this.disabled) {
            this.toggle();
            this._emitChangeEvent();
        }
    }
    _onInteractionEvent(event) {
        // We always have to stop propagation on the change event.
        // Otherwise the change event, from the input element, will bubble up and
        // emit its event object to the `change` output.
        event.stopPropagation();
    }
    _emitChangeEvent() {
        const event = new NxSelectableCardChangeEvent(this.checked, this.value, this);
        this.onChangeCallback(this.checked);
        this.selectionChange.emit(event);
        this.checkedChange.emit(this.checked);
    }
    _getErrorListIds() {
        return this._errorList.map((errorItem) => errorItem.id).join(' ');
    }
}
NxSelectableCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSelectableCardComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1$1.ErrorStateMatcher }, { token: i2.NgControl, optional: true, self: true }, { token: i2.NgForm, optional: true }, { token: i2.FormGroupDirective, optional: true }, { token: i1.FocusMonitor }, { token: SELECTABLE_CARD_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NxSelectableCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxSelectableCardComponent, selector: "nx-selectable-card", inputs: { appearance: "appearance", id: "id", checked: "checked", value: "value", disabled: "disabled", negative: "negative", required: "required", name: "name", tabindex: "tabindex" }, outputs: { selectionChange: "selectionChange", checkedChange: "checkedChange" }, host: { attributes: { "attr.role": "checkbox" }, properties: { "class.is-disabled": "disabled", "class.has-error": "_errorState", "attr.aria-invalid": "_errorState", "attr.aria-checked": "checked", "class.is-expert": "this._isExpert" } }, queries: [{ propertyName: "_errorList", predicate: NxErrorComponent }], viewQueries: [{ propertyName: "_nativeInput", first: true, predicate: ["input"], descendants: true }], ngImport: i0, template: "<input\n    #input\n    type=\"checkbox\"\n    [checked]=\"checked\"\n    [value]=\"value || null\"\n    [attr.disabled]=\"disabled || null\"\n    (change)=\"_onInteractionEvent($event)\"\n    (blur)=\"onTouchedCallback($event)\"\n    [attr.id]=\"id\"\n    [attr.name]=\"name\"\n    (click)=\"_onInputClick($event)\"\n    [required]=\"required\"\n    [attr.aria-required]=\"required\"\n    [attr.tabindex]=\"tabindex\"\n    [attr.aria-invalid]=\"_errorState\"\n    [attr.aria-describedby]=\"_errorListIds || null\"\n/>\n\n<label [attr.for]=\"id\">\n    <span class=\"checkbox\" *ngIf=\"appearance === 'default'; else expert\">\n        <nx-icon *ngIf=\"checked\" name=\"check\" aria-hidden=\"true\"></nx-icon>\n    </span>\n\n    <div class=\"content\">\n        <ng-content select=\"nx-card-header\"></ng-content>\n        <ng-content></ng-content>\n        <ng-content select=\"nx-card-footer\"></ng-content>\n    </div>\n</label>\n\n<ng-content *ngIf=\"_errorState\" select=\"nx-error\"></ng-content>\n\n<ng-template #expert>\n    <nx-icon name=\"check-circle\" size=\"s\" aria-hidden=\"true\" class=\"checkmark\"> </nx-icon>\n</ng-template>\n", styles: [":host{display:block}:host ::ng-deep nx-error{margin-top:8px}:host ::ng-deep nx-error.nx-error--message{margin-top:12px}::ng-deep nx-card-footer,::ng-deep nx-card-content,::ng-deep nx-card-header{display:block}.checkmark{float:right;position:relative;color:var(--selectable-card-icon-color)}:host-context([dir=rtl]) .checkmark{float:left}.checkmark:before,.checkmark ::ng-deep svg{display:none;z-index:1}.checkmark:after{content:\"\";display:block;position:absolute;width:22px;height:22px;border:1px solid var(--selectable-card-icon-placeholder-border-color);border-radius:50%}.checkbox{float:left;background-color:var(--checkbox-background-color);border-style:solid;border-width:var(--checkbox-border-width);border-color:var(--checkbox-border-color);border-radius:var(--checkbox-border-radius);color:var(--checkbox-icon-color);font-size:var(--checkbox-icon-size);height:var(--checkbox-control-size);width:var(--checkbox-control-size);min-width:var(--checkbox-control-size);display:flex;justify-content:center;align-items:center;z-index:0}:host-context([dir=rtl]) .checkbox{float:right}:host(:not(.is-expert)) .content{overflow:hidden;padding-left:16px}:host-context([dir=rtl]) :host(:not(.is-expert)) .content{padding-left:0;padding-right:16px}@media (max-width: 703px){:host(:not(.is-expert)) .content{padding-left:8px}:host-context([dir=rtl]) :host(:not(.is-expert)) .content{padding-right:8px}}:host(.is-expert) label:hover{background:var(--selectable-card-expert-background-hover-color)}:host(.is-expert) label:hover .checkmark{color:var(--selectable-card-unchecked-icon-hover-color)}:host(.is-expert) label:hover .checkmark:before,:host(.is-expert) label:hover .checkmark ::ng-deep svg{display:block}:host(.is-expert) input:checked+label{background:var(--selectable-card-expert-background-selected-color)}:host(.is-expert) input:checked+label:hover{background:var(--selectable-card-expert-background-selected-hover-color)}input{position:absolute;height:0;width:0;overflow:hidden;opacity:0}input:checked+label{background:var(--selectable-card-background-selected-color);border-color:var(--selectable-card-border-selected-color)}input:checked+label .checkmark:before,input:checked+label .checkmark ::ng-deep svg{display:block}input:checked+label:hover{background:var(--selectable-card-background-selected-hover-color)}input:checked+label:hover .checkmark{color:var(--selectable-card-icon-color)}input:checked+label .checkbox{background-color:var(--checkbox-selected-background-color);border-color:var(--checkbox-selected-border-color)}label{border:var(--selectable-card-border-width) solid var(--selectable-card-border-color);display:block;position:relative;padding:16px;cursor:pointer;width:100%;min-height:56px;border-radius:var(--selectable-card-border-radius);background:var(--selectable-card-background-color)}label:hover{background:var(--selectable-card-background-hover-color);border-color:var(--selectable-card-border-hover-color)}@media (hover: none){label:hover{background:var(--selectable-card-background-color);border-color:var(--selectable-card-border-color)}input:checked+label:hover{background:var(--selectable-card-background-selected-color)}}:host(.is-disabled) label{border-color:var(--selectable-card-border-disabled-color);cursor:not-allowed}:host(.is-disabled) .checkmark{opacity:40%}:host(.is-disabled) label:hover{background:var(--selectable-card-background-disabled-color)}:host(.is-disabled) label:hover .checkmark:before,:host(.is-disabled) label:hover .checkmark ::ng-deep svg{display:none}:host(.is-disabled) input:checked+label{background:var(--selectable-card-background-disabled-selected-color);border-color:var(--selectable-card-border-disabled-selected-color)}:host(.is-disabled) input:checked+label .checkbox{background-color:var(--checkbox-disabled-selected-background-color);border-color:var(--checkbox-disabled-border-color);color:var(--checkbox-disabled-icon-color)}:host(.is-disabled) input:checked+label .checkmark:before,:host(.is-disabled) input:checked+label .checkmark ::ng-deep svg{display:block}:host(.is-disabled).is-expert input:checked+label{background:var(--selectable-card-expert-background-disabled-selected-color)}:host(.is-disabled) .checkbox{background-color:var(--checkbox-disabled-background-color);border-color:var(--checkbox-disabled-border-color);color:var(--checkbox-disabled-icon-color)}:host(.has-error) label,:host(.has-error) label:hover,:host(.has-error) input:checked+label,:host(.has-error) input:checked+label:hover{border-color:var(--selectable-card-border-error-color)}input.cdk-keyboard-focused+label{box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){input.cdk-keyboard-focused+label{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}@media screen and (-ms-high-contrast: active){:host label,:host label:hover,:host(.has-error) label,:host(.has-error) label:hover{border-color:buttonText}:host input:checked+label,:host input:checked+label:hover,:host(.has-error) input:checked+label,:host(.has-error) input:checked+label:hover{border-width:3px;padding:14px;border-color:highlight}:host input:checked+label .checkmark,:host input:checked+label:hover .checkmark,:host(.has-error) input:checked+label .checkmark,:host(.has-error) input:checked+label:hover .checkmark{color:CanvasText}:host(.is-disabled) label,:host(.is-disabled) input:checked+label{border-color:GrayText;color:GrayText}:host(.is-disabled) label .checkmark,:host(.is-disabled) input:checked+label .checkmark{color:GrayText}}\n"], components: [{ type: i4.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSelectableCardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-selectable-card', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[class.is-disabled]': 'disabled',
                        '[class.has-error]': '_errorState',
                        '[attr.aria-invalid]': '_errorState',
                        'attr.role': 'checkbox',
                        '[attr.aria-checked]': 'checked',
                    }, template: "<input\n    #input\n    type=\"checkbox\"\n    [checked]=\"checked\"\n    [value]=\"value || null\"\n    [attr.disabled]=\"disabled || null\"\n    (change)=\"_onInteractionEvent($event)\"\n    (blur)=\"onTouchedCallback($event)\"\n    [attr.id]=\"id\"\n    [attr.name]=\"name\"\n    (click)=\"_onInputClick($event)\"\n    [required]=\"required\"\n    [attr.aria-required]=\"required\"\n    [attr.tabindex]=\"tabindex\"\n    [attr.aria-invalid]=\"_errorState\"\n    [attr.aria-describedby]=\"_errorListIds || null\"\n/>\n\n<label [attr.for]=\"id\">\n    <span class=\"checkbox\" *ngIf=\"appearance === 'default'; else expert\">\n        <nx-icon *ngIf=\"checked\" name=\"check\" aria-hidden=\"true\"></nx-icon>\n    </span>\n\n    <div class=\"content\">\n        <ng-content select=\"nx-card-header\"></ng-content>\n        <ng-content></ng-content>\n        <ng-content select=\"nx-card-footer\"></ng-content>\n    </div>\n</label>\n\n<ng-content *ngIf=\"_errorState\" select=\"nx-error\"></ng-content>\n\n<ng-template #expert>\n    <nx-icon name=\"check-circle\" size=\"s\" aria-hidden=\"true\" class=\"checkmark\"> </nx-icon>\n</ng-template>\n", styles: [":host{display:block}:host ::ng-deep nx-error{margin-top:8px}:host ::ng-deep nx-error.nx-error--message{margin-top:12px}::ng-deep nx-card-footer,::ng-deep nx-card-content,::ng-deep nx-card-header{display:block}.checkmark{float:right;position:relative;color:var(--selectable-card-icon-color)}:host-context([dir=rtl]) .checkmark{float:left}.checkmark:before,.checkmark ::ng-deep svg{display:none;z-index:1}.checkmark:after{content:\"\";display:block;position:absolute;width:22px;height:22px;border:1px solid var(--selectable-card-icon-placeholder-border-color);border-radius:50%}.checkbox{float:left;background-color:var(--checkbox-background-color);border-style:solid;border-width:var(--checkbox-border-width);border-color:var(--checkbox-border-color);border-radius:var(--checkbox-border-radius);color:var(--checkbox-icon-color);font-size:var(--checkbox-icon-size);height:var(--checkbox-control-size);width:var(--checkbox-control-size);min-width:var(--checkbox-control-size);display:flex;justify-content:center;align-items:center;z-index:0}:host-context([dir=rtl]) .checkbox{float:right}:host(:not(.is-expert)) .content{overflow:hidden;padding-left:16px}:host-context([dir=rtl]) :host(:not(.is-expert)) .content{padding-left:0;padding-right:16px}@media (max-width: 703px){:host(:not(.is-expert)) .content{padding-left:8px}:host-context([dir=rtl]) :host(:not(.is-expert)) .content{padding-right:8px}}:host(.is-expert) label:hover{background:var(--selectable-card-expert-background-hover-color)}:host(.is-expert) label:hover .checkmark{color:var(--selectable-card-unchecked-icon-hover-color)}:host(.is-expert) label:hover .checkmark:before,:host(.is-expert) label:hover .checkmark ::ng-deep svg{display:block}:host(.is-expert) input:checked+label{background:var(--selectable-card-expert-background-selected-color)}:host(.is-expert) input:checked+label:hover{background:var(--selectable-card-expert-background-selected-hover-color)}input{position:absolute;height:0;width:0;overflow:hidden;opacity:0}input:checked+label{background:var(--selectable-card-background-selected-color);border-color:var(--selectable-card-border-selected-color)}input:checked+label .checkmark:before,input:checked+label .checkmark ::ng-deep svg{display:block}input:checked+label:hover{background:var(--selectable-card-background-selected-hover-color)}input:checked+label:hover .checkmark{color:var(--selectable-card-icon-color)}input:checked+label .checkbox{background-color:var(--checkbox-selected-background-color);border-color:var(--checkbox-selected-border-color)}label{border:var(--selectable-card-border-width) solid var(--selectable-card-border-color);display:block;position:relative;padding:16px;cursor:pointer;width:100%;min-height:56px;border-radius:var(--selectable-card-border-radius);background:var(--selectable-card-background-color)}label:hover{background:var(--selectable-card-background-hover-color);border-color:var(--selectable-card-border-hover-color)}@media (hover: none){label:hover{background:var(--selectable-card-background-color);border-color:var(--selectable-card-border-color)}input:checked+label:hover{background:var(--selectable-card-background-selected-color)}}:host(.is-disabled) label{border-color:var(--selectable-card-border-disabled-color);cursor:not-allowed}:host(.is-disabled) .checkmark{opacity:40%}:host(.is-disabled) label:hover{background:var(--selectable-card-background-disabled-color)}:host(.is-disabled) label:hover .checkmark:before,:host(.is-disabled) label:hover .checkmark ::ng-deep svg{display:none}:host(.is-disabled) input:checked+label{background:var(--selectable-card-background-disabled-selected-color);border-color:var(--selectable-card-border-disabled-selected-color)}:host(.is-disabled) input:checked+label .checkbox{background-color:var(--checkbox-disabled-selected-background-color);border-color:var(--checkbox-disabled-border-color);color:var(--checkbox-disabled-icon-color)}:host(.is-disabled) input:checked+label .checkmark:before,:host(.is-disabled) input:checked+label .checkmark ::ng-deep svg{display:block}:host(.is-disabled).is-expert input:checked+label{background:var(--selectable-card-expert-background-disabled-selected-color)}:host(.is-disabled) .checkbox{background-color:var(--checkbox-disabled-background-color);border-color:var(--checkbox-disabled-border-color);color:var(--checkbox-disabled-icon-color)}:host(.has-error) label,:host(.has-error) label:hover,:host(.has-error) input:checked+label,:host(.has-error) input:checked+label:hover{border-color:var(--selectable-card-border-error-color)}input.cdk-keyboard-focused+label{box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){input.cdk-keyboard-focused+label{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}@media screen and (-ms-high-contrast: active){:host label,:host label:hover,:host(.has-error) label,:host(.has-error) label:hover{border-color:buttonText}:host input:checked+label,:host input:checked+label:hover,:host(.has-error) input:checked+label,:host(.has-error) input:checked+label:hover{border-width:3px;padding:14px;border-color:highlight}:host input:checked+label .checkmark,:host input:checked+label:hover .checkmark,:host(.has-error) input:checked+label .checkmark,:host(.has-error) input:checked+label:hover .checkmark{color:CanvasText}:host(.is-disabled) label,:host(.is-disabled) input:checked+label{border-color:GrayText;color:GrayText}:host(.is-disabled) label .checkmark,:host(.is-disabled) input:checked+label .checkmark{color:GrayText}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1$1.ErrorStateMatcher }, { type: i2.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }, { type: i2.NgForm, decorators: [{
                    type: Optional
                }] }, { type: i2.FormGroupDirective, decorators: [{
                    type: Optional
                }] }, { type: i1.FocusMonitor }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [SELECTABLE_CARD_DEFAULT_OPTIONS]
                }] }]; }, propDecorators: { _errorList: [{
                type: ContentChildren,
                args: [NxErrorComponent]
            }], _nativeInput: [{
                type: ViewChild,
                args: ['input']
            }], selectionChange: [{
                type: Output
            }], checkedChange: [{
                type: Output
            }], appearance: [{
                type: Input
            }], id: [{
                type: Input
            }], checked: [{
                type: Input
            }], value: [{
                type: Input
            }], disabled: [{
                type: Input
            }], negative: [{
                type: Input
            }], required: [{
                type: Input
            }], name: [{
                type: Input
            }], tabindex: [{
                type: Input
            }], _isExpert: [{
                type: HostBinding,
                args: ['class.is-expert']
            }] } });

class NxCardModule {
}
NxCardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxCardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NxCardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxCardModule, declarations: [NxCardComponent, NxSelectableCardComponent, NxCardHeaderComponent, NxCardFooterComponent], imports: [CommonModule, NxIconModule, NxErrorModule, NxCheckboxModule], exports: [NxCardComponent, NxSelectableCardComponent, NxCardHeaderComponent, NxCardFooterComponent, NxErrorModule] });
NxCardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxCardModule, imports: [[CommonModule, NxIconModule, NxErrorModule, NxCheckboxModule], NxErrorModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxCardModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NxCardComponent, NxSelectableCardComponent, NxCardHeaderComponent, NxCardFooterComponent],
                    exports: [NxCardComponent, NxSelectableCardComponent, NxCardHeaderComponent, NxCardFooterComponent, NxErrorModule],
                    imports: [CommonModule, NxIconModule, NxErrorModule, NxCheckboxModule],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { NxCardComponent, NxCardFooterComponent, NxCardHeaderComponent, NxCardModule, NxSelectableCardChangeEvent, NxSelectableCardComponent, SELECTABLE_CARD_DEFAULT_OPTIONS };
//# sourceMappingURL=aposin-ng-aquila-card.mjs.map
