import { Subject, of, forkJoin } from 'rxjs';
import { catchError, takeUntil, startWith } from 'rxjs/operators';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { DOWN_ARROW, UP_ARROW } from '@angular/cdk/keycodes';
import * as i0 from '@angular/core';
import { EventEmitter, Directive, Input, HostListener, Component, ChangeDetectionStrategy, Output, Injectable, Optional, Self, ContentChild, ViewChild, ContentChildren, ViewChildren, NgModule } from '@angular/core';
import { NxLabelComponent, NxErrorComponent, NxErrorModule, NxLabelModule } from '@aposin/ng-aquila/base';
import * as i1$2 from '@aposin/ng-aquila/utils';
import * as i3 from '@angular/forms';
import * as i4 from '@angular/cdk/a11y';
import * as i9 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i1 from '@aposin/ng-aquila/spinner';
import { NxSpinnerModule } from '@aposin/ng-aquila/spinner';
import * as i2 from '@aposin/ng-aquila/icon';
import { NxIconModule } from '@aposin/ng-aquila/icon';
import * as i1$1 from '@aposin/ng-aquila/button';
import { NxButtonModule } from '@aposin/ng-aquila/button';

class NxFileUploadSuccess {
    constructor(
    /** The files that were successfully uploaded. */
    files, 
    /** The results of the request(s). */
    requests) {
        this.files = files;
        this.requests = requests;
    }
}
class NxFileUploadError {
    constructor(
    /** The files that had an error while uploading. */
    files, 
    /** The returned errors of the request(s). */
    requests) {
        this.files = files;
        this.requests = requests;
    }
}
class NxFileUploader {
    constructor(config, http) {
        /** Stream that emits the result of an upload request. */
        this.response = new Subject();
        this._config = config;
        this._httpClient = http;
    }
    /** Sets the config options for http requests for uploading the files. */
    set config(options) {
        if (this._config !== options) {
            this._config = options;
        }
    }
    get config() {
        return this._config;
    }
    /** Uploads the files to the url specified in config. */
    uploadFiles(files) {
        if (this.config['uploadSeparately']) {
            this._uploadFilesSeparately(files);
        }
        else {
            this._uploadFilesCollectively(files);
        }
    }
    /** Uploads all files with a POST request to the url specified in config. */
    _uploadFilesCollectively(files) {
        // get a list of all files; if there is no one: return
        if (!files || files.length === 0) {
            return;
        }
        const formData = new FormData();
        // save value here in case that it changes while request is running
        const valuesToUpload = files.filter(file => !file.isUploaded);
        valuesToUpload.forEach((file) => {
            file.setUploadingState();
            formData.append('uploads[]', file.file, file.name);
        });
        this._httpClient.post(this.config['requestUrl'], formData, this.config['options']).subscribe(data => {
            valuesToUpload.forEach((file) => file.setUploadedState());
            this.response.next({ allSucessful: true, success: new NxFileUploadSuccess(valuesToUpload, [data]) });
        }, error => {
            valuesToUpload.forEach((file) => file.setErrorState());
            this.response.next({ error: new NxFileUploadError(valuesToUpload, [error]) });
        });
    }
    /**
     * Uploads all files with a POST request to the url specified in config.
     *
     * Each file is uploaded with an individual request.
     */
    _uploadFilesSeparately(files) {
        // get a list of all files; if there is no one: return
        if (!files) {
            return;
        }
        const responses = [];
        const filesToUpload = files.filter(file => !file.isUploaded);
        filesToUpload.forEach((file) => {
            responses.push(this._uploadFile(file).pipe(catchError(error => of(error))));
        });
        forkJoin(responses).subscribe(results => {
            const mergedResults = results.reduce((acc, result) => {
                if (result.success) {
                    if (!acc.success) {
                        acc.success = new NxFileUploadSuccess([], []);
                    }
                    acc.success.files.push(...result.success.files);
                    acc.success.requests.push(...result.success.requests);
                }
                else if (result.error) {
                    if (!acc.error) {
                        acc.error = new NxFileUploadError([], []);
                    }
                    acc.error.files.push(...result.error.files);
                    acc.error.requests.push(...result.error.requests);
                }
                return acc;
            }, {});
            if (!mergedResults.error) {
                mergedResults.allSucessful = true;
            }
            this.response.next(mergedResults);
        });
    }
    /** Uploads one file with a POST request to the url specified in config. */
    _uploadFile(file) {
        const fileReturnVal = new Subject();
        const formData = new FormData();
        if (!file.isUploaded) {
            file.setUploadingState();
            formData.append('uploads[]', file.file, file.name);
        }
        this._httpClient.post(this.config['requestUrl'], formData, this.config['options']).subscribe(data => {
            file.setUploadedState();
            fileReturnVal.next({ success: new NxFileUploadSuccess([file], [data]) });
            fileReturnVal.complete();
        }, error => {
            file.setErrorState();
            fileReturnVal.next({ error: new NxFileUploadError([file], [error]) });
            fileReturnVal.complete();
        });
        return fileReturnVal;
    }
}

/**
 * Class used to keep track of the current states of the file
 */
class FileItem {
    constructor(file, index = 0) {
        /** Whether the file is being uploaded at the moment. */
        this.isUploading = false;
        /** Whether the file was successfully uploaded. */
        this.isUploaded = false;
        /** Whether an error occured when uploading the file. */
        this.isError = false;
        /** Sets the index of the file. */
        this.index = 0;
        /**
         * emits the FileItem on changed
         */
        this.onChange = new EventEmitter();
        this.file = file;
        this.name = file.name;
        this._size = file.size;
        this._type = file.type;
        this.index = index;
    }
    /** Returns the file size in bytes */
    get size() {
        return this._size;
    }
    /** Returns the file type */
    get type() {
        return this._type;
    }
    /**
     * sets the file to a uploaded state
     */
    setUploadedState() {
        this.isUploaded = true;
        this.isUploading = false;
        this.isError = false;
        this.onChange.emit(this);
    }
    /**
     * sets the file to a 'upload-in-progress' state
     */
    setUploadingState() {
        this.isUploaded = false;
        this.isUploading = true;
        this.isError = false;
        this.onChange.emit(this);
    }
    /**
     * sets the file to an error state
     */
    setErrorState() {
        this.isUploaded = false;
        this.isUploading = false;
        this.isError = true;
        this.onChange.emit(this);
    }
}

/**
 * Verifies the file type against the accepted types
 */
function isFileTypeValid(file, accept) {
    if (!accept || !file.type) {
        return true;
    }
    return (accept
        .replace(/\s/g, '')
        .split(',')
        .filter(acc => {
        const testExp = new RegExp(acc);
        return testExp.test(file.type) || testExp.test(file.name);
    }).length > 0);
}
/**
 * Provides a set of file uploader validators that can be used by form controls.
 *
 * Currently `maxFileSize` and `fileType` are available.
 * @dynamic
 */
class NxFileUploaderValidators {
    /** The form control validator for the max file size. */
    static maxFileSize(max, file) {
        return (control) => {
            if (!max || max > file.size) {
                return null;
            }
            return { NxFileUploadMaxFileSize: { max, fileName: file.name, actual: file.size } };
        };
    }
    /** The form control validator for the accepted file type. */
    static fileType(file, accept) {
        return (control) => {
            if (isFileTypeValid(file, accept)) {
                return null;
            }
            return { NxFileUploadFileTypeNotAccepted: { fileName: file.name } };
        };
    }
    /** The form control validator for the max file number that is accepted. */
    static maxFileNumber(files, max) {
        return (control) => {
            if (!files || !files.length || !max || files.length <= max) {
                return null;
            }
            return { NxFileUploadMaxFileNumber: { max, actual: files.length } };
        };
    }
}

// This Directive solely purpose is to mark given ng-content and project it into the required destination.
class NxFileUploaderButtonDirective {
    constructor(_cdr) {
        this._cdr = _cdr;
        this._clicked = new Subject();
        this._disabled = false;
    }
    /** Whether the file uploader is disabled */
    set disabled(value) {
        this._disabled = value;
        this._cdr.markForCheck();
    }
    get disabled() {
        return this._disabled;
    }
    /** @docs-private */
    setDescribedByIds(ids) {
        this._ariaDescribedby = ids.join(' ');
    }
    /** @docs-private */
    onClick() {
        this._clicked.next();
    }
    ngOnDestroy() {
        this._clicked.complete();
    }
}
NxFileUploaderButtonDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderButtonDirective, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
NxFileUploaderButtonDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxFileUploaderButtonDirective, selector: "[nxFileUploadButton]", inputs: { disabled: "disabled" }, host: { listeners: { "click": "onClick()" }, properties: { "attr.aria-describedby": "_ariaDescribedby || null", "attr.disabled": "disabled || null", "class.nx-file-upload-button": "true" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[nxFileUploadButton]',
                    host: {
                        '[attr.aria-describedby]': '_ariaDescribedby || null',
                        '[attr.disabled]': 'disabled || null',
                        '[class.nx-file-upload-button]': 'true',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { disabled: [{
                type: Input
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }] } });

function exists(item) {
    return item != null;
}
class NxFileUploaderDropZoneComponent {
    constructor(_cdr) {
        this._cdr = _cdr;
        /** An event emitted when files were dropped. */
        this.fileDropped = new EventEmitter();
        // flag when the drop zone is hovered
        this._active = false;
        this._disabled = false;
    }
    /** Whether the file uploader is disabled. */
    set disabled(value) {
        this._disabled = value;
        this._cdr.markForCheck();
    }
    get disabled() {
        return this._disabled;
    }
    /** @docs-private */
    onDrop(event) {
        event.preventDefault();
        if (this.disabled) {
            if (!event.dataTransfer) {
                return;
            }
            event.dataTransfer.dropEffect = 'no-drop'; // TODO wrog type: why do we do this? can we skip this?
        }
        else {
            if (!event.dataTransfer) {
                this.fileDropped.emit([]); // TODO shall we still emit if no data was transfered?
                return;
            }
            const { dataTransfer } = event;
            if (dataTransfer.items) {
                const files = Array.from(dataTransfer.items)
                    .map(item => item.getAsFile())
                    .filter(exists);
                dataTransfer.items.clear();
                this.fileDropped.emit(files);
            }
            else {
                const files = Array.from(dataTransfer.files);
                dataTransfer.clearData();
                this.fileDropped.emit(files);
            }
            this._active = false;
        }
    }
    /** @docs-private */
    onDragOver(event) {
        event.stopPropagation();
        event.preventDefault();
        if (this.disabled) {
            event.dataTransfer.dropEffect = 'none';
        }
        else {
            event.dataTransfer.dropEffect = 'copy';
            this._active = true;
            this._cdr.markForCheck();
        }
    }
    /** @docs-private */
    onDragLeave(event) {
        this._active = false;
        event.dataTransfer.dropEffect = 'none';
        this._cdr.markForCheck();
    }
    /** @docs-private */
    onDragEnd(event) {
        event.dataTransfer.dropEffect = 'none';
    }
    /** @docs-private */
    onDragStart(event) {
        if (this.disabled) {
            event.dataTransfer.dropEffect = 'none';
        }
        else {
            event.dataTransfer.dropEffect = 'copy';
        }
    }
    /** @docs-private */
    get active() {
        return this._active;
    }
}
NxFileUploaderDropZoneComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderDropZoneComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NxFileUploaderDropZoneComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxFileUploaderDropZoneComponent, selector: "nx-file-uploader-drop-zone", inputs: { disabled: "disabled" }, outputs: { fileDropped: "fileDropped" }, host: { listeners: { "drop": "onDrop($event)", "dragover": "onDragOver($event)", "dragleave": "onDragLeave($event)", "dragend": "onDragEnd($event)", "dragstart": "onDragStart($event)" }, properties: { "class.is-active": "active", "class.is-disabled": "disabled" } }, ngImport: i0, template: "<ng-content></ng-content>\n", styles: [":host ::ng-deep button{margin-bottom:16px}@media (min-width: 704px){:host{height:104px;border:1px dashed var(--file-uploader-drop-zone-border-color);align-items:center;justify-content:center;display:flex;color:var(--file-uploader-drop-zone-text-color)}:host.is-active{border-style:solid}:host.is-disabled{cursor:no-drop}:host ::ng-deep button{margin-bottom:0}}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderDropZoneComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-file-uploader-drop-zone', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[class.is-active]': 'active',
                        '[class.is-disabled]': 'disabled',
                    }, template: "<ng-content></ng-content>\n", styles: [":host ::ng-deep button{margin-bottom:16px}@media (min-width: 704px){:host{height:104px;border:1px dashed var(--file-uploader-drop-zone-border-color);align-items:center;justify-content:center;display:flex;color:var(--file-uploader-drop-zone-text-color)}:host.is-active{border-style:solid}:host.is-disabled{cursor:no-drop}:host ::ng-deep button{margin-bottom:0}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { fileDropped: [{
                type: Output
            }], disabled: [{
                type: Input
            }], onDrop: [{
                type: HostListener,
                args: ['drop', ['$event']]
            }], onDragOver: [{
                type: HostListener,
                args: ['dragover', ['$event']]
            }], onDragLeave: [{
                type: HostListener,
                args: ['dragleave', ['$event']]
            }], onDragEnd: [{
                type: HostListener,
                args: ['dragend', ['$event']]
            }], onDragStart: [{
                type: HostListener,
                args: ['dragstart', ['$event']]
            }] } });

let nextId$1 = 0;
// This Directive solely purpose is to mark given ng-content and project it into the required destination.
class NxFileUploaderHintDirective {
    constructor() {
        /** Sets the id of the file upload hint. */
        this.id = `nx-formfield-hint-${nextId$1++}`;
    }
}
NxFileUploaderHintDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderHintDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NxFileUploaderHintDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxFileUploaderHintDirective, selector: "[nxFileUploadHint]", inputs: { id: "id" }, host: { properties: { "attr.id": "id", "class.nx-file-upload-hint": "true" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderHintDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[nxFileUploadHint]',
                    host: {
                        '[attr.id]': 'id',
                        '[class.nx-file-upload-hint]': 'true',
                    },
                }]
        }], propDecorators: { id: [{
                type: Input
            }] } });

/** File uploader data that requires internationalization. */
class NxFileUploaderIntl {
    constructor() {
        /**
         * Stream that emits whenever the labels here are changed. Use this to notify
         * components if the labels have changed after initialization.
         */
        this.changes = new Subject();
        /** A label for the uploading state used in the queue. */
        this.uploadingLabel = 'uploading';
        /** Aria-label for the delete icon. */
        this.deleteLabel = 'Delete';
        /** Aria-label for the 'successfully-uploaded' icon. */
        this.uploadedStateLabel = 'uploaded';
    }
}
NxFileUploaderIntl.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderIntl, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NxFileUploaderIntl.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderIntl, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderIntl, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });

/** Shows the file name. */
class NxFileUploaderItemName {
}
NxFileUploaderItemName.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderItemName, deps: [], target: i0.ɵɵFactoryTarget.Component });
NxFileUploaderItemName.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxFileUploaderItemName, selector: "nx-file-upload-name", inputs: { name: "name" }, ngImport: i0, template: `{{ name }}`, isInline: true, styles: [":host{font-size:var(--file-uploader-file-name-font-size);line-height:var(--file-uploader-file-name-line-height);font-weight:var(--file-uploader-file-name-font-weight);letter-spacing:var(--file-uploader-file-name-letter-spacing)}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderItemName, decorators: [{
            type: Component,
            args: [{ selector: 'nx-file-upload-name', template: `{{ name }}`, styles: [":host{font-size:var(--file-uploader-file-name-font-size);line-height:var(--file-uploader-file-name-line-height);font-weight:var(--file-uploader-file-name-font-weight);letter-spacing:var(--file-uploader-file-name-letter-spacing)}\n"] }]
        }], propDecorators: { name: [{
                type: Input
            }] } });

/** Shows a file size in Megabyte (MB) or an alternative label while the file is uploading. */
class NxFileUploaderItemSize {
}
NxFileUploaderItemSize.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderItemSize, deps: [], target: i0.ɵɵFactoryTarget.Component });
NxFileUploaderItemSize.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxFileUploaderItemSize, selector: "nx-file-upload-size", inputs: { size: "size", isUploading: "isUploading", uploadingLabel: "uploadingLabel" }, ngImport: i0, template: `
        <span *ngIf="isUploading; else uploaded">{{ uploadingLabel }}</span>
        <ng-template #uploaded>
            <span>{{ size / 1024 / 1024 | number: '.2' }} MB</span>
        </ng-template>
    `, isInline: true, styles: [":host{white-space:nowrap}\n"], directives: [{ type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "number": i9.DecimalPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderItemSize, decorators: [{
            type: Component,
            args: [{ selector: 'nx-file-upload-size', template: `
        <span *ngIf="isUploading; else uploaded">{{ uploadingLabel }}</span>
        <ng-template #uploaded>
            <span>{{ size / 1024 / 1024 | number: '.2' }} MB</span>
        </ng-template>
    `, styles: [":host{white-space:nowrap}\n"] }]
        }], propDecorators: { size: [{
                type: Input
            }], isUploading: [{
                type: Input
            }], uploadingLabel: [{
                type: Input
            }] } });

/** Shows the current uploading status of a file. */
class NxFileUploaderItemStatus {
}
NxFileUploaderItemStatus.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderItemStatus, deps: [], target: i0.ɵɵFactoryTarget.Component });
NxFileUploaderItemStatus.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxFileUploaderItemStatus, selector: "nx-file-upload-status", inputs: { isUploading: "isUploading", isUploaded: "isUploaded", uploadedLabel: "uploadedLabel" }, ngImport: i0, template: `
        <nx-spinner *ngIf="isUploading" nxSize="medium"></nx-spinner>
        <nx-icon name="check-circle" *ngIf="isUploaded" size="s" [attr.aria-label]="uploadedLabel || null"> </nx-icon>
    `, isInline: true, styles: [":host{display:flex}:host nx-icon{color:var(--file-uploader-file-row-icon-color)}\n"], components: [{ type: i1.NxSpinnerComponent, selector: "nx-spinner", inputs: ["nxSize", "negative"] }, { type: i2.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }], directives: [{ type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderItemStatus, decorators: [{
            type: Component,
            args: [{ selector: 'nx-file-upload-status', template: `
        <nx-spinner *ngIf="isUploading" nxSize="medium"></nx-spinner>
        <nx-icon name="check-circle" *ngIf="isUploaded" size="s" [attr.aria-label]="uploadedLabel || null"> </nx-icon>
    `, styles: [":host{display:flex}:host nx-icon{color:var(--file-uploader-file-row-icon-color)}\n"] }]
        }], propDecorators: { isUploading: [{
                type: Input
            }], isUploaded: [{
                type: Input
            }], uploadedLabel: [{
                type: Input
            }] } });

/** Shows a delete button. */
class NxFileUploaderItemDelete {
}
NxFileUploaderItemDelete.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderItemDelete, deps: [], target: i0.ɵɵFactoryTarget.Component });
NxFileUploaderItemDelete.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxFileUploaderItemDelete, selector: "nx-file-upload-delete", inputs: { isUploading: "isUploading", deleteLabel: "deleteLabel" }, ngImport: i0, template: `
        <button nxIconButton="tertiary small-medium" [attr.aria-label]="deleteLabel || null" type="button" [attr.disabled]="isUploading || null">
            <nx-icon name="trash-o" [attr.aria-hidden]="true"></nx-icon>
        </button>
    `, isInline: true, styles: [":host{display:block}:host>button{margin-bottom:0;white-space:nowrap}\n"], components: [{ type: i1$1.NxIconButtonComponent, selector: "button[nxIconButton]", inputs: ["nxIconButton"] }, { type: i2.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderItemDelete, decorators: [{
            type: Component,
            args: [{ selector: 'nx-file-upload-delete', template: `
        <button nxIconButton="tertiary small-medium" [attr.aria-label]="deleteLabel || null" type="button" [attr.disabled]="isUploading || null">
            <nx-icon name="trash-o" [attr.aria-hidden]="true"></nx-icon>
        </button>
    `, styles: [":host{display:block}:host>button{margin-bottom:0;white-space:nowrap}\n"] }]
        }], propDecorators: { isUploading: [{
                type: Input
            }], deleteLabel: [{
                type: Input
            }] } });

let nextId = 0;
class NxFileUploaderComponent {
    constructor(_cdr, _errorStateMatcher, _intl, _parentForm, _parentFormGroup, 
    /** @docs-private */ ngControl, _focusMonitor) {
        this._cdr = _cdr;
        this._errorStateMatcher = _errorStateMatcher;
        this._intl = _intl;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this.ngControl = ngControl;
        this._focusMonitor = _focusMonitor;
        this._filesSubscriptions = [];
        /** An event emitted when queue is changed.
         *
         * Emits the changed array of FileItems.
         * @docs-private */
        this.valueChange = new EventEmitter();
        /** An event emitted when a file is deleted from the queue
         *
         * Emits the deleted FileItem.
         */
        this.fileDeleted = new EventEmitter();
        /**
         * An event emitted when one or more files were added to the file input.
         *
         * Emits the selected FileItem | FileItem[]
         */
        this.filesSelected = new EventEmitter();
        this._id = `nx-file-uploader-${nextId++}`;
        this._maxFileSize = 0;
        this._required = false;
        this._disabled = false;
        this._multiple = false;
        this._controlValidators = null;
        this._maxFileNumber = null;
        this._inputId = `${this.id}-input`;
        this._labelId = `${this.id}-label`;
        /** @docs-private */
        this.errorState = false;
        /** @docs-private */
        this.stateChanges = new Subject();
        /** @docs-private */
        this.validatorFnArray = [];
        this._destroyed = new Subject();
        /** @docs-private */
        this.onChangeCallback = (_) => { };
        /** @docs-private */
        this.onTouchedCallback = () => { };
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
        this._templateContext = this;
    }
    /** Sets the id of the file uploader. */
    set id(value) {
        this._id = value;
        this._cdr.markForCheck();
    }
    get id() {
        return this._id;
    }
    /** Whether the file uploader is required. */
    set required(value) {
        this._required = coerceBooleanProperty(value);
    }
    get required() {
        return this._required;
    }
    /** The value of the file upload. */
    set value(value) {
        this.writeValue(value);
    }
    get value() {
        return this._value;
    }
    /** Name that is used for accessibility. */
    set name(value) {
        this._name = value;
    }
    get name() {
        return this._name;
    }
    /** Whether the file uploader is disabled. */
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        if (this.button) {
            this.button.disabled = this._disabled;
        }
        if (this._dropZone) {
            this._dropZone.disabled = this._disabled;
        }
        this._cdr.markForCheck();
    }
    get disabled() {
        return this._disabled;
    }
    /** Whether the file uploader accepts multiple files to be added. */
    set multiple(value) {
        this._multiple = coerceBooleanProperty(value);
    }
    get multiple() {
        return this._multiple;
    }
    /** The accepted file types */
    set accept(value) {
        this._accept = value;
    }
    get accept() {
        return this._accept;
    }
    /** The max file size in bytes used for validation */
    set maxFileSize(value) {
        this._maxFileSize = coerceNumberProperty(value);
    }
    get maxFileSize() {
        return this._maxFileSize;
    }
    /** Sets the file uploader for the component. */
    set uploader(newUploader) {
        if (this._uploader !== newUploader) {
            this._uploader = newUploader;
        }
    }
    get uploader() {
        return this._uploader;
    }
    /** The max number of files that is accepted. */
    set maxFileNumber(value) {
        this._maxFileNumber = coerceNumberProperty(value);
    }
    get maxFileNumber() {
        return this._maxFileNumber;
    }
    /** Sets the template for the file items. */
    set itemTemplate(template) {
        if (this._itemTemplate !== template) {
            this._itemTemplate = template;
        }
    }
    get itemTemplate() {
        return this._itemTemplate;
    }
    ngOnInit() {
        if (this.ngControl?.control) {
            // we need to save the control validators.
            this._controlValidators = this.ngControl.control.validator;
        }
        this._intl.changes.pipe(takeUntil(this._destroyed)).subscribe(() => {
            this._cdr.markForCheck();
            this.stateChanges.next();
        });
        this._resetValidators();
    }
    ngAfterViewInit() {
        this._fileRowElements.forEach(row => this._focusMonitor.monitor(row));
        this._fileRowElementsPrevious = this._fileRowElements;
        this._fileRowElements.changes.pipe(takeUntil(this._destroyed)).subscribe(rowElements => {
            this._fileRowElementsPrevious.forEach(row => this._focusMonitor.stopMonitoring(row));
            this._fileRowElementsPrevious = rowElements;
            rowElements.forEach((row) => this._focusMonitor.monitor(row));
        });
    }
    ngOnChanges() {
        this.stateChanges.next();
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this.stateChanges.complete();
        this._filesSubscriptions.forEach((subscription) => subscription.unsubscribe());
        this._fileRowElements.forEach(row => this._focusMonitor.stopMonitoring(row));
    }
    /** @docs-private */
    updateErrorState() {
        const oldState = this.errorState;
        const parent = this._parentFormGroup || this._parentForm;
        const control = this.ngControl ? this.ngControl.control : null;
        const newState = this._errorStateMatcher.isErrorState(control, parent);
        if (newState !== oldState) {
            this.errorState = newState;
            this.stateChanges.next();
        }
    }
    registerOnChange(callback) {
        this.onChangeCallback = callback;
    }
    registerOnTouched(callback) {
        this.onTouchedCallback = callback;
    }
    writeValue(value) {
        if (this._value !== value) {
            if (value) {
                if (this._filesSubscriptions) {
                    this._filesSubscriptions.forEach((fileSubscription) => fileSubscription.unsubscribe());
                    this._filesSubscriptions = [];
                }
            }
            this._resetValidators();
            this._value = value;
            this._subscribeToFileChanges();
        }
    }
    _resetValidators(clear = false) {
        if (this.ngControl?.control) {
            if (clear) {
                this.ngControl.control.clearValidators();
            }
            const validators = this._controlValidators
                ? [this._controlValidators, NxFileUploaderValidators.maxFileNumber(this.value, this.maxFileNumber), ...this.validatorFnArray]
                : [NxFileUploaderValidators.maxFileNumber(this.value, this.maxFileNumber), ...this.validatorFnArray];
            this.ngControl.control.setValidators(validators);
            this.ngControl.control.updateValueAndValidity();
        }
    }
    ngAfterContentInit() {
        if (!this.button) {
            return;
        }
        this.button._clicked.pipe(takeUntil(this._destroyed)).subscribe(() => {
            this.nativeInputFile.nativeElement.click();
        });
        this.button.disabled = this.disabled;
        if (this._dropZone) {
            this._dropZone.fileDropped.pipe(takeUntil(this._destroyed)).subscribe(files => {
                this._addFilesToQueue(files);
            });
            this._dropZone.disabled = this.disabled;
        }
        if (this._label) {
            this._label.for = this._inputId;
            this._label.id = this._labelId;
        }
        this.stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {
            this._syncDescribedByIds();
            this._cdr.markForCheck();
        });
        // Re-validate when the number of hints changes.
        this._hintChildren.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {
            this._syncDescribedByIds();
            this._cdr.markForCheck();
        });
        // Re-validate when the number of hints changes.
        this._errorList.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {
            this._syncDescribedByIds();
            this._cdr.markForCheck();
        });
    }
    _addFilesToQueue(files) {
        if (!this.multiple) {
            this.value = [];
        }
        this._setFileListFromValue(files);
        this._resetValidators(true);
        this.onChangeCallback(this.value);
        this.onTouchedCallback();
        this.valueChange.emit(this.value);
        this.filesSelected.emit(this.value);
    }
    _setFileListFromValue(files) {
        // we need to set max file size errors to false
        this.validatorFnArray = [];
        if (files === null) {
            this.value = undefined;
        }
        else {
            files.forEach((file) => {
                if (this.isValidOnSelection(file)) {
                    const tmp = new FileItem(file);
                    if (this.value) {
                        this.value.push(tmp);
                    }
                    else {
                        this.value = [tmp];
                    }
                    this._cdr.markForCheck();
                }
            });
            this._subscribeToFileChanges();
        }
    }
    /** Removes a file from the value list of the file upload input. */
    removeFile(file) {
        this.value = this.value.filter(item => file !== item);
        if (this._filesSubscriptions) {
            this._filesSubscriptions.forEach((fileSubscription) => fileSubscription.unsubscribe());
            this._filesSubscriptions = [];
        }
        this._subscribeToFileChanges();
        this.validatorFnArray = []; // bugfix: kick invalid type error on file remove
        this._resetValidators(true);
        this._cdr.markForCheck();
        this.valueChange.emit(this.value);
        this.fileDeleted.emit(file);
        this.onTouchedCallback();
        this.onChangeCallback(this.value);
        // resets the value of the file input, so that if a file is deleted and added again. otherwise there is no change detected
        this.nativeInputFile.nativeElement.value = '';
    }
    /** Uploads the files via the defined uploader. */
    uploadFiles() {
        if (!this.uploader) {
            console.warn('No uploader found. Please define a NxFileUpload to use the uploading mechanism.');
            return;
        }
        if (this.uploader) {
            this.uploader.uploadFiles(this.value);
        }
    }
    ngDoCheck() {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this.updateErrorState();
        }
    }
    isValidOnSelection(file) {
        let isValid = false;
        this.validatorFnArray.push(NxFileUploaderValidators.maxFileSize(this.maxFileSize, file));
        this.validatorFnArray.push(NxFileUploaderValidators.fileType(file, this.accept));
        if ((!this.maxFileSize || file.size <= this.maxFileSize) && isFileTypeValid(file, this.accept)) {
            isValid = true;
        }
        return isValid;
    }
    /**
     * @docs-private
     * The label for the uploading state used in the queue.
     */
    get uploadingLabel() {
        return this._intl.uploadingLabel;
    }
    /**
     * @docs-private
     * The label for the uploading state used in the queue.
     */
    get deleteLabel() {
        return this._intl.deleteLabel;
    }
    /**
     * @docs-private
     * The label for the uploading state used in the queue.
     */
    get uploadedLabel() {
        return this._intl.uploadedStateLabel;
    }
    /**
     * Sets the list of element IDs that describe the child control. This allows the trigger element (button) to update
     * its `aria-describedby` attribute accordingly.
     */
    _syncDescribedByIds() {
        let ids = [];
        ids = this._hintChildren.map(hint => hint.id);
        ids = this._label ? [this._label.id, ...ids] : ids;
        ids = [...this._errorList.map(error => error.id), ...ids];
        this.button?.setDescribedByIds(ids);
    }
    _handleKeydownListRow(event) {
        if (event.keyCode === DOWN_ARROW) {
            const nextFileItemRow = event.target.nextSibling;
            if (nextFileItemRow?.classList?.contains('nx-file-uploader--file-row')) {
                event.preventDefault();
                nextFileItemRow.focus();
            }
        }
        else if (event.keyCode === UP_ARROW) {
            const previousFileItemRow = event.target.previousSibling;
            if (previousFileItemRow?.classList?.contains('nx-file-uploader--file-row')) {
                event.preventDefault();
                previousFileItemRow.focus();
            }
        }
    }
    /**
     * Triggered when the input[type=file] is changed
     */
    _onFileChange(event) {
        if (this.disabled) {
            return;
        }
        const target = event.target;
        const files = Array.from(target.files ?? []);
        this._addFilesToQueue(files);
        this.stateChanges.next();
        this._cdr.markForCheck();
        this.nativeInputFile.nativeElement.value = '';
    }
    /** Listens to changes in each file. */
    _subscribeToFileChanges() {
        if (this.value?.length) {
            let subscription;
            this.value.map(file => {
                subscription = file.onChange.subscribe(() => {
                    this._cdr.markForCheck();
                });
                this._filesSubscriptions.push(subscription);
            });
        }
    }
}
NxFileUploaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1$2.ErrorStateMatcher }, { token: NxFileUploaderIntl }, { token: i3.NgForm, optional: true }, { token: i3.FormGroupDirective, optional: true }, { token: i3.NgControl, optional: true, self: true }, { token: i4.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });
NxFileUploaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxFileUploaderComponent, selector: "nx-file-uploader", inputs: { id: "id", required: "required", value: "value", name: "name", disabled: "disabled", multiple: "multiple", accept: "accept", maxFileSize: "maxFileSize", uploader: "uploader", maxFileNumber: "maxFileNumber", itemTemplate: "itemTemplate" }, outputs: { valueChange: "valueChange", fileDeleted: "fileDeleted", filesSelected: "filesSelected" }, host: { properties: { "attr.aria-invalid": "errorState", "class.has-error": "errorState" } }, queries: [{ propertyName: "button", first: true, predicate: NxFileUploaderButtonDirective, descendants: true }, { propertyName: "_dropZone", first: true, predicate: NxFileUploaderDropZoneComponent, descendants: true, static: true }, { propertyName: "_label", first: true, predicate: NxLabelComponent, descendants: true }, { propertyName: "_hintChildren", predicate: NxFileUploaderHintDirective }, { propertyName: "_errorList", predicate: NxErrorComponent }], viewQueries: [{ propertyName: "nativeInputFile", first: true, predicate: ["nativeInputFile"], descendants: true }, { propertyName: "_fileRowElements", predicate: ["fileRowElement"], descendants: true }], exportAs: ["NxFileUploaderComponent"], usesOnChanges: true, ngImport: i0, template: "<ng-content select=\"nx-label\"></ng-content>\n<ng-content select=\"[nxFileUploadHint]\"></ng-content>\n<ng-content select=\"nx-file-uploader-drop-zone\"></ng-content>\n<ng-content select=\"[nxFileUploadButton]\"></ng-content>\n<input\n    #nativeInputFile\n    type=\"file\"\n    [attr.multiple]=\"multiple || null\"\n    [attr.disabled]=\"disabled || null\"\n    [attr.accept]=\"accept\"\n    (change)=\"_onFileChange($event)\"\n    [id]=\"_inputId\"\n/>\n<ng-container *ngIf=\"value\">\n    <div class=\"nx-file-uploader--file-list nx-margin-bottom-m\" role=\"list\" [attr.aria-labelledby]=\"_labelId\">\n        <div\n            #fileRowElement\n            class=\"nx-file-uploader--file-row\"\n            [class.nx-file-uploader--file-state-uploading]=\"file.isUploading\"\n            [class.nx-file-uploader--default-template]=\"!_itemTemplate\"\n            *ngFor=\"let file of value\"\n            role=\"listitem\"\n            (keydown)=\"_handleKeydownListRow($event)\"\n        >\n            <ng-container\n                *ngTemplateOutlet=\"_itemTemplate ? _itemTemplate : defaultFileRow; context: { templateContext: _templateContext, file: file }\"\n            ></ng-container>\n        </div>\n    </div>\n</ng-container>\n\n<ng-content select=\"nx-error\" *ngIf=\"errorState\"></ng-content>\n\n<ng-template #defaultFileRow let-templateContext=\"templateContext\" let-file=\"file\">\n    <nx-file-upload-name [name]=\"file?.name\"></nx-file-upload-name>\n\n    <nx-file-upload-size [size]=\"file?.size\" [isUploading]=\"file.isUploading\" [uploadingLabel]=\"templateContext.uploadingLabel\"></nx-file-upload-size>\n\n    <div class=\"nx-file-uploader--file-row-actions\">\n        <nx-file-upload-status\n            [isUploading]=\"file.isUploading\"\n            [isUploaded]=\"file.isUploaded\"\n            [uploadedLabel]=\"templateContext.uploadedLabel\"\n        ></nx-file-upload-status>\n\n        <nx-file-upload-delete [deleteLabel]=\"templateContext.deleteLabel\" [isUploading]=\"file.isUploading\" (click)=\"removeFile(file)\"></nx-file-upload-delete>\n    </div>\n</ng-template>\n", styles: [":host{display:block}:host ::ng-deep nx-error.nx-error--message{margin:12px 0}.nx-file-uploader--file-row{display:flex;flex-wrap:wrap;align-items:center;border-bottom-width:1px;border-bottom-style:solid;padding:8px 12px;border-bottom-color:var(--file-uploader-file-row-border-bottom-color);color:var(--file-uploader-file-row-text-color)}.nx-file-uploader--file-row:hover{background-color:var(--file-uploader-file-row-hover-background-color)}.nx-file-uploader--file-row:focus{outline:none}.nx-file-uploader--file-row ::ng-deep .nx-file-uploader--file-row-actions{margin-left:auto;display:flex;align-items:center;justify-content:flex-end;min-width:120px;flex:none}:host-context([dir=rtl]) .nx-file-uploader--file-row ::ng-deep .nx-file-uploader--file-row-actions{margin-left:0;margin-left:initial;margin-right:auto}.nx-file-uploader--file-row.nx-file-uploader--default-template nx-file-upload-name{flex:1}@media (max-width: 703px){.nx-file-uploader--file-row.nx-file-uploader--default-template nx-file-upload-name{flex:100%}}.nx-file-uploader--file-row.nx-file-uploader--default-template nx-file-upload-size{flex:none}.nx-file-uploader--file-row.nx-file-uploader--default-template nx-file-upload-status{flex:0 1 auto;padding:0 16px}.nx-file-uploader--file-row.nx-file-uploader--default-template nx-file-upload-delete{flex:0 1 auto}.nx-file-uploader--file-row.nx-file-uploader--file-state-uploading .file-name{color:var(--file-uploader-file-row-uploading-file-name-color)}::ng-deep input[type=file]{display:none}::ng-deep .nx-file-upload-button{display:block}::ng-deep .nx-file-upload-hint{font-size:var(--file-uploader-hint-font-size);line-height:var(--file-uploader-hint-line-height);font-weight:var(--file-uploader-hint-font-weight);letter-spacing:var(--file-uploader-hint-letter-spacing);display:block}.nx-file-uploader--file-row.cdk-keyboard-focused{box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-file-uploader--file-row.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}\n"], components: [{ type: NxFileUploaderItemName, selector: "nx-file-upload-name", inputs: ["name"] }, { type: NxFileUploaderItemSize, selector: "nx-file-upload-size", inputs: ["size", "isUploading", "uploadingLabel"] }, { type: NxFileUploaderItemStatus, selector: "nx-file-upload-status", inputs: ["isUploading", "isUploaded", "uploadedLabel"] }, { type: NxFileUploaderItemDelete, selector: "nx-file-upload-delete", inputs: ["isUploading", "deleteLabel"] }], directives: [{ type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i9.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i9.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-file-uploader', exportAs: 'NxFileUploaderComponent', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[attr.aria-invalid]': 'errorState',
                        '[class.has-error]': 'errorState',
                    }, template: "<ng-content select=\"nx-label\"></ng-content>\n<ng-content select=\"[nxFileUploadHint]\"></ng-content>\n<ng-content select=\"nx-file-uploader-drop-zone\"></ng-content>\n<ng-content select=\"[nxFileUploadButton]\"></ng-content>\n<input\n    #nativeInputFile\n    type=\"file\"\n    [attr.multiple]=\"multiple || null\"\n    [attr.disabled]=\"disabled || null\"\n    [attr.accept]=\"accept\"\n    (change)=\"_onFileChange($event)\"\n    [id]=\"_inputId\"\n/>\n<ng-container *ngIf=\"value\">\n    <div class=\"nx-file-uploader--file-list nx-margin-bottom-m\" role=\"list\" [attr.aria-labelledby]=\"_labelId\">\n        <div\n            #fileRowElement\n            class=\"nx-file-uploader--file-row\"\n            [class.nx-file-uploader--file-state-uploading]=\"file.isUploading\"\n            [class.nx-file-uploader--default-template]=\"!_itemTemplate\"\n            *ngFor=\"let file of value\"\n            role=\"listitem\"\n            (keydown)=\"_handleKeydownListRow($event)\"\n        >\n            <ng-container\n                *ngTemplateOutlet=\"_itemTemplate ? _itemTemplate : defaultFileRow; context: { templateContext: _templateContext, file: file }\"\n            ></ng-container>\n        </div>\n    </div>\n</ng-container>\n\n<ng-content select=\"nx-error\" *ngIf=\"errorState\"></ng-content>\n\n<ng-template #defaultFileRow let-templateContext=\"templateContext\" let-file=\"file\">\n    <nx-file-upload-name [name]=\"file?.name\"></nx-file-upload-name>\n\n    <nx-file-upload-size [size]=\"file?.size\" [isUploading]=\"file.isUploading\" [uploadingLabel]=\"templateContext.uploadingLabel\"></nx-file-upload-size>\n\n    <div class=\"nx-file-uploader--file-row-actions\">\n        <nx-file-upload-status\n            [isUploading]=\"file.isUploading\"\n            [isUploaded]=\"file.isUploaded\"\n            [uploadedLabel]=\"templateContext.uploadedLabel\"\n        ></nx-file-upload-status>\n\n        <nx-file-upload-delete [deleteLabel]=\"templateContext.deleteLabel\" [isUploading]=\"file.isUploading\" (click)=\"removeFile(file)\"></nx-file-upload-delete>\n    </div>\n</ng-template>\n", styles: [":host{display:block}:host ::ng-deep nx-error.nx-error--message{margin:12px 0}.nx-file-uploader--file-row{display:flex;flex-wrap:wrap;align-items:center;border-bottom-width:1px;border-bottom-style:solid;padding:8px 12px;border-bottom-color:var(--file-uploader-file-row-border-bottom-color);color:var(--file-uploader-file-row-text-color)}.nx-file-uploader--file-row:hover{background-color:var(--file-uploader-file-row-hover-background-color)}.nx-file-uploader--file-row:focus{outline:none}.nx-file-uploader--file-row ::ng-deep .nx-file-uploader--file-row-actions{margin-left:auto;display:flex;align-items:center;justify-content:flex-end;min-width:120px;flex:none}:host-context([dir=rtl]) .nx-file-uploader--file-row ::ng-deep .nx-file-uploader--file-row-actions{margin-left:0;margin-left:initial;margin-right:auto}.nx-file-uploader--file-row.nx-file-uploader--default-template nx-file-upload-name{flex:1}@media (max-width: 703px){.nx-file-uploader--file-row.nx-file-uploader--default-template nx-file-upload-name{flex:100%}}.nx-file-uploader--file-row.nx-file-uploader--default-template nx-file-upload-size{flex:none}.nx-file-uploader--file-row.nx-file-uploader--default-template nx-file-upload-status{flex:0 1 auto;padding:0 16px}.nx-file-uploader--file-row.nx-file-uploader--default-template nx-file-upload-delete{flex:0 1 auto}.nx-file-uploader--file-row.nx-file-uploader--file-state-uploading .file-name{color:var(--file-uploader-file-row-uploading-file-name-color)}::ng-deep input[type=file]{display:none}::ng-deep .nx-file-upload-button{display:block}::ng-deep .nx-file-upload-hint{font-size:var(--file-uploader-hint-font-size);line-height:var(--file-uploader-hint-line-height);font-weight:var(--file-uploader-hint-font-weight);letter-spacing:var(--file-uploader-hint-letter-spacing);display:block}.nx-file-uploader--file-row.cdk-keyboard-focused{box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-file-uploader--file-row.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1$2.ErrorStateMatcher }, { type: NxFileUploaderIntl }, { type: i3.NgForm, decorators: [{
                    type: Optional
                }] }, { type: i3.FormGroupDirective, decorators: [{
                    type: Optional
                }] }, { type: i3.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }, { type: i4.FocusMonitor }]; }, propDecorators: { button: [{
                type: ContentChild,
                args: [NxFileUploaderButtonDirective, { static: false }]
            }], _dropZone: [{
                type: ContentChild,
                args: [NxFileUploaderDropZoneComponent, { static: true }]
            }], nativeInputFile: [{
                type: ViewChild,
                args: ['nativeInputFile', { static: false }]
            }], _label: [{
                type: ContentChild,
                args: [NxLabelComponent, { static: false }]
            }], _hintChildren: [{
                type: ContentChildren,
                args: [NxFileUploaderHintDirective]
            }], _errorList: [{
                type: ContentChildren,
                args: [NxErrorComponent]
            }], _fileRowElements: [{
                type: ViewChildren,
                args: ['fileRowElement']
            }], valueChange: [{
                type: Output
            }], fileDeleted: [{
                type: Output
            }], filesSelected: [{
                type: Output
            }], id: [{
                type: Input
            }], required: [{
                type: Input
            }], value: [{
                type: Input
            }], name: [{
                type: Input
            }], disabled: [{
                type: Input
            }], multiple: [{
                type: Input
            }], accept: [{
                type: Input
            }], maxFileSize: [{
                type: Input
            }], uploader: [{
                type: Input
            }], maxFileNumber: [{
                type: Input
            }], itemTemplate: [{
                type: Input
            }] } });

// This Directive solely purpose is to mark given ng-content and project it into the required destination.
class NxFileUploaderTriggerDirective {
    /** References the file upload component instance that the trigger is associated with. */
    set fileUpload(value) {
        if (this._fileUpload !== value) {
            this._fileUpload = value;
        }
    }
    get fileUpload() {
        return this._fileUpload;
    }
    _onClick() {
        this._fileUpload.uploadFiles();
    }
}
NxFileUploaderTriggerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderTriggerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NxFileUploaderTriggerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxFileUploaderTriggerDirective, selector: "[nxFileUploadTriggerFor]", inputs: { fileUpload: ["nxFileUploadTriggerFor", "fileUpload"] }, host: { listeners: { "click": "_onClick()" } }, exportAs: ["nxFileUploadTrigger"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderTriggerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[nxFileUploadTriggerFor]',
                    exportAs: 'nxFileUploadTrigger',
                }]
        }], propDecorators: { fileUpload: [{
                type: Input,
                args: ['nxFileUploadTriggerFor']
            }], _onClick: [{
                type: HostListener,
                args: ['click']
            }] } });

class NxFileUploaderModule {
}
NxFileUploaderModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NxFileUploaderModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderModule, declarations: [NxFileUploaderComponent,
        NxFileUploaderButtonDirective,
        NxFileUploaderHintDirective,
        NxFileUploaderDropZoneComponent,
        NxFileUploaderTriggerDirective,
        NxFileUploaderItemName,
        NxFileUploaderItemSize,
        NxFileUploaderItemStatus,
        NxFileUploaderItemDelete], imports: [CommonModule, NxIconModule, NxButtonModule, NxSpinnerModule], exports: [NxFileUploaderComponent,
        NxFileUploaderButtonDirective,
        NxFileUploaderHintDirective,
        NxFileUploaderDropZoneComponent,
        NxErrorModule,
        NxLabelModule,
        NxFileUploaderTriggerDirective,
        NxFileUploaderItemName,
        NxFileUploaderItemSize,
        NxFileUploaderItemStatus,
        NxFileUploaderItemDelete] });
NxFileUploaderModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderModule, providers: [NxFileUploaderIntl], imports: [[CommonModule, NxIconModule, NxButtonModule, NxSpinnerModule], NxErrorModule,
        NxLabelModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NxIconModule, NxButtonModule, NxSpinnerModule],
                    declarations: [
                        NxFileUploaderComponent,
                        NxFileUploaderButtonDirective,
                        NxFileUploaderHintDirective,
                        NxFileUploaderDropZoneComponent,
                        NxFileUploaderTriggerDirective,
                        NxFileUploaderItemName,
                        NxFileUploaderItemSize,
                        NxFileUploaderItemStatus,
                        NxFileUploaderItemDelete,
                    ],
                    exports: [
                        NxFileUploaderComponent,
                        NxFileUploaderButtonDirective,
                        NxFileUploaderHintDirective,
                        NxFileUploaderDropZoneComponent,
                        NxErrorModule,
                        NxLabelModule,
                        NxFileUploaderTriggerDirective,
                        NxFileUploaderItemName,
                        NxFileUploaderItemSize,
                        NxFileUploaderItemStatus,
                        NxFileUploaderItemDelete,
                    ],
                    providers: [NxFileUploaderIntl],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { FileItem, NxFileUploadError, NxFileUploadSuccess, NxFileUploader, NxFileUploaderButtonDirective, NxFileUploaderComponent, NxFileUploaderDropZoneComponent, NxFileUploaderHintDirective, NxFileUploaderIntl, NxFileUploaderItemDelete, NxFileUploaderItemName, NxFileUploaderItemSize, NxFileUploaderItemStatus, NxFileUploaderModule, NxFileUploaderTriggerDirective, NxFileUploaderValidators, isFileTypeValid };
//# sourceMappingURL=aposin-ng-aquila-file-uploader.mjs.map
