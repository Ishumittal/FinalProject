{"version":3,"file":"aposin-ng-aquila-iso-date-adapter.mjs","sources":["../../../projects/ng-aquila/src/iso-date-adapter/adapter/dayjs-locale-utils.ts","../../../projects/ng-aquila/src/iso-date-adapter/adapter/iso-date-adapter.ts","../../../projects/ng-aquila/src/iso-date-adapter/adapter/iso-date-formats.ts","../../../projects/ng-aquila/src/iso-date-adapter/adapter/iso-date-adapter.module.ts","../../../projects/ng-aquila/src/iso-date-adapter/aposin-ng-aquila-iso-date-adapter.ts"],"sourcesContent":["import dayjs from 'dayjs';\nimport supportedLocales from 'dayjs/locale.json';\n\n/**\n * This function turns a well-formatted locale into one that is known to dayjs.\n * To figure out what is known to dayjs this function makes use of the file `locale.json`\n * that is part of any dayjs relase (see https://day.js.org/docs/en/i18n/i18n).\n * To match the locale it follows the \"lookup\" logic specified in the RFC for\n * \"Matching of Language Tags\" (see https://www.rfc-editor.org/info/rfc4647).\n *\n * @example en-GB -> en-gb, en-US -> en, de-DE -> de, de-CH -> de-ch\n * @param localeId a \"language-range\" following the BCP 47 standard\n * @returns a \"language-range\" that is supported by dayjs\n */\nexport function convertToDayjsLocale(localeId: string): string {\n    let dayjsLocale = supportedLocales.find(locale => locale.key === localeId.toLowerCase());\n\n    if (!dayjsLocale && localeId.includes('-')) {\n        let localeParts = localeId.toLowerCase().split('-');\n        while (localeParts.length > 0) {\n            dayjsLocale = supportedLocales.find(locale => locale.key === localeParts.join('-'));\n            if (dayjsLocale) {\n                console.warn(`The locale '${localeId}' is not known to dayjs. Using closest match '${dayjsLocale.key}' instead.`);\n                break;\n            }\n            localeParts = localeParts.slice(0, localeParts.length - 1);\n        }\n    }\n\n    if (!dayjsLocale) {\n        console.warn(`The locale '${localeId}' is not known to dayjs. Using the default 'en'.`);\n        dayjsLocale = { key: 'en', name: '' };\n    }\n\n    return dayjsLocale.key;\n}\n\n/**\n * This function uses a dynamic import to load the dayjs data for the requested locale\n * and returns the localeData for this locale.\n *\n * @param localeId a \"language-range\" following the BCP 47 standard\n * @returns a Promise that resolves with the dayjs localeData for the given locale\n */\nexport async function getDayjsLocaleData(localeId: string): Promise<dayjs.InstanceLocaleDataReturn> {\n    return import(`dayjs/locale/${localeId}.js`)\n        .then(() => dayjs().locale(localeId).localeData())\n        .catch(() => {\n            console.warn(`The requested dayjs locale '${localeId}' could not be loaded.`);\n            // return the global localeData as fallback\n            return dayjs.localeData();\n        });\n}\n","import { Inject, Optional } from '@angular/core';\nimport { NX_DATE_LOCALE, NxDateAdapter } from '@aposin/ng-aquila/datefield';\nimport { pad } from '@aposin/ng-aquila/utils';\nimport dayjs, { Dayjs } from 'dayjs';\nimport customParseFormat from 'dayjs/plugin/customParseFormat';\nimport localeData from 'dayjs/plugin/localeData';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport utc from 'dayjs/plugin/utc';\n\nimport { convertToDayjsLocale, getDayjsLocaleData } from './dayjs-locale-utils';\n\ndayjs.extend(localeData);\ndayjs.extend(customParseFormat);\ndayjs.extend(localizedFormat);\ndayjs.extend(utc);\n\nconst ISO_STRING_FORMAT = 'YYYY-MM-DD';\nconst ISO_REGEX = /^(\\d{4})(-?)(1[0-2]|0[1-9])\\2(3[01]|0[1-9]|[12]\\d)$/;\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n    const valuesArray = Array(length);\n    for (let i = 0; i < length; i++) {\n        valuesArray[i] = valueFunction(i);\n    }\n    return valuesArray;\n}\n\n/**\n * @docs-private\n */\nexport class NxIsoDateAdapter extends NxDateAdapter<string> {\n    private _localeData!: {\n        firstDayOfWeek: number;\n        longMonths: string[];\n        shortMonths: string[];\n        dates: string[];\n        longDaysOfWeek: string[];\n        shortDaysOfWeek: string[];\n        narrowDaysOfWeek: string[];\n    };\n\n    private _dayjsLocale!: string;\n\n    constructor(@Optional() @Inject(NX_DATE_LOCALE) dateLocale: string | null) {\n        super();\n        this.setLocale(dateLocale || dayjs.locale());\n    }\n\n    toIso8601(date: string): string {\n        return dayjs.utc(date).format();\n    }\n\n    deserialize(value: any): string | null {\n        let date;\n\n        // TODO should we accept that or only take strings?\n        if (value instanceof Date) {\n            date = dayjs(value).locale(this._dayjsLocale);\n        }\n        if (typeof value === 'string') {\n            if (!value) {\n                return null;\n            }\n            date = dayjs(value).locale(this._dayjsLocale);\n        }\n\n        if (date && this.isValid(date.toString())) {\n            return dayjs(date).locale(this._dayjsLocale).format(ISO_STRING_FORMAT);\n        }\n\n        return super.deserialize(value);\n    }\n\n    format(date: string, displayFormat: any): string {\n        return this._createDayjs(date).format(displayFormat);\n    }\n\n    /**\n     * if the given formats include a localized format we have to map\n     * it manually to a dayjs format as dayjs recognizes locale\n     * format only for formatting not for parsing\n     * see https://github.com/iamkun/dayjs/issues/694#issuecomment-543209946\n     */\n    normalizeFormat(format: string | string[]): string[] {\n        const availableLocalFormats: { [key: string]: any } = dayjs.Ls[this._dayjsLocale]?.formats;\n        if (!availableLocalFormats) {\n            throw new Error(\n                `NxIsoDateAdapter: The used locale \"${this._dayjsLocale}\" is not available in this day.js instance. Please make sure the locale is imported.`,\n            );\n        }\n        let normalizedFormat = format;\n\n        if (!Array.isArray(normalizedFormat)) {\n            normalizedFormat = [normalizedFormat];\n        }\n\n        normalizedFormat = normalizedFormat.map(formatString => {\n            if (Object.keys(availableLocalFormats).includes(formatString)) {\n                return availableLocalFormats[formatString];\n            }\n\n            return formatString;\n        });\n\n        return normalizedFormat;\n    }\n\n    parse(value: any, format: string | string[], strict: boolean): string {\n        let obj!: Dayjs;\n\n        const normalizedFormats = this.normalizeFormat(format);\n        if (value && typeof value === 'string') {\n            if (strict) {\n                obj = dayjs(value, normalizedFormats, this._dayjsLocale, true);\n            } else {\n                // The non strict parsing of day.js is rather strict when it comes to separators.\n                // For example, this format: YYYY-MM-DD still requires the user to type in the -\n                // To get a little closer to the behavior of momentjs, the following code extends\n                // the list of given formats with versions were all the separators were removed\n                const formatsWithoutSeparators = [...normalizedFormats].map(normalizedformat => normalizedformat.replace(/\\W/g, ''));\n                obj = dayjs(value, [...formatsWithoutSeparators, ...normalizedFormats], this._dayjsLocale, false);\n            }\n        }\n\n        if (!obj?.isValid()) {\n            return '';\n        }\n\n        return obj ? obj.format(ISO_STRING_FORMAT) : '';\n    }\n\n    isValid(date: string): boolean {\n        return dayjs(date).isValid();\n    }\n\n    clone(date: string): string {\n        return date;\n    }\n\n    isDateInstance(obj: any): boolean {\n        return obj === '' || (typeof obj === 'string' && ISO_REGEX.test(obj));\n    }\n\n    invalid(): string {\n        return '';\n    }\n\n    getYear(date: string): number {\n        return this._createDayjs(date).year();\n    }\n\n    getMonth(date: string): number {\n        return this._createDayjs(date).month();\n    }\n\n    getDate(date: string): number {\n        return this._createDayjs(date).date();\n    }\n\n    getYearName(date: string): string {\n        return this._createDayjs(date).format('YYYY');\n    }\n\n    createDate(year: number, month: number, date: number): string {\n        // Check for invalid month and date (except upper bound on date which we have to check after\n        // creating the Date).\n        if (month < 0 || month > 11) {\n            throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n        }\n\n        if (date < 1) {\n            throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n        }\n\n        // dayjs adds overflows up instead of creating invalid dates so we have to check that here\n        const obj = this._createDayjs(this._createString(year, month + 1, date));\n        // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n        if (obj.month() !== month || obj.year() !== year) {\n            throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n        }\n\n        return obj.format(ISO_STRING_FORMAT);\n    }\n\n    getNumDaysInMonth(date: string): number {\n        return this._createDayjs(date).daysInMonth();\n    }\n\n    getDateNames(): string[] {\n        return this._localeData.dates;\n    }\n\n    getDayOfWeek(date: string): number {\n        return this._createDayjs(date).day();\n    }\n\n    getFirstDayOfWeek(): number {\n        return this._localeData.firstDayOfWeek;\n    }\n\n    getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n        return style === 'long' ? this._localeData.longMonths : this._localeData.shortMonths;\n    }\n\n    today(): string {\n        return dayjs().format(ISO_STRING_FORMAT);\n    }\n\n    addCalendarMonths(date: string, months: number): string {\n        return this._createDayjs(date).add(months, 'M').format(ISO_STRING_FORMAT);\n    }\n\n    addCalendarYears(date: string, years: number): string {\n        return this._createDayjs(date).add(years, 'y').format(ISO_STRING_FORMAT);\n    }\n\n    addCalendarDays(date: string, days: number): string {\n        return this._createDayjs(date).add(days, 'd').format(ISO_STRING_FORMAT);\n    }\n\n    getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n        if (style === 'long') {\n            return this._localeData.longDaysOfWeek;\n        }\n        if (style === 'short') {\n            return this._localeData.shortDaysOfWeek;\n        }\n        return this._localeData.narrowDaysOfWeek;\n    }\n\n    async setLocale(locale: string) {\n        this._dayjsLocale = convertToDayjsLocale(locale);\n        const data = await getDayjsLocaleData(this._dayjsLocale);\n\n        this._localeData = {\n            firstDayOfWeek: data.firstDayOfWeek(),\n            longMonths: data.months(),\n            shortMonths: data.monthsShort(),\n            dates: range(31, i => this._createDayjs(this.createDate(2017, 0, i + 1)).format('D')),\n            longDaysOfWeek: data.weekdays(),\n            shortDaysOfWeek: data.weekdaysShort(),\n            narrowDaysOfWeek: data.weekdaysMin(),\n        };\n\n        super.setLocale(locale);\n    }\n\n    private _createDayjs(value: string) {\n        return dayjs.utc(value).locale(this._dayjsLocale);\n    }\n\n    private _createString(year: number, month: number, date: number) {\n        return `${year}-${pad(month.toString())}-${pad(date.toString())}`;\n    }\n}\n","import { NxDateFormats } from '@aposin/ng-aquila/datefield';\n\nexport const NX_ISO_DATE_FORMATS: NxDateFormats = {\n    parse: {\n        dateInput: 'L',\n    },\n    display: {\n        dateInput: 'L',\n        monthYearLabel: 'MMM YYYY',\n        dateA11yLabel: 'LL',\n        monthYearA11yLabel: 'MMMM YYYY',\n    },\n};\n","import { NgModule } from '@angular/core';\nimport { NX_DATE_FORMATS, NX_DATE_LOCALE, NX_DATE_LOCALE_PROVIDER, NxDateAdapter } from '@aposin/ng-aquila/datefield';\n\nimport { NxIsoDateAdapter } from './iso-date-adapter';\nimport { NX_ISO_DATE_FORMATS } from './iso-date-formats';\n\n@NgModule({\n    providers: [NX_DATE_LOCALE_PROVIDER, { provide: NxDateAdapter, useClass: NxIsoDateAdapter, deps: [NX_DATE_LOCALE] }],\n})\nexport class IsoDateModule {}\n\n@NgModule({\n    imports: [IsoDateModule],\n    providers: [{ provide: NX_DATE_FORMATS, useValue: NX_ISO_DATE_FORMATS }],\n})\nexport class NxIsoDateModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}