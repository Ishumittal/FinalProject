{"version":3,"file":"aposin-ng-aquila-tabs.mjs","sources":["../../../projects/ng-aquila/src/tabs/tab-content.ts","../../../projects/ng-aquila/src/tabs/tab-group-base.ts","../../../projects/ng-aquila/src/tabs/tab-label.ts","../../../projects/ng-aquila/src/tabs/tab.ts","../../../projects/ng-aquila/src/tabs/tab.html","../../../projects/ng-aquila/src/tabs/tab-body.ts","../../../projects/ng-aquila/src/tabs/tab-body.html","../../../projects/ng-aquila/src/tabs/tabs.models.ts","../../../projects/ng-aquila/src/tabs/scrollable-tab-bar.ts","../../../projects/ng-aquila/src/tabs/tab-label-wrapper.ts","../../../projects/ng-aquila/src/tabs/scroll-indicator/scroll-indicator.ts","../../../projects/ng-aquila/src/tabs/scroll-indicator/scroll-indicator.html","../../../projects/ng-aquila/src/tabs/tab-header.ts","../../../projects/ng-aquila/src/tabs/tab-header.html","../../../projects/ng-aquila/src/tabs/tab-header-outlet.ts","../../../projects/ng-aquila/src/tabs/tab-group.ts","../../../projects/ng-aquila/src/tabs/tab-group.html","../../../projects/ng-aquila/src/tabs/tab-nav-bar.ts","../../../projects/ng-aquila/src/tabs/tab-nav-bar.html","../../../projects/ng-aquila/src/tabs/tabs.module.ts","../../../projects/ng-aquila/src/tabs/aposin-ng-aquila-tabs.ts"],"sourcesContent":["import { Directive, TemplateRef } from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({ selector: '[nxTabContent]' })\nexport class NxTabContentDirective {\n    constructor(/** @docs-private */ public template: TemplateRef<any>) {}\n}\n","import { Directive } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { NxTabsAppearance } from './tabs.models';\n\n/** @docs-private */\n@Directive()\nexport class NxTabGroupBase {\n    disabled!: boolean;\n    appearance!: NxTabsAppearance;\n    _appearanceChange!: Subject<void>;\n}\n","import { CdkPortal } from '@angular/cdk/portal';\nimport { Directive } from '@angular/core';\n\n/** @docs-private */\n@Directive({ selector: '[nxTabLabel]' })\nexport class NxTabLabelDirective extends CdkPortal {}\n","import { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    EmbeddedViewRef,\n    Host,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    SimpleChanges,\n    TemplateRef,\n    ViewChild,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { NxTabContentDirective } from './tab-content';\nimport { NxTabGroupBase } from './tab-group-base';\nimport { NxTabLabelDirective } from './tab-label';\n\n@Component({\n    selector: 'nx-tab',\n    exportAs: 'nxTab',\n    templateUrl: 'tab.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxTabComponent implements OnChanges, OnDestroy, AfterContentInit {\n    private _label!: string;\n    private _disabled = false;\n\n    /** Emits whenever the internal state of the tab changes. */\n    readonly _stateChanges = new Subject<void>();\n\n    /**\n     * Content for the tab label given by `<ng-template nxTabLabel>`.\n     * @docs-private\n     * */\n    @ContentChild(NxTabLabelDirective, { read: TemplateRef, static: true })\n    get templateLabel(): TemplateRef<any> {\n        return this._templateLabel;\n    }\n    set templateLabel(value: TemplateRef<any>) {\n        // Only update the templateLabel via query if there is actually\n        // a nxTabLabel found. This works around an issue where a user may have\n        // manually set `templateLabel` during creation mode, which would then get clobbered\n        // by `undefined` when this query resolves.\n        if (value) {\n            this._templateLabel = value;\n        }\n    }\n\n    private _templateLabel!: TemplateRef<any>;\n\n    /** Template inside the NxTab view that contains an `<ng-content>`. */\n    @ViewChild(TemplateRef, { static: true }) _implicitContent!: TemplateRef<any>;\n    /**\n     * Template provided in the tab content that will be used if present, used to enable lazy-loading\n     */\n    @ContentChild(NxTabContentDirective, { read: TemplateRef, static: true })\n    _explicitContent!: TemplateRef<any>;\n\n    /** Sets the label of the tab shown in the tablist. */\n    @Input()\n    get label(): string {\n        return this._label;\n    }\n    set label(value: string) {\n        if (this._label !== value) {\n            this._label = value;\n        }\n    }\n\n    /** Sets the tab to disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._tabGroup?.disabled || this._disabled;\n    }\n    set disabled(value: BooleanInput) {\n        const coercedValue = coerceBooleanProperty(value);\n\n        if (this._disabled !== coercedValue) {\n            this._disabled = coercedValue;\n        }\n    }\n\n    private _headerViewRef!: EmbeddedViewRef<any>;\n    private _contentViewRef!: EmbeddedViewRef<any>;\n\n    /** @docs-private */\n    get headerViewRef() {\n        return this._headerViewRef;\n    }\n\n    /** @docs-private */\n    get contentViewRef() {\n        // for lazy loading we only create the viewref when it is asked for\n        if (!this._contentViewRef) {\n            const contentTemplate = this._explicitContent || this._implicitContent;\n            this._contentViewRef = contentTemplate.createEmbeddedView({});\n        }\n        return this._contentViewRef;\n    }\n\n    /**\n     * Whether the tab is currently active.\n     */\n    isActive = false;\n\n    constructor(@Inject(NxTabGroupBase) @Optional() @Host() private _tabGroup: NxTabGroupBase | null) {\n        if (!this._tabGroup) {\n            throw Error(`The nx-tab element has to be wrapped in a nx-tab-group to work.\n      Please provide a nx-tab-group element and place your tabs inside it.`);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ({}.hasOwnProperty.call(changes, 'label') || {}.hasOwnProperty.call(changes, 'disabled')) {\n            this._stateChanges.next();\n        }\n    }\n\n    ngAfterContentInit() {\n        if (this.templateLabel) {\n            this._headerViewRef = this.templateLabel.createEmbeddedView({});\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._stateChanges.complete();\n        this._contentViewRef.destroy();\n        if (this._headerViewRef) {\n            this._headerViewRef.destroy();\n        }\n    }\n}\n","<ng-template><ng-content></ng-content></ng-template>\n","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ChangeDetectionStrategy, Component, ElementRef, Input, OnChanges, OnDestroy, OnInit, SimpleChanges, ViewChild, ViewContainerRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { NxTabComponent } from './tab';\nimport { NxTabGroupBase } from './tab-group-base';\n\n/** @docs-private */\n@Component({\n    selector: 'nx-tab-body',\n    templateUrl: 'tab-body.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styleUrls: ['./tab-body.scss'],\n})\nexport class NxTabBodyComponent implements OnInit, OnDestroy, OnChanges {\n    @ViewChild('outlet', { static: true, read: ViewContainerRef }) _outlet!: ViewContainerRef;\n\n    @Input() tab!: NxTabComponent;\n\n    private _active = false;\n\n    @Input()\n    set active(value: BooleanInput) {\n        this._active = coerceBooleanProperty(value);\n    }\n    get active(): boolean {\n        return this._active;\n    }\n\n    private readonly _destroyed = new Subject<void>();\n\n    constructor(private _tabGroup: NxTabGroupBase, private _focusMonitor: FocusMonitor, private _elementRef: ElementRef) {\n        this._focusMonitor.monitor(this._elementRef);\n    }\n\n    ngOnInit() {\n        this._tabGroup._appearanceChange.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this.detach();\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if ('active' in changes) {\n            const change = changes.active;\n            if (change.currentValue) {\n                this.attach();\n            } else {\n                this.detach();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    attach() {\n        this._outlet.insert(this.tab.contentViewRef);\n    }\n\n    detach() {\n        const index = this._outlet.indexOf(this.tab.contentViewRef);\n        if (index !== -1) {\n            this._outlet.detach(index);\n        }\n    }\n}\n","<ng-container #outlet></ng-container>\n","import { InjectionToken } from '@angular/core';\n\nexport type NxTabsAppearance = 'expert' | 'default';\n\nexport interface TabGroupDefaultOptions {\n    /** Sets the default appearance. */\n    appearance?: NxTabsAppearance;\n}\n\nexport const TAB_GROUP_DEFAULT_OPTIONS = new InjectionToken<TabGroupDefaultOptions>('TAB_GROUP_DEFAULT_OPTIONS');\n\nexport interface TabNavBarDefaultOptions {\n    /** Sets the default appearance. */\n    appearance?: NxTabsAppearance;\n}\n\nexport const TAB_NAV_BAR_DEFAULT_OPTIONS = new InjectionToken<TabNavBarDefaultOptions>('TAB_NAV_BAR_DEFAULT_OPTIONS');\n","import { Direction, Directionality } from '@angular/cdk/bidi';\nimport { AfterContentInit, ChangeDetectorRef, Directive, ElementRef, OnDestroy, Optional, QueryList } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nconst SPACE_BETWEEN_TABS = 32;\nconst START_BUTTON_WIDTH = 40;\n\n/** @docs-private */\n@Directive()\nexport abstract class NxScrollableTabBar implements AfterContentInit, OnDestroy {\n    tabHeaderContainer!: ElementRef<HTMLElement>;\n    scrollableTabsList!: ElementRef<HTMLElement>;\n    tabButtons!: QueryList<HTMLElement>;\n\n    _isScrolledToStart = true;\n    _isScrolledToEnd = true;\n\n    private readonly _destroyed = new Subject<void>();\n\n    constructor(public _cdr: ChangeDetectorRef, @Optional() private _dir: Directionality | null, private _element: ElementRef) {\n        this._dir?.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            if (this.scrollableTabsList?.nativeElement.scrollLeft !== 0) {\n                const absoluteScrollLeft = Math.abs(this.scrollableTabsList?.nativeElement.scrollLeft);\n                setTimeout(() => {\n                    this.scrollableTabsList.nativeElement.scrollLeft = this.direction === 'ltr' ? absoluteScrollLeft : -absoluteScrollLeft;\n                });\n            }\n        });\n    }\n\n    ngAfterContentInit() {\n        this.tabButtons.changes.pipe(takeUntil(this._destroyed)).subscribe(() => setTimeout(() => this._updateScrollButtons()));\n        setTimeout(() => {\n            this.scrollableTabsList.nativeElement.addEventListener('scroll', this._scrollHandler);\n            this._updateScrollButtons();\n        });\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n\n    _scrollHandler = (event: Event): void => {\n        this._updateScrollButtons();\n    };\n\n    get direction(): Direction {\n        return this._dir?.value || 'ltr';\n    }\n\n    get scrollable(): boolean {\n        return !this._isScrolledToStart || !this._isScrolledToEnd;\n    }\n\n    scrollToStart() {\n        const scrollListElement = this.scrollableTabsList.nativeElement;\n        const tabsListWidth = scrollListElement.getBoundingClientRect().width;\n        const headerScrollPosition = Math.abs(scrollListElement.scrollLeft);\n        let lastVisiblePosition = 0;\n        let itemToScrollTo!: number;\n\n        for (let i = 0; i < scrollListElement.children.length; i++) {\n            const currentChildWidth = scrollListElement.children[i].getBoundingClientRect().width;\n            const currentChildStartsBeforeLeftEdge = lastVisiblePosition < headerScrollPosition;\n            const currentChildFullyVisible = currentChildStartsBeforeLeftEdge && lastVisiblePosition + currentChildWidth >= headerScrollPosition;\n            const currentChildNotFullyVisible = currentChildStartsBeforeLeftEdge && lastVisiblePosition + currentChildWidth < headerScrollPosition;\n            const nextChildFullyVisible = lastVisiblePosition + currentChildWidth + SPACE_BETWEEN_TABS >= headerScrollPosition;\n\n            if (currentChildFullyVisible || (currentChildNotFullyVisible && nextChildFullyVisible)) {\n                // add width of current child. This is now the point which has to be visible on the right side:\n                lastVisiblePosition += currentChildWidth;\n                itemToScrollTo = i;\n                break;\n            } else {\n                // current and next child are fully visible: continue\n                lastVisiblePosition += currentChildWidth + SPACE_BETWEEN_TABS;\n            }\n        }\n\n        // now go back to start one by one and find the item most to the start where the lastVisibleItem is still fully visible\n        let newPosition = lastVisiblePosition;\n        for (let i = itemToScrollTo; i >= 0; i--) {\n            const currentChildWidth = scrollListElement.children[i].getBoundingClientRect().width;\n            const previousChildWidth = i > 0 ? scrollListElement.children[i - 1].getBoundingClientRect().width : 0;\n\n            const currentChildFitsInWidth = lastVisiblePosition - (newPosition - currentChildWidth) <= tabsListWidth;\n            const previousChildFitsInWidth = lastVisiblePosition - (newPosition - currentChildWidth - SPACE_BETWEEN_TABS - previousChildWidth) <= tabsListWidth;\n\n            if (!previousChildWidth) {\n                this._scrollTabListTo(0);\n                return;\n            } else if (currentChildWidth > tabsListWidth || (currentChildFitsInWidth && !previousChildFitsInWidth)) {\n                // found item where scrolling should be starting: beginning of currentChild\n                newPosition -= currentChildWidth;\n                this._scrollTabListTo(this.direction === 'ltr' ? newPosition : -newPosition);\n                return;\n            }\n            // current and previous child fit: continue\n            newPosition -= currentChildWidth + SPACE_BETWEEN_TABS;\n        }\n    }\n\n    scrollToEnd() {\n        const scrollListElement = this.scrollableTabsList.nativeElement;\n        const tabsListWidth = scrollListElement.getBoundingClientRect().width;\n        const headerScrollPosition = Math.abs(scrollListElement.scrollLeft);\n        let newPosition = 0;\n\n        for (let i = 0; i < scrollListElement.children.length; i++) {\n            const currentChildWidth = scrollListElement.children[i].getBoundingClientRect().width;\n            const nextChildWidth = i < scrollListElement.children.length - 1 ? scrollListElement.children[i + 1].getBoundingClientRect().width : 0;\n            const currentChildFullyVisible = newPosition + currentChildWidth <= headerScrollPosition + tabsListWidth;\n            const nextChildFullyVisible = newPosition + currentChildWidth + SPACE_BETWEEN_TABS + nextChildWidth <= headerScrollPosition + tabsListWidth;\n            const currentChildHalfVisible = currentChildWidth - START_BUTTON_WIDTH + SPACE_BETWEEN_TABS + nextChildWidth > tabsListWidth;\n\n            if (currentChildFullyVisible && !nextChildFullyVisible) {\n                // current item is the one to scroll to (minus space for scrollStartButton)\n                // calculate: if nextChild is too long and does not fit fully in header, then the next child should be the first one visible\n\n                if (Math.abs(headerScrollPosition - Math.round(newPosition + currentChildWidth + SPACE_BETWEEN_TABS)) <= 2) {\n                    // it is already scrolled to the nextChild, but nextChild is longer than whole tabsListWidth => scroll to nextNextChild\n                    // this is done if the current scrollLeft Position is ~ the start of nextChild\n                    newPosition += currentChildWidth + SPACE_BETWEEN_TABS + nextChildWidth + SPACE_BETWEEN_TABS;\n                } else if (currentChildHalfVisible) {\n                    // if currentItem is half visible, the nextItem would be not fully visible\n                    // => new scroll position: show nextItem right after scrollToStart button\n                    newPosition += currentChildWidth + SPACE_BETWEEN_TABS;\n                } else {\n                    // else: currentItem should be half visible, scrollToStart button is covering half of it\n                    newPosition += START_BUTTON_WIDTH;\n                }\n                this._scrollTabListTo(this.direction === 'ltr' ? newPosition : -newPosition);\n                return;\n            }\n            // current and next element are fully visible: add width of current element and continue\n            newPosition += currentChildWidth + SPACE_BETWEEN_TABS;\n        }\n    }\n\n    _updateScrollButtons() {\n        const scrollListElement = this.scrollableTabsList.nativeElement;\n        if (Math.round(this._element.nativeElement.getBoundingClientRect().width) >= scrollListElement.scrollWidth) {\n            // not scrollable\n            if (!this._isScrolledToStart || !this._isScrolledToEnd) {\n                this._isScrolledToStart = true;\n                this._isScrolledToEnd = true;\n                this._cdr.markForCheck();\n            }\n            return;\n        }\n\n        // scrollable\n        if (this.scrollableTabsList?.nativeElement.scrollLeft === 0 && !this._isScrolledToStart) {\n            this._isScrolledToStart = true;\n            this._cdr.markForCheck();\n        } else if (this.scrollableTabsList?.nativeElement.scrollLeft !== 0 && this._isScrolledToStart) {\n            this._isScrolledToStart = false;\n            this._cdr.markForCheck();\n        }\n\n        const scrollRight = Math.round(Math.abs(scrollListElement.scrollLeft) + scrollListElement.getBoundingClientRect().width);\n\n        if (scrollRight === scrollListElement.scrollWidth && !this._isScrolledToEnd) {\n            this._isScrolledToEnd = true;\n            this._cdr.markForCheck();\n        } else if (scrollRight !== scrollListElement.scrollWidth && this._isScrolledToEnd) {\n            this._isScrolledToEnd = false;\n            this._cdr.markForCheck();\n        }\n    }\n\n    private _scrollTabListTo(scrollLeft: number) {\n        if (typeof this.scrollableTabsList?.nativeElement.scrollTo === 'function') {\n            this.scrollableTabsList?.nativeElement.scrollTo({ left: scrollLeft, behavior: 'smooth' });\n        } else {\n            // scrollTo() is not defined on IE\n            this.scrollableTabsList.nativeElement.scrollLeft = scrollLeft;\n        }\n    }\n}\n","import { FocusableOption } from '@angular/cdk/a11y';\nimport { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directive, ElementRef, Input } from '@angular/core';\n\n/** @docs-private */\n@Directive({ selector: '[nxTabLabelWrapper]' })\nexport class NxTabLabelWrapperDirective implements FocusableOption {\n    private _disabled = false;\n\n    constructor(public elementRef: ElementRef) {}\n\n    /** Whether the tab group is disabled. Default: false. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n        if (this.disabled !== newValue) {\n            this._disabled = newValue;\n        }\n    }\n\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n}\n","import { Direction, Directionality } from '@angular/cdk/bidi';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnDestroy, Optional, Output } from '@angular/core';\nimport { NxBreakpoints, NxViewportService } from '@aposin/ng-aquila/utils';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nexport type NxScrollDirection = 'start' | 'end';\n\n@Component({\n    selector: 'nx-tab-scroll-indicator',\n    templateUrl: 'scroll-indicator.html',\n    styleUrls: ['./scroll-indicator.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[class.start-button]': 'scrollDirection === \"start\"',\n        '[class.end-button]': 'scrollDirection === \"end\"',\n        '[class.is-desktop-button]': '_view === \"desktop\"',\n        '[class.is-mobile]': '_view === \"mobile\"',\n        '[class.is-scrolled-to-start]': 'isScrolledToStart',\n        '[class.is-scrolled-to-end]': 'isScrolledToEnd',\n    },\n})\nexport class NxTabScrollIndicator implements OnDestroy {\n    _view = 'desktop';\n\n    @Input() scrollDirection!: NxScrollDirection;\n\n    @Input() isScrolledToStart!: boolean;\n\n    @Input() isScrolledToEnd!: boolean;\n\n    @Output() buttonClicked: EventEmitter<void> = new EventEmitter<void>();\n\n    private readonly _destroyed = new Subject<void>();\n\n    constructor(private _cdr: ChangeDetectorRef, private _viewportService: NxViewportService, @Optional() private _dir: Directionality | null) {\n        this._viewportService\n            .min(NxBreakpoints.BREAKPOINT_MEDIUM)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(isGreaterThanMedium => {\n                if (isGreaterThanMedium) {\n                    this._view = 'desktop';\n                } else if (!isGreaterThanMedium) {\n                    this._view = 'mobile';\n                }\n                this._cdr.markForCheck();\n            });\n        this._dir?.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._cdr.markForCheck());\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n\n    get direction(): Direction {\n        return this._dir?.value || 'ltr';\n    }\n\n    getChevronName(): string {\n        if ((this.scrollDirection === 'start' && this.direction === 'ltr') || (this.scrollDirection === 'end' && this.direction === 'rtl')) {\n            return 'chevron-left';\n        }\n        return 'chevron-right';\n    }\n\n    scroll() {\n        this.buttonClicked.emit();\n    }\n}\n","<div class=\"nx-tab-scroll-indicator__divider\"></div>\n<button nxPlainButton aria-hidden=\"true\" type=\"button\" *ngIf=\"_view === 'desktop'\" (click)=\"scroll()\">\n    <nx-icon [name]=\"getChevronName()\"></nx-icon>\n</button>\n","import { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { END, ENTER, HOME, SPACE } from '@angular/cdk/keycodes';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Optional,\n    Output,\n    QueryList,\n    ViewChild,\n} from '@angular/core';\n\nimport { NxScrollableTabBar } from './scrollable-tab-bar';\nimport { NxTabGroupBase } from './tab-group-base';\nimport { NxTabLabelWrapperDirective } from './tab-label-wrapper';\n\n/** @docs-private */\n@Component({\n    selector: 'nx-tab-header',\n    templateUrl: 'tab-header.html',\n    styleUrls: ['./tab-header.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[class.at-start]': '_isScrolledToStart',\n        '[class.scrollable]': 'scrollable',\n    },\n})\nexport class NxTabHeaderComponent extends NxScrollableTabBar implements AfterContentInit {\n    private _keyManager!: FocusKeyManager<NxTabLabelWrapperDirective>;\n\n    @ViewChild('tabsList') scrollableTabsList!: ElementRef<HTMLElement>;\n    @ContentChildren('tabButton') tabButtons!: QueryList<HTMLElement>;\n\n    private _selectedIndex = 0;\n\n    @Input()\n    get selectedIndex(): number {\n        return this._selectedIndex;\n    }\n    set selectedIndex(value: number) {\n        this._selectedIndex = value;\n        if (this._keyManager) {\n            this._keyManager.updateActiveItem(value);\n        }\n    }\n\n    get focusIndex(): number {\n        return this._keyManager ? (this._keyManager.activeItemIndex as number) : 0;\n    }\n    set focusIndex(value: number) {\n        if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n            return;\n        }\n        this._keyManager.setActiveItem(value);\n    }\n\n    private _autoselect = true;\n\n    @Input()\n    get autoselect(): boolean {\n        return this._autoselect;\n    }\n    set autoselect(value: boolean) {\n        this._autoselect = value;\n    }\n\n    @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n    @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n    @ContentChildren(NxTabLabelWrapperDirective) labels!: QueryList<NxTabLabelWrapperDirective>;\n\n    constructor(\n        public _cdr: ChangeDetectorRef,\n        @Optional() _dir: Directionality | null,\n        @Optional() public _tabGroup: NxTabGroupBase | null,\n        _element: ElementRef,\n    ) {\n        super(_cdr, _dir, _element);\n    }\n\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n        this._keyManager = new FocusKeyManager<NxTabLabelWrapperDirective>(this.labels).withHorizontalOrientation('ltr').withWrap();\n        this._keyManager.updateActiveItem(0);\n        this._cdr.markForCheck();\n    }\n    private _isValidIndex(idx: number) {\n        if (!this.labels) {\n            return true;\n        }\n        const tab = this.labels.toArray()[idx] || null;\n        return !!tab && !tab.disabled;\n    }\n\n    /**\n     * Handles keyboard inputs on the labels\n     * If autoselect is enabled the tab gets changed immediately\n     * If autoselect is disabled only the focus changes but the user still has to select the item\n     * by himself\n     */\n    handleKeydown(event: KeyboardEvent) {\n        switch (event.keyCode) {\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n                break;\n            case ENTER:\n            case SPACE:\n                this.selectFocusedIndex.emit(this._keyManager.activeItemIndex as number);\n                event.preventDefault();\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n\n        if (this.autoselect) {\n            this.selectFocusedIndex.emit(this._keyManager.activeItemIndex as number);\n        } else if (event.keyCode !== ENTER && event.keyCode !== SPACE) {\n            this.indexFocused.emit(this._keyManager.activeItemIndex as number);\n        }\n    }\n}\n","<nx-tab-scroll-indicator *ngIf=\"scrollable\" scrollDirection=\"start\" [isScrolledToStart]=\"_isScrolledToStart\" (buttonClicked)=\"scrollToStart()\">\n</nx-tab-scroll-indicator>\n<div #tabsList class=\"nx-tab-header\" (keydown)=\"handleKeydown($event)\" role=\"tablist\" tabindex=\"-1\">\n    <ng-content></ng-content>\n</div>\n<nx-tab-scroll-indicator *ngIf=\"scrollable\" scrollDirection=\"end\" [isScrolledToEnd]=\"_isScrolledToEnd\" (buttonClicked)=\"scrollToEnd()\">\n</nx-tab-scroll-indicator>\n","import { Component, EmbeddedViewRef, Input, OnDestroy, OnInit, ViewChild, ViewContainerRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { NxTabGroupBase } from './tab-group-base';\n\n/** @docs-private */\n@Component({\n    selector: 'nx-tab-header-outlet',\n    template: '<ng-container #outlet></ng-container>',\n})\nexport class NxTabHeaderOutletComponent implements OnInit, OnDestroy {\n    @ViewChild('outlet', { static: true, read: ViewContainerRef }) _outlet!: ViewContainerRef;\n\n    @Input() content!: EmbeddedViewRef<any>;\n\n    private readonly _destroyed = new Subject<void>();\n\n    constructor(private _tabGroup: NxTabGroupBase) {}\n\n    ngOnInit() {\n        this._tabGroup._appearanceChange.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this.detach();\n        });\n        this.attach();\n    }\n\n    attach() {\n        this._outlet.insert(this.content);\n    }\n\n    detach() {\n        const index = this._outlet.indexOf(this.content);\n        if (index !== -1) {\n            this._outlet.detach(index);\n        }\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n}\n","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { BooleanInput, coerceBooleanProperty, coerceNumberProperty, NumberInput } from '@angular/cdk/coercion';\nimport {\n    AfterContentChecked,\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { NxAccordionDirective, NxExpansionPanelComponent } from '@aposin/ng-aquila/accordion';\nimport { NxBreakpoints, NxViewportService } from '@aposin/ng-aquila/utils';\nimport { merge, Subject, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { NxTabComponent } from './tab';\nimport { NxTabBodyComponent } from './tab-body';\nimport { NxTabGroupBase } from './tab-group-base';\nimport { NxTabHeaderComponent } from './tab-header';\nimport { NxTabsAppearance, TAB_GROUP_DEFAULT_OPTIONS, TabGroupDefaultOptions } from './tabs.models';\n\nexport class NxTabChangeEvent {\n    /** The index of the selected or focused tab. */\n    index!: number;\n\n    /** The component instance of the selected or focused tab. */\n    tab!: NxTabComponent;\n}\n\nlet nextId = 0;\n\n@Component({\n    selector: 'nx-tab-group',\n    templateUrl: 'tab-group.html',\n    styleUrls: ['./tab-group.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[class.is-negative]': 'negative',\n        '[class.is-disabled]': 'disabled',\n        '[class.is-expert]': 'appearance === \"expert\"',\n    },\n    providers: [{ provide: NxTabGroupBase, useExisting: NxTabGroupComponent }],\n})\nexport class NxTabGroupComponent implements NxTabGroupBase, OnDestroy, AfterViewInit, AfterContentInit, AfterContentChecked {\n    private _selectedIndex: number | null = null;\n    private _groupId: number;\n    private _negative = false;\n    private _disabled = false;\n    private _indexToSelect: number | null = 0;\n    private _autoselect = true;\n    private _mobileAccordion = true;\n    private _appearance!: NxTabsAppearance;\n    _showAccordion = false;\n\n    /** @docs-private */\n    @ContentChildren(NxTabComponent) tabs!: QueryList<NxTabComponent>;\n\n    /** @docs-private */\n    @ViewChildren(NxTabBodyComponent) tabBodyChildren!: QueryList<NxTabBodyComponent>;\n\n    /** @docs-private */\n    @ViewChild('tabHeader') tabHeader!: NxTabHeaderComponent;\n\n    /** @docs-private */\n    @ViewChildren(NxExpansionPanelComponent) panels!: QueryList<NxExpansionPanelComponent>;\n\n    /** @docs-private */\n    @ViewChild('accordion', { read: NxAccordionDirective }) accordion!: NxAccordionDirective;\n\n    @ViewChildren('tabButton') _tabButtons!: QueryList<ElementRef>;\n\n    /** Preserves the current value of the _tabButtons ViewChildren in case it changes. */\n    private _tabButtonsPrevious!: QueryList<ElementRef>;\n\n    /** Sets the selected tab. */\n    @Input()\n    get selectedIndex(): number {\n        return this._selectedIndex as number;\n    }\n    set selectedIndex(value: NumberInput) {\n        this._indexToSelect = coerceNumberProperty(value, null);\n    }\n\n    /** Whether the negative set of styling should be used. */\n    @Input()\n    get negative(): boolean {\n        return this._negative;\n    }\n    set negative(value: BooleanInput) {\n        if (value !== this._negative) {\n            this._negative = coerceBooleanProperty(value);\n            this._cdr.markForCheck();\n        }\n    }\n\n    /** Whether the tab group is disabled. Default: false. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n    set disabled(value: BooleanInput) {\n        if (value !== this._disabled) {\n            this._disabled = coerceBooleanProperty(value);\n            this._cdr.markForCheck();\n        }\n    }\n\n    /** Whether the tab should be immediately selected on focus. */\n    @Input()\n    get autoselect(): boolean {\n        return this._autoselect;\n    }\n    set autoselect(value: BooleanInput) {\n        this._autoselect = coerceBooleanProperty(value);\n    }\n\n    /** Whether the tabs should to accordion on mobile viewports. */\n    @Input()\n    get mobileAccordion(): boolean {\n        return this._mobileAccordion;\n    }\n    set mobileAccordion(value: BooleanInput) {\n        this._mobileAccordion = coerceBooleanProperty(value);\n    }\n\n    /**\n     * **Expert option**\n     *\n     * Sets the appearance of the tab group. Default: 'default'.\n     */\n    @Input()\n    set appearance(value: NxTabsAppearance) {\n        if (this._appearance !== value) {\n            this._appearance = value;\n            this._cdr.markForCheck();\n        }\n    }\n    get appearance(): NxTabsAppearance {\n        return this._appearance || this._defaultOptions?.appearance || 'default';\n    }\n\n    /** An event emitted when the selected tab has changed. */\n    @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n    /** An event emitted when the selected tab has changed. */\n    @Output() readonly selectedTabChange: EventEmitter<NxTabChangeEvent> = new EventEmitter<NxTabChangeEvent>();\n\n    /**\n     * An event emitted when focus has changed within a tab group.\n     *\n     * **Note:** is not supported in mobile view.\n     */\n    @Output() readonly focusChange: EventEmitter<NxTabChangeEvent> = new EventEmitter<NxTabChangeEvent>();\n\n    /** Subscription to changes in the tab labels. */\n    private _tabLabelSubscription = Subscription.EMPTY;\n\n    private _disabledTabsCache: boolean[] = [];\n\n    _appearanceChange = new Subject<void>();\n\n    private readonly _destroyed = new Subject<void>();\n\n    constructor(\n        public viewportService: NxViewportService,\n        private _cdr: ChangeDetectorRef,\n        @Optional() @Inject(TAB_GROUP_DEFAULT_OPTIONS) private _defaultOptions: TabGroupDefaultOptions | null,\n        private _focusMonitor: FocusMonitor,\n    ) {\n        this._groupId = nextId++;\n\n        this.viewportService\n            .max(NxBreakpoints.BREAKPOINT_MEDIUM)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(isSmallTablet => this._switchAppearance(isSmallTablet));\n    }\n\n    ngAfterContentInit() {\n        this._subscribeToTabLabels();\n\n        // Subscribe to changes in the amount of tabs, in order to be\n        // able to re-render the content as new tabs are added or removed.\n        this.tabs.changes.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            const indexToSelect = this._clampTabIndex(this._indexToSelect);\n            // Maintain the previously-selected tab if a new tab is added or removed and there is no\n            // explicit change that selects a different tab.\n            if (indexToSelect === this._selectedIndex) {\n                const tabs = this.tabs.toArray();\n\n                for (let i = 0; i < tabs.length; i++) {\n                    if (tabs[i].isActive) {\n                        // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n                        // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n                        // adding a tab within the `selectedIndexChange` event.\n                        this._indexToSelect = this._selectedIndex = i;\n                        break;\n                    }\n                }\n            }\n\n            this._cdr.markForCheck();\n        });\n    }\n\n    /**\n     * After the content is checked, this component knows what tabs have been defined\n     * and what the selected index should be.\n     */\n    ngAfterContentChecked() {\n        // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n        // the amount of tabs changes before the actual change detection runs.\n        let indexToSelect = (this._indexToSelect = this._clampTabIndex(this._indexToSelect));\n\n        // If the active tab is disabled select the next focusable tab\n        // if all tabs are disabled, allow selection of disabled active tab.\n        if (!this.disabled && this.tabs.toArray()[indexToSelect].disabled) {\n            const nextFocusable = this.tabs\n                .toArray()\n                .map((tab, index) => ({ tab, index }))\n                .find(item => !item.tab.disabled);\n\n            indexToSelect = nextFocusable ? nextFocusable.index : indexToSelect;\n        }\n\n        // If the index to select was disabled previously leave the selection on the current\n        // so that the selection does not jump from one to another tab.\n        if (this._disabledTabsCache[this._indexToSelect]) {\n            this._indexToSelect = this.selectedIndex;\n        }\n\n        // If there is a change in selected index, emit a change event. Should not trigger if\n        // the selected index has not yet been initialized.\n        if (this._selectedIndex !== indexToSelect) {\n            const isFirstRun = this._selectedIndex == null;\n\n            if (!isFirstRun) {\n                this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n            }\n\n            // Changing these values after change detection has run\n            // since the checked content may contain references to them.\n            Promise.resolve().then(() => {\n                this.tabs.forEach((tab, index) => (tab.isActive = index === indexToSelect));\n\n                if (!isFirstRun) {\n                    this.selectedIndexChange.emit(indexToSelect);\n                }\n            });\n        }\n\n        if (this._selectedIndex !== indexToSelect) {\n            this._selectedIndex = indexToSelect;\n            this._cdr.markForCheck();\n        }\n\n        // cache the previous disabled status of all tabs\n        if (!this.disabled) {\n            this.tabs.toArray().forEach((tab, index) => (this._disabledTabsCache[index] = tab.disabled));\n        }\n    }\n\n    ngAfterViewInit() {\n        this._tabButtons.forEach(button => this._focusMonitor.monitor(button));\n        this._tabButtonsPrevious = this._tabButtons;\n        this._tabButtons.changes.subscribe(tabButtons => {\n            this._tabButtonsPrevious.forEach(button => this._focusMonitor.stopMonitoring(button));\n            this._tabButtonsPrevious = tabButtons;\n            tabButtons.forEach((button: HTMLElement) => this._focusMonitor.monitor(button));\n        });\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._tabLabelSubscription.unsubscribe();\n        this._tabButtons.forEach(button => {\n            this._focusMonitor.stopMonitoring(button);\n        });\n    }\n\n    /**\n     * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n     * on the NxTab component, whereas the data binding is inside the NxTabGroup. In order for the\n     * binding to be updated, we need to subscribe to changes in it and trigger change detection\n     * manually.\n     */\n    private _subscribeToTabLabels() {\n        if (this._tabLabelSubscription) {\n            this._tabLabelSubscription.unsubscribe();\n        }\n\n        this._tabLabelSubscription = merge(...this.tabs.map(tab => tab._stateChanges)).subscribe(() => this._cdr.markForCheck());\n    }\n\n    /** Clamps the given index to the bounds of 0 and the tabs length. */\n    private _clampTabIndex(index: number | null): number {\n        // Note the `|| 0`, which ensures that values like NaN can't get through\n        // and which would otherwise throw the component into an infinite loop\n        // (since Math.max(NaN, 0) === NaN).\n        return Math.min(this.tabs.length - 1, Math.max(index || 0, 0));\n    }\n\n    /** @docs-private */\n    focusChanged(index: number) {\n        this.focusChange.emit(this._createChangeEvent(index));\n    }\n\n    private _createChangeEvent(index: number): NxTabChangeEvent {\n        const event = new NxTabChangeEvent();\n        event.index = index;\n        if (this.tabs?.length) {\n            event.tab = this.tabs.toArray()[index];\n        }\n        return event;\n    }\n\n    /** @docs-private */\n    handleClick(index: number) {\n        const clickedTab = this.tabs.toArray()[index];\n        if (!this.disabled && !clickedTab.disabled) {\n            this.selectedIndex = this.tabHeader.focusIndex = index;\n        }\n    }\n\n    /**\n     * @docs-private\n     * Returns the tabindex for a tab label\n     */\n    getTabIndex(tab: NxTabComponent, idx: number): number | null {\n        return this.selectedIndex === idx && !tab.disabled && !this.disabled ? 0 : -1;\n    }\n\n    /** Returns a unique id for each tab label element */\n    _getTabLabelId(i: number): string {\n        return `nx-tab-label-${this._groupId}-${i}`;\n    }\n\n    /** Returns a unique id for each tab content element */\n    _getTabContentId(i: number): string {\n        return `nx-tab-content-${this._groupId}-${i}`;\n    }\n\n    private _switchAppearance(isSmallTablet: boolean) {\n        if (!this._mobileAccordion) {\n            return;\n        }\n\n        // trigger a change only when there is value difference\n        // otherwise a switch is triggered by tablet <-> desktop change\n        if (this._showAccordion !== isSmallTablet) {\n            // notify the outlets to detach the viewrefs for header and body before\n            // we switch the appearance. this way we only instantiate the templates\n            // once so that they do not get destroyed during the switch\n            this._appearanceChange.next();\n            this._showAccordion = isSmallTablet;\n            this._cdr.markForCheck();\n        }\n    }\n\n    /**\n     * Emulate the tab change event when an accordion panel is opened in\n     * mobile viewports.\n     */\n    _panelOpened(index: number) {\n        this.selectedIndex = index;\n    }\n}\n","<ng-container *ngIf=\"!_showAccordion\">\n    <nx-tab-header\n        #tabHeader\n        [selectedIndex]=\"selectedIndex\"\n        (selectFocusedIndex)=\"selectedIndex = $event\"\n        (indexFocused)=\"focusChanged($event)\"\n        [autoselect]=\"autoselect\"\n    >\n        <button\n            #tabButton\n            type=\"button\"\n            nxTabLabelWrapper\n            *ngFor=\"let tab of tabs; let i = index\"\n            role=\"tab\"\n            (click)=\"handleClick(i)\"\n            class=\"nx-tab-header__item\"\n            [id]=\"_getTabLabelId(i)\"\n            [attr.aria-controls]=\"_getTabContentId(i)\"\n            [attr.aria-selected]=\"selectedIndex === i\"\n            [attr.tabindex]=\"getTabIndex(tab, i)\"\n            [disabled]=\"tab.disabled\"\n            [class.nx-tab-header__item--disabled]=\"tab.disabled\"\n            [class.nx-tab-header__item--active]=\"selectedIndex === i\"\n        >\n            <div class=\"nx-tab-label__content\">\n                <nx-tab-header-outlet *ngIf=\"tab.templateLabel\" [content]=\"tab.headerViewRef\"></nx-tab-header-outlet>\n                <ng-container *ngIf=\"!tab.templateLabel\">{{tab.label}}</ng-container>\n            </div>\n        </button>\n    </nx-tab-header>\n\n    <div class=\"nx-tab-body__container\">\n        <nx-tab-body\n            *ngFor=\"let tab of tabs; let i = index\"\n            [id]=\"_getTabContentId(i)\"\n            role=\"tabpanel\"\n            class=\"nx-tab__body\"\n            [attr.aria-labelledby]=\"_getTabContentId(i)\"\n            [class.nx-tab__body--active]=\"selectedIndex === i\"\n            [tab]=\"tab\"\n            [active]=\"selectedIndex === i\"\n        ></nx-tab-body>\n    </div>\n</ng-container>\n\n<ng-template [ngIf]=\"_showAccordion\">\n    <nx-accordion #accordion [negative]=\"negative\">\n        <nx-expansion-panel *ngFor=\"let tab of tabs; let i = index\" [expanded]=\"selectedIndex === i\" (opened)=\"_panelOpened(i)\" [disabled]=\"tab.disabled\">\n            <nx-expansion-panel-header>\n                <nx-expansion-panel-title>\n                    <nx-tab-header-outlet *ngIf=\"tab.templateLabel\" [content]=\"tab.headerViewRef\"></nx-tab-header-outlet>\n                    <ng-container *ngIf=\"!tab.templateLabel\">{{tab.label}}</ng-container>\n                </nx-expansion-panel-title>\n            </nx-expansion-panel-header>\n            <!-- this is not lazy loading this is a trick because the portal gets added here -->\n            <!-- so we could rewrite the tab-body component that it takes care of \"lazy loading\" and the\n    accordion wouldn't know about it -->\n            <!-- active=true is a trick because we want to keep the content attached for better user experience along with expansion panel animation.  -->\n            <nx-tab-body [active]=\"true\" [tab]=\"tab\"></nx-tab-body>\n        </nx-expansion-panel>\n    </nx-accordion>\n</ng-template>\n","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    QueryList,\n    SkipSelf,\n    ViewChild,\n} from '@angular/core';\n\nimport { NxScrollableTabBar } from './scrollable-tab-bar';\nimport { NxTabsAppearance, TAB_NAV_BAR_DEFAULT_OPTIONS, TabNavBarDefaultOptions } from './tabs.models';\n\n@Component({\n    selector: 'nx-tab-nav-bar',\n    templateUrl: 'tab-nav-bar.html',\n    styleUrls: ['./tab-nav-bar.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[class.is-negative]': 'negative',\n        '[class.is-disabled]': 'disabled',\n        '[class.is-expert]': 'appearance === \"expert\"',\n        role: 'navigation',\n        '[class.at-start]': '_isScrolledToStart',\n        '[class.scrollable]': 'scrollable',\n    },\n})\nexport class NxTabNavBarComponent extends NxScrollableTabBar {\n    @ViewChild('tabsList') scrollableTabsList!: ElementRef<HTMLElement>;\n    @ContentChildren(forwardRef(() => NxTabLinkDirective)) tabButtons!: QueryList<HTMLElement>;\n\n    private _negative = false;\n\n    /** Whether the tab nav bar has negative styling. */\n    @Input()\n    set negative(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this.negative) {\n            this._negative = newValue;\n            this._cdr.markForCheck();\n        }\n    }\n\n    get negative(): boolean {\n        return this._negative;\n    }\n\n    private _disabled = false;\n\n    /** Whether the tab nav bar has disabled styling. */\n    @Input()\n    set disabled(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this.disabled) {\n            this._disabled = newValue;\n            this._cdr.markForCheck();\n        }\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    private _appearance!: NxTabsAppearance;\n\n    /**\n     * **Expert option**\n     *\n     * Sets the appearance of the tab nav bar. Default: 'default'.\n     */\n    @Input()\n    set appearance(value: NxTabsAppearance) {\n        if (this._appearance !== value) {\n            this._appearance = value;\n            this._cdr.markForCheck();\n        }\n    }\n    get appearance(): NxTabsAppearance {\n        return this._appearance || this._defaultOptions?.appearance || 'default';\n    }\n\n    constructor(\n        public _cdr: ChangeDetectorRef,\n        @Optional() _dir: Directionality | null,\n        @Optional() @Inject(TAB_NAV_BAR_DEFAULT_OPTIONS) private _defaultOptions: TabNavBarDefaultOptions | null,\n        _element: ElementRef,\n    ) {\n        super(_cdr, _dir, _element);\n    }\n}\n\n@Directive({\n    selector: '[nxTabLink]',\n    host: {\n        '[class.nx-tab-link]': 'true',\n        '[class.is-active]': 'active',\n        '[class.is-disabled]': 'disabled',\n        '[attr.aria-current]': 'active',\n        '[attr.tabindex]': '_getTabIndex()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n    },\n})\nexport class NxTabLinkDirective implements OnDestroy {\n    private _active = false;\n    private _disabled = false;\n\n    /** Whether the tab link is active and has the active styling. */\n    @Input()\n    get active(): boolean {\n        return this._active;\n    }\n    set active(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._active) {\n            this._active = newValue;\n        }\n    }\n\n    /** Whether the tab link is disabled. Default: false. */\n    @Input()\n    get disabled(): boolean {\n        return this._tabNavBar?.disabled || this._disabled;\n    }\n    set disabled(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n        }\n    }\n\n    constructor(@Optional() @SkipSelf() private _tabNavBar: NxTabNavBarComponent | null, private _elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        if (!this._tabNavBar) {\n            throw Error(`The nx-tab-link element has to be wrapped in a nx-tab-nav-bar to work.`);\n        }\n\n        this._focusMonitor.monitor(this._elementRef);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    _getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n}\n","<nx-tab-scroll-indicator *ngIf=\"scrollable\" scrollDirection=\"start\" [isScrolledToStart]=\"_isScrolledToStart\" (buttonClicked)=\"scrollToStart()\">\n</nx-tab-scroll-indicator>\n<div #tabsList class=\"nx-tab-nav-bar\" tabindex=\"-1\">\n    <ng-content></ng-content>\n</div>\n<nx-tab-scroll-indicator *ngIf=\"scrollable\" scrollDirection=\"end\" [isScrolledToEnd]=\"_isScrolledToEnd\" (buttonClicked)=\"scrollToEnd()\">\n</nx-tab-scroll-indicator>\n","import { PortalModule } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxAccordionModule } from '@aposin/ng-aquila/accordion';\nimport { NxButtonModule } from '@aposin/ng-aquila/button';\nimport { NxIconModule } from '@aposin/ng-aquila/icon';\n\nimport { NxTabScrollIndicator } from './scroll-indicator/scroll-indicator';\nimport { NxTabComponent } from './tab';\nimport { NxTabBodyComponent } from './tab-body';\nimport { NxTabContentDirective } from './tab-content';\nimport { NxTabGroupComponent } from './tab-group';\nimport { NxTabHeaderComponent } from './tab-header';\nimport { NxTabHeaderOutletComponent } from './tab-header-outlet';\nimport { NxTabLabelDirective } from './tab-label';\nimport { NxTabLabelWrapperDirective } from './tab-label-wrapper';\nimport { NxTabLinkDirective, NxTabNavBarComponent } from './tab-nav-bar';\n\n@NgModule({\n    imports: [CommonModule, PortalModule, NxAccordionModule, NxIconModule, NxButtonModule],\n    exports: [\n        NxTabComponent,\n        NxTabGroupComponent,\n        NxTabLabelDirective,\n        NxTabLabelWrapperDirective,\n        NxTabHeaderComponent,\n        NxTabBodyComponent,\n        NxTabNavBarComponent,\n        NxTabLinkDirective,\n        NxTabContentDirective,\n    ],\n    declarations: [\n        NxTabComponent,\n        NxTabGroupComponent,\n        NxTabLabelDirective,\n        NxTabLabelWrapperDirective,\n        NxTabHeaderComponent,\n        NxTabBodyComponent,\n        NxTabNavBarComponent,\n        NxTabLinkDirective,\n        NxTabContentDirective,\n        NxTabHeaderOutletComponent,\n        NxTabScrollIndicator,\n    ],\n})\nexport class NxTabsModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.NxTabGroupBase","i1","i2","i5","i2.NxTabGroupBase","i3.NxTabScrollIndicator","i4","i3.NxTabHeaderComponent","i4.NxTabHeaderOutletComponent","i5.NxTabBodyComponent","i8.NxTabLabelWrapperDirective","i2.NxTabScrollIndicator","i3"],"mappings":"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"}