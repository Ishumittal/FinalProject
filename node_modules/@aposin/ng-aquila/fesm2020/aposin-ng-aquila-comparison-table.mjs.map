{"version":3,"file":"aposin-ng-aquila-comparison-table.mjs","sources":["../../../projects/ng-aquila/src/comparison-table/comparison-table-base.ts","../../../projects/ng-aquila/src/comparison-table/comparison-table-row-base.ts","../../../projects/ng-aquila/src/comparison-table/toggle-section/toggle-section-base.ts","../../../projects/ng-aquila/src/comparison-table/cell/cell.component.ts","../../../projects/ng-aquila/src/comparison-table/cell/cell.component.html","../../../projects/ng-aquila/src/comparison-table/description-cell/description-cell.component.ts","../../../projects/ng-aquila/src/comparison-table/description-cell/description-cell.component.html","../../../projects/ng-aquila/src/comparison-table/intersection-cell/intersection-cell.component.ts","../../../projects/ng-aquila/src/comparison-table/intersection-cell/intersection-cell.component.html","../../../projects/ng-aquila/src/comparison-table/popular-cell/popular-cell.component.ts","../../../projects/ng-aquila/src/comparison-table/popular-cell/popular-cell.component.html","../../../projects/ng-aquila/src/comparison-table/table-content-element.directive.ts","../../../projects/ng-aquila/src/comparison-table/comparison-table-row-group-base.ts","../../../projects/ng-aquila/src/comparison-table/comparison-table-row.directive.ts","../../../projects/ng-aquila/src/comparison-table/comparison-table.models.ts","../../../projects/ng-aquila/src/comparison-table/comparison-table-row-group.directive.ts","../../../projects/ng-aquila/src/comparison-table/toggle-section/toggle-section-animations.ts","../../../projects/ng-aquila/src/comparison-table/toggle-section/toggle-section-header.component.ts","../../../projects/ng-aquila/src/comparison-table/toggle-section/toggle-section-header.component.html","../../../projects/ng-aquila/src/comparison-table/toggle-section/toggle-section.directive.ts","../../../projects/ng-aquila/src/comparison-table/flex-row/flex-row.component.ts","../../../projects/ng-aquila/src/comparison-table/flex-row/flex-row.component.html","../../../projects/ng-aquila/src/comparison-table/desktop-group/desktop-group.component.ts","../../../projects/ng-aquila/src/comparison-table/desktop-group/desktop-group.component.html","../../../projects/ng-aquila/src/comparison-table/comparison-table.component.ts","../../../projects/ng-aquila/src/comparison-table/comparison-table.component.html","../../../projects/ng-aquila/src/comparison-table/select-button/select-button.component.ts","../../../projects/ng-aquila/src/comparison-table/select-button/select-button.component.html","../../../projects/ng-aquila/src/comparison-table/comparison-table.module.ts","../../../projects/ng-aquila/src/comparison-table/aposin-ng-aquila-comparison-table.ts"],"sourcesContent":["import { ChangeDetectorRef, Directive, ElementRef, EventEmitter, OnDestroy } from '@angular/core';\nimport { NxBreakpoints, NxViewportService } from '@aposin/ng-aquila/utils';\nimport { merge, Subject } from 'rxjs';\nimport { filter, mapTo, takeUntil } from 'rxjs/operators';\n\nimport { NxComparisonTableCell } from './cell/cell.component';\nimport { NxComparisonTableViewType } from './comparison-table.models';\nimport { NxComparisonTablePopularCell } from './popular-cell/popular-cell.component';\n\n/** @docs-private */\n@Directive()\nexport abstract class NxComparisonTableBase implements OnDestroy {\n    selectedIndexChange!: EventEmitter<number>;\n\n    _disabledIndexes: number[] = [];\n    _hiddenIndexes: number[] = [];\n    abstract selectedIndex: number;\n\n    readonly viewTypeChange: EventEmitter<NxComparisonTableViewType> = new EventEmitter<NxComparisonTableViewType>();\n\n    private _viewType: NxComparisonTableViewType = 'desktop';\n\n    protected readonly _destroyed = new Subject<void>();\n\n    /** Get all header cells of the table. */\n    abstract _getHeaderCells(): NxComparisonTableCell[];\n\n    /** How many product columns the table has. */\n    abstract _infoColumnCount(): number;\n\n    /** Get the popular cell of the table. */\n    abstract _getPopularCell(): NxComparisonTablePopularCell;\n\n    /** Add a column to the list of disabled columns. */\n    abstract _addDisabledColumn(disabledColumn: number): void;\n\n    /** Remove a column from the list of disabled columns. */\n    abstract _removeDisabledColumn(enabledColumn: number): void;\n\n    /** Get the mobile clipping path for a cell that should be cut when scrolling. */\n    abstract _getMobileClipPathInset(cellRect: DOMRect): string;\n\n    /**\n     * Bring an element into view in case it is hidden by the sticky header row on top,\n     * optionally with some additional space above the element.\n     */\n    abstract _scrollElementIntoView(element: ElementRef, additionalSpacing?: number): void;\n\n    /** @docs-private */\n    get viewType(): NxComparisonTableViewType {\n        return this._viewType;\n    }\n\n    constructor(private viewportService: NxViewportService, protected _cdr: ChangeDetectorRef) {\n        const mobile$ = this.viewportService.max(NxBreakpoints.BREAKPOINT_MEDIUM);\n        const tablet$ = this.viewportService.between(NxBreakpoints.BREAKPOINT_MEDIUM, NxBreakpoints.BREAKPOINT_LARGE);\n        const desktop$ = this.viewportService.min(NxBreakpoints.BREAKPOINT_LARGE);\n\n        merge(\n            mobile$.pipe(\n                filter(value => value),\n                mapTo('mobile' as NxComparisonTableViewType),\n            ),\n            tablet$.pipe(\n                filter(value => value),\n                mapTo('tablet' as NxComparisonTableViewType),\n            ),\n            desktop$.pipe(\n                filter(value => value),\n                mapTo('desktop' as NxComparisonTableViewType),\n            ),\n        )\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(value => {\n                if (this._viewType !== value) {\n                    this.viewTypeChange.emit(value);\n                }\n                this._viewType = value;\n                // We need to run change detection here or the view doesn't get updated\n                // if the component is wrapped inside a parent with onPush change detection\n                // we need mark for check as parts like the description cell look at the table's\n                // viewType but because the description cell is part of ng-content it is not checked\n                // when the comparison table view is checked but only when the component where the ng-content\n                // gets declared is checked\n                this._cdr.markForCheck();\n            });\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n}\n","import { Directive, QueryList } from '@angular/core';\n\nimport { NxComparisonTableCell } from './cell/cell.component';\nimport { NxComparisonTableRowType } from './comparison-table.models';\nimport { NxComparisonTableDescriptionCell } from './description-cell/description-cell.component';\nimport { NxComparisonTablePopularCell } from './popular-cell/popular-cell.component';\n\n/** @docs-private */\n@Directive()\nexport abstract class NxComparisonTableRowBase {\n    cells!: QueryList<NxComparisonTableCell>;\n    descriptionCell!: NxComparisonTableDescriptionCell;\n    popularCell?: NxComparisonTablePopularCell;\n    abstract type: NxComparisonTableRowType;\n    abstract mayStick: boolean;\n    abstract _isPartOfToggleSection(): boolean;\n    abstract _isPartOfRowGroup(): boolean;\n    abstract _isIntersectionRow(): boolean;\n}\n","import { Directive } from '@angular/core';\n\nimport { NxToggleSectionHeaderComponent } from './toggle-section-header.component';\n\n/** @docs-private */\n@Directive()\nexport abstract class NxToggleSectionBase {\n    /** Whether the toggle section is expanded. */\n    abstract isExpanded: boolean;\n\n    toggleSectionHeader!: NxToggleSectionHeaderComponent;\n    /** @docs-private */\n    abstract _numberOfRows(): number;\n\n    /** Toggles the toggle section. */\n    toggleExpanded() {\n        this.isExpanded = !this.isExpanded;\n    }\n\n    /** @docs-private */\n    getOpenState() {\n        return this.isExpanded ? 'open' : 'closed';\n    }\n}\n","import { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Component, EventEmitter, Input, Optional, Output, TemplateRef, ViewChild } from '@angular/core';\n\nimport { NxComparisonTableRowType } from '../comparison-table.models';\nimport { NxComparisonTableBase } from '../comparison-table-base';\nimport { NxComparisonTableRowBase } from '../comparison-table-row-base';\nimport { NxToggleSectionBase } from '../toggle-section/toggle-section-base';\n\nlet nextId = 0;\n\n@Component({\n    selector: 'nx-comparison-table-cell',\n    styleUrls: ['./cell.component.scss'],\n    templateUrl: './cell.component.html',\n})\nexport class NxComparisonTableCell {\n    @ViewChild('content', { static: true }) _content!: TemplateRef<any>;\n\n    private _index!: number;\n\n    /** @docs-private */\n    @Input()\n    set index(newValue: number) {\n        if (this._index !== newValue) {\n            if (this._disabledColumn) {\n                this._table._removeDisabledColumn(this._index);\n                this._table._addDisabledColumn(newValue);\n            }\n\n            this._index = newValue;\n            this.indexChange.emit(this._index);\n        }\n    }\n    get index(): number {\n        return this._index;\n    }\n\n    private _disabledColumn = false;\n\n    /** Sets all cells below a header cell to be disabled (disabled column).\n     *  Important: this property can be set only on header cells.\n     */\n    @Input()\n    set disabledColumn(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n        if (this._type === 'header' && newValue !== this.disabledColumn) {\n            this._disabledColumn = newValue;\n            if (this._disabledColumn) {\n                this._table._addDisabledColumn(this._index);\n            } else {\n                this._table._removeDisabledColumn(this._index);\n            }\n        }\n    }\n    get disabledColumn(): boolean {\n        return this._disabledColumn;\n    }\n\n    /** @docs-private */\n    @Output() indexChange: EventEmitter<number> = new EventEmitter<number>();\n\n    private _id = `nx-comparison-table-cell-${nextId++}`;\n\n    /** Sets the Id of the cell. */\n    @Input()\n    set id(value: string) {\n        if (this._id !== value) {\n            this._id = value;\n        }\n    }\n    get id(): string {\n        return this._id;\n    }\n\n    private _type: NxComparisonTableRowType = 'content';\n\n    /** Sets the type of the cell. Default: 'content'. */\n    @Input()\n    set type(value: NxComparisonTableRowType) {\n        if (this._type !== value) {\n            this._type = value;\n        }\n    }\n    get type(): NxComparisonTableRowType {\n        return this._type;\n    }\n\n    constructor(public _table: NxComparisonTableBase, private _row: NxComparisonTableRowBase, @Optional() private _toggleSection: NxToggleSectionBase | null) {}\n\n    _isSelected(): boolean {\n        return this.index !== undefined && this.index === this._table.selectedIndex;\n    }\n\n    _isCellHidden(): boolean {\n        return Array.isArray(this._table._hiddenIndexes) && this._table._hiddenIndexes.includes(this.index);\n    }\n\n    _selectCell() {\n        this._table.selectedIndex = this.index;\n    }\n\n    get _isCellDisabled(): boolean {\n        return this._table._disabledIndexes.includes(this.index);\n    }\n\n    _getHeaderIds(): string {\n        // product header cell + (toggle-section) + description-cell\n        const headerCell = this._table._getHeaderCells().find((cell: NxComparisonTableCell) => cell.index === this.index);\n        let headers = headerCell ? `${headerCell.id}` : '';\n\n        if (this._row.descriptionCell) {\n            headers += ` ${this._row.descriptionCell.id}`;\n        }\n\n        if (this._toggleSection) {\n            headers += ` ${this._toggleSection.toggleSectionHeader.id}`;\n        }\n\n        return headers;\n    }\n}\n","<ng-template #content>\n    <ng-container *ngIf=\"_table.viewType === 'desktop' || _table.viewType === 'tablet'\">\n        <div\n            class=\"nx-comparison-table__cell\"\n            [class.is-disabled]=\"_isCellDisabled\"\n            [attr.role]=\"type === 'header' ? 'columnheader' : 'cell'\"\n            [class.is-selected]=\"_isSelected()\"\n            [class.is-hidden]=\"_isCellHidden()\"\n            [attr.id]=\"id\"\n            [attr.headers]=\"_getHeaderIds()\"\n        >\n            <div class=\"nx-comparison-table__cell-content\">\n                <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n            </div>\n        </div>\n    </ng-container>\n    <ng-container *ngIf=\"_table.viewType === 'mobile'\">\n        <td\n            [class.nx-comparison-table__mobile-header-cell]=\"type === 'header'\"\n            [class.nx-comparison-table__cell]=\"type !== 'header'\"\n            [class.is-selected]=\"_isSelected()\"\n            [class.is-hidden]=\"_isCellHidden()\"\n            [attr.scope]=\"type === 'header' ? 'row' : ''\"\n            [attr.id]=\"id\"\n            [attr.headers]=\"_getHeaderIds()\"\n        >\n            <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n        </td>\n    </ng-container>\n</ng-template>\n\n<ng-template #ngContent>\n    <ng-content></ng-content>\n</ng-template>\n","import { Component, ElementRef, Input, TemplateRef, ViewChild } from '@angular/core';\n\nimport { NxComparisonTableBase } from '../comparison-table-base';\nimport { NxComparisonTableRowBase } from '../comparison-table-row-base';\n\nlet nextId = 0;\n\n@Component({\n    selector: 'nx-comparison-table-description-cell',\n    templateUrl: './description-cell.component.html',\n})\nexport class NxComparisonTableDescriptionCell {\n    @ViewChild('content', { static: true }) _content!: TemplateRef<any>;\n    @ViewChild('mobileCell') _mobileCell!: ElementRef;\n\n    private _id = `nx-comparison-table-description-cell-${nextId++}`;\n\n    /** Sets the Id of the description cell. */\n    @Input()\n    set id(value: string) {\n        if (this._id !== value) {\n            this._id = value;\n        }\n    }\n    get id(): string {\n        return this._id;\n    }\n\n    constructor(public _table: NxComparisonTableBase, public _row: NxComparisonTableRowBase) {\n        if (this._row.type === 'header' || this._row.type === 'footer') {\n            console.warn('`nxComparisonTableRow` should not contain a `nx-comparison-table-description-cell` for type === \"header\" or type === \"footer\".');\n        }\n    }\n\n    _getMobileClipPathInset(): string {\n        if (this._mobileCell) {\n            const cellRect = this._mobileCell.nativeElement.getBoundingClientRect();\n            return this._table._getMobileClipPathInset(cellRect);\n        }\n        return '0';\n    }\n}\n","<ng-template #content>\n    <ng-container *ngIf=\"_table.viewType === 'desktop' || _table.viewType === 'tablet'\">\n        <div\n            class=\"nx-comparison-table__description-cell\"\n            [attr.role]=\"_table.viewType === 'desktop' ? 'rowheader' : 'columnheader'\"\n            [attr.aria-colspan]=\"_table.viewType === 'tablet' ? _table._infoColumnCount() : '1'\"\n            [attr.id]=\"id\"\n        >\n            <div class=\"nx-comparison-table__cell-content\">\n                <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n            </div>\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"_table.viewType === 'mobile'\">\n        <th\n            #mobileCell\n            class=\"nx-comparison-table__description-cell\"\n            [class.is-intersection-column]=\"_row._isIntersectionRow()\"\n            scope=\"col\"\n            [attr.id]=\"id\"\n            [ngStyle]=\"{ 'clip-path': 'inset(' + _getMobileClipPathInset() + ')' }\"\n        >\n            <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n        </th>\n    </ng-container>\n</ng-template>\n\n<ng-template #ngContent>\n    <ng-content></ng-content>\n</ng-template>\n","import { Component, Optional, TemplateRef, ViewChild } from '@angular/core';\n\nimport { NxComparisonTableBase } from '../comparison-table-base';\nimport { NxComparisonTableRowBase } from '../comparison-table-row-base';\nimport { NxToggleSectionBase } from '../toggle-section/toggle-section-base';\n\n@Component({\n    selector: 'nx-comparison-table-intersection-cell',\n    templateUrl: './intersection-cell.component.html',\n})\nexport class NxComparisonTableIntersectionCell {\n    @ViewChild('content', { static: true }) _content!: TemplateRef<any>;\n\n    constructor(public _table: NxComparisonTableBase, public _row: NxComparisonTableRowBase, @Optional() public _toggleSection: NxToggleSectionBase | null) {}\n\n    _getHeaderIds() {\n        // description cell + (toggle section)\n        let headers = '';\n\n        if (this._toggleSection) {\n            headers += this._toggleSection.toggleSectionHeader.id;\n        }\n\n        if (this._row.descriptionCell) {\n            headers += ' ' + this._row.descriptionCell.id;\n        }\n\n        return headers;\n    }\n\n    _getMobileRowspan() {\n        return this._table._getPopularCell() ? this._table._infoColumnCount() + 1 : this._table._infoColumnCount();\n    }\n}\n","<ng-template #content>\n    <ng-container *ngIf=\"_table.viewType === 'desktop' || _table.viewType === 'tablet'\">\n        <div\n            class=\"nx-comparison-table__intersection-cell\"\n            role=\"cell\"\n            [attr.aria-colspan]=\"_table._infoColumnCount()\"\n            [style.flex-grow]=\"_table._infoColumnCount()\"\n            [attr.headers]=\"_getHeaderIds()\"\n        >\n            <div class=\"nx-comparison-table__cell-content\">\n                <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n            </div>\n        </div>\n    </ng-container>\n    <ng-container *ngIf=\"_table.viewType === 'mobile'\">\n        <td class=\"nx-comparison-table__intersection-cell\" [attr.rowspan]=\"_getMobileRowspan()\" [attr.headers]=\"_getHeaderIds()\">\n            <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n        </td>\n    </ng-container>\n</ng-template>\n\n<ng-template #ngContent>\n    <ng-content></ng-content>\n</ng-template>\n","import { coerceNumberProperty, NumberInput } from '@angular/cdk/coercion';\nimport { Component, Input, TemplateRef, ViewChild } from '@angular/core';\n\nimport { NxComparisonTableBase } from '../comparison-table-base';\nimport { NxComparisonTableRowBase } from '../comparison-table-row-base';\n\nlet nextId = 0;\n\n@Component({\n    selector: 'nx-comparison-table-popular-cell',\n    styleUrls: ['./popular-cell.component.scss'],\n    templateUrl: './popular-cell.component.html',\n})\nexport class NxComparisonTablePopularCell {\n    @ViewChild('content', { static: true }) _content!: TemplateRef<any>;\n\n    private _id = `nx-comparison-table-popular-cell-${nextId++}`;\n    private _forColumn: number | undefined;\n\n    /** Sets the Id of the popular cell. */\n    @Input()\n    set id(value: string) {\n        if (this._id !== value) {\n            this._id = value;\n        }\n    }\n    get id(): string {\n        return this._id;\n    }\n\n    /** Sets the id of the column above which the popular cell should be displayed.\n     *\n     * Note: counting starts from 1. If set to 1 the popular cell will appear above the first header column of the table.\n     */\n    @Input()\n    set forColumn(value: NumberInput) {\n        const newValue = coerceNumberProperty(value);\n        if (this._forColumn !== newValue) {\n            this._forColumn = newValue;\n        }\n    }\n    get forColumn(): number {\n        return this._forColumn as number;\n    }\n\n    constructor(public _table: NxComparisonTableBase, public _row: NxComparisonTableRowBase) {\n        if (this._row.type !== 'header') {\n            console.warn('A popular cell should be only in a header row.');\n        }\n    }\n}\n","<ng-template #content>\n    <ng-container *ngIf=\"_table.viewType === 'desktop' || _table.viewType === 'tablet'\">\n        <div class=\"nx-comparison-table__popular-cell\" [class.is-hidden]=\"_table._hiddenIndexes.indexOf(forColumn - 1) !== -1\" role=\"cell\" [attr.id]=\"id\">\n            <div class=\"nx-comparison-table__cell-content\">\n                <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n            </div>\n        </div>\n    </ng-container>\n    <ng-container *ngIf=\"_table.viewType === 'mobile'\">\n        <td class=\"nx-comparison-table__mobile-popular-cell\" [class.is-hidden]=\"_table._hiddenIndexes.indexOf(forColumn - 1) !== -1\" [attr.id]=\"id\">\n            <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n        </td>\n    </ng-container>\n</ng-template>\n\n<ng-template #ngContent>\n    <ng-content></ng-content>\n</ng-template>\n","import { Directive } from '@angular/core';\n\n/**\n * @docs-private\n * This is a base class for NxToggleSectionDirective and NxComparisonTableRowDirective.\n */\n@Directive()\nexport class NxTableContentElement {}\n","import { Directive } from '@angular/core';\n\n/** @docs-private */\n@Directive()\nexport abstract class NxComparisonTableRowGroupBase {\n    abstract _isPartOfToggleSection(): boolean;\n}\n","import { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { AfterContentInit, ContentChild, ContentChildren, Directive, Input, OnDestroy, Optional, QueryList } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { NxComparisonTableCell } from './cell/cell.component';\nimport { NxComparisonTableRowType } from './comparison-table.models';\nimport { NxComparisonTableRowBase } from './comparison-table-row-base';\nimport { NxComparisonTableRowGroupBase } from './comparison-table-row-group-base';\nimport { NxComparisonTableDescriptionCell } from './description-cell/description-cell.component';\nimport { NxComparisonTableIntersectionCell } from './intersection-cell/intersection-cell.component';\nimport { NxComparisonTablePopularCell } from './popular-cell/popular-cell.component';\nimport { NxTableContentElement } from './table-content-element.directive';\nimport { NxToggleSectionBase } from './toggle-section/toggle-section-base';\n\n@Directive({\n    selector: '[nxComparisonTableRow]',\n    providers: [\n        { provide: NxTableContentElement, useExisting: NxComparisonTableRowDirective },\n        { provide: NxComparisonTableRowBase, useExisting: NxComparisonTableRowDirective },\n    ],\n})\nexport class NxComparisonTableRowDirective extends NxComparisonTableRowBase implements AfterContentInit, OnDestroy, NxTableContentElement {\n    /** @docs-private */\n    @ContentChildren(NxComparisonTableCell) cells!: QueryList<NxComparisonTableCell>;\n\n    /** @docs-private */\n    @ContentChild(NxComparisonTableIntersectionCell, { static: false }) intersectionCell!: NxComparisonTableIntersectionCell;\n\n    /** @docs-private */\n    @ContentChild(NxComparisonTableDescriptionCell, { static: false }) descriptionCell!: NxComparisonTableDescriptionCell;\n\n    /** @docs-private */\n    @ContentChild(NxComparisonTablePopularCell, { static: false }) popularCell!: NxComparisonTablePopularCell;\n\n    private _type: NxComparisonTableRowType = 'content';\n    private _mayStick = true;\n    _requestCellClippingUpdate$ = new Subject<void>();\n\n    /** Sets the type of the row. Default: 'content'. */\n    @Input()\n    set type(newValue: NxComparisonTableRowType) {\n        if (newValue !== this._type) {\n            this._type = newValue;\n        }\n    }\n    get type(): NxComparisonTableRowType {\n        return this._type;\n    }\n\n    @Input()\n    set mayStick(newValue: BooleanInput) {\n        if (newValue !== this._mayStick) {\n            this._mayStick = coerceBooleanProperty(newValue);\n            this._requestCellClippingUpdate$.next(undefined);\n        }\n    }\n    get mayStick(): boolean {\n        return this._type === 'header' && this._mayStick;\n    }\n\n    private readonly _destroyed = new Subject<void>();\n\n    constructor(@Optional() private _toggleSection: NxToggleSectionBase | null, @Optional() private _rowGroup: NxComparisonTableRowGroupBase | null) {\n        super();\n    }\n\n    ngAfterContentInit() {\n        this._setCellIndexes();\n\n        this.cells.changes.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this._setCellIndexes();\n        });\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n\n    _setCellIndexes(): void {\n        this.cells.forEach((cell, index) => {\n            cell.index = index;\n        });\n    }\n\n    _isPartOfToggleSection(): boolean {\n        return !!this._toggleSection;\n    }\n\n    _isPartOfRowGroup(): boolean {\n        return !!this._rowGroup;\n    }\n\n    _isIntersectionRow(): boolean {\n        return !!this.intersectionCell;\n    }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport interface ComparisonTableDefaultOptions {\n    /** Sets if the expandable area of a row group uses the full width of the row or leaves out the first column. (optional) */\n    useFullRowForExpandableArea?: boolean;\n}\n\nexport const COMPARISON_TABLE_DEFAULT_OPTIONS = new InjectionToken<ComparisonTableDefaultOptions>('COMPARISON_TABLE_DEFAULT_OPTIONS');\n\n/**\n * @docs-private\n * The size of the window.\n */\nexport type NxComparisonTableViewType = 'mobile' | 'tablet' | 'desktop';\n\n/** The type of the row. */\nexport type NxComparisonTableRowType = 'header' | 'content' | 'footer';\n","import { BooleanInput, coerceBooleanProperty, coerceNumberProperty, NumberInput } from '@angular/cdk/coercion';\nimport { ContentChildren, Directive, EventEmitter, Inject, Input, Optional, Output, QueryList } from '@angular/core';\n\nimport { COMPARISON_TABLE_DEFAULT_OPTIONS, ComparisonTableDefaultOptions } from './comparison-table.models';\nimport { NxComparisonTableRowDirective } from './comparison-table-row.directive';\nimport { NxComparisonTableRowGroupBase } from './comparison-table-row-group-base';\nimport { NxTableContentElement } from './table-content-element.directive';\nimport { NxToggleSectionBase } from './toggle-section/toggle-section-base';\n\n@Directive({\n    selector: '[nxComparisonTableRowGroup]',\n    providers: [\n        { provide: NxTableContentElement, useExisting: NxComparisonTableRowGroupDirective },\n        { provide: NxComparisonTableRowGroupBase, useExisting: NxComparisonTableRowGroupDirective },\n    ],\n})\nexport class NxComparisonTableRowGroupDirective extends NxComparisonTableRowGroupBase implements NxTableContentElement {\n    /** @docs-private */\n    @ContentChildren(NxComparisonTableRowDirective) rows!: QueryList<NxComparisonTableRowDirective>;\n\n    private _labelCollapsed = 'More services';\n\n    /**\n     * Sets the label of the expandable area that is shown when the row group is collapsed.\n     */\n    @Input()\n    set labelCollapsed(newValue: string) {\n        if (newValue !== this._labelCollapsed) {\n            this._labelCollapsed = newValue;\n        }\n    }\n    get labelCollapsed(): string {\n        return this._labelCollapsed;\n    }\n\n    private _labelExpanded = 'Less services';\n\n    /** Sets the label of the expandable area that is shown when the row group is expanded. */\n    @Input()\n    set labelExpanded(newValue: string) {\n        if (newValue !== this._labelExpanded) {\n            this._labelExpanded = newValue;\n        }\n    }\n    get labelExpanded(): string {\n        return this._labelExpanded;\n    }\n\n    private _visibleRows = 5;\n\n    /** Sets the number of rows that are visible when loading the component. Default: 5. */\n    @Input()\n    set visibleRows(value: NumberInput) {\n        const newValue = coerceNumberProperty(value);\n        if (newValue !== this._visibleRows) {\n            this._visibleRows = newValue;\n        }\n    }\n    get visibleRows(): number {\n        return this._visibleRows;\n    }\n\n    private _isExpanded = false;\n\n    /** Sets the expanded state of the row group */\n    @Input()\n    set isExpanded(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._isExpanded) {\n            this._isExpanded = newValue;\n        }\n    }\n\n    get isExpanded(): boolean {\n        return this._isExpanded;\n    }\n\n    private _useFullRowForExpandableArea: boolean | undefined;\n\n    /**\n     * **Expert Option**\n     *\n     * Sets if the expandable area uses the full width of the row or leaves out the first column. Default: false.\n     */\n    @Input()\n    set useFullRowForExpandableArea(value: BooleanInput) {\n        this._useFullRowForExpandableArea = coerceBooleanProperty(value);\n    }\n    get useFullRowForExpandableArea(): boolean {\n        if (this._useFullRowForExpandableArea !== undefined) {\n            return this._useFullRowForExpandableArea;\n        }\n        if (this._defaultOptions?.useFullRowForExpandableArea !== undefined) {\n            return this._defaultOptions.useFullRowForExpandableArea;\n        }\n        return false;\n    }\n\n    /** An event emitted every time the expanded state of the group changes */\n    @Output() isExpandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    constructor(\n        @Optional() private _toggleSection: NxToggleSectionBase | null,\n        @Optional() @Inject(COMPARISON_TABLE_DEFAULT_OPTIONS) private _defaultOptions: ComparisonTableDefaultOptions | null,\n    ) {\n        super();\n    }\n\n    _isPartOfToggleSection(): boolean {\n        return !!this._toggleSection;\n    }\n\n    _handleIsExpandedChange(value: boolean) {\n        this.isExpanded = value;\n        this.isExpandedChange.emit(this.isExpanded);\n    }\n}\n","import { animate, AnimationTriggerMetadata, state, style, transition, trigger } from '@angular/animations';\n\nexport const NxToggleSectionAnimations: {\n    readonly bodyExpansion: AnimationTriggerMetadata;\n    readonly indicatorRotate: AnimationTriggerMetadata;\n} = {\n    bodyExpansion: trigger('bodyExpansion', [\n        state('closed', style({ height: '0px', visibility: 'hidden' })),\n        state('open', style({ height: '*', visibility: 'visible' })),\n        transition('open <=> closed', animate('.5s cubic-bezier(0.86, 0, 0.07, 1)')),\n    ]),\n    indicatorRotate: trigger('indicatorRotate', [\n        state('closed', style({ transform: 'rotate(0deg)' })),\n        state('open', style({ transform: 'rotate(180deg)' })),\n        transition('open <=> closed', animate('.3s ease')),\n    ]),\n};\n","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { isPlatformBrowser } from '@angular/common';\nimport { AfterViewInit, Component, ElementRef, Inject, Input, NgZone, OnDestroy, PLATFORM_ID, TemplateRef, ViewChild } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { NxComparisonTableBase } from '../comparison-table-base';\nimport { NxToggleSectionAnimations } from './toggle-section-animations';\nimport { NxToggleSectionBase } from './toggle-section-base';\n\nlet nextId = 0;\n\n@Component({\n    selector: 'nx-comparison-table-toggle-section-header',\n    templateUrl: './toggle-section-header.component.html',\n    styleUrls: ['./toggle-section-header.component.scss'],\n    animations: [NxToggleSectionAnimations.indicatorRotate],\n})\nexport class NxToggleSectionHeaderComponent implements AfterViewInit, OnDestroy {\n    @ViewChild('content', { static: true }) _content!: TemplateRef<any>;\n    @ViewChild('mobileCell') _mobileCell!: ElementRef;\n\n    @ViewChild('wrapper') _wrapperElement!: ElementRef;\n\n    /** Preserves the current value of the _wrapperElement ViewChild in case it changes. */\n    private _wrapperElementPrevious!: ElementRef;\n\n    private _id = `nx-comparison-table-toggle-section-header-${nextId++}`;\n\n    private readonly _destroyed = new Subject<void>();\n\n    /** Sets the id of the toggle section header. */\n    @Input()\n    set id(value: string) {\n        if (this._id !== value) {\n            this._id = value;\n        }\n    }\n    get id(): string {\n        return this._id;\n    }\n\n    constructor(\n        public _table: NxComparisonTableBase,\n        public _toggleSection: NxToggleSectionBase,\n        private _focusMonitor: FocusMonitor,\n        private _ngZone: NgZone,\n        @Inject(PLATFORM_ID) platformId: string,\n    ) {\n        if (isPlatformBrowser(platformId)) {\n            this._table.viewTypeChange.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                this._updateFocusMonitoringTimeout();\n            });\n        }\n    }\n\n    ngAfterViewInit() {\n        this._updateFocusMonitoringTimeout();\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._focusMonitor.stopMonitoring(this._wrapperElement);\n    }\n\n    private _updateFocusMonitoringTimeout(): void {\n        this._ngZone.runOutsideAngular(() =>\n            // timeout is needed here so that the focus monitor is updated after the view was updated\n            setTimeout(() => this._updateFocusMonitoring()),\n        );\n    }\n\n    private _updateFocusMonitoring() {\n        if (this._wrapperElementPrevious && !this._wrapperElement) {\n            this._focusMonitor.stopMonitoring(this._wrapperElementPrevious);\n            this._wrapperElementPrevious = this._wrapperElement;\n        }\n        if (!this._wrapperElementPrevious && this._wrapperElement) {\n            this._focusMonitor\n                .monitor(this._wrapperElement)\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(origin => {\n                    if (origin === 'keyboard') {\n                        this._table._scrollElementIntoView(this._wrapperElement, 8);\n                    }\n                });\n            this._wrapperElementPrevious = this._wrapperElement;\n        }\n    }\n\n    /** Toggles the toggle section. */\n    toggle() {\n        if (this._table.viewType !== 'mobile') {\n            this._toggleSection.toggleExpanded();\n        }\n    }\n\n    _onKeydown($event: KeyboardEvent) {\n        if ($event && ($event.keyCode === ENTER || $event.keyCode === SPACE)) {\n            this.toggle();\n\n            // prevent page from scrolling down\n            if ($event.keyCode === SPACE) {\n                $event.preventDefault();\n            }\n        }\n    }\n\n    _getMobileClipPathInset(): string {\n        if (this._mobileCell) {\n            const cellRect = this._mobileCell.nativeElement.getBoundingClientRect();\n            return this._table._getMobileClipPathInset(cellRect);\n        }\n        return '0';\n    }\n}\n","<ng-template #content>\n    <ng-container *ngIf=\"_table.viewType === 'desktop' || _table.viewType === 'tablet'\">\n        <div\n            #wrapper\n            class=\"nx-comparison-table-toggle-section__header-wrapper\"\n            role=\"columnheader\"\n            [attr.aria-colspan]=\"_table.viewType === 'desktop' ? _table._getHeaderCells().length + 1 : _table._getHeaderCells().length\"\n            [attr.aria-expanded]=\"_toggleSection.isExpanded\"\n            [attr.id]=\"id\"\n            (click)=\"toggle()\"\n            [attr.tabindex]=\"0\"\n            (keydown)=\"_onKeydown($event)\"\n        >\n            <div class=\"nx-comparison-table-toggle-section__header-content\">\n                <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n                <nx-icon class=\"nx-expansion-panel__chevron\" [@indicatorRotate]=\"_toggleSection.getOpenState()\" name=\"chevron-down\" aria-hidden=\"true\">\n                </nx-icon>\n            </div>\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"_table.viewType === 'mobile'\">\n        <th\n            #mobileCell\n            class=\"nx-comparison-table__mobile-toggle-section-header\"\n            scope=\"col\"\n            [attr.colspan]=\"_toggleSection._numberOfRows()\"\n            [attr.id]=\"id\"\n            [ngStyle]=\"{ 'clip-path': 'inset(' + _getMobileClipPathInset() + ')' }\"\n        >\n            <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n        </th>\n    </ng-container>\n</ng-template>\n\n<ng-template #ngContent>\n    <ng-content></ng-content>\n</ng-template>\n","import { ContentChild, ContentChildren, Directive, Input, QueryList } from '@angular/core';\n\nimport { NxComparisonTableRowDirective } from '../comparison-table-row.directive';\nimport { NxTableContentElement } from '../table-content-element.directive';\nimport { NxToggleSectionBase } from './toggle-section-base';\nimport { NxToggleSectionHeaderComponent } from './toggle-section-header.component';\n\n@Directive({\n    selector: '[nxComparisonTableToggleSection]',\n    providers: [\n        { provide: NxTableContentElement, useExisting: NxToggleSectionDirective },\n        { provide: NxToggleSectionBase, useExisting: NxToggleSectionDirective },\n    ],\n})\nexport class NxToggleSectionDirective extends NxToggleSectionBase implements NxTableContentElement {\n    /** @docs-private */\n    @ContentChild(NxToggleSectionHeaderComponent, { static: false }) toggleSectionHeader!: NxToggleSectionHeaderComponent;\n\n    /** @docs-private */\n    @ContentChildren(NxTableContentElement) rows!: QueryList<NxTableContentElement>;\n\n    private _isExpanded = true;\n\n    /** Whether the toggle section is expanded. Default: true. */\n    @Input()\n    set isExpanded(value: boolean) {\n        if (this._isExpanded !== value) {\n            this._isExpanded = value;\n        }\n    }\n    get isExpanded(): boolean {\n        return this._isExpanded;\n    }\n\n    _numberOfRows(): number {\n        return this.rows.filter(row => row instanceof NxComparisonTableRowDirective).length;\n    }\n}\n","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { Component, ElementRef, Input, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { NxComparisonTableBase } from '../comparison-table-base';\nimport { NxComparisonTableRowDirective } from '../comparison-table-row.directive';\n\n/**\n * @docs-private\n *\n * Component that is only used internally for displaying a `nxComparisonTableRow`\n * (header, content and footer rows) in desktop and tablet view.\n */\n@Component({\n    selector: 'nx-comparison-table-flex-row',\n    templateUrl: './flex-row.component.html',\n    styleUrls: ['./flex-row.component.scss'],\n    host: {\n        '[class.is-header-row]': 'row.type === \"header\"',\n        '[class.is-sticky-row]': 'row.type === \"header\" && row.mayStick',\n        '[class.is-footer-row]': 'row.type === \"footer\"',\n        '[class.is-content-row]': 'row.type === \"content\"',\n        '[class.has-intersection]': 'row.intersectionCell',\n    },\n})\nexport class NxComparisonTableFlexRow implements OnDestroy {\n    @Input() row!: NxComparisonTableRowDirective;\n\n    private readonly _destroyed = new Subject<void>();\n\n    constructor(public _table: NxComparisonTableBase, private _elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(origin => {\n                if (this.row.type !== 'header' && origin === 'keyboard') {\n                    this._table._scrollElementIntoView(this._elementRef);\n                }\n            });\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    get elementRef(): ElementRef {\n        return this._elementRef;\n    }\n}\n","<!-- own row for description cell for tablet view -->\n<div *ngIf=\"row.type === 'content' && row.descriptionCell && _table.viewType === 'tablet'\" class=\"nx-comparison-table__row\" role=\"row\">\n    <ng-container *ngTemplateOutlet=\"row.descriptionCell._content\"></ng-container>\n</div>\n\n<!-- special row for the popular cell -->\n<div *ngIf=\"row.popularCell && (_table.viewType === 'desktop' || _table.viewType === 'tablet')\" class=\"nx-comparison-table__row\" role=\"row\">\n    <!-- this placeholder cell is removed on tablet, as the row header disappears there  -->\n    <div *ngIf=\"!(_table.viewType === 'tablet')\" role=\"cell\" class=\"nx-comparison-table__placeholder-cell is-popular-placeholder-cell\">\n        <div class=\"nx-comparison-table__cell-content\"></div>\n    </div>\n\n    <div\n        *ngFor=\"let emptyCellBeforePopular of [].constructor(row.popularCell.forColumn - 1); let i = index\"\n        role=\"cell\"\n        class=\"nx-comparison-table__placeholder-cell is-popular-placeholder-cell\"\n        [class.is-hidden]=\"_table._hiddenIndexes.indexOf(i) !== -1\"\n    >\n        <div class=\"nx-comparison-table__cell-content\"></div>\n    </div>\n\n    <!-- popular cell content -->\n    <ng-container *ngTemplateOutlet=\"row.popularCell._content\"></ng-container>\n\n    <div\n        *ngFor=\"let emptyCellAfterPopular of [].constructor(row.cells.length - row.popularCell.forColumn); let i = index\"\n        role=\"cell\"\n        class=\"nx-comparison-table__placeholder-cell is-popular-placeholder-cell\"\n        [class.is-hidden]=\"_table._hiddenIndexes.indexOf(row.popularCell.forColumn + i) !== -1\"\n    >\n        <div class=\"nx-comparison-table__cell-content\"></div>\n    </div>\n</div>\n\n<div class=\"nx-comparison-table__row\" role=\"row\">\n    <!-- header row -->\n    <ng-container *ngIf=\"row.type === 'header'\">\n        <div *ngIf=\"_table.viewType === 'desktop'\" role=\"columnheader\" class=\"nx-comparison-table__placeholder-cell\">\n            <div class=\"nx-comparison-table__cell-content\"></div>\n        </div>\n        <ng-container *ngFor=\"let headerCell of row.cells; let i = index\">\n            <ng-container *ngTemplateOutlet=\"headerCell._content\"></ng-container>\n        </ng-container>\n    </ng-container>\n\n    <!-- content row -->\n    <!-- description cell only displayed here if desktop view -->\n    <ng-container *ngIf=\"row.type === 'content'\">\n        <ng-container *ngIf=\"row.descriptionCell && _table.viewType === 'desktop'\">\n            <ng-container *ngTemplateOutlet=\"row.descriptionCell._content\"></ng-container>\n        </ng-container>\n\n        <ng-container *ngFor=\"let cell of row.cells\">\n            <ng-container *ngTemplateOutlet=\"cell._content\"></ng-container>\n        </ng-container>\n\n        <ng-container *ngIf=\"row.intersectionCell\">\n            <ng-container *ngTemplateOutlet=\"row.intersectionCell._content\"></ng-container>\n        </ng-container>\n    </ng-container>\n\n    <!-- footer row -->\n    <ng-container *ngIf=\"row.type === 'footer'\">\n        <div *ngIf=\"_table.viewType === 'desktop'\" class=\"nx-comparison-table__placeholder-cell\" role=\"cell\">\n            <div class=\"nx-comparison-table__cell-content\"></div>\n        </div>\n        <ng-container *ngFor=\"let footerCell of row.cells\">\n            <ng-container *ngTemplateOutlet=\"footerCell._content\"></ng-container>\n        </ng-container>\n    </ng-container>\n</div>\n","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { Direction, Directionality } from '@angular/cdk/bidi';\nimport { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { AfterViewInit, Component, ElementRef, EventEmitter, Inject, Input, OnDestroy, Optional, Output, ViewChild } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { COMPARISON_TABLE_DEFAULT_OPTIONS, ComparisonTableDefaultOptions } from '../comparison-table.models';\nimport { NxComparisonTableBase } from '../comparison-table-base';\nimport { NxComparisonTableRowGroupDirective } from '../comparison-table-row-group.directive';\n\n/**\n * @docs-private\n *\n * Component that is only used internally for displaying a `nxComparisonTableRowGroup` in desktop and tablet view.\n */\n@Component({\n    selector: 'nx-comparison-table-desktop-group',\n    templateUrl: './desktop-group.component.html',\n    styleUrls: ['./desktop-group.component.scss'],\n})\nexport class NxComparisonTableDesktopGroup implements AfterViewInit, OnDestroy {\n    _expanded = false;\n    _useFullRowForExpandableArea = false;\n\n    @Input() group!: NxComparisonTableRowGroupDirective;\n\n    @ViewChild('expansionCell') _expansionCell!: ElementRef;\n\n    /** Preserves the current value of the _expansionCell ViewChild in case it changes. */\n    private _expansionCellPrevious!: ElementRef;\n\n    /** Sets if the row group is expanded. Default: false. */\n    @Input()\n    set isExpanded(value: BooleanInput) {\n        this._expanded = coerceBooleanProperty(value);\n    }\n    get isExpanded(): boolean {\n        return this._expanded;\n    }\n\n    /** Sets if the expansion cell uses the full row of the table or leaves out the first column. Default: false. */\n    @Input()\n    set useFullRowForExpandableArea(value: BooleanInput) {\n        this._useFullRowForExpandableArea = coerceBooleanProperty(value);\n    }\n    get useFullRowForExpandableArea(): boolean {\n        if (this._useFullRowForExpandableArea !== undefined) {\n            return this._useFullRowForExpandableArea;\n        }\n        if (this._defaultOptions?.useFullRowForExpandableArea !== undefined) {\n            return this._defaultOptions.useFullRowForExpandableArea;\n        }\n        return false;\n    }\n\n    @Output() isExpandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    private readonly _destroyed = new Subject<void>();\n\n    constructor(\n        public _table: NxComparisonTableBase,\n        private _focusMonitor: FocusMonitor,\n        @Optional() private _dir: Directionality | null,\n        @Optional() @Inject(COMPARISON_TABLE_DEFAULT_OPTIONS) private _defaultOptions: ComparisonTableDefaultOptions | null,\n    ) {}\n\n    ngAfterViewInit() {\n        this._updateFocusMonitoring();\n        this.group?.rows.changes.pipe(takeUntil(this._destroyed)).subscribe(rows =>\n            // timeout is needed here so that the focus monitor is updated after the view was updated\n            setTimeout(() => this._updateFocusMonitoring()),\n        );\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._focusMonitor.stopMonitoring(this._expansionCell);\n    }\n\n    /** The text direction of the containing app. */\n    get dir(): Direction {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    toggleGroup() {\n        this.isExpanded = !this.isExpanded;\n        this.isExpandedChange.emit(this.isExpanded);\n    }\n\n    _updateFocusMonitoring() {\n        if (this._expansionCellPrevious && !this._expansionCell) {\n            this._focusMonitor.stopMonitoring(this._expansionCellPrevious);\n            this._expansionCellPrevious = this._expansionCell;\n        }\n        if (!this._expansionCellPrevious && this._expansionCell) {\n            this._focusMonitor\n                .monitor(this._expansionCell)\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(origin => {\n                    if (origin === 'keyboard') {\n                        this._table._scrollElementIntoView(this._expansionCell, 8);\n                    }\n                });\n            this._expansionCellPrevious = this._expansionCell;\n        }\n    }\n\n    _onKeydown(event: KeyboardEvent) {\n        if (event.keyCode === ENTER) {\n            this.toggleGroup();\n        } else if (event.keyCode === SPACE) {\n            this.toggleGroup();\n            event.preventDefault(); // prevent from scrolling\n        }\n    }\n\n    getOpenState() {\n        return this._expanded ? 'open' : 'closed';\n    }\n\n    get _expandedAreaColspan(): number {\n        if (this._table.viewType === 'desktop' && this._useFullRowForExpandableArea) {\n            return this._table._infoColumnCount() + 1;\n        }\n        return this._table._infoColumnCount();\n    }\n}\n","<ng-container *ngFor=\"let row of group.rows; let i = index\">\n    <nx-comparison-table-flex-row *ngIf=\"i < group.visibleRows || _expanded\" [row]=\"row\"> </nx-comparison-table-flex-row>\n</ng-container>\n\n<div *ngIf=\"group.rows.length > group.visibleRows\" class=\"nx-comparison-table__row\" role=\"row\">\n    <div *ngIf=\"_table.viewType === 'desktop' && !useFullRowForExpandableArea\" class=\"nx-comparison-table__placeholder-cell\" role=\"cell\">\n        <div class=\"nx-comparison-table__cell-content\"></div>\n    </div>\n    <div\n        #expansionCell\n        class=\"nx-comparison-table__intersection-cell nx-comparison-table__group-expansion-cell\"\n        [class.full-width]=\"_table.viewType === 'desktop' && useFullRowForExpandableArea\"\n        role=\"cell\"\n        [attr.aria-colspan]=\"_expandedAreaColspan\"\n        [style.flex-grow]=\"_expandedAreaColspan\"\n        (click)=\"toggleGroup()\"\n        [attr.aria-expanded]=\"_expanded\"\n        tabindex=\"0\"\n        (keydown)=\"_onKeydown($event)\"\n    >\n        <div class=\"nx-comparison-table__cell-content\">\n            <span class=\"group-label\">{{ _expanded ? group.labelExpanded : group.labelCollapsed }}</span>\n            <nx-icon\n                [name]=\"_expanded ? 'chevron-up' : 'chevron-down'\"\n                aria-hidden=\"true\"\n                size=\"s\"\n                [class.nx-margin-left-2xs]=\"dir === 'ltr'\"\n                [class.nx-margin-right-2xs]=\"dir === 'rtl'\"\n            >\n            </nx-icon>\n        </div>\n    </div>\n</div>\n","import { Directionality } from '@angular/cdk/bidi';\nimport { coerceArray, coerceNumberProperty, NumberInput } from '@angular/cdk/coercion';\nimport { CdkScrollable, ScrollDispatcher } from '@angular/cdk/scrolling';\nimport {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    ViewChild,\n} from '@angular/core';\nimport { NxViewportService } from '@aposin/ng-aquila/utils';\nimport { delay, takeUntil } from 'rxjs/operators';\n\nimport { NxComparisonTableCell } from './cell/cell.component';\nimport { NxComparisonTableBase } from './comparison-table-base';\nimport { NxComparisonTableRowDirective } from './comparison-table-row.directive';\nimport { NxComparisonTableRowGroupDirective } from './comparison-table-row-group.directive';\nimport { NxComparisonTableFlexRow } from './flex-row/flex-row.component';\nimport { NxComparisonTablePopularCell } from './popular-cell/popular-cell.component';\nimport { NxTableContentElement } from './table-content-element.directive';\nimport { NxToggleSectionDirective } from './toggle-section/toggle-section.directive';\nimport { NxToggleSectionAnimations } from './toggle-section/toggle-section-animations';\n\n@Component({\n    selector: 'nx-comparison-table',\n    templateUrl: './comparison-table.component.html',\n    styleUrls: ['./comparison-table.component.scss'],\n    animations: [NxToggleSectionAnimations.bodyExpansion],\n    providers: [{ provide: NxComparisonTableBase, useExisting: NxComparisonTableComponent }],\n})\nexport class NxComparisonTableComponent extends NxComparisonTableBase implements OnInit, AfterViewInit, OnDestroy {\n    // Attention: this contains all rows and toggle sections, AND all rows contained in a toggle section!\n    /** @docs-private */\n    @ContentChildren(NxTableContentElement, { descendants: true }) elements!: QueryList<NxTableContentElement>;\n\n    private _selectedIndex: number | undefined;\n    private _scrollableArea: CdkScrollable;\n\n    @ViewChild('headerRow') _headerRowElement!: NxComparisonTableFlexRow;\n    @ViewChild('desktopContent') _desktopContentDiv!: ElementRef;\n\n    /** The top value for the clip-path of the _desktopContentDiv. */\n    _desktopContentClip = 0;\n\n    @ViewChild('stickyMobileCell') _stickyMobileCell!: ElementRef;\n\n    /**\n     * The value of the right or left edge of the first column of the mobile table,\n     * that describes the threshold for how much clip-path is needed.\n     */\n    private _mobileStickyEdge: number | undefined;\n\n    /** Sets which info column is selected. */\n    @Input()\n    set selectedIndex(value: NumberInput) {\n        const newValue = coerceNumberProperty(value);\n        if (this._selectedIndex !== newValue) {\n            this._selectedIndex = newValue;\n            this.selectedIndexChange.emit(this._selectedIndex);\n        }\n    }\n    get selectedIndex(): number {\n        return this._selectedIndex as number;\n    }\n\n    /** An event that is is dispatched each time selected index of the table has changed. */\n    @Output() selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Sets which column is hidden. */\n    @Input()\n    set hiddenIndexes(value: number[]) {\n        const newValue = coerceArray(value);\n        if (this._hiddenIndexes !== newValue) {\n            this._hiddenIndexes = newValue;\n        }\n    }\n    get hiddenIndexes(): number[] {\n        return this._hiddenIndexes;\n    }\n\n    constructor(\n        private _element: ElementRef,\n        @Optional() private _dir: Directionality | null,\n        viewportService: NxViewportService,\n        protected _cdr: ChangeDetectorRef,\n        private scrollDispatch: ScrollDispatcher,\n        private _ngZone: NgZone,\n    ) {\n        super(viewportService, _cdr);\n        this._scrollableArea = new CdkScrollable(this._element, this.scrollDispatch, this._ngZone);\n    }\n\n    /** @docs-private */\n    @HostBinding('attr.dir') get dir() {\n        return this._dir?.value || 'ltr';\n    }\n\n    ngOnInit() {\n        window.addEventListener('scroll', this._scrollHandler, true);\n        this.scrollDispatch.register(this._scrollableArea);\n        // set the clipping for the cells once at the beginnig\n        setTimeout(() => this._updateCellClipping());\n    }\n\n    ngAfterViewInit() {\n        this._getHeaderRow()\n            ?._requestCellClippingUpdate$.pipe(delay(0), takeUntil(this._destroyed))\n            .subscribe(() => this._updateCellClipping());\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        window.removeEventListener('scroll', this._scrollHandler, true);\n        this.scrollDispatch.deregister(this._scrollableArea);\n    }\n\n    private _scrollHandler = (event: Event): void => {\n        this._updateCellClipping();\n    };\n\n    _updateCellClipping() {\n        if (this.viewType === 'desktop' || this.viewType === 'tablet') {\n            const headerRect = this._headerRowElement.elementRef.nativeElement.getBoundingClientRect();\n            const contentRect = this._desktopContentDiv.nativeElement.getBoundingClientRect();\n            const newContentClip = headerRect.bottom - contentRect.top;\n            if (this._desktopContentClip !== newContentClip) {\n                this._desktopContentClip = newContentClip;\n                this._cdr.markForCheck();\n            }\n        } else if (this.viewType === 'mobile') {\n            if (this._stickyMobileCell) {\n                const stickyRect = this._stickyMobileCell.nativeElement.getBoundingClientRect();\n                const isRTL = this._dir && this._dir.value === 'rtl';\n                this._mobileStickyEdge = isRTL ? stickyRect.left : stickyRect.right;\n                this._cdr.markForCheck();\n\n                // clip paths for placeholder cells with borders\n                const placeholderCells = this._element.nativeElement.getElementsByClassName('needs-clipping');\n                for (const cell of placeholderCells) {\n                    const cellRect = cell.getBoundingClientRect();\n                    cell.style['clip-path'] = `inset(${this._getMobileClipPathInset(cellRect)})`;\n                }\n            }\n        }\n    }\n\n    _getMobileClipPathInset(cellRect: DOMRect): string {\n        if (!this._mobileStickyEdge) {\n            return '0';\n        }\n\n        if (this._dir && this._dir.value === 'rtl') {\n            const clip = cellRect.right - this._mobileStickyEdge;\n            return clip > 0 ? `0 ${clip}px 0 0` : '0';\n        }\n        const clip = this._mobileStickyEdge - cellRect.left;\n        return clip > 0 ? `0 0 0 ${clip}px` : '0';\n    }\n\n    /** Whether the element is a row. */\n    _isRow(element: NxTableContentElement): element is NxComparisonTableRowDirective {\n        return element instanceof NxComparisonTableRowDirective;\n    }\n\n    /** Whether the element is a toggle section. */\n    _isToggleSection(element: NxTableContentElement): element is NxToggleSectionDirective {\n        return element instanceof NxToggleSectionDirective;\n    }\n\n    /** Whether the element is a row group. */\n    _isRowGroup(element: NxTableContentElement): element is NxComparisonTableRowGroupDirective {\n        return element instanceof NxComparisonTableRowGroupDirective;\n    }\n\n    /** Whether row is the first item in a new block of rows or a section. */\n    _isFirstInfoOfBlock(rowIndex: number): boolean {\n        const elements = this.elements.toArray();\n\n        // if first row after header\n        let firstRowAfterHeader = 1;\n        while (!this._isRow(elements[firstRowAfterHeader])) {\n            firstRowAfterHeader++;\n        }\n        if (rowIndex === firstRowAfterHeader) {\n            return true;\n        }\n\n        // if first row: false\n        if (rowIndex === 0) {\n            return false;\n        }\n\n        // if toggle section\n        if (this._isToggleSection(elements[rowIndex])) {\n            return true;\n        }\n\n        // if first row after a section\n        if (\n            this._isRow(elements[rowIndex]) &&\n            elements[rowIndex - 1] instanceof NxComparisonTableRowDirective &&\n            (elements[rowIndex - 1] as NxComparisonTableRowDirective)._isPartOfToggleSection()\n        ) {\n            return true;\n        }\n\n        // if last row and the last row is a footer row: true\n        if (rowIndex === elements.length - 1 && this._isRow(elements[rowIndex] && (elements[rowIndex] as NxComparisonTableRowDirective).type === 'footer')) {\n            return true;\n        }\n\n        return false;\n    }\n\n    _getHeaderCells(): NxComparisonTableCell[] {\n        const row = this.elements.find(element => this._isRow(element) && element.type === 'header');\n        return (row as NxComparisonTableRowDirective).cells.toArray();\n    }\n\n    _getPopularCell(): NxComparisonTablePopularCell {\n        const row = this.elements.find(element => this._isRow(element) && element.type === 'header');\n        return (row as NxComparisonTableRowDirective).popularCell;\n    }\n\n    _getFooterCells(): NxComparisonTableCell[] {\n        const row = this.elements.find(element => this._isRow(element) && element.type === 'footer');\n\n        return row ? (row as NxComparisonTableRowDirective).cells.toArray() : [];\n    }\n\n    _containsToggleSection(): boolean {\n        return this.elements.filter(element => this._isToggleSection(element)).length > 0;\n    }\n\n    _infoColumnCount(): number {\n        return this._getHeaderCells().length - this.hiddenIndexes.length;\n    }\n\n    _getMobileColumnCount() {\n        return this._getFooterCells().length ? this.elements.length - 1 : this.elements.length;\n    }\n\n    _isMobileRowDisabled(i: number) {\n        return this._getHeaderCells ? this._getHeaderCells()[i].disabledColumn : false;\n    }\n\n    _addDisabledColumn(disabledColumn: number): void {\n        if (!this._disabledIndexes.includes(disabledColumn)) {\n            this._disabledIndexes.push(disabledColumn);\n        }\n    }\n\n    _removeDisabledColumn(enabledColumn: number): void {\n        const indexOfElement = this._disabledIndexes.indexOf(enabledColumn);\n        if (indexOfElement !== -1) {\n            this._disabledIndexes.splice(indexOfElement, 1);\n        }\n    }\n\n    _getHeaderRow(): NxComparisonTableRowDirective {\n        const headerRow = this.elements.find(element => this._isRow(element) && element.type === 'header');\n        return headerRow as NxComparisonTableRowDirective;\n    }\n\n    _scrollElementIntoView(element: ElementRef, additionalSpacing = 0): void {\n        // check if element starts above the bottom of the header\n        // if yes: modify scrollTop position\n        const scrolledParent = this._getScrollParent(element.nativeElement);\n        if (!scrolledParent) {\n            return;\n        }\n        const headerBottom =\n            this._headerRowElement.elementRef.nativeElement.offsetTop + this._headerRowElement.elementRef.nativeElement.getBoundingClientRect().height;\n        const elementTop = element.nativeElement.offsetTop;\n\n        if (elementTop < headerBottom) {\n            const diff = headerBottom - elementTop;\n            scrolledParent.scrollTop = scrolledParent.scrollTop - diff - additionalSpacing;\n        }\n    }\n\n    // Taken from https://github.com/olahol/scrollparent.js (MIT License)\n    private _getScrollParent(node: any) {\n        const regex = /(auto|scroll)/;\n        const parents: any = (_node: any, ps: any) => {\n            if (_node.parentNode === null) {\n                return ps;\n            }\n            return parents(_node.parentNode, ps.concat([_node]));\n        };\n\n        const style = (_node: Element, prop: string) => getComputedStyle(_node, null).getPropertyValue(prop);\n        const overflow = (_node: any) => style(_node, 'overflow') + style(_node, 'overflow-y') + style(_node, 'overflow-x');\n        const scroll = (_node: any) => regex.test(overflow(_node));\n\n        const scrollParent = (_node: { parentNode: any }) => {\n            if (!(_node instanceof HTMLElement || _node instanceof SVGElement)) {\n                return;\n            }\n            const ps = parents(_node.parentNode, []);\n            for (let i = 0; i < ps.length; i += 1) {\n                if (scroll(ps[i])) {\n                    return ps[i];\n                }\n            }\n            return document.scrollingElement || document.documentElement;\n        };\n        return scrollParent(node);\n    }\n}\n","<!-- basic structure:\n\nDesktop:\n\n+--------+-----------+-----------+-----------+\n|        |           | Popular   |           |\n|--------|-----------|-----------|-----------|\n|        | Header 1  | Header 2  | Header 3  |\n|--------|-----------|-----------|-----------|\n| Info 1 |           |           |           |\n|--------|-----------|-----------|-----------|\n| Info 2 |           |           |           |\n|--------|-----------|-----------|-----------|\n|        | Footer 1  | Footer 2  | Footer 3  |\n+--------+-----------+-----------+-----------+\n\nTablet: Info info columns are shifted \"into\" the content:\n\n+-----------+-----------+-----------+\n|           | Popular   |           |\n|-----------|-----------|-----------|\n| Header 1  | Header 2  | Header 3  |\n|-----------+-----------+-----------|\n| Info 1                            |\n|-----------+-----------+-----------|\n|           |           |           |\n|-----------+-----------+-----------|\n| Info 2                            |\n|-----------+-----------+-----------|\n|           |           |           |\n|-----------|-----------|-----------|\n| Footer 1  | Footer 2  | Footer 3  |\n+-----------+-----------+-----------+\n\nMobile: table is flipped diagonally (with no footer cells!):\n\n+-----------+--------+--------+\n|           | Info 1 | Info 2 |\n|-----------|--------|--------|\n| Header 1  |        |        |\n|-----------|--------+--------+\n| Popular   |\n|-----------|--------+--------+\n| Header 2  |        |        |\n|-----------|--------|--------|\n| Header 3  |        |        |\n+-----------+--------+--------+\n\n-->\n\n<ng-container *ngIf=\"viewType === 'desktop' || viewType === 'tablet'\">\n    <ng-container *ngTemplateOutlet=\"desktopView\"></ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"viewType === 'mobile'\">\n    <ng-container *ngTemplateOutlet=\"mobileTable\"></ng-container>\n</ng-container>\n\n<!-- desktop + tablet template ---------------------------------->\n\n<ng-template #desktopView>\n    <div role=\"table\">\n        <nx-comparison-table-flex-row #headerRow [row]=\"_getHeaderRow()\"></nx-comparison-table-flex-row>\n\n        <div #desktopContent class=\"nx-comparison-table__table-body\" [ngStyle]=\"{ 'clip-path': 'inset(' + _desktopContentClip + 'px -12px -1px)' }\">\n            <ng-container *ngFor=\"let element of elements; let i = index\">\n                <nx-comparison-table-flex-row\n                    *ngIf=\"_isRow(element) && element.type !== 'header' && !element._isPartOfToggleSection() && !element._isPartOfRowGroup()\"\n                    [row]=\"element\"\n                ></nx-comparison-table-flex-row>\n                <nx-comparison-table-desktop-group\n                    *ngIf=\"_isRowGroup(element) && !element._isPartOfToggleSection()\"\n                    [group]=\"element\"\n                    [isExpanded]=\"element.isExpanded\"\n                    [useFullRowForExpandableArea]=\"element.useFullRowForExpandableArea\"\n                    (isExpandedChange)=\"element._handleIsExpandedChange($event)\"\n                >\n                </nx-comparison-table-desktop-group>\n\n                <!-- add role=table here to prevent screen reader wrong reading. since toggleSection is like another table, -->\n                <div role=\"table\" *ngIf=\"_isToggleSection(element)\" class=\"nx-comparison-table__toggle-section\">\n                    <div class=\"nx-comparison-table__toggle-section-header\" role=\"row\">\n                        <ng-container *ngTemplateOutlet=\"element.toggleSectionHeader._content\"></ng-container>\n                    </div>\n\n                    <div class=\"nx-comparison-table__toggle-section-body\" [@bodyExpansion]=\"element.getOpenState()\" role=\"rowgroup\">\n                        <ng-container *ngFor=\"let elementOfSection of element.rows\">\n                            <nx-comparison-table-flex-row\n                                *ngIf=\"_isRow(elementOfSection) && !elementOfSection._isPartOfRowGroup()\"\n                                [row]=\"elementOfSection\"\n                            ></nx-comparison-table-flex-row>\n                            <nx-comparison-table-desktop-group\n                                *ngIf=\"_isRowGroup(elementOfSection)\"\n                                [group]=\"elementOfSection\"\n                                [isExpanded]=\"elementOfSection.isExpanded\"\n                                [useFullRowForExpandableArea]=\"elementOfSection.useFullRowForExpandableArea\"\n                                (isExpandedChange)=\"elementOfSection._handleIsExpandedChange($event)\"\n                            >\n                            </nx-comparison-table-desktop-group>\n                        </ng-container>\n                    </div>\n                </div>\n            </ng-container>\n        </div>\n    </div>\n</ng-template>\n\n<!-- mobile template ------------------------------------------->\n\n<ng-template #mobileTable>\n    <table>\n        <!-- row for toggle section headers -->\n        <tr *ngIf=\"_containsToggleSection()\" class=\"nx-comparison-table__toggle-section-header-row\">\n            <th class=\"nx-comparison-table__placeholder-cell\"></th>\n            <ng-container *ngFor=\"let element of elements; let i = index\">\n                <!-- TODO split up in header row and content rows -->\n                <ng-container *ngIf=\"i !== 0 && i < _getMobileColumnCount()\">\n                    <ng-container *ngIf=\"_isRow(element) && !element._isPartOfToggleSection()\">\n                        <!-- placeholder cell if this is a new block of info rows -->\n                        <ng-container *ngIf=\"_isFirstInfoOfBlock(i)\">\n                            <th class=\"nx-comparison-table__placeholder-cell\" aria-hidden=\"true\"></th>\n                        </ng-container>\n\n                        <th class=\"nx-comparison-table__placeholder-cell\"></th>\n                    </ng-container>\n\n                    <ng-container *ngIf=\"_isToggleSection(element)\">\n                        <th class=\"nx-comparison-table__placeholder-cell needs-clipping\" aria-hidden=\"true\"></th>\n                        <ng-container *ngTemplateOutlet=\"element.toggleSectionHeader._content\"></ng-container>\n                    </ng-container>\n                </ng-container>\n            </ng-container>\n        </tr>\n\n        <!-- rows for all description cells -->\n        <tr class=\"nx-comparison-table__description-row\">\n            <th #stickyMobileCell class=\"nx-comparison-table__placeholder-cell\" scope=\"col\"></th>\n            <ng-container *ngFor=\"let element of elements; let headerIndex = index\">\n                <ng-container *ngIf=\"_isRow(element) && !element._isPartOfToggleSection()\">\n                    <!-- we need the extra ng-container or VE will fail because of the _isRow method -->\n                    <ng-container *ngIf=\"headerIndex > 0 && headerIndex < _getMobileColumnCount()\">\n                        <!-- placeholder cell if this is a new block of info rows -->\n                        <ng-container *ngIf=\"_isFirstInfoOfBlock(headerIndex)\">\n                            <th class=\"nx-comparison-table__placeholder-cell\" aria-hidden=\"true\"></th>\n                        </ng-container>\n\n                        <ng-container *ngTemplateOutlet=\"element?.descriptionCell?._content ?? null\"> </ng-container>\n                    </ng-container>\n                </ng-container>\n\n                <ng-container *ngIf=\"_isToggleSection(element)\">\n                    <th class=\"nx-comparison-table__placeholder-cell needs-clipping\" aria-hidden=\"true\"></th>\n                    <ng-container *ngFor=\"let row of element.rows\">\n                        <ng-container *ngIf=\"_isRow(row)\">\n                            <ng-container *ngTemplateOutlet=\"row.descriptionCell?._content ?? null\"></ng-container>\n                        </ng-container>\n                    </ng-container>\n                </ng-container>\n            </ng-container>\n        </tr>\n\n        <!-- row for every product -->\n        <!-- intersection cells have to be placed in first row -->\n        <ng-container *ngFor=\"let headerCell of _getHeaderCells(); let headerIndex = index\">\n            <tr *ngIf=\"_getPopularCell() && _getPopularCell().forColumn === headerIndex + 1\" class=\"nx-comparison-table__popular-row\">\n                <ng-container *ngTemplateOutlet=\"_getPopularCell()._content\"></ng-container>\n\n                <ng-container *ngFor=\"let element of elements; let infoIndex = index\">\n                    <ng-container *ngIf=\"_isRow(element) && !element._isPartOfToggleSection()\">\n                        <!-- we need the extra ng-container or VE will fail because of the _isRow method -->\n                        <ng-container *ngIf=\"infoIndex > 0 && infoIndex < _getMobileColumnCount()\">\n                            <!-- placeholder cell if this is a new block of info rows -->\n                            <ng-container *ngIf=\"_isFirstInfoOfBlock(infoIndex)\">\n                                <td class=\"nx-comparison-table__placeholder-cell\" aria-hidden=\"true\"></td>\n                            </ng-container>\n                            <!-- if there is an intersection cell, we need a marker so that we know we have to place a left border to the next cell -->\n                            <ng-container *ngIf=\"element.intersectionCell\">\n                                <div class=\"nx-comparison-table__intersection-cell-marker\"></div>\n                            </ng-container>\n                            <!-- placeholder cell for every cell of the row, except intersection cells -->\n                            <ng-container *ngIf=\"element.cells.length > 0\">\n                                <td class=\"nx-comparison-table__placeholder-with-border-cell\" aria-hidden=\"true\"></td>\n                            </ng-container>\n                        </ng-container>\n                    </ng-container>\n\n                    <ng-container *ngIf=\"_isToggleSection(element)\">\n                        <td class=\"nx-comparison-table__placeholder-cell\" aria-hidden=\"true\"></td>\n                        <ng-container *ngFor=\"let row of element.rows\">\n                            <ng-container *ngIf=\"_isRow(row)\">\n                                <!-- if there is an intersection cell, we need a marker so that we know we have to place a left border to the next cell -->\n                                <ng-container *ngIf=\"row.intersectionCell\">\n                                    <div class=\"nx-comparison-table__intersection-cell-marker\"></div>\n                                </ng-container>\n                                <!-- placeholder cell for every cell of the row, except intersection cells -->\n                                <ng-container *ngIf=\"row.cells.length > 0\">\n                                    <td class=\"nx-comparison-table__placeholder-with-border-cell\" aria-hidden=\"true\"></td>\n                                </ng-container>\n                            </ng-container>\n                        </ng-container>\n                    </ng-container>\n                </ng-container>\n            </tr>\n\n            <tr [class.is-disabled]=\"_isMobileRowDisabled(headerIndex)\">\n                <ng-container *ngTemplateOutlet=\"headerCell._content\"></ng-container>\n                <ng-container *ngFor=\"let element of elements; let infoIndex = index\">\n                    <ng-container *ngIf=\"_isRow(element) && !element._isPartOfToggleSection()\">\n                        <!-- we need the extra ng-container or VE will fail because of the _isRow method -->\n                        <ng-container *ngIf=\"infoIndex > 0 && infoIndex < _getMobileColumnCount()\">\n                            <!-- placeholder cell if this is a new block of info rows -->\n                            <ng-container *ngIf=\"_isFirstInfoOfBlock(infoIndex)\">\n                                <td class=\"nx-comparison-table__placeholder-cell\" aria-hidden=\"true\"></td>\n                            </ng-container>\n\n                            <!-- if first mobile row: show intersection cells -->\n                            <ng-container *ngIf=\"headerIndex === 0 && element.intersectionCell\">\n                                <ng-container *ngTemplateOutlet=\"(element?.intersectionCell)!._content\"></ng-container>\n                            </ng-container>\n                            <ng-container *ngIf=\"element.cells.length > 0\">\n                                <ng-container *ngTemplateOutlet=\"element.cells.toArray()[headerIndex]!._content\"></ng-container>\n                            </ng-container>\n                        </ng-container>\n                    </ng-container>\n\n                    <ng-container *ngIf=\"_isToggleSection(element)\">\n                        <td class=\"nx-comparison-table__placeholder-cell\" aria-hidden=\"true\"></td>\n                        <ng-container *ngFor=\"let row of element.rows\">\n                            <ng-container *ngIf=\"_isRow(row)\">\n                                <!-- if first mobile row: show intersection cells -->\n                                <ng-container *ngIf=\"headerIndex === 0 && row.intersectionCell\">\n                                    <ng-container *ngTemplateOutlet=\"row.intersectionCell._content\"> </ng-container>\n                                </ng-container>\n\n                                <ng-container *ngIf=\"row.cells.length > 0\">\n                                    <ng-container *ngTemplateOutlet=\"row.cells.toArray()[headerIndex]._content\"></ng-container>\n                                </ng-container>\n                            </ng-container>\n                        </ng-container>\n                    </ng-container>\n                </ng-container>\n            </tr>\n        </ng-container>\n    </table>\n</ng-template>\n","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Input, OnDestroy } from '@angular/core';\nimport { NxButtonBase } from '@aposin/ng-aquila/button';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { NxComparisonTableCell } from '../cell/cell.component';\nimport { NxComparisonTableBase } from '../comparison-table-base';\n\n@Component({\n    selector: 'button[nxComparisonTableSelectButton]',\n    templateUrl: './select-button.component.html',\n    styleUrls: ['../../button/button.scss', './select-button.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[disabled]': '_cell._isCellDisabled',\n        class: 'nx-comparison-table__select-button',\n        '(click)': '_selectCell()',\n        '[attr.aria-pressed]': '_ariaPressed',\n    },\n})\nexport class NxComparisonTableSelectButton extends NxButtonBase implements OnDestroy {\n    private _selectedLabel = 'Selected';\n\n    _ariaPressed = false;\n\n    /** Sets the label that is displayed when the column is selected. Default: 'Selected'. */\n    @Input()\n    set selectedLabel(value: string) {\n        this._selectedLabel = value;\n    }\n    get selectedLabel(): string {\n        return this._selectedLabel;\n    }\n\n    private _unselectedLabel = 'Select';\n\n    /** Sets the label that is displayed when the column is not selected. Default: 'Select'. */\n    @Input()\n    set unselectedLabel(value: string) {\n        this._unselectedLabel = value;\n    }\n    get unselectedLabel(): string {\n        return this._unselectedLabel;\n    }\n\n    private _unselectedClassNames = 'secondary small';\n\n    /** Sets the classNames (style, size and negative) of the unselected button. Default: 'secondary small'. */\n    @Input()\n    set unselectedClassNames(value: string) {\n        if (value !== this._unselectedClassNames) {\n            this._unselectedClassNames = value;\n            this._setClassNames();\n        }\n    }\n    get unselectedClassNames(): string {\n        return this._unselectedClassNames;\n    }\n\n    private _selectedClassNames = 'primary small';\n\n    /** Sets the classNames (style, size and negative) of the selected button. Default: 'primary small'. */\n    @Input()\n    set selectedClassNames(value: string) {\n        if (value !== this._selectedClassNames) {\n            this._selectedClassNames = value;\n            this._setClassNames();\n        }\n    }\n    get selectedClassNames(): string {\n        return this._selectedClassNames;\n    }\n\n    private readonly _destroyed = new Subject<void>();\n\n    constructor(\n        _cdr: ChangeDetectorRef,\n        _elementRef: ElementRef,\n        public _cell: NxComparisonTableCell,\n        private _table: NxComparisonTableBase,\n        _focusMonitor: FocusMonitor,\n    ) {\n        super(_cdr, _elementRef, _focusMonitor);\n        this._setClassNames();\n\n        this._cell.indexChange.pipe(takeUntil(this._destroyed)).subscribe(index => {\n            setTimeout(() => {\n                this._setClassNames();\n                this._setAriaPressed();\n            });\n        });\n\n        this._table.selectedIndexChange.pipe(takeUntil(this._destroyed)).subscribe(index => {\n            this._setClassNames();\n            this._setAriaPressed();\n        });\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n\n    private _setClassNames() {\n        this.classNames = this._cell._isSelected() ? this.selectedClassNames : this.unselectedClassNames;\n    }\n\n    _selectCell() {\n        this._cell._selectCell();\n    }\n\n    _getButtonLabel() {\n        return this._cell._isSelected() ? this._selectedLabel : this._unselectedLabel;\n    }\n\n    private _setAriaPressed() {\n        this._ariaPressed = this._cell._isSelected();\n    }\n}\n","<nx-icon *ngIf=\"_cell._isSelected()\" class=\"nx-comparison-table__select-button-icon\" name=\"check\" fill=\"true\" outline=\"true\" aria-hidden=\"true\"> </nx-icon\n>{{ _getButtonLabel() }}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxIconModule } from '@aposin/ng-aquila/icon';\n\nimport { NxComparisonTableCell } from './cell/cell.component';\nimport { NxComparisonTableComponent } from './comparison-table.component';\nimport { NxComparisonTableRowDirective } from './comparison-table-row.directive';\nimport { NxComparisonTableRowGroupDirective } from './comparison-table-row-group.directive';\nimport { NxComparisonTableDescriptionCell } from './description-cell/description-cell.component';\nimport { NxComparisonTableDesktopGroup } from './desktop-group/desktop-group.component';\nimport { NxComparisonTableFlexRow } from './flex-row/flex-row.component';\nimport { NxComparisonTableIntersectionCell } from './intersection-cell/intersection-cell.component';\nimport { NxComparisonTablePopularCell } from './popular-cell/popular-cell.component';\nimport { NxComparisonTableSelectButton } from './select-button/select-button.component';\nimport { NxToggleSectionDirective } from './toggle-section/toggle-section.directive';\nimport { NxToggleSectionHeaderComponent } from './toggle-section/toggle-section-header.component';\n\n@NgModule({\n    imports: [CommonModule, NxIconModule],\n    declarations: [\n        NxComparisonTableComponent,\n        NxComparisonTableCell,\n        NxComparisonTableDescriptionCell,\n        NxComparisonTableIntersectionCell,\n        NxToggleSectionDirective,\n        NxToggleSectionHeaderComponent,\n        NxComparisonTableRowDirective,\n        NxComparisonTableSelectButton,\n        NxComparisonTableFlexRow,\n        NxComparisonTableRowGroupDirective,\n        NxComparisonTableDesktopGroup,\n        NxComparisonTablePopularCell,\n    ],\n    exports: [\n        NxComparisonTableComponent,\n        NxComparisonTableCell,\n        NxComparisonTableDescriptionCell,\n        NxComparisonTableIntersectionCell,\n        NxToggleSectionDirective,\n        NxToggleSectionHeaderComponent,\n        NxComparisonTableRowDirective,\n        NxComparisonTableSelectButton,\n        NxComparisonTableFlexRow,\n        NxComparisonTableRowGroupDirective,\n        NxComparisonTableDesktopGroup,\n        NxComparisonTablePopularCell,\n    ],\n})\nexport class NxComparisonTableModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["nextId","i1.NxComparisonTableBase","i2.NxComparisonTableRowBase","i3.NxToggleSectionBase","i4","i1.NxToggleSectionBase","i2.NxComparisonTableRowGroupBase","i5","i4.NxComparisonTableFlexRow","i6","i1","i2","i3","i1.NxComparisonTableCell","i2.NxComparisonTableBase"],"mappings":"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"}