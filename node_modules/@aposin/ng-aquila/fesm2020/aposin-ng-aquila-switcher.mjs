import { coerceBooleanProperty } from '@angular/cdk/coercion';
import * as i0 from '@angular/core';
import { EventEmitter, Component, ChangeDetectionStrategy, Optional, Self, ViewChild, Input, Output, NgModule } from '@angular/core';
import * as i2 from '@aposin/ng-aquila/utils';
import { randomString } from '@aposin/ng-aquila/utils';
import * as i1 from '@angular/forms';
import * as i3 from '@angular/cdk/a11y';
import * as i4 from '@aposin/ng-aquila/icon';
import { NxIconModule } from '@aposin/ng-aquila/icon';
import * as i5 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i6 from '@angular/cdk/observers';
import { ObserversModule } from '@angular/cdk/observers';

let nextId = 0;
class NxSwitcherComponent {
    constructor(_cdr, ngControl, _errorStateMatcher, _parentForm, _parentFormGroup, _focusMonitor) {
        this._cdr = _cdr;
        this.ngControl = ngControl;
        this._errorStateMatcher = _errorStateMatcher;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this._focusMonitor = _focusMonitor;
        this._id = `nx-switcher-${nextId++}-${randomString()}`;
        /** @docs-private */
        this.errorState = false;
        this._labelPosition = 'right';
        this._name = null;
        this._checked = false;
        this._big = false;
        this._labelSize = 'large';
        this._negative = false;
        this._disabled = false;
        /** An event is dispatched each time the switcher value is changed */
        this.checkedChange = new EventEmitter();
        this.onChangeCallback = (_) => { };
        this.onTouchedCallback = () => { };
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
    }
    /** Sets the id of the switcher */
    set id(value) {
        this._id = value;
        this._cdr.markForCheck();
    }
    get id() {
        return this._id;
    }
    /** Specifies the placement of the label */
    set labelPosition(value) {
        this._labelPosition = value;
        this._cdr.markForCheck();
    }
    get labelPosition() {
        return this._labelPosition;
    }
    /** Sets the label text of the switcher */
    set name(value) {
        this._name = value;
        this._cdr.markForCheck();
    }
    get name() {
        return this._name;
    }
    /** Whether the switcher is checked (on) or unchecked (off) */
    set checked(value) {
        this._checked = value;
        this._cdr.markForCheck();
    }
    get checked() {
        return this._checked;
    }
    /** Whether the big switcher is used */
    set big(value) {
        const newValue = coerceBooleanProperty(value);
        this._big = newValue;
        this._cdr.markForCheck();
    }
    get big() {
        return this._big;
    }
    /** Sets the size of the label */
    set labelSize(value) {
        this._labelSize = value;
        this._cdr.markForCheck();
    }
    get labelSize() {
        return this._labelSize;
    }
    /** Whether the style for a dark background is used */
    set negative(value) {
        const newValue = coerceBooleanProperty(value);
        this._negative = newValue;
        this._cdr.markForCheck();
    }
    get negative() {
        return this._negative;
    }
    /** Whether the switcher is in the disabled state */
    set disabled(value) {
        const newValue = coerceBooleanProperty(value);
        this._disabled = newValue;
        this._cdr.markForCheck();
    }
    get disabled() {
        return this._disabled;
    }
    ngAfterViewInit() {
        this._focusMonitor.monitor(this._nativeInput);
    }
    ngOnDestroy() {
        this._focusMonitor.stopMonitoring(this._nativeInput);
    }
    /** Allows to toggle between the states */
    toggle() {
        if (!this.disabled) {
            this.checked = !this.checked;
            this.onChangeCallback(this.checked);
            this.checkedChange.emit(this.checked);
            if (this.onTouchedCallback) {
                this.onTouchedCallback();
            }
        }
    }
    writeValue(value) {
        if (value === null) {
            value = false;
        }
        if (value !== this.checked) {
            this.checked = value;
        }
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    ngDoCheck() {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this.updateErrorState();
        }
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /** @docs-private */
    touch() {
        this.onTouchedCallback();
    }
    /** @docs-private */
    updateErrorState() {
        const oldState = this.errorState;
        const parent = this._parentFormGroup || this._parentForm;
        const control = this.ngControl ? this.ngControl.control : null;
        const newState = this._errorStateMatcher.isErrorState(control, parent);
        if (newState !== oldState) {
            this.errorState = newState;
        }
    }
    /** @docs-private */
    get labelHasContent() {
        return !!this._switcherLabelWrapper.nativeElement.innerHTML.trim();
    }
    /** @docs-private
     * Callback for when the content of the label has changed.
     */
    labelContentChanged() {
        this._cdr.detectChanges();
    }
}
NxSwitcherComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSwitcherComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.NgControl, optional: true, self: true }, { token: i2.ErrorStateMatcher }, { token: i1.NgForm, optional: true }, { token: i1.FormGroupDirective, optional: true }, { token: i3.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });
NxSwitcherComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxSwitcherComponent, selector: "nx-switcher", inputs: { id: "id", labelPosition: "labelPosition", name: "name", checked: "checked", big: ["nxBig", "big"], labelSize: "labelSize", negative: ["nxNegative", "negative"], disabled: "disabled" }, outputs: { checkedChange: "checkedChange" }, host: { properties: { "attr.id": "null", "class.is-negative": "negative", "class.is-checked": "checked", "class.is-big": "big", "class.nx-switcher--small-label": "labelSize === \"small\"", "class.nx-switcher--large-label": "labelSize === \"large\"", "class.is-disabled": "disabled", "class.is-swapped": "labelPosition === \"left\"", "class.has-error": "errorState", "attr.aria-invalid": "errorState" } }, viewQueries: [{ propertyName: "_switcherLabelWrapper", first: true, predicate: ["switcherLabelWrapper"], descendants: true, static: true }, { propertyName: "_nativeInput", first: true, predicate: ["input"], descendants: true }], ngImport: i0, template: "<input\n    #input\n    type=\"checkbox\"\n    [id]=\"id\"\n    [attr.name]=\"name\"\n    [disabled]=\"disabled\"\n    [checked]=\"checked\"\n    (click)=\"toggle()\"\n    (blur)=\"touch()\"\n    role=\"switch\"\n    [attr.aria-checked]=\"checked\"\n    class=\"nx-switcher__input\"\n/>\n<label [attr.for]=\"id\" class=\"nx-switcher__label\" [class.has-label]=\"labelHasContent\">\n    <div class=\"nx-switcher__toggle\">\n        <div class=\"nx-switcher__dot\">\n            <nx-icon *ngIf=\"big\" name=\"check\"></nx-icon>\n        </div>\n    </div>\n    <div class=\"nx-switcher__label-text\" #switcherLabelWrapper (cdkObserveContent)=\"labelContentChanged()\">\n        <ng-content></ng-content>\n    </div>\n</label>\n", styles: [":host{position:relative;display:flex}:host(.is-swapped) .nx-switcher__label{flex-direction:row-reverse}:host(.is-swapped) .nx-switcher__label.has-label .nx-switcher__toggle{margin-left:12px}[dir=rtl] :host(.is-swapped) .nx-switcher__label.has-label .nx-switcher__toggle{margin-right:12px;margin-left:0;margin-left:initial}.nx-switcher__input{opacity:0;position:absolute}.nx-switcher__label{font-size:var(--switcher-large-font-size);line-height:var(--switcher-large-line-height);font-weight:var(--switcher-large-font-weight);letter-spacing:var(--switcher-large-letter-spacing);cursor:pointer;display:flex;position:relative}.nx-switcher__toggle{position:relative;display:inline-block;width:48px;min-width:48px;height:24px;background-color:var(--switcher-unchecked-background-color);border-radius:16px;transition:background-color .2s ease}:host(:not(.is-swapped)) .has-label .nx-switcher__toggle{margin-right:12px}[dir=rtl] :host(:not(.is-swapped)) .has-label .nx-switcher__toggle{margin-right:0;margin-right:initial;margin-left:12px}.nx-switcher__dot{position:absolute;height:20px;width:20px;left:2px;bottom:2px;background-color:var(--switcher-dot-background-color);border-radius:16px;transform:translate(0);transition:transform .2s ease}:host-context([dir=rtl]) .nx-switcher__dot{right:2px;left:auto}:host(.is-checked) .nx-switcher__dot{transform:translate(24px)}[dir=rtl] :host(.is-checked) .nx-switcher__dot{transform:translate(-24px)}:host(.is-checked) .nx-switcher__toggle{background-color:var(--switcher-checked-background-color)}:host(.is-checked.is-negative) .nx-switcher__toggle{background-color:var(--negative-dimmed)}:host(.is-big) .nx-switcher__toggle{width:56px;min-width:56px;height:32px}:host(.is-big) .nx-switcher__dot{height:28px;width:28px}:host(.is-big) nx-icon{position:absolute;top:2px;left:2px;font-size:24px;opacity:0;color:var(--switcher-checked-icon-color)}[dir=rtl] :host(.is-big) nx-icon{right:2px;left:auto}:host(.is-big).is-checked nx-icon{opacity:1;transition:opacity .2s ease}:host(.is-big).nx-switcher--large-label .has-label .nx-switcher__label-text{margin-top:var(--switcher-big-large-label-text-margin-top)}:host(.is-big).nx-switcher--large-label .has-label .nx-switcher__toggle{margin-top:var(--switcher-big-large-label-control-margin-top)}:host(.is-big).nx-switcher--small-label .has-label .nx-switcher__label-text{margin-top:var(--switcher-big-small-label-text-margin-top)}:host(.is-big).nx-switcher--small-label .has-label .nx-switcher__toggle{margin-top:var(--switcher-big-small-label-control-margin-top)}:host(.nx-switcher--large-label) .has-label .nx-switcher__label-text{margin-top:var(--switcher-large-label-text-margin-top)}:host(.nx-switcher--large-label) .has-label .nx-switcher__toggle{margin-top:var(--switcher-large-label-control-margin-top)}:host(.nx-switcher--small-label) .nx-switcher__label{font-size:var(--switcher-small-font-size);line-height:var(--switcher-small-line-height);font-weight:var(--switcher-small-font-weight);letter-spacing:var(--switcher-small-letter-spacing)}:host(.nx-switcher--small-label) .has-label .nx-switcher__label-text{margin-top:var(--switcher-small-label-text-margin-top)}:host(.nx-switcher--small-label) .has-label .nx-switcher__toggle{margin-top:var(--switcher-small-label-control-margin-top)}:host(.is-negative) .nx-switcher__label{color:var(--negative)}:host(.is-negative) .nx-switcher__dot{background-color:var(--negative)}:host(.is-negative) .nx-switcher__toggle{background-color:var(--negative-dimmed)}:host .nx-switcher__input.cdk-keyboard-focused+.nx-switcher__label .nx-switcher__toggle{box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){:host .nx-switcher__input.cdk-keyboard-focused+.nx-switcher__label .nx-switcher__toggle{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}:host(.is-disabled) .nx-switcher__toggle{background-color:var(--switcher-disabled-background-color)}:host(.is-disabled) .nx-switcher__dot{background-color:var(--switcher-disabled-dot-background-color)}:host(.is-disabled) .nx-switcher__label{cursor:not-allowed;color:var(--switcher-disabled-text-color)}:host(.is-disabled) nx-icon{color:var(--switcher-disabled-icon-color)}:host(.has-error) .nx-switcher__toggle{background-color:var(--danger)}@media screen and (-ms-high-contrast: active){:host .nx-switcher__label,:host(.is-negative) .nx-switcher__label{color:buttonText}:host .nx-switcher__toggle,:host(.is-negative) .nx-switcher__toggle{forced-color-adjust:none;color:highlightText;background-color:highlight}:host:not(.is-checked) .nx-switcher__toggle,:host(.is-negative):not(.is-checked) .nx-switcher__toggle{background-color:buttonFace;border:2px solid buttonText;color:buttonText}:host:not(.is-checked) .nx-switcher__dot,:host(.is-negative):not(.is-checked) .nx-switcher__dot{left:0;bottom:0;box-shadow:0 0 0 2px buttonText;background-color:buttonText}:host.is-checked .nx-switcher__toggle,:host(.is-negative).is-checked .nx-switcher__toggle{background-color:highlight}:host.is-checked .nx-switcher__dot,:host(.is-negative).is-checked .nx-switcher__dot{background-color:highlightText}:host.is-checked .nx-switcher__dot nx-icon,:host(.is-negative).is-checked .nx-switcher__dot nx-icon{color:highlight}:host.is-disabled .nx-switcher__label,:host(.is-negative).is-disabled .nx-switcher__label{color:GrayText}:host.is-disabled .nx-switcher__toggle,:host(.is-negative).is-disabled .nx-switcher__toggle{color:GrayText}:host.is-disabled .nx-switcher__dot,:host(.is-negative).is-disabled .nx-switcher__dot{opacity:1;background-color:GrayText}:host.is-disabled:not(.is-checked) .nx-switcher__toggle,:host(.is-negative).is-disabled:not(.is-checked) .nx-switcher__toggle{border:2px solid GrayText}:host.is-disabled:not(.is-checked) .nx-switcher__dot,:host(.is-negative).is-disabled:not(.is-checked) .nx-switcher__dot{box-shadow:0 0 0 2px GrayText}:host.is-disabled.is-checked .nx-switcher__toggle,:host(.is-negative).is-disabled.is-checked .nx-switcher__toggle{background-color:GrayText}:host.is-disabled.is-checked .nx-switcher__dot,:host(.is-negative).is-disabled.is-checked .nx-switcher__dot{background-color:window}:host.is-disabled.is-checked .nx-switcher__dot nx-icon,:host(.is-negative).is-disabled.is-checked .nx-switcher__dot nx-icon{color:GrayText}}\n"], components: [{ type: i4.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.CdkObserveContent, selector: "[cdkObserveContent]", inputs: ["cdkObserveContentDisabled", "debounce"], outputs: ["cdkObserveContent"], exportAs: ["cdkObserveContent"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSwitcherComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-switcher', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        /* the host id should be set to null, otherwise nx-switcher and its <input> get the same id
                    and on label click the input click is not triggered (double id problem) */
                        '[attr.id]': 'null',
                        '[class.is-negative]': 'negative',
                        '[class.is-checked]': 'checked',
                        '[class.is-big]': 'big',
                        '[class.nx-switcher--small-label]': 'labelSize === "small"',
                        '[class.nx-switcher--large-label]': 'labelSize === "large"',
                        '[class.is-disabled]': 'disabled',
                        '[class.is-swapped]': 'labelPosition === "left"',
                        '[class.has-error]': 'errorState',
                        '[attr.aria-invalid]': 'errorState',
                    }, template: "<input\n    #input\n    type=\"checkbox\"\n    [id]=\"id\"\n    [attr.name]=\"name\"\n    [disabled]=\"disabled\"\n    [checked]=\"checked\"\n    (click)=\"toggle()\"\n    (blur)=\"touch()\"\n    role=\"switch\"\n    [attr.aria-checked]=\"checked\"\n    class=\"nx-switcher__input\"\n/>\n<label [attr.for]=\"id\" class=\"nx-switcher__label\" [class.has-label]=\"labelHasContent\">\n    <div class=\"nx-switcher__toggle\">\n        <div class=\"nx-switcher__dot\">\n            <nx-icon *ngIf=\"big\" name=\"check\"></nx-icon>\n        </div>\n    </div>\n    <div class=\"nx-switcher__label-text\" #switcherLabelWrapper (cdkObserveContent)=\"labelContentChanged()\">\n        <ng-content></ng-content>\n    </div>\n</label>\n", styles: [":host{position:relative;display:flex}:host(.is-swapped) .nx-switcher__label{flex-direction:row-reverse}:host(.is-swapped) .nx-switcher__label.has-label .nx-switcher__toggle{margin-left:12px}[dir=rtl] :host(.is-swapped) .nx-switcher__label.has-label .nx-switcher__toggle{margin-right:12px;margin-left:0;margin-left:initial}.nx-switcher__input{opacity:0;position:absolute}.nx-switcher__label{font-size:var(--switcher-large-font-size);line-height:var(--switcher-large-line-height);font-weight:var(--switcher-large-font-weight);letter-spacing:var(--switcher-large-letter-spacing);cursor:pointer;display:flex;position:relative}.nx-switcher__toggle{position:relative;display:inline-block;width:48px;min-width:48px;height:24px;background-color:var(--switcher-unchecked-background-color);border-radius:16px;transition:background-color .2s ease}:host(:not(.is-swapped)) .has-label .nx-switcher__toggle{margin-right:12px}[dir=rtl] :host(:not(.is-swapped)) .has-label .nx-switcher__toggle{margin-right:0;margin-right:initial;margin-left:12px}.nx-switcher__dot{position:absolute;height:20px;width:20px;left:2px;bottom:2px;background-color:var(--switcher-dot-background-color);border-radius:16px;transform:translate(0);transition:transform .2s ease}:host-context([dir=rtl]) .nx-switcher__dot{right:2px;left:auto}:host(.is-checked) .nx-switcher__dot{transform:translate(24px)}[dir=rtl] :host(.is-checked) .nx-switcher__dot{transform:translate(-24px)}:host(.is-checked) .nx-switcher__toggle{background-color:var(--switcher-checked-background-color)}:host(.is-checked.is-negative) .nx-switcher__toggle{background-color:var(--negative-dimmed)}:host(.is-big) .nx-switcher__toggle{width:56px;min-width:56px;height:32px}:host(.is-big) .nx-switcher__dot{height:28px;width:28px}:host(.is-big) nx-icon{position:absolute;top:2px;left:2px;font-size:24px;opacity:0;color:var(--switcher-checked-icon-color)}[dir=rtl] :host(.is-big) nx-icon{right:2px;left:auto}:host(.is-big).is-checked nx-icon{opacity:1;transition:opacity .2s ease}:host(.is-big).nx-switcher--large-label .has-label .nx-switcher__label-text{margin-top:var(--switcher-big-large-label-text-margin-top)}:host(.is-big).nx-switcher--large-label .has-label .nx-switcher__toggle{margin-top:var(--switcher-big-large-label-control-margin-top)}:host(.is-big).nx-switcher--small-label .has-label .nx-switcher__label-text{margin-top:var(--switcher-big-small-label-text-margin-top)}:host(.is-big).nx-switcher--small-label .has-label .nx-switcher__toggle{margin-top:var(--switcher-big-small-label-control-margin-top)}:host(.nx-switcher--large-label) .has-label .nx-switcher__label-text{margin-top:var(--switcher-large-label-text-margin-top)}:host(.nx-switcher--large-label) .has-label .nx-switcher__toggle{margin-top:var(--switcher-large-label-control-margin-top)}:host(.nx-switcher--small-label) .nx-switcher__label{font-size:var(--switcher-small-font-size);line-height:var(--switcher-small-line-height);font-weight:var(--switcher-small-font-weight);letter-spacing:var(--switcher-small-letter-spacing)}:host(.nx-switcher--small-label) .has-label .nx-switcher__label-text{margin-top:var(--switcher-small-label-text-margin-top)}:host(.nx-switcher--small-label) .has-label .nx-switcher__toggle{margin-top:var(--switcher-small-label-control-margin-top)}:host(.is-negative) .nx-switcher__label{color:var(--negative)}:host(.is-negative) .nx-switcher__dot{background-color:var(--negative)}:host(.is-negative) .nx-switcher__toggle{background-color:var(--negative-dimmed)}:host .nx-switcher__input.cdk-keyboard-focused+.nx-switcher__label .nx-switcher__toggle{box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){:host .nx-switcher__input.cdk-keyboard-focused+.nx-switcher__label .nx-switcher__toggle{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}:host(.is-disabled) .nx-switcher__toggle{background-color:var(--switcher-disabled-background-color)}:host(.is-disabled) .nx-switcher__dot{background-color:var(--switcher-disabled-dot-background-color)}:host(.is-disabled) .nx-switcher__label{cursor:not-allowed;color:var(--switcher-disabled-text-color)}:host(.is-disabled) nx-icon{color:var(--switcher-disabled-icon-color)}:host(.has-error) .nx-switcher__toggle{background-color:var(--danger)}@media screen and (-ms-high-contrast: active){:host .nx-switcher__label,:host(.is-negative) .nx-switcher__label{color:buttonText}:host .nx-switcher__toggle,:host(.is-negative) .nx-switcher__toggle{forced-color-adjust:none;color:highlightText;background-color:highlight}:host:not(.is-checked) .nx-switcher__toggle,:host(.is-negative):not(.is-checked) .nx-switcher__toggle{background-color:buttonFace;border:2px solid buttonText;color:buttonText}:host:not(.is-checked) .nx-switcher__dot,:host(.is-negative):not(.is-checked) .nx-switcher__dot{left:0;bottom:0;box-shadow:0 0 0 2px buttonText;background-color:buttonText}:host.is-checked .nx-switcher__toggle,:host(.is-negative).is-checked .nx-switcher__toggle{background-color:highlight}:host.is-checked .nx-switcher__dot,:host(.is-negative).is-checked .nx-switcher__dot{background-color:highlightText}:host.is-checked .nx-switcher__dot nx-icon,:host(.is-negative).is-checked .nx-switcher__dot nx-icon{color:highlight}:host.is-disabled .nx-switcher__label,:host(.is-negative).is-disabled .nx-switcher__label{color:GrayText}:host.is-disabled .nx-switcher__toggle,:host(.is-negative).is-disabled .nx-switcher__toggle{color:GrayText}:host.is-disabled .nx-switcher__dot,:host(.is-negative).is-disabled .nx-switcher__dot{opacity:1;background-color:GrayText}:host.is-disabled:not(.is-checked) .nx-switcher__toggle,:host(.is-negative).is-disabled:not(.is-checked) .nx-switcher__toggle{border:2px solid GrayText}:host.is-disabled:not(.is-checked) .nx-switcher__dot,:host(.is-negative).is-disabled:not(.is-checked) .nx-switcher__dot{box-shadow:0 0 0 2px GrayText}:host.is-disabled.is-checked .nx-switcher__toggle,:host(.is-negative).is-disabled.is-checked .nx-switcher__toggle{background-color:GrayText}:host.is-disabled.is-checked .nx-switcher__dot,:host(.is-negative).is-disabled.is-checked .nx-switcher__dot{background-color:window}:host.is-disabled.is-checked .nx-switcher__dot nx-icon,:host(.is-negative).is-disabled.is-checked .nx-switcher__dot nx-icon{color:GrayText}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }, { type: i2.ErrorStateMatcher }, { type: i1.NgForm, decorators: [{
                    type: Optional
                }] }, { type: i1.FormGroupDirective, decorators: [{
                    type: Optional
                }] }, { type: i3.FocusMonitor }]; }, propDecorators: { _switcherLabelWrapper: [{
                type: ViewChild,
                args: ['switcherLabelWrapper', { static: true }]
            }], _nativeInput: [{
                type: ViewChild,
                args: ['input']
            }], id: [{
                type: Input
            }], labelPosition: [{
                type: Input
            }], name: [{
                type: Input
            }], checked: [{
                type: Input
            }], big: [{
                type: Input,
                args: ['nxBig']
            }], labelSize: [{
                type: Input
            }], negative: [{
                type: Input,
                args: ['nxNegative']
            }], disabled: [{
                type: Input
            }], checkedChange: [{
                type: Output,
                args: ['checkedChange']
            }] } });

class NxSwitcherModule {
}
NxSwitcherModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSwitcherModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NxSwitcherModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSwitcherModule, declarations: [NxSwitcherComponent], imports: [CommonModule, NxIconModule, ObserversModule], exports: [NxSwitcherComponent] });
NxSwitcherModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSwitcherModule, imports: [[CommonModule, NxIconModule, ObserversModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSwitcherModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NxSwitcherComponent],
                    exports: [NxSwitcherComponent],
                    imports: [CommonModule, NxIconModule, ObserversModule],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { NxSwitcherComponent, NxSwitcherModule };
//# sourceMappingURL=aposin-ng-aquila-switcher.mjs.map
