import { coerceBooleanProperty } from '@angular/cdk/coercion';
import * as i0 from '@angular/core';
import { EventEmitter, Component, ChangeDetectionStrategy, Optional, Self, ContentChildren, forwardRef, ContentChild, Output, Input, ViewChild, NgModule } from '@angular/core';
import { NxLabelComponent, NxLabelModule, NxErrorModule } from '@aposin/ng-aquila/base';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i1 from '@aposin/ng-aquila/utils';
import * as i2 from '@angular/forms';
import * as i3 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i4 from '@angular/cdk/a11y';
import * as i5 from '@aposin/ng-aquila/icon';
import { NxIconModule } from '@aposin/ng-aquila/icon';
import * as i6 from '@angular/cdk/observers';
import { ObserversModule } from '@angular/cdk/observers';

let nextId = 0;
class NxCheckboxChangeEvent {
    constructor(
    /** The checked value of the checkbox. */
    checked, 
    /** The value of the checkbox. */
    value, 
    /** The component instance of the checkbox which emitted the change event. */
    checkbox) {
        this.checked = checked;
        this.value = value;
        this.checkbox = checkbox;
    }
}
class NxCheckboxGroupChangeEvent {
    constructor(
    /** The value of the checkbox group. An array containing all checked checkbox values. */
    value, 
    /** The component instance of the checkbox group. */
    checkboxGroup) {
        this.value = value;
        this.checkboxGroup = checkboxGroup;
    }
}
class NxCheckboxGroupComponent {
    constructor(_cdr, _errorStateMatcher, _parentForm, _parentFormGroup, ngControl) {
        this._cdr = _cdr;
        this._errorStateMatcher = _errorStateMatcher;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this.ngControl = ngControl;
        this._stateChanges = new Subject();
        this.errorState = false;
        this.selectionChange = new EventEmitter();
        this._id = `nx-checkbox-group-${nextId++}`;
        this._name = '';
        this._disabled = false;
        this._negative = false;
        this._destroyed = new Subject();
        this._onChange = () => { };
        this._onTouched = () => { };
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
    }
    /** Sets the Id of the checkbox group. */
    set id(value) {
        if (this._id !== value) {
            this._id = value;
            this._cdr.markForCheck();
        }
    }
    get id() {
        return this._id;
    }
    /** Sets the name of the checkboxes inside the nx-checkbox-group. */
    set name(value) {
        this._name = value;
        this._cdr.markForCheck();
    }
    get name() {
        return this._name;
    }
    /** Disables all checkboxes inside the nx-checkbox-group. */
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        if (this._label) {
            this._label.disabled = this._disabled;
        }
        this._stateChanges.next();
    }
    get disabled() {
        return this._disabled;
    }
    /** Set the negative styles for all the checkboxes inside the nx-checkbox-group */
    set negative(value) {
        this._negative = coerceBooleanProperty(value);
        this._cdr.markForCheck();
        this._stateChanges.next();
    }
    get negative() {
        return this._negative;
    }
    /** Sets the label size of the checkboxes inside the group */
    set labelSize(value) {
        this._labelSize = value;
        this._stateChanges.next();
    }
    get labelSize() {
        return this._labelSize;
    }
    /** Whether the nx-checkbox-group are required. */
    get required() {
        return !!this._required;
    }
    set required(value) {
        this._required = coerceBooleanProperty(value);
    }
    ngAfterContentInit() {
        setTimeout(() => {
            this._updateSelectedCheckboxFromValue(true);
        });
        this._checkboxes.changes.pipe(takeUntil(this._destroyed)).subscribe(() => {
            this._value = this._checkboxes.filter(checkbox => checkbox.checked).map(cb => cb.value);
            if (this.ngControl) {
                this.ngControl.control.setValue(this._value);
            }
            this._updateSelectedCheckboxFromValue();
        });
    }
    ngDoCheck() {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this.updateErrorState();
        }
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this._stateChanges.complete();
    }
    writeValue(value) {
        if (this._value !== value) {
            this._value = value;
            this._updateSelectedCheckboxFromValue();
        }
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    _updateSelectedCheckboxFromValue(initialisation = false) {
        // prevent reset of class values with empty array during initialisation
        const isValueSet = initialisation ? !!this._value && this._value.length : !!this._value;
        if (this._checkboxes?.length && isValueSet) {
            this._checkboxes.map(checkbox => {
                checkbox.checked = this._value.includes(checkbox.value);
            });
        }
    }
    /** @docs-private */
    change(value) {
        const checkedCheckboxValues = this._checkboxes.filter(checkbox => checkbox.checked).map(checkbox => checkbox.value);
        this._onChange(checkedCheckboxValues);
        if (this._onTouched) {
            this._onTouched();
        }
        this.selectionChange.emit(new NxCheckboxGroupChangeEvent(checkedCheckboxValues, this));
    }
    /** Checkbox instances in the checkbox group. */
    get checkboxes() {
        return this._checkboxes.toArray();
    }
    /** @docs-private */
    updateErrorState() {
        const oldState = this.errorState;
        const parent = this._parentFormGroup || this._parentForm;
        const control = this.ngControl ? this.ngControl.control : null;
        const newState = this._errorStateMatcher.isErrorState(control, parent);
        if (newState !== oldState) {
            this.errorState = newState;
            this._cdr.markForCheck();
        }
    }
}
NxCheckboxGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxCheckboxGroupComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.ErrorStateMatcher }, { token: i2.NgForm, optional: true }, { token: i2.FormGroupDirective, optional: true }, { token: i2.NgControl, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Component });
NxCheckboxGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxCheckboxGroupComponent, selector: "nx-checkbox-group", inputs: { id: "id", name: "name", disabled: "disabled", negative: "negative", labelSize: "labelSize", required: "required" }, outputs: { selectionChange: "selectionChange" }, host: { properties: { "class.nx-checkbox-group": "true", "class.nx-checkbox-group--negative": "negative", "attr.id": "id", "attr.required": "required", "attr.disabled": "disabled || null", "attr.aria-labelledby": "this._label?.id  || null", "attr.role": "\"group\"" } }, queries: [{ propertyName: "_label", first: true, predicate: i0.forwardRef(function () { return NxLabelComponent; }), descendants: true }, { propertyName: "_checkboxes", predicate: i0.forwardRef(function () { return NxCheckboxComponent; }), descendants: true }], ngImport: i0, template: "<div>\n    <div class=\"nx-checkbox-group__label\">\n        <ng-content select=\"nx-label\"></ng-content>\n    </div>\n    <div *ngIf=\"errorState\" class=\"nx-checkbox-group__errors\">\n        <ng-content select=\"nx-error\"></ng-content>\n    </div>\n    <div class=\"nx-checkbox-group__controls\">\n        <ng-content></ng-content>\n    </div>\n</div>\n", styles: [":host ::ng-deep nx-error{margin-bottom:8px}:host ::ng-deep nx-label{margin-bottom:16px;display:block}:host.nx-checkbox-group--negative ::ng-deep nx-error,:host.nx-checkbox-group--negative ::ng-deep nx-label,:host.nx-checkbox-group--negative ::ng-deep nx-icon.nx-error__icon{color:var(--negative)}\n"], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxCheckboxGroupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-checkbox-group', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[class.nx-checkbox-group]': 'true',
                        '[class.nx-checkbox-group--negative]': 'negative',
                        '[attr.id]': 'id',
                        '[attr.required]': 'required',
                        '[attr.disabled]': 'disabled || null',
                        '[attr.aria-labelledby]': 'this._label?.id  || null',
                        '[attr.role]': '"group"',
                    }, template: "<div>\n    <div class=\"nx-checkbox-group__label\">\n        <ng-content select=\"nx-label\"></ng-content>\n    </div>\n    <div *ngIf=\"errorState\" class=\"nx-checkbox-group__errors\">\n        <ng-content select=\"nx-error\"></ng-content>\n    </div>\n    <div class=\"nx-checkbox-group__controls\">\n        <ng-content></ng-content>\n    </div>\n</div>\n", styles: [":host ::ng-deep nx-error{margin-bottom:8px}:host ::ng-deep nx-label{margin-bottom:16px;display:block}:host.nx-checkbox-group--negative ::ng-deep nx-error,:host.nx-checkbox-group--negative ::ng-deep nx-label,:host.nx-checkbox-group--negative ::ng-deep nx-icon.nx-error__icon{color:var(--negative)}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.ErrorStateMatcher }, { type: i2.NgForm, decorators: [{
                    type: Optional
                }] }, { type: i2.FormGroupDirective, decorators: [{
                    type: Optional
                }] }, { type: i2.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }]; }, propDecorators: { _checkboxes: [{
                type: ContentChildren,
                args: [forwardRef(() => NxCheckboxComponent), { descendants: true }]
            }], _label: [{
                type: ContentChild,
                args: [forwardRef(() => NxLabelComponent)]
            }], selectionChange: [{
                type: Output
            }], id: [{
                type: Input
            }], name: [{
                type: Input
            }], disabled: [{
                type: Input
            }], negative: [{
                type: Input
            }], labelSize: [{
                type: Input
            }], required: [{
                type: Input
            }] } });
class NxCheckboxComponent {
    constructor(_cdr, _errorStateMatcher, checkboxGroup, ngControl, _parentForm, _parentFormGroup, _focusMonitor) {
        this._cdr = _cdr;
        this._errorStateMatcher = _errorStateMatcher;
        this.checkboxGroup = checkboxGroup;
        this.ngControl = ngControl;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this._focusMonitor = _focusMonitor;
        this._id = (nextId++).toString();
        this._disabled = false;
        this._negative = false;
        this._labelSize = 'small';
        this._checked = false;
        this._name = null;
        this._indeterminate = false;
        this._value = '';
        /** An event emitted when the indeterminate value has changed */
        this.indeterminateChange = new EventEmitter(false);
        /** An event emitted when the checked value has changed.
         *
         * Emits the boolean checked value of the changed checkbox.
         */
        this.checkedChange = new EventEmitter(false);
        /** An event emitted when the checked value has changed.
         *
         * Emits a NxCheckboxChangeEvent.
         */
        this.checkboxChange = new EventEmitter();
        this._destroyed = new Subject();
        this.onChangeCallback = (_) => { };
        this.onTouchedCallback = () => { };
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
    }
    /**
     * Id of the checkbox.
     *
     * If not set, the checkbox gets an incremented value by default.
     */
    set id(value) {
        if (value !== this._id) {
            this._id = value;
            this._cdr.markForCheck();
        }
    }
    get id() {
        return `nx-checkbox-${this._id}`;
    }
    /** Name of the checkbox. */
    set name(name) {
        this._name = name;
    }
    get name() {
        return (this.checkboxGroup?.name || this._name);
    }
    /** Whether the checkbox is disabled. */
    set disabled(value) {
        const newValue = coerceBooleanProperty(value);
        if (newValue !== this._disabled) {
            this._disabled = newValue;
            this._cdr.markForCheck();
        }
    }
    get disabled() {
        return this.checkboxGroup?.disabled || this._disabled;
    }
    /**
     * Sets the label size of the checkbox. Default value: small
     */
    set labelSize(value) {
        this._labelSize = value;
        this._cdr.markForCheck();
    }
    get labelSize() {
        return this.checkboxGroup?.labelSize || this._labelSize;
    }
    /**
     * Whether the checkbox has negative styling.
     */
    set negative(value) {
        const newValue = coerceBooleanProperty(value);
        if (newValue !== this._negative) {
            this._negative = newValue;
            this._cdr.markForCheck();
        }
    }
    get negative() {
        return this.checkboxGroup?.negative || this._negative;
    }
    /** Whether the checkbox is checked. */
    set checked(value) {
        const newValue = coerceBooleanProperty(value);
        if (newValue !== this._checked) {
            if (this._indeterminate) {
                this._setIndeterminate(false);
            }
            this._setChecked(newValue);
        }
    }
    get checked() {
        return this._checked;
    }
    /** Whether the checkbox is indeterminated. */
    set indeterminate(value) {
        const newValue = coerceBooleanProperty(value);
        if (this._indeterminate !== newValue) {
            if (this._checked) {
                this._setChecked(false);
            }
            this._setIndeterminate(newValue);
        }
        this._cdr.markForCheck();
    }
    get indeterminate() {
        return this._indeterminate;
    }
    /** Whether the checkbox is required. */
    get required() {
        return !!this._required;
    }
    set required(value) {
        this._required = coerceBooleanProperty(value);
    }
    /** Sets the value of the checkbox. Default value is the checked status. */
    get value() {
        return this._value ? this._value : this.checked.toString();
    }
    set value(value) {
        this._value = value;
        this._cdr.markForCheck();
    }
    /** @docs-private */
    get labelHasContent() {
        return !!this._checkboxLabelWrapper.nativeElement.innerHTML.trim();
    }
    /** @docs-private
     * Callback for when the content of the label has changed.
     */
    labelContentChanged() {
        this._cdr.detectChanges();
    }
    /** @docs-private */
    _controlInvalid() {
        const parent = this._parentFormGroup || this._parentForm;
        let control = null; // TODO this doesn't seem correct
        if (this.checkboxGroup?.ngControl) {
            control = this.checkboxGroup.ngControl;
        }
        else {
            control = this.ngControl ? this.ngControl.control : null;
        }
        return this._errorStateMatcher.isErrorState(control, parent);
    }
    ngOnInit() {
        if (this.checkboxGroup) {
            this.name = this.checkboxGroup.name;
            // when relevant properties of the parent like name and disabled change
            // we need to let change detection know that the template needs an update
            this.checkboxGroup._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {
                this._cdr.markForCheck();
            });
        }
    }
    ngAfterViewInit() {
        this._focusMonitor.monitor(this._nativeInput);
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this._focusMonitor.stopMonitoring(this._nativeInput);
    }
    _setIndeterminate(value) {
        this._indeterminate = value;
        this.indeterminateChange.emit(this._indeterminate);
        this._cdr.markForCheck();
    }
    _setChecked(value) {
        this._checked = value;
        this._cdr.markForCheck();
    }
    /** Toggles the checked state of the checkbox. */
    toggle() {
        this.checked = !this.checked;
        this.onChangeCallback(this.checked);
        if (this.checkboxGroup !== null) {
            this.checkboxGroup.change(this);
        }
    }
    writeValue(value) {
        if (value === null) {
            value = false;
        }
        if (value !== this.checked) {
            this.checked = value;
        }
    }
    registerOnChange(onChange) {
        this.onChangeCallback = onChange;
    }
    registerOnTouched(onTouched) {
        this.onTouchedCallback = onTouched;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /** Focuses the checkbox element. */
    focus(focusOrigin) {
        this._focusMonitor.focusVia(this._nativeInput, focusOrigin);
    }
    /** @docs-private */
    touch() {
        this.onTouchedCallback();
    }
    /** @docs-private */
    _onInputClick(event) {
        // stop the propagation of the native click on the checkbox input so that a click is not triggered twice
        event.stopPropagation();
        if (!this.disabled) {
            this.toggle();
            this.checkedChange.emit(this._checked);
            this.checkboxChange.emit(this._createChangeEvent(this._checked));
        }
    }
    /** @docs-private */
    _createChangeEvent(checkedValue) {
        const event = new NxCheckboxChangeEvent(checkedValue, this.value, this);
        event.checked = checkedValue;
        event.value = this.value;
        event.checkbox = this;
        return event;
    }
}
NxCheckboxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxCheckboxComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.ErrorStateMatcher }, { token: NxCheckboxGroupComponent, optional: true }, { token: i2.NgControl, optional: true, self: true }, { token: i2.NgForm, optional: true }, { token: i2.FormGroupDirective, optional: true }, { token: i4.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });
NxCheckboxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxCheckboxComponent, selector: "nx-checkbox", inputs: { id: "id", name: "name", disabled: "disabled", labelSize: "labelSize", negative: "negative", checked: "checked", indeterminate: "indeterminate", required: "required", value: "value" }, outputs: { indeterminateChange: "indeterminateChange", checkedChange: "checkedChange", checkboxChange: "checkboxChange" }, host: { properties: { "class.nx-checkbox": "true", "class.disabled": "disabled", "class.nx-checkbox--label-large": "labelSize === \"large\"", "class.nx-checkbox--label-small": "labelSize === \"small\"", "class.nx-checkbox--negative": "negative", "class.has-error": "_controlInvalid() || null", "attr.required": "required", "attr.aria-invalid": "_controlInvalid() || null" } }, viewQueries: [{ propertyName: "_checkboxLabelWrapper", first: true, predicate: ["checkboxLabelWrapper"], descendants: true, static: true }, { propertyName: "_nativeInput", first: true, predicate: ["input"], descendants: true }], ngImport: i0, template: "<input\n    #input\n    type=\"checkbox\"\n    [id]=\"id\"\n    [name]=\"name\"\n    [checked]=\"checked\"\n    [indeterminate]=\"indeterminate\"\n    [disabled]=\"disabled\"\n    (blur)=\"touch()\"\n    [attr.aria-labelledby]=\"id + '-label'\"\n    (click)=\"_onInputClick($event)\"\n    class=\"nx-checkbox__input\"\n    [value]=\"value\"\n/>\n\n<label [id]=\"id + '-label'\" [attr.for]=\"id\" class=\"nx-checkbox__label\" [class.has-label]=\"labelHasContent\">\n    <span class=\"nx-checkbox__control\">\n        <nx-icon *ngIf=\"checked\" name=\"check\" aria-hidden=\"true\"></nx-icon>\n        <div *ngIf=\"indeterminate\" class=\"nx-checkbox__indeterminate-indicator\"></div>\n    </span>\n    <div class=\"nx-checkbox__label-text\" #checkboxLabelWrapper (cdkObserveContent)=\"labelContentChanged()\">\n        <ng-content></ng-content>\n    </div>\n</label>\n", styles: [":host{display:block;position:relative}:host.has-error .nx-checkbox__input:checked+.nx-checkbox__label .nx-checkbox__control{background-color:var(--danger);border-color:var(--danger)}:host.has-error .nx-checkbox__control{border-color:var(--danger)}:host.has-error .nx-checkbox__indeterminate-indicator{background-color:var(--danger)}.nx-checkbox__input{opacity:0;position:absolute}.nx-checkbox__label{font-size:var(--checkbox-small-label-font-size);line-height:var(--checkbox-small-label-line-height);font-weight:var(--checkbox-small-label-font-weight);letter-spacing:var(--checkbox-small-label-letter-spacing);color:var(--checkbox-label-color);cursor:pointer;display:flex}:host(.nx-checkbox--label-large) .nx-checkbox__label{font-size:var(--checkbox-large-label-font-size);line-height:var(--checkbox-large-label-line-height);font-weight:var(--checkbox-large-label-font-weight);letter-spacing:var(--checkbox-large-label-letter-spacing)}:host(.nx-checkbox--label-large) .has-label .nx-checkbox__label-text{margin-top:var(--checkbox-large-label-text-margin-top)}:host(.nx-checkbox--label-large) .has-label .nx-checkbox__control{margin-top:var(--checkbox-large-label-control-margin-top)}:host(.nx-checkbox--label-large) .nx-checkbox__label-text{margin-left:var(--checkbox-large-label-text-margin-left)}[dir=rtl] :host(.nx-checkbox--label-large) .nx-checkbox__label-text{margin-left:0;margin-left:initial;margin-right:var(--checkbox-large-label-text-margin-left)}:host(.nx-checkbox--label-small) .has-label .nx-checkbox__label-text{margin-top:var(--checkbox-small-label-text-margin-top)}:host(.nx-checkbox--label-small) .has-label .nx-checkbox__control{margin-top:var(--checkbox-small-label-control-margin-top)}.nx-checkbox__label-text{padding:0;margin-left:var(--checkbox-small-label-text-margin-left)}.nx-checkbox__label-text:empty{display:none}:host-context([dir=rtl]) .nx-checkbox__label-text{margin-left:0;margin-left:initial;margin-right:var(--checkbox-small-label-text-margin-left)}.nx-checkbox__control{background-color:var(--checkbox-background-color);border-style:solid;border-width:var(--checkbox-border-width);border-color:var(--checkbox-border-color);border-radius:var(--checkbox-border-radius);color:var(--checkbox-icon-color);font-size:var(--checkbox-icon-size);height:var(--checkbox-control-size);width:var(--checkbox-control-size);min-width:var(--checkbox-control-size);display:flex;justify-content:center;align-items:center;z-index:0;cursor:pointer}.nx-checkbox__indeterminate-indicator{color:var(--checkbox-indeterminate-color);background-color:var(--checkbox-indeterminate-color);box-sizing:content-box;height:0;width:8px;border:1px solid;border-radius:2px}.nx-checkbox__input:checked+.nx-checkbox__label .nx-checkbox__control{background-color:var(--checkbox-selected-background-color);border-color:var(--checkbox-selected-border-color)}.nx-checkbox__input:disabled+.nx-checkbox__label .nx-checkbox__control{background-color:var(--checkbox-disabled-background-color);border-color:var(--checkbox-disabled-border-color);color:var(--checkbox-disabled-icon-color);cursor:not-allowed}.nx-checkbox__input:checked:disabled+.nx-checkbox__label .nx-checkbox__control{background-color:var(--checkbox-disabled-selected-background-color)}.nx-checkbox__input:disabled+.nx-checkbox__label{cursor:not-allowed;color:var(--checkbox-label-disabled-color)}.nx-checkbox__input:disabled+.nx-checkbox__label .nx-checkbox__indeterminate-indicator{color:var(--checkbox-disabled-border-color);background-color:var(--checkbox-disabled-border-color)}:host(.nx-checkbox--negative) .nx-checkbox__control{border-color:var(--negative);background-color:transparent}:host(.nx-checkbox--negative) .nx-checkbox__label{color:var(--negative)}:host(.nx-checkbox--negative) .nx-checkbox__input:checked+.nx-checkbox__label .nx-checkbox__control{color:var(--negative-accent);background-color:var(--negative);border-color:var(--negative)}:host(.nx-checkbox--negative) .nx-checkbox__input:checked:disabled+.nx-checkbox__label .nx-checkbox__control{color:var(--negative-dimmed);border-color:transparent;background-color:var(--negative-02-dimmed)}:host(.nx-checkbox--negative) .nx-checkbox__indeterminate-indicator{color:var(--negative);background-color:var(--negative)}:host(.nx-checkbox--negative) .nx-checkbox__input:disabled+.nx-checkbox__label{color:var(--negative-dimmed)}:host(.nx-checkbox--negative) .nx-checkbox__input:disabled+.nx-checkbox__label .nx-checkbox__control{background-color:var(--checkbox-disabled-negative-background-color);border-color:var(--negative-01-dimmed)}:host(.nx-checkbox--negative) .nx-checkbox__input:disabled+.nx-checkbox__label .nx-checkbox__indeterminate-indicator{color:var(--negative-01-dimmed);background-color:var(--negative-01-dimmed)}:host:not(.nx-checkbox--negative):not(.has-error):hover .nx-checkbox__input:not([disabled]):checked+.nx-checkbox__label .nx-checkbox__control{background-color:var(--checkbox-hover-background-color)}:host:not(.nx-checkbox--negative):not(.has-error):hover .nx-checkbox__input:not([disabled]):checked+.nx-checkbox__label .nx-checkbox__indeterminate-indicator{background-color:var(--checkbox-hover-background-color)}:host:not(.nx-checkbox--negative):not(.has-error):hover .nx-checkbox__input:not([disabled])+.nx-checkbox__label .nx-checkbox__control{border-color:var(--checkbox-hover-border-color)}:host:not(.nx-checkbox--negative):active .nx-checkbox__input:not([disabled]):checked+.nx-checkbox__label .nx-checkbox__control{background-color:var(--checkbox-active-background-color)}:host:not(.nx-checkbox--negative):active .nx-checkbox__input:not([disabled]):checked+.nx-checkbox__label .nx-checkbox__indeterminate-indicator{background-color:var(--checkbox-active-background-color)}:host:not(.nx-checkbox--negative):active .nx-checkbox__input:not([disabled])+.nx-checkbox__label .nx-checkbox__control{border-color:var(--checkbox-active-border-color)}.nx-checkbox__input.cdk-keyboard-focused+.nx-checkbox__label .nx-checkbox__control{box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-checkbox__input.cdk-keyboard-focused+.nx-checkbox__label .nx-checkbox__control{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}@media screen and (-ms-high-contrast: active){:host .nx-checkbox__control{forced-color-adjust:none;border-color:buttonText!important;background-color:buttonFace!important}:host .nx-checkbox__label-text{color:buttonText!important}:host .nx-checkbox__input:checked+.nx-checkbox__label .nx-checkbox__control{background-color:highlight!important;border-color:highlight!important;color:highlightText!important}:host .nx-checkbox__input:indeterminate+.nx-checkbox__label .nx-checkbox__indeterminate-indicator{color:buttonText!important}:host .nx-checkbox__input:disabled+.nx-checkbox__label .nx-checkbox__label-text,:host .nx-checkbox__input:disabled+.nx-checkbox__label .nx-checkbox__control nx-icon{color:GrayText!important}:host .nx-checkbox__input:disabled:indeterminate+.nx-checkbox__label .nx-checkbox__indeterminate-indicator{color:GrayText!important}:host .nx-checkbox__input:disabled+.nx-checkbox__label .nx-checkbox__control{border-color:GrayText!important}:host .nx-checkbox__input:disabled:checked+.nx-checkbox__label .nx-checkbox__control{background-color:buttonFace!important;border-color:GrayText!important;color:GrayText!important}}\n"], components: [{ type: i5.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.CdkObserveContent, selector: "[cdkObserveContent]", inputs: ["cdkObserveContentDisabled", "debounce"], outputs: ["cdkObserveContent"], exportAs: ["cdkObserveContent"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxCheckboxComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-checkbox', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[class.nx-checkbox]': 'true',
                        '[class.disabled]': 'disabled',
                        '[class.nx-checkbox--label-large]': 'labelSize === "large"',
                        '[class.nx-checkbox--label-small]': 'labelSize === "small"',
                        '[class.nx-checkbox--negative]': 'negative',
                        '[class.has-error]': '_controlInvalid() || null',
                        '[attr.required]': 'required',
                        '[attr.aria-invalid]': '_controlInvalid() || null',
                    }, template: "<input\n    #input\n    type=\"checkbox\"\n    [id]=\"id\"\n    [name]=\"name\"\n    [checked]=\"checked\"\n    [indeterminate]=\"indeterminate\"\n    [disabled]=\"disabled\"\n    (blur)=\"touch()\"\n    [attr.aria-labelledby]=\"id + '-label'\"\n    (click)=\"_onInputClick($event)\"\n    class=\"nx-checkbox__input\"\n    [value]=\"value\"\n/>\n\n<label [id]=\"id + '-label'\" [attr.for]=\"id\" class=\"nx-checkbox__label\" [class.has-label]=\"labelHasContent\">\n    <span class=\"nx-checkbox__control\">\n        <nx-icon *ngIf=\"checked\" name=\"check\" aria-hidden=\"true\"></nx-icon>\n        <div *ngIf=\"indeterminate\" class=\"nx-checkbox__indeterminate-indicator\"></div>\n    </span>\n    <div class=\"nx-checkbox__label-text\" #checkboxLabelWrapper (cdkObserveContent)=\"labelContentChanged()\">\n        <ng-content></ng-content>\n    </div>\n</label>\n", styles: [":host{display:block;position:relative}:host.has-error .nx-checkbox__input:checked+.nx-checkbox__label .nx-checkbox__control{background-color:var(--danger);border-color:var(--danger)}:host.has-error .nx-checkbox__control{border-color:var(--danger)}:host.has-error .nx-checkbox__indeterminate-indicator{background-color:var(--danger)}.nx-checkbox__input{opacity:0;position:absolute}.nx-checkbox__label{font-size:var(--checkbox-small-label-font-size);line-height:var(--checkbox-small-label-line-height);font-weight:var(--checkbox-small-label-font-weight);letter-spacing:var(--checkbox-small-label-letter-spacing);color:var(--checkbox-label-color);cursor:pointer;display:flex}:host(.nx-checkbox--label-large) .nx-checkbox__label{font-size:var(--checkbox-large-label-font-size);line-height:var(--checkbox-large-label-line-height);font-weight:var(--checkbox-large-label-font-weight);letter-spacing:var(--checkbox-large-label-letter-spacing)}:host(.nx-checkbox--label-large) .has-label .nx-checkbox__label-text{margin-top:var(--checkbox-large-label-text-margin-top)}:host(.nx-checkbox--label-large) .has-label .nx-checkbox__control{margin-top:var(--checkbox-large-label-control-margin-top)}:host(.nx-checkbox--label-large) .nx-checkbox__label-text{margin-left:var(--checkbox-large-label-text-margin-left)}[dir=rtl] :host(.nx-checkbox--label-large) .nx-checkbox__label-text{margin-left:0;margin-left:initial;margin-right:var(--checkbox-large-label-text-margin-left)}:host(.nx-checkbox--label-small) .has-label .nx-checkbox__label-text{margin-top:var(--checkbox-small-label-text-margin-top)}:host(.nx-checkbox--label-small) .has-label .nx-checkbox__control{margin-top:var(--checkbox-small-label-control-margin-top)}.nx-checkbox__label-text{padding:0;margin-left:var(--checkbox-small-label-text-margin-left)}.nx-checkbox__label-text:empty{display:none}:host-context([dir=rtl]) .nx-checkbox__label-text{margin-left:0;margin-left:initial;margin-right:var(--checkbox-small-label-text-margin-left)}.nx-checkbox__control{background-color:var(--checkbox-background-color);border-style:solid;border-width:var(--checkbox-border-width);border-color:var(--checkbox-border-color);border-radius:var(--checkbox-border-radius);color:var(--checkbox-icon-color);font-size:var(--checkbox-icon-size);height:var(--checkbox-control-size);width:var(--checkbox-control-size);min-width:var(--checkbox-control-size);display:flex;justify-content:center;align-items:center;z-index:0;cursor:pointer}.nx-checkbox__indeterminate-indicator{color:var(--checkbox-indeterminate-color);background-color:var(--checkbox-indeterminate-color);box-sizing:content-box;height:0;width:8px;border:1px solid;border-radius:2px}.nx-checkbox__input:checked+.nx-checkbox__label .nx-checkbox__control{background-color:var(--checkbox-selected-background-color);border-color:var(--checkbox-selected-border-color)}.nx-checkbox__input:disabled+.nx-checkbox__label .nx-checkbox__control{background-color:var(--checkbox-disabled-background-color);border-color:var(--checkbox-disabled-border-color);color:var(--checkbox-disabled-icon-color);cursor:not-allowed}.nx-checkbox__input:checked:disabled+.nx-checkbox__label .nx-checkbox__control{background-color:var(--checkbox-disabled-selected-background-color)}.nx-checkbox__input:disabled+.nx-checkbox__label{cursor:not-allowed;color:var(--checkbox-label-disabled-color)}.nx-checkbox__input:disabled+.nx-checkbox__label .nx-checkbox__indeterminate-indicator{color:var(--checkbox-disabled-border-color);background-color:var(--checkbox-disabled-border-color)}:host(.nx-checkbox--negative) .nx-checkbox__control{border-color:var(--negative);background-color:transparent}:host(.nx-checkbox--negative) .nx-checkbox__label{color:var(--negative)}:host(.nx-checkbox--negative) .nx-checkbox__input:checked+.nx-checkbox__label .nx-checkbox__control{color:var(--negative-accent);background-color:var(--negative);border-color:var(--negative)}:host(.nx-checkbox--negative) .nx-checkbox__input:checked:disabled+.nx-checkbox__label .nx-checkbox__control{color:var(--negative-dimmed);border-color:transparent;background-color:var(--negative-02-dimmed)}:host(.nx-checkbox--negative) .nx-checkbox__indeterminate-indicator{color:var(--negative);background-color:var(--negative)}:host(.nx-checkbox--negative) .nx-checkbox__input:disabled+.nx-checkbox__label{color:var(--negative-dimmed)}:host(.nx-checkbox--negative) .nx-checkbox__input:disabled+.nx-checkbox__label .nx-checkbox__control{background-color:var(--checkbox-disabled-negative-background-color);border-color:var(--negative-01-dimmed)}:host(.nx-checkbox--negative) .nx-checkbox__input:disabled+.nx-checkbox__label .nx-checkbox__indeterminate-indicator{color:var(--negative-01-dimmed);background-color:var(--negative-01-dimmed)}:host:not(.nx-checkbox--negative):not(.has-error):hover .nx-checkbox__input:not([disabled]):checked+.nx-checkbox__label .nx-checkbox__control{background-color:var(--checkbox-hover-background-color)}:host:not(.nx-checkbox--negative):not(.has-error):hover .nx-checkbox__input:not([disabled]):checked+.nx-checkbox__label .nx-checkbox__indeterminate-indicator{background-color:var(--checkbox-hover-background-color)}:host:not(.nx-checkbox--negative):not(.has-error):hover .nx-checkbox__input:not([disabled])+.nx-checkbox__label .nx-checkbox__control{border-color:var(--checkbox-hover-border-color)}:host:not(.nx-checkbox--negative):active .nx-checkbox__input:not([disabled]):checked+.nx-checkbox__label .nx-checkbox__control{background-color:var(--checkbox-active-background-color)}:host:not(.nx-checkbox--negative):active .nx-checkbox__input:not([disabled]):checked+.nx-checkbox__label .nx-checkbox__indeterminate-indicator{background-color:var(--checkbox-active-background-color)}:host:not(.nx-checkbox--negative):active .nx-checkbox__input:not([disabled])+.nx-checkbox__label .nx-checkbox__control{border-color:var(--checkbox-active-border-color)}.nx-checkbox__input.cdk-keyboard-focused+.nx-checkbox__label .nx-checkbox__control{box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-checkbox__input.cdk-keyboard-focused+.nx-checkbox__label .nx-checkbox__control{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}@media screen and (-ms-high-contrast: active){:host .nx-checkbox__control{forced-color-adjust:none;border-color:buttonText!important;background-color:buttonFace!important}:host .nx-checkbox__label-text{color:buttonText!important}:host .nx-checkbox__input:checked+.nx-checkbox__label .nx-checkbox__control{background-color:highlight!important;border-color:highlight!important;color:highlightText!important}:host .nx-checkbox__input:indeterminate+.nx-checkbox__label .nx-checkbox__indeterminate-indicator{color:buttonText!important}:host .nx-checkbox__input:disabled+.nx-checkbox__label .nx-checkbox__label-text,:host .nx-checkbox__input:disabled+.nx-checkbox__label .nx-checkbox__control nx-icon{color:GrayText!important}:host .nx-checkbox__input:disabled:indeterminate+.nx-checkbox__label .nx-checkbox__indeterminate-indicator{color:GrayText!important}:host .nx-checkbox__input:disabled+.nx-checkbox__label .nx-checkbox__control{border-color:GrayText!important}:host .nx-checkbox__input:disabled:checked+.nx-checkbox__label .nx-checkbox__control{background-color:buttonFace!important;border-color:GrayText!important;color:GrayText!important}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.ErrorStateMatcher }, { type: NxCheckboxGroupComponent, decorators: [{
                    type: Optional
                }] }, { type: i2.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }, { type: i2.NgForm, decorators: [{
                    type: Optional
                }] }, { type: i2.FormGroupDirective, decorators: [{
                    type: Optional
                }] }, { type: i4.FocusMonitor }]; }, propDecorators: { _checkboxLabelWrapper: [{
                type: ViewChild,
                args: ['checkboxLabelWrapper', { static: true }]
            }], _nativeInput: [{
                type: ViewChild,
                args: ['input']
            }], id: [{
                type: Input
            }], name: [{
                type: Input
            }], disabled: [{
                type: Input
            }], labelSize: [{
                type: Input
            }], negative: [{
                type: Input
            }], checked: [{
                type: Input
            }], indeterminate: [{
                type: Input
            }], required: [{
                type: Input
            }], value: [{
                type: Input
            }], indeterminateChange: [{
                type: Output
            }], checkedChange: [{
                type: Output
            }], checkboxChange: [{
                type: Output
            }] } });

class NxCheckboxModule {
}
NxCheckboxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxCheckboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NxCheckboxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxCheckboxModule, declarations: [NxCheckboxComponent, NxCheckboxGroupComponent], imports: [CommonModule, NxIconModule, ObserversModule], exports: [NxCheckboxComponent, NxCheckboxGroupComponent, NxLabelModule, NxErrorModule] });
NxCheckboxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxCheckboxModule, imports: [[CommonModule, NxIconModule, ObserversModule], NxLabelModule, NxErrorModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxCheckboxModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NxCheckboxComponent, NxCheckboxGroupComponent],
                    exports: [NxCheckboxComponent, NxCheckboxGroupComponent, NxLabelModule, NxErrorModule],
                    imports: [CommonModule, NxIconModule, ObserversModule],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { NxCheckboxChangeEvent, NxCheckboxComponent, NxCheckboxGroupChangeEvent, NxCheckboxGroupComponent, NxCheckboxModule };
//# sourceMappingURL=aposin-ng-aquila-checkbox.mjs.map
