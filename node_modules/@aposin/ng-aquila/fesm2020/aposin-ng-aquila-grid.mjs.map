{"version":3,"file":"aposin-ng-aquila-grid.mjs","sources":["../../../projects/ng-aquila/src/grid/utils.ts","../../../projects/ng-aquila/src/grid/col.component.ts","../../../projects/ng-aquila/src/grid/layout.component.ts","../../../projects/ng-aquila/src/grid/row.component.ts","../../../projects/ng-aquila/src/grid/grid.module.ts","../../../projects/ng-aquila/src/grid/aposin-ng-aquila-grid.ts"],"sourcesContent":["import { mapClassNames } from '@aposin/ng-aquila/utils';\n\n/** is udefined or empty? */\nexport function isEmpty(value: any): boolean {\n    return value === undefined || value === '';\n}\n\nexport function isEmptyArray(value: any[]): boolean {\n    return value === undefined || value.length === 0;\n}\n\n/** add space and return mapClassNames (css) */\nexport function addStyles(aux: string, map: object): string {\n    return ' ' + mapClassNames(aux, [], map);\n}\n\n/** input='small,medium,large, xlarge, 2xlarge, 3xlarge'\n *  map = MAPPING\n */\nexport function addStylesFromDimensions(input: string, map: object): string {\n    const aux = processSplit(input);\n    let output = '';\n    if (aux.length >= 1 && aux.length <= 7) {\n        const auxTiny = addStyles(aux[0], map).replace('-{tier}', '');\n        let auxSmall = '';\n        let auxMedium = '';\n        let auxLarge = '';\n        let auxXLarge = '';\n        let aux2XLarge = '';\n        let aux3XLarge = '';\n        switch (aux.length) {\n            case 1:\n                auxSmall = addStyles(aux[0], map).replace('{tier}', 'small');\n                auxMedium = addStyles(aux[0], map).replace('{tier}', 'medium');\n                auxLarge = addStyles(aux[0], map).replace('{tier}', 'large');\n                auxXLarge = addStyles(aux[0], map).replace('{tier}', 'xlarge');\n                aux2XLarge = addStyles(aux[0], map).replace('{tier}', '2xlarge');\n                aux3XLarge = addStyles(aux[0], map).replace('{tier}', '3xlarge');\n                break;\n            case 2:\n                auxSmall = addStyles(aux[1], map).replace('{tier}', 'small');\n                auxMedium = addStyles(aux[1], map).replace('{tier}', 'medium');\n                auxLarge = addStyles(aux[1], map).replace('{tier}', 'large');\n                auxXLarge = addStyles(aux[1], map).replace('{tier}', 'xlarge');\n                aux2XLarge = addStyles(aux[1], map).replace('{tier}', '2xlarge');\n                aux3XLarge = addStyles(aux[1], map).replace('{tier}', '3xlarge');\n                break;\n            case 3:\n                auxSmall = addStyles(aux[1], map).replace('{tier}', 'small');\n                auxMedium = addStyles(aux[2], map).replace('{tier}', 'medium');\n                auxLarge = addStyles(aux[2], map).replace('{tier}', 'large');\n                auxXLarge = addStyles(aux[2], map).replace('{tier}', 'xlarge');\n                aux2XLarge = addStyles(aux[2], map).replace('{tier}', '2xlarge');\n                aux3XLarge = addStyles(aux[2], map).replace('{tier}', '3xlarge');\n                break;\n            default:\n                auxSmall = addStyles(aux[1], map).replace('{tier}', 'small');\n                auxMedium = addStyles(aux[2], map).replace('{tier}', 'medium');\n                auxLarge = addStyles(aux[3], map).replace('{tier}', 'large');\n                auxXLarge = addStyles(aux[4], map).replace('{tier}', 'xlarge');\n                aux2XLarge = addStyles(aux[5], map).replace('{tier}', '2xlarge');\n                aux3XLarge = addStyles(aux[6], map).replace('{tier}', '3xlarge');\n                break;\n        }\n        output = [auxTiny, auxSmall, auxMedium, auxLarge, auxXLarge, aux2XLarge, aux3XLarge].map(className => className.trim()).join(' ');\n    }\n    return output;\n}\n\n// Simple split\nexport function processSplit(aux: string, char = ','): string[] {\n    return aux.split(char).map(item => item.trim());\n}\n\nexport function validateClassInElement(el: any, aux: string): boolean {\n    return el.hasAttribute(aux);\n}\n","import { ChangeDetectionStrategy, Component, ElementRef, Input, OnInit } from '@angular/core';\nimport { mapClassNames } from '@aposin/ng-aquila/utils';\n\nimport { addStylesFromDimensions, isEmptyArray, processSplit, validateClassInElement } from './utils';\n\nconst MAPPING = {\n    '': 'nx-grid__column-',\n    xs: 'nx-grid__column-',\n    sm: 'nx-grid__column-small-',\n    md: 'nx-grid__column-medium-',\n    lg: 'nx-grid__column-large-',\n    xlg: 'nx-grid__column-xlarge-',\n    '2xlg': 'nx-grid__column-2xlarge-',\n    '3xlg': 'nx-grid__column-3xlarge-',\n};\n\nconst MAPPING_ALIGN_SELF = {\n    auto: 'nx-align-self-{tier}-auto',\n    start: 'nx-align-self-{tier}-start',\n    end: 'nx-align-self-{tier}-end',\n    center: 'nx-align-self-{tier}-center',\n    baseline: 'nx-align-self-{tier}-baseline',\n    stretch: 'nx-align-self-{tier}-stretch',\n};\n\nconst MAPPING_ORDER = {\n    first: 'nx-flex-{tier}-first',\n    last: 'nx-flex-{tier}-last',\n    unordered: 'nx-flex-{tier}-unordered',\n};\n\nconst OFFSET_MAPPING = {\n    '': 'nx-grid--offset-',\n    xs: 'nx-grid--offset-',\n    sm: 'nx-grid--offset-small-',\n    md: 'nx-grid--offset-medium-',\n    lg: 'nx-grid--offset-large-',\n    xlg: 'nx-grid--offset-xlarge-',\n    '2xlg': 'nx-grid--offset-2xlarge-',\n    '3xlg': 'nx-grid--offset-3xlarge-',\n};\n\nconst MIN = 0;\nconst MAX = 12;\n\n/** Type for the available alignment values of a column inside the flexible container. */\nexport type ColSelfAlignment = 'auto' | 'start' | 'end' | 'center' | 'baseline' | 'stretch';\n\n/** Type for the available values for setting the order of a column within a row. */\nexport type ColOrder = 'first' | 'last' | 'unordered';\n\n@Component({\n    selector: '[nxCol]',\n    template: '<ng-content></ng-content>',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styleUrls: ['col.component.scss'],\n    host: {\n        '[class]': '_classNames',\n    },\n})\nexport class NxColComponent implements OnInit {\n    private _columnClasses = '';\n    private _offsetClasses = '';\n    private _alignSelfClasses = '';\n    private _orderClasses = '';\n\n    get _classNames() {\n        return [this._columnClasses, this._offsetClasses, this._alignSelfClasses, this._orderClasses, this.class].filter(classes => classes?.length).join(' ');\n    }\n\n    /**\n     * Number of columns used.\n     *\n     * Values: 1 - 12, default value: 12.\n     */\n    @Input('nxCol')\n    set col(value: string) {\n        this._columnClasses = this._mapTiers(value, [], MAPPING, ['0']);\n\n        if (this._columnClasses.length === 0) {\n            this.generateError('Exception: NxColDirective. Empty nxCol attribute.');\n        }\n    }\n\n    /**\n     * The number of columns the column should be offset.\n     *\n     * Values: 1 - 12, default value: 12.\n     */\n    @Input('nxColOffset')\n    set offset(value: string) {\n        this._offsetClasses = this._mapTiers(value, [], OFFSET_MAPPING);\n    }\n\n    /** The alignment for a column inside the flexible container. */\n    @Input('nxAlignSelf')\n    set itemSelf(value: ColSelfAlignment | string) {\n        /** Values: auto, start, end, center, baseline, stretch */\n        this._alignSelfClasses = value ? addStylesFromDimensions(value, MAPPING_ALIGN_SELF) : '';\n    }\n\n    /** Order of the column within the row. */\n    @Input('nxColOrder')\n    set order(value: ColOrder | string) {\n        /** Values: first, last or unordered */\n        this._orderClasses = value ? addStylesFromDimensions(value, MAPPING_ORDER) : '';\n    }\n\n    /**\n     * Overwrite default class property to access user provided class.\n     * @docs-private\n     */\n    @Input()\n    class!: string;\n\n    constructor(private el: ElementRef) {}\n\n    ngOnInit() {\n        if (!validateClassInElement(this.el.nativeElement.parentElement, 'nxRow')) {\n            this.generateError(\"Exception: NxColDirective. nxRow don't exist\");\n        }\n    }\n\n    private _mapTiers(input: string, defaults?: any[], mapping?: object, exclude?: string[]): string {\n        const givenTiers = processSplit(input);\n        let mappedClasses: string[] = [];\n        if (input && !isEmptyArray(givenTiers) && this.checkNotAllowedValues(givenTiers, exclude!)) {\n            switch (givenTiers.length) {\n                case 1:\n                    this.validateInput(givenTiers);\n                    mappedClasses = [mapClassNames('', defaults, mapping) + givenTiers[0]];\n                    break;\n                case 2:\n                    this.validateInput(givenTiers);\n                    mappedClasses = [\n                        mapClassNames('xs', defaults, mapping) + givenTiers[0],\n                        mapClassNames('sm', defaults, mapping) + givenTiers[1],\n                        mapClassNames('md', defaults, mapping) + givenTiers[1],\n                        mapClassNames('lg', defaults, mapping) + givenTiers[1],\n                        mapClassNames('xlg', defaults, mapping) + givenTiers[1],\n                        mapClassNames('2xlg', defaults, mapping) + givenTiers[1],\n                        mapClassNames('3xlg', defaults, mapping) + givenTiers[1],\n                    ];\n                    break;\n                case 3:\n                    this.validateInput(givenTiers);\n                    mappedClasses = [\n                        mapClassNames('xs', defaults, mapping) + givenTiers[0],\n                        mapClassNames('sm', defaults, mapping) + givenTiers[1],\n                        mapClassNames('md', defaults, mapping) + givenTiers[2],\n                        mapClassNames('lg', defaults, mapping) + givenTiers[2],\n                        mapClassNames('xlg', defaults, mapping) + givenTiers[2],\n                        mapClassNames('2xlg', defaults, mapping) + givenTiers[2],\n                        mapClassNames('3xlg', defaults, mapping) + givenTiers[2],\n                    ];\n                    break;\n                case 4:\n                    this.validateInput(givenTiers);\n                    mappedClasses = [\n                        mapClassNames('xs', defaults, mapping) + givenTiers[0],\n                        mapClassNames('sm', defaults, mapping) + givenTiers[1],\n                        mapClassNames('md', defaults, mapping) + givenTiers[2],\n                        mapClassNames('lg', defaults, mapping) + givenTiers[3],\n                        mapClassNames('xlg', defaults, mapping) + givenTiers[3],\n                        mapClassNames('2xlg', defaults, mapping) + givenTiers[3],\n                        mapClassNames('3xlg', defaults, mapping) + givenTiers[3],\n                    ];\n                    break;\n                case 5:\n                    this.validateInput(givenTiers);\n                    mappedClasses = [\n                        mapClassNames('xs', defaults, mapping) + givenTiers[0],\n                        mapClassNames('sm', defaults, mapping) + givenTiers[1],\n                        mapClassNames('md', defaults, mapping) + givenTiers[2],\n                        mapClassNames('lg', defaults, mapping) + givenTiers[3],\n                        mapClassNames('xlg', defaults, mapping) + givenTiers[4],\n                        mapClassNames('2xlg', defaults, mapping) + givenTiers[4],\n                        mapClassNames('3xlg', defaults, mapping) + givenTiers[4],\n                    ];\n                    break;\n                case 6:\n                    this.validateInput(givenTiers);\n                    mappedClasses = [\n                        mapClassNames('xs', defaults, mapping) + givenTiers[0],\n                        mapClassNames('sm', defaults, mapping) + givenTiers[1],\n                        mapClassNames('md', defaults, mapping) + givenTiers[2],\n                        mapClassNames('lg', defaults, mapping) + givenTiers[3],\n                        mapClassNames('xlg', defaults, mapping) + givenTiers[4],\n                        mapClassNames('2xlg', defaults, mapping) + givenTiers[5],\n                        mapClassNames('3xlg', defaults, mapping) + givenTiers[5],\n                    ];\n                    break;\n                case 7:\n                    this.validateInput(givenTiers);\n                    mappedClasses = [\n                        mapClassNames('xs', defaults, mapping) + givenTiers[0],\n                        mapClassNames('sm', defaults, mapping) + givenTiers[1],\n                        mapClassNames('md', defaults, mapping) + givenTiers[2],\n                        mapClassNames('lg', defaults, mapping) + givenTiers[3],\n                        mapClassNames('xlg', defaults, mapping) + givenTiers[4],\n                        mapClassNames('2xlg', defaults, mapping) + givenTiers[5],\n                        mapClassNames('3xlg', defaults, mapping) + givenTiers[6],\n                    ];\n                    break;\n                default:\n                    mappedClasses = [mapClassNames('', defaults, mapping) + '12'];\n                    break;\n            }\n        }\n\n        return mappedClasses.join(' ');\n    }\n\n    /** @docs-private */\n    isValueBetween(min: number, max: number, value: string): boolean {\n        try {\n            const parsed = parseInt(value, 10);\n            return max >= parsed && min <= parsed;\n        } catch (error) {\n            this.generateError('Exception: NxColDirective. One argument is not number');\n            return false;\n        }\n    }\n\n    /** @docs-private */\n    checkNotAllowedValues(values: string[], excludes: string[]): boolean {\n        if (!excludes) {\n            return true;\n        }\n        const found = values.find(val => excludes.includes(val));\n        if (found) {\n            this.generateError(`Exception: NxColDirective. Incorrect parameter. ${found} is not allowed here`);\n        }\n        return !found;\n    }\n\n    /** @docs-private */\n    generateError(err: string) {\n        throw new Error(err);\n    }\n\n    /** @docs-private */\n    validateInput(value: string[]) {\n        value.forEach(element => {\n            if (!this.isValueBetween(MIN, MAX, element)) {\n                this.generateError(`Exception: NxColDirective. Incorrect parameters, values must be between ${MIN} and ${MAX}`);\n            }\n        });\n    }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n    selector: '[nxLayout]',\n    template: '<ng-content></ng-content>',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styleUrls: ['layout.component.scss'],\n    host: {\n        '[class.nx-grid]': 'grid',\n        '[class.nx-grid--no-gutters]': 'noGutters',\n        '[class.nx-grid--max-width]': 'maxWidth',\n        '[class.nx-grid--no-padding]': 'noPadding',\n    },\n})\nexport class NxLayoutComponent {\n    private _classNames = '';\n\n    /** @docs-private */\n    grid = true;\n\n    /** @docs-private */\n    noGutters!: boolean;\n\n    /** @docs-private */\n    maxWidth!: boolean;\n\n    /** @docs-private */\n    noPadding!: boolean;\n\n    /**\n     * Type of layout.\n     *\n     * Values: grid | grid nogutters | grid maxwidth | grid nopadding. Default value: grid.\n     */\n    @Input('nxLayout')\n    set classNames(value: string) {\n        if (this._classNames === value) {\n            return;\n        }\n        this._classNames = value;\n\n        // TODO kick null safe-guards after setter value or any calling input values are properly coerced as string\n        this.grid = !!this._classNames?.includes('grid');\n        this.noGutters = !!this._classNames?.includes('nogutters');\n        this.maxWidth = !!this._classNames?.includes('maxwidth');\n        this.noPadding = !!this._classNames?.includes('nopadding');\n    }\n\n    get classNames(): string {\n        return this._classNames;\n    }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\nimport { addStylesFromDimensions } from './utils';\n\nconst MAPPING_JUSTIFY = {\n    start: 'nx-justify-content-{tier}-start',\n    end: 'nx-justify-content-{tier}-end',\n    center: 'nx-justify-content-{tier}-center',\n    between: 'nx-justify-content-{tier}-between',\n    around: 'nx-justify-content-{tier}-around',\n};\n\nconst MAPPING_ALIGN_ITEMS = {\n    start: 'nx-align-items-{tier}-start',\n    end: 'nx-align-items-{tier}-end',\n    center: 'nx-align-items-{tier}-center',\n    baseline: 'nx-align-items-{tier}-baseline',\n    stretch: 'nx-align-items-{tier}-stretch',\n};\n\nconst MAPPING_ALIGN_CONTENT = {\n    start: 'nx-align-content-{tier}-start',\n    end: 'nx-align-content-{tier}-end',\n    center: 'nx-align-content-{tier}-center',\n    between: 'nx-align-content-{tier}-between',\n    around: 'nx-align-content-{tier}-around',\n    stretch: 'nx-align-content-{tier}-stretch',\n};\n\nconst MAPPING_WRAP = {\n    wrap: 'nx-flex-{tier}-wrap',\n    nowrap: 'nx-flex-{tier}-nowrap',\n    reverse: 'nx-flex-{tier}-wrap-reverse',\n};\n\nconst MAPPING_LAYOUT: { [k: string]: string } = {\n    row: 'nx-grid__row',\n    'row-reverse': 'nx-grid__row-reverse',\n};\n\nexport type RowJustification = 'start' | 'end' | 'center' | 'between' | 'around';\n\nexport type RowContentAlignment = 'start' | 'end' | 'center' | 'between' | 'around' | 'stretch';\n\nexport type RowItemsAlignment = 'start' | 'end' | 'center' | 'between' | 'stretch';\n\nexport type RowWrapping = 'wrap' | 'nowrap' | 'reverse';\n\n@Component({\n    selector: '[nxRow]',\n    template: '<ng-content></ng-content>',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styleUrls: ['row.component.scss'],\n    host: {\n        '[class]': '_classNames',\n    },\n})\nexport class NxRowComponent {\n    private _justifyClasses = '';\n    private _alignContentClasses = '';\n    private _alignItemsClasses = '';\n    private _wrapClasses = '';\n    private _rowClass: string = MAPPING_LAYOUT.row;\n\n    get _classNames() {\n        return [this._rowClass, this._justifyClasses, this._alignContentClasses, this._alignItemsClasses, this._wrapClasses, this.class]\n            .filter(classes => classes?.length)\n            .join(' ');\n    }\n\n    /**\n     * Values: row | row-reverse\n     *\n     * Default value: row\n     */\n    @Input()\n    set nxRow(value: string) {\n        if (value) {\n            this._rowClass = MAPPING_LAYOUT[value];\n\n            if (!this._rowClass) {\n                throw new Error('nxRow is incorrect');\n            }\n        } else {\n            this._rowClass = MAPPING_LAYOUT.row;\n        }\n    }\n\n    /** Align items on the main axis (horizontally). */\n    @Input('nxRowJustify')\n    set nxRowJustify(value: RowJustification | string) {\n        this._justifyClasses = value ? addStylesFromDimensions(value, MAPPING_JUSTIFY) : '';\n    }\n\n    /** Similar to nxRowAlignItems, but instead of aligning flex items, it aligns flex lines. */\n    @Input('nxRowAlignContent')\n    set nxRowAlignContent(value: RowContentAlignment | string) {\n        this._alignContentClasses = value ? addStylesFromDimensions(value, MAPPING_ALIGN_CONTENT) : '';\n    }\n\n    /** The default alignment for items inside the flexible container. */\n    @Input('nxRowAlignItems')\n    set nxRowAlignItems(value: RowItemsAlignment | string) {\n        this._alignItemsClasses = value ? addStylesFromDimensions(value, MAPPING_ALIGN_ITEMS) : '';\n    }\n\n    /** How the flexible items should be wrapped. */\n    @Input('nxRowWrap')\n    set nxRowWrap(value: RowWrapping) {\n        this._wrapClasses = value ? addStylesFromDimensions(value, MAPPING_WRAP) : '';\n    }\n\n    /**\n     * Overwrite default class property to access user provided class.\n     * @docs-private\n     */\n    @Input()\n    class = '';\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NxColComponent } from './col.component';\nimport { NxLayoutComponent } from './layout.component';\nimport { NxRowComponent } from './row.component';\n\n@NgModule({\n    declarations: [NxLayoutComponent, NxRowComponent, NxColComponent],\n    exports: [NxLayoutComponent, NxRowComponent, NxColComponent],\n    imports: [CommonModule],\n})\nexport class NxGridModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}