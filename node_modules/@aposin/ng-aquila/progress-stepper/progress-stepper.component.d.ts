import { Directionality } from '@angular/cdk/bidi';
import { CdkStep, CdkStepHeader, CdkStepper } from '@angular/cdk/stepper';
import { AfterContentInit, ChangeDetectorRef, ElementRef, OnChanges, OnDestroy, QueryList } from '@angular/core';
import { FormControl, FormGroupDirective, NgForm } from '@angular/forms';
import { ErrorStateMatcher } from '@aposin/ng-aquila/utils';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export declare class NxStepComponent extends CdkStep implements ErrorStateMatcher, OnChanges, OnDestroy {
    stepper: NxProgressStepperDirective;
    private _errorStateMatcher;
    constructor(stepper: NxProgressStepperDirective, _errorStateMatcher: ErrorStateMatcher);
    private _stepControl;
    /** The top level abstract control of the step. */
    stepControl: any;
    private _interacted;
    readonly _destroyed: Subject<void>;
    /** Custom error state matcher that checks for validity of the step form. */
    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean;
    ngOnChanges(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxStepComponent, [null, { skipSelf: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxStepComponent, "nx-step", ["nxStep"], {}, {}, never, ["*"]>;
}
/** @docs-private */
export declare class NxProgressStepperDirective extends CdkStepper implements AfterContentInit {
    private _cdr;
    /** Full list of steps inside the stepper, including inside nested steppers */
    _steps: QueryList<NxStepComponent>;
    /** Steps that belong to the current stepper, excluding ones from nested steppers. */
    readonly steps: QueryList<NxStepComponent>;
    _stepHeader: QueryList<CdkStepHeader>;
    /** Sets the label on the left side showing the current step label. Used for mobile viewports. */
    currentStepLabel: string;
    constructor(_cdr: ChangeDetectorRef, _dir: Directionality | null, _elementRef: ElementRef<HTMLElement>);
    ngAfterContentInit(): void;
    /** @docs-private */
    get hasPrevious(): boolean;
    /** @docs-private */
    get hasNext(): boolean;
    /** @docs-private */
    get count(): number;
    /** @docs-private */
    get currentStep(): NxStepComponent | null;
    /** @docs-private */
    get nextStep(): NxStepComponent | null;
    /** @docs-private */
    get currentLabel(): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxProgressStepperDirective, [null, { optional: true; }, null]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NxProgressStepperDirective, "[nxProgressStepper]", ["nxProgressStepper"], { "currentStepLabel": "currentStepLabel"; }, {}, ["_steps"]>;
}
