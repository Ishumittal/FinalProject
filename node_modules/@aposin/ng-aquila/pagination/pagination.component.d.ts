import { FocusMonitor } from '@angular/cdk/a11y';
import { Directionality } from '@angular/cdk/bidi';
import { AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList } from '@angular/core';
import { IPaginationTexts } from './pagination-texts';
import { NxPaginationUtils } from './pagination-utils';
import * as i0 from "@angular/core";
/** @docs-private */
export interface Page {
    label: string;
    value: any;
    class: string;
}
export declare class NxPaginationComponent implements OnInit, AfterContentInit, AfterViewInit, OnDestroy {
    private _dir;
    private paginationUtilsService;
    private _cdr;
    private _focusMonitor;
    _linkElements: QueryList<ElementRef>;
    /** Preserves the current value of the _linkElements ViewChildren in case _linkElements changes. */
    _linkElementsPrevious: QueryList<ElementRef>;
    private _page;
    private _count;
    private _perPage;
    private _type;
    /** @docs-private */
    paginationTexts: IPaginationTexts;
    /** @docs-private */
    totalNumberPages: number;
    get page(): number;
    /** Sets the current page. */
    set page(value: number);
    get count(): number;
    /** Number of total items over all pages. */
    set count(value: number);
    get perPage(): number;
    /** Sets the number of items you want to show per page. */
    set perPage(value: number);
    get type(): string;
    /**
     * Determines the type of pagination.
     *
     * Values: simple | advanced, default: simple.
     */
    set type(value: string);
    /** An event emitted when the previous page button is clicked. */
    nxGoPrev: EventEmitter<void>;
    /** An event emitted when the next page button is clicked */
    nxGoNext: EventEmitter<void>;
    /**
     * An event emitted when a page number is clicked.
     * Provides the number of the page as parameter.
     */
    nxGoPage: EventEmitter<number>;
    private readonly _destroyed;
    constructor(paginationTexts: IPaginationTexts | null, _dir: Directionality | null, paginationUtilsService: NxPaginationUtils, _cdr: ChangeDetectorRef, _focusMonitor: FocusMonitor);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /** Returns the number of the first page. */
    getMin(): number;
    /** Returns the number of the last page. */
    getMax(): number;
    /** Returns the total number of pages */
    calculateTotalPages(): number;
    /** Directs to the page with number n. */
    onPage(n: number): void;
    /** Directs to the previous page. */
    onPrev(): void;
    /** Directs to the next page. */
    onNext(): void;
    /** Directs to the first page. */
    onFirst(): void;
    /** Directs to the last page. */
    onLast(): void;
    /** Returns if the current page is the last page. */
    lastPage(): boolean;
    /** @docs-private */
    getPages(): Page[];
    /** @docs-private */
    getMobilePages(): Page[];
    /** @docs-private */
    getPaginationItemClasses(page: Page): object;
    /** @docs-private */
    getPaginationNumberClasses(page: Page): object;
    /** Returns true, if `nxCount` is greater than 0, else false. */
    isPaginationVisible(): boolean;
    /** Returns true, if `nxCount` is greater than 0 and the type of pagination is 'simple', else false. */
    isPaginationCompactVisible(): boolean;
    /** @docs-private */
    isPaginationContainerVisible(): boolean;
    _isPaginationPreviousDisabled(): boolean;
    _isPaginationNextDisabled(): boolean;
    get _isRTL(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxPaginationComponent, [{ optional: true; }, { optional: true; }, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxPaginationComponent, "nx-pagination", never, { "page": "nxPage"; "count": "nxCount"; "perPage": "nxPerPage"; "type": "nxType"; }, { "nxGoPrev": "nxGoPrev"; "nxGoNext": "nxGoNext"; "nxGoPage": "nxGoPage"; }, never, never>;
}
