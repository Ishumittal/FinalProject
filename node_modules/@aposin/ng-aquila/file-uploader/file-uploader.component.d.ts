import { FocusMonitor } from '@angular/cdk/a11y';
import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import { AfterContentInit, AfterViewInit, ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, QueryList, TemplateRef } from '@angular/core';
import { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';
import { NxErrorComponent, NxLabelComponent } from '@aposin/ng-aquila/base';
import { ErrorStateMatcher } from '@aposin/ng-aquila/utils';
import { Subject } from 'rxjs';
import { NxFileUploader } from './file-uploader';
import { FileItem } from './file-uploader.model';
import { NxFileUploaderButtonDirective } from './file-uploader-button.directive';
import { NxFileUploaderDropZoneComponent } from './file-uploader-drop-zone.component';
import { NxFileUploaderHintDirective } from './file-uploader-hint.directive';
import { NxFileUploaderIntl } from './file-uploader-intl';
import * as i0 from "@angular/core";
export declare class NxFileUploaderComponent implements ControlValueAccessor, AfterContentInit, OnChanges, OnDestroy, DoCheck, OnInit, AfterViewInit {
    private _cdr;
    private _errorStateMatcher;
    _intl: NxFileUploaderIntl;
    private _parentForm;
    private _parentFormGroup;
    /** @docs-private */ ngControl: NgControl | null;
    private _focusMonitor;
    /** @docs-private */
    button?: NxFileUploaderButtonDirective;
    /** @docs-private */
    _dropZone: NxFileUploaderDropZoneComponent;
    /** @docs-private */
    nativeInputFile: ElementRef;
    /** @docs-private */
    _label?: NxLabelComponent;
    /** @docs-private */
    _hintChildren: QueryList<NxFileUploaderHintDirective>;
    /** @docs-private */
    _errorList: QueryList<NxErrorComponent>;
    _fileRowElements: QueryList<ElementRef>;
    /** Preserves the current value of the _fileRowElements ViewChildren in case _fileRowElements changes. */
    private _fileRowElementsPrevious;
    private _filesSubscriptions;
    /** An event emitted when queue is changed.
     *
     * Emits the changed array of FileItems.
     * @docs-private */
    valueChange: EventEmitter<FileItem[]>;
    /** An event emitted when a file is deleted from the queue
     *
     * Emits the deleted FileItem.
     */
    fileDeleted: EventEmitter<FileItem>;
    /**
     * An event emitted when one or more files were added to the file input.
     *
     * Emits the selected FileItem | FileItem[]
     */
    filesSelected: EventEmitter<FileItem[]>;
    private _id;
    private _name;
    private _value;
    private _maxFileSize;
    private _required;
    private _disabled;
    private _multiple;
    private _accept;
    private _controlValidators;
    private _uploader;
    private _maxFileNumber;
    _inputId: string;
    _labelId: string;
    _itemTemplate: TemplateRef<any>;
    _templateContext: this;
    /** @docs-private */
    errorState: boolean;
    /** @docs-private */
    stateChanges: Subject<void>;
    /** @docs-private */
    validatorFnArray: any[];
    /** Sets the id of the file uploader. */
    set id(value: string);
    get id(): string;
    /** Whether the file uploader is required. */
    set required(value: BooleanInput);
    get required(): boolean;
    /** The value of the file upload. */
    set value(value: FileItem[] | undefined);
    get value(): FileItem[] | undefined;
    /** Name that is used for accessibility. */
    set name(value: string);
    get name(): string;
    /** Whether the file uploader is disabled. */
    set disabled(value: BooleanInput);
    get disabled(): boolean;
    /** Whether the file uploader accepts multiple files to be added. */
    set multiple(value: BooleanInput);
    get multiple(): boolean;
    /** The accepted file types */
    set accept(value: string);
    get accept(): string;
    /** The max file size in bytes used for validation */
    set maxFileSize(value: NumberInput);
    get maxFileSize(): number;
    /** Sets the file uploader for the component. */
    set uploader(newUploader: NxFileUploader);
    get uploader(): NxFileUploader;
    /** The max number of files that is accepted. */
    set maxFileNumber(value: NumberInput);
    get maxFileNumber(): number;
    /** Sets the template for the file items. */
    set itemTemplate(template: TemplateRef<any>);
    get itemTemplate(): TemplateRef<any>;
    private readonly _destroyed;
    constructor(_cdr: ChangeDetectorRef, _errorStateMatcher: ErrorStateMatcher, _intl: NxFileUploaderIntl, _parentForm: NgForm | null, _parentFormGroup: FormGroupDirective | null, 
    /** @docs-private */ ngControl: NgControl | null, _focusMonitor: FocusMonitor);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(): void;
    ngOnDestroy(): void;
    /** @docs-private */
    updateErrorState(): void;
    /** @docs-private */
    onChangeCallback: (_: any) => void;
    /** @docs-private */
    onTouchedCallback: () => void;
    registerOnChange(callback: any): void;
    registerOnTouched(callback: any): void;
    writeValue(value: FileItem[]): void;
    _resetValidators(clear?: boolean): void;
    ngAfterContentInit(): void;
    _addFilesToQueue(files: File[]): void;
    _setFileListFromValue(files: File[]): void;
    /** Removes a file from the value list of the file upload input. */
    removeFile(file: any): void;
    /** Uploads the files via the defined uploader. */
    uploadFiles(): void;
    ngDoCheck(): void;
    private isValidOnSelection;
    /**
     * @docs-private
     * The label for the uploading state used in the queue.
     */
    get uploadingLabel(): string;
    /**
     * @docs-private
     * The label for the uploading state used in the queue.
     */
    get deleteLabel(): string;
    /**
     * @docs-private
     * The label for the uploading state used in the queue.
     */
    get uploadedLabel(): string;
    /**
     * Sets the list of element IDs that describe the child control. This allows the trigger element (button) to update
     * its `aria-describedby` attribute accordingly.
     */
    private _syncDescribedByIds;
    _handleKeydownListRow(event: KeyboardEvent): void;
    /**
     * Triggered when the input[type=file] is changed
     */
    _onFileChange(event: any): void;
    /** Listens to changes in each file. */
    _subscribeToFileChanges(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxFileUploaderComponent, [null, null, null, { optional: true; }, { optional: true; }, { optional: true; self: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxFileUploaderComponent, "nx-file-uploader", ["NxFileUploaderComponent"], { "id": "id"; "required": "required"; "value": "value"; "name": "name"; "disabled": "disabled"; "multiple": "multiple"; "accept": "accept"; "maxFileSize": "maxFileSize"; "uploader": "uploader"; "maxFileNumber": "maxFileNumber"; "itemTemplate": "itemTemplate"; }, { "valueChange": "valueChange"; "fileDeleted": "fileDeleted"; "filesSelected": "filesSelected"; }, ["button", "_dropZone", "_label", "_hintChildren", "_errorList"], ["nx-label", "[nxFileUploadHint]", "nx-file-uploader-drop-zone", "[nxFileUploadButton]", "nx-error"]>;
}
