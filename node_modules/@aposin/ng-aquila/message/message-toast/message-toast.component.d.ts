import { AnimationEvent } from '@angular/animations';
import { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';
import { ChangeDetectorRef, ComponentRef, EmbeddedViewRef, NgZone, OnDestroy } from '@angular/core';
import { Subject } from 'rxjs';
import { NxMessageToastConfig, NxMessageToastContext, NxMessageToastData } from './message-toast-config';
import * as i0 from "@angular/core";
/**
 * Internal component that wraps user-provided message toastcontent.
 * @docs-private
 */
export declare class NxMessageToastComponent extends BasePortalOutlet implements OnDestroy {
    private _ngZone;
    private _cdr;
    /** The message toastconfiguration. */
    config: NxMessageToastConfig;
    /** Injected data into the notifciation. */
    data?: NxMessageToastData | undefined;
    /** Whether the component has been destroyed. */
    private _destroyed;
    /** The portal outlet inside of this container into which the message toastcontent will be loaded. */
    _portalOutlet: CdkPortalOutlet;
    /** Subject for notifying that the message toasthas exited from view. */
    readonly _onExit: Subject<any>;
    /** Subject for notifying that the message toasthas finished entering the view. */
    readonly _onEnter: Subject<any>;
    /** The state of the message toastanimations. */
    _animationState: string;
    /** ARIA role for the message toastcontainer. */
    _role: 'alert' | 'status' | null;
    _context: NxMessageToastContext;
    constructor(_ngZone: NgZone, _cdr: ChangeDetectorRef, 
    /** The message toastconfiguration. */
    config: NxMessageToastConfig, 
    /** Injected data into the notifciation. */
    data?: NxMessageToastData | undefined);
    /** Attach a component portal as content to this message toastcontainer. */
    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;
    /** Attach a template portal as content to this message toastcontainer. */
    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;
    /** Handle end of animations, updating the state of the notification. */
    onAnimationEnd(event: AnimationEvent): void;
    /** Begin animation of message toastentrance into view. */
    enter(): void;
    /** Begin animation of the message toastexiting from view. */
    exit(): void;
    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */
    ngOnDestroy(): void;
    /**
     * Waits for the zone to settle before removing the element. Helps prevent
     * errors where we end up removing an element which is in the middle of an animation.
     */
    private _completeExit;
    /** Asserts that no content is already attached to the container. */
    private _assertNotAttached;
    _setAriaLabels(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxMessageToastComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxMessageToastComponent, "nx-message-toast", never, {}, {}, never, never>;
}
