import { FocusMonitor } from '@angular/cdk/a11y';
import { BooleanInput } from '@angular/cdk/coercion';
import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
/** The contextual type of a message. */
export declare type CONTEXT = 'regular' | 'info' | 'error' | 'success' | 'warning';
export declare class NxMessageComponent implements AfterViewInit, OnDestroy {
    private _cdr;
    private _focusMonitor;
    _context: CONTEXT;
    get _isInfo(): boolean;
    get _isSuccess(): boolean;
    get _isWarning(): boolean;
    get _isError(): boolean;
    _allowedContexts: CONTEXT[];
    _closeButton: ElementRef;
    /**
     * Sets the context of the message.
     * The message box will color accordingly. Default: 'regular' */
    set context(value: CONTEXT);
    get context(): CONTEXT;
    _closable: boolean;
    /** Whether a message should have a close icon in order to be dismissed. */
    set closable(value: BooleanInput);
    get closable(): boolean;
    private _closeButtonLabel;
    /** Sets the label of the close button of the message. */
    set closeButtonLabel(value: string);
    get closeButtonLabel(): string;
    /** Event emitted when the close icon of the message has been clicked. */
    closeEvent: EventEmitter<void>;
    constructor(_cdr: ChangeDetectorRef, _focusMonitor: FocusMonitor);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    _emitCloseEvent(): void;
    get _iconName(): string;
    _updateContext(value: CONTEXT): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxMessageComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxMessageComponent, "nx-message", ["nxMessage"], { "context": "nxContext"; "closable": "closable"; "closeButtonLabel": "closeButtonLabel"; }, { "closeEvent": "close"; }, never, ["*"]>;
}
