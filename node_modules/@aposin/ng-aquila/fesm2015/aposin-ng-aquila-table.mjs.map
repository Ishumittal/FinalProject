{"version":3,"file":"aposin-ng-aquila-table.mjs","sources":["../../../projects/ng-aquila/src/table/expandable/expandable-table-row.component.ts","../../../projects/ng-aquila/src/table/expandable/expandable-table.directive.ts","../../../projects/ng-aquila/src/table/expandable/expandable-table-cell.component.ts","../../../projects/ng-aquila/src/table/expandable/expandable-table-cell.component.html","../../../projects/ng-aquila/src/table/expandable/toggle-button.component.ts","../../../projects/ng-aquila/src/table/expandable/toggle-button.component.html","../../../projects/ng-aquila/src/table/header-cell.directive.ts","../../../projects/ng-aquila/src/table/sort-header/sort.directive.ts","../../../projects/ng-aquila/src/table/sort-header/sort-header-intl.ts","../../../projects/ng-aquila/src/table/sort-header/sort-header.component.ts","../../../projects/ng-aquila/src/table/sort-header/sort-header.component.html","../../../projects/ng-aquila/src/table/table.component.ts","../../../projects/ng-aquila/src/table/table-cell.component.ts","../../../projects/ng-aquila/src/table/table-row.component.ts","../../../projects/ng-aquila/src/table/table.module.ts","../../../projects/ng-aquila/src/table/aposin-ng-aquila-table.ts"],"sourcesContent":["import { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { NxExpandable } from './toggle-button.component';\n\n/**\n * This is an expandable table row.\n * It can collapse its height to hide the content.\n * Requires the table cells to have the `[nxExpandableTableCell]` component.\n */\n@Component({\n    selector: 'tr[nxExpandableTableRow]',\n    host: {\n        class: 'nx-expandable-table-row',\n    },\n    template: `<ng-content></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxExpandableTableRowComponent implements NxExpandable {\n    private _isExpanded!: boolean;\n\n    /* Whether the row is expanded. */\n    @Input()\n    set isExpanded(value: BooleanInput) {\n        this._isExpanded = coerceBooleanProperty(value);\n        this.expanded.next(this._isExpanded);\n        this._cdr.markForCheck();\n    }\n    get isExpanded() {\n        return this._isExpanded;\n    }\n\n    expanded: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    constructor(private _cdr: ChangeDetectorRef) {}\n\n    /**\n     * Toggles the expansion of this row.\n     */\n    toggle() {\n        if (this.expanded.value) {\n            this.close();\n        } else {\n            this.expand();\n        }\n    }\n\n    /**\n     * Expands this row.\n     */\n    expand() {\n        if (!this.expanded.value) {\n            this.expanded.next(true);\n            this._cdr.markForCheck();\n        }\n    }\n\n    /**\n     * Closes this row.\n     */\n    close() {\n        if (this.expanded.value) {\n            this.expanded.next(false);\n            this._cdr.markForCheck();\n        }\n    }\n}\n","import { AfterViewInit, ContentChildren, Directive, OnDestroy, QueryList } from '@angular/core';\nimport { BehaviorSubject, combineLatest, Subject } from 'rxjs';\nimport { distinctUntilChanged, flatMap, map, startWith, takeUntil } from 'rxjs/operators';\n\nimport { NxExpandableTableRowComponent } from './expandable-table-row.component';\nimport { NxExpandable } from './toggle-button.component';\n\n/**\n * The nxExpandableTable adds row expansion functionality to the nxTable.\n * It provides the logic to expand/collapse all expandable rows simultanously.\n */\n@Directive({\n    selector: 'table[nxExpandableTable]',\n    exportAs: 'nxExpandableTable',\n})\nexport class NxExpandableTableDirective implements OnDestroy, AfterViewInit, NxExpandable {\n    @ContentChildren(NxExpandableTableRowComponent, { descendants: true }) rows!: QueryList<NxExpandableTableRowComponent>;\n\n    expanded: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    private readonly _destroyed = new Subject<void>();\n\n    ngAfterViewInit() {\n        this.rows.changes\n            .pipe(\n                startWith(this.rows),\n                flatMap((rows: NxExpandableTableRowComponent[]) => combineLatest(rows.map(row => row.expanded))),\n                map((values: boolean[]) => values.reduce((a, x) => a && x, true)),\n                distinctUntilChanged(),\n                takeUntil(this._destroyed),\n            )\n            .subscribe(rowsOpen => {\n                this.expanded.next(rowsOpen);\n            });\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n\n    /**\n     * Toggles the expandable rows. If all rows are open it will close them, otherwise it will open them.\n     */\n    toggle() {\n        if (this.expanded.value) {\n            this.close();\n        } else {\n            this.expand();\n        }\n    }\n\n    /**\n     * Expands all expandable rows.\n     */\n    expand() {\n        this.rows.forEach(row => row.expanded.next(true));\n    }\n\n    /**\n     * Closes all expandable rows.\n     */\n    close() {\n        this.rows.forEach(row => row.expanded.next(false));\n    }\n}\n","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { NxExpandableTableRowComponent } from './expandable-table-row.component';\n\n/**\n * This is an expandable table cell.\n * Only works in conjunction with the `[nxExpandableTableRow]` component.\n */\n@Component({\n    selector: 'td[nxExpandableTableCell]',\n    templateUrl: './expandable-table-cell.component.html',\n    host: {\n        class: 'nx-expandable-table-cell',\n    },\n    animations: [\n        trigger('openClose', [\n            state(\n                'open',\n                style({\n                    height: '*',\n                    visibility: 'visible',\n                }),\n            ),\n            state(\n                'closed, void',\n                style({\n                    height: '0',\n                    visibility: 'hidden', // visibility and height to toggle instead of display: none to prevent cell width jumping\n                }),\n            ),\n            transition('closed <=> open, void => closed', [animate('225ms cubic-bezier(0.4,0.0,0.2,1)')]),\n        ]),\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxExpandableTableCellComponent implements OnDestroy {\n    _open = false;\n\n    private readonly _destroyed = new Subject<void>();\n\n    constructor(_row: NxExpandableTableRowComponent, private _cdr: ChangeDetectorRef) {\n        _row.expanded.pipe(takeUntil(this._destroyed)).subscribe(open => {\n            this._open = open;\n            this._cdr.markForCheck();\n        });\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n}\n","<div [@openClose]=\"_open ? 'open' : 'closed'\" class=\"nx-expandable-table-cell__content\">\n    <div class=\"nx-expandable-table-cell__wrapper\">\n        <ng-content></ng-content>\n    </div>\n</div>\n","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Input, OnDestroy, ViewChild } from '@angular/core';\nimport { BehaviorSubject, Subscription } from 'rxjs';\n\nexport interface NxExpandable {\n    /** Indicates if this expandable instance is open or not.  */\n    expanded: BehaviorSubject<boolean>;\n\n    /** Toggles the open state. */\n    toggle(): void;\n\n    /** Expands this component. */\n    expand(): void;\n\n    /** Closes this component. */\n    close(): void;\n}\n\n/**\n * This toggle button can be clicked and toggles expandable elements.\n * e.g. it can toggle a expandable table row or anything else that implements the `NxExpandable` interface.\n */\n@Component({\n    selector: 'nx-toggle-button',\n    templateUrl: './toggle-button.component.html',\n    styleUrls: ['./toggle-button.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxToggleButtonComponent implements AfterViewInit, OnDestroy {\n    _expanded = false;\n\n    @ViewChild('button') _buttonElement!: ElementRef;\n\n    /**\n     * This is the expandable target that will be toggled when the user clicks the button.\n     */\n    @Input()\n    set target(value: NxExpandable) {\n        this._target = value;\n\n        this._subscription?.unsubscribe();\n\n        if (this._target) {\n            this._subscription = this._target.expanded.subscribe(expanded => {\n                this._expanded = expanded;\n                this._cdr.markForCheck();\n            });\n        }\n    }\n    _target!: NxExpandable;\n\n    @Input()\n    set ariaLabel(value: string) {\n        this._ariaLabel = value;\n        this._cdr.markForCheck();\n    }\n    _ariaLabel = '';\n\n    private _subscription = Subscription.EMPTY;\n\n    constructor(private _cdr: ChangeDetectorRef, private _focusMonitor: FocusMonitor) {}\n\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._buttonElement);\n    }\n\n    _onClick() {\n        if (this._target) {\n            this._target.toggle();\n        }\n    }\n\n    ngOnDestroy() {\n        this._subscription?.unsubscribe();\n        this._focusMonitor.stopMonitoring(this._buttonElement);\n    }\n}\n","<button #button (click)=\"_onClick()\" class=\"nx-toggle-button\" [attr.aria-label]=\"_ariaLabel\" [attr.aria-expanded]=\"_expanded\" [class.is-expanded]=\"_expanded\">\n    <nx-icon name=\"chevron-down\" aria-hidden=\"true\" size=\"s\" class=\"nx-toggle-button__icon\"></nx-icon>\n</button>\n","import { Directive } from '@angular/core';\n\n/**\n * This is a table header cell.\n */\n@Directive({\n    selector: '[nxHeaderCell]',\n    host: {\n        '[class.nx-header-cell]': 'true',\n    },\n})\nexport class NxHeaderCellDirective {}\n","import { Directive, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nexport type SortDirection = 'asc' | 'desc';\n\nexport class SortEvent {\n    /** The name of the column that is being sorted by. */\n    active: string;\n\n    /** The sort direction. */\n    direction: SortDirection;\n\n    constructor(active: string, direction: SortDirection) {\n        this.active = active;\n        this.direction = direction;\n    }\n}\n\n@Directive({\n    selector: 'table[nxSort]',\n    exportAs: 'NxSortDirective',\n})\nexport class NxSortDirective implements OnDestroy {\n    readonly _stateChanges = new Subject<void>();\n\n    private _active!: string;\n\n    /** Sets the key of the most recently sorted column. */\n    @Input()\n    set active(value: string) {\n        if (this._active !== value) {\n            this._active = value;\n            this.sortChange.emit(new SortEvent(this.active, this.direction));\n            this._stateChanges.next();\n        }\n    }\n    get active(): string {\n        return this._active;\n    }\n\n    private _direction: SortDirection = 'asc';\n\n    /** Sets the direction of the currently active sorted column. Default: 'asc'. */\n    @Input()\n    set direction(value: SortDirection) {\n        if (this._direction !== value) {\n            this._direction = value;\n            this.sortChange.emit(new SortEvent(this.active, this.direction));\n            this._stateChanges.next();\n        }\n    }\n    get direction(): SortDirection {\n        return this._direction;\n    }\n\n    /**\n     * @docs-private\n     * An event emitted when the active value has changed.\n     */\n    @Output() readonly activeChange: EventEmitter<string> = new EventEmitter<string>();\n\n    /**\n     * @docs-private\n     * An event emitted when the direction value has changed.\n     */\n    @Output() readonly directionChange: EventEmitter<SortDirection> = new EventEmitter<SortDirection>();\n\n    /** An event emitted when either the active sort or sort direction changes. */\n    @Output() readonly sortChange: EventEmitter<SortEvent> = new EventEmitter<SortEvent>();\n\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n\n    /**\n     * Sets the active sort key and determines the new sort direction.\n     * Afterwards the output event `sortChange` is called.\n     *\n     * If `sortable` is not the key of the active sort header, the initial direction to sort is 'asc'.\n     * Otherwise the direction of the sorted column changes.\n     */\n    sort(sortable: string): void {\n        if (this._active !== sortable) {\n            this._active = sortable;\n            this.activeChange.emit(this.active);\n            this._direction = 'asc';\n            this.directionChange.emit(this.direction);\n        } else if (this._direction === 'asc') {\n            this._direction = 'desc';\n            this.directionChange.emit(this.direction);\n        } else {\n            this._direction = 'asc';\n            this.directionChange.emit(this.direction);\n        }\n\n        this.sortChange.emit(new SortEvent(this.active, this.direction));\n        this._stateChanges.next();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class NxSortHeaderIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    readonly changes: Subject<void> = new Subject<void>();\n\n    /** The aria label for a header that can be clicked to sort ascending. */\n    sortAscendingAriaLabel = 'click to sort ascending';\n    /** The aria label for a header that can be clicked to sort descending. */\n    sortDescendingAriaLabel = 'click to sort descending';\n    /** The aria label for a column that is sorted ascending. */\n    sortedAscendingAriaLabel = 'sorted ascending by';\n    /** The aria label for a column that is sorted descending. */\n    sortedDescendingAriaLabel = 'sorted descending by';\n}\n","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Input, OnDestroy, OnInit, Optional, ViewChild } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { NxSortDirective } from './sort.directive';\nimport { NxSortHeaderIntl } from './sort-header-intl';\n\n@Component({\n    selector: 'th[nxSortHeaderCell]',\n    exportAs: 'nxSortHeaderComponent',\n    templateUrl: 'sort-header.component.html',\n    styleUrls: ['sort-header.component.scss'],\n    host: {\n        '(click)': '_handleClick()',\n        '(keydown)': '_onKeydown($event)',\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxSortHeaderComponent implements OnInit, AfterViewInit, OnDestroy {\n    private _key!: string;\n\n    @ViewChild('focusContainer') _focusContainer!: ElementRef;\n\n    /** Sets the key of this sort header. */\n    @Input('nxSortHeaderCell')\n    set key(value: string) {\n        if (this._key !== value) {\n            this._key = value;\n        }\n    }\n    get key(): string {\n        return this._key;\n    }\n\n    readonly _sort: NxSortDirective;\n\n    private readonly _destroyed = new Subject<void>();\n\n    constructor(\n        @Optional() _sort: NxSortDirective | null,\n        public _intl: NxSortHeaderIntl,\n        private _cdr: ChangeDetectorRef,\n        private _focusMonitor: FocusMonitor,\n    ) {\n        if (!_sort) {\n            throw new Error(`NxTable: Using the 'nxSortHeaderCell' component requires the 'nxSort' directive on containing table.`);\n        }\n        this._sort = _sort;\n\n        this._intl.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._cdr.markForCheck());\n    }\n\n    ngOnInit() {\n        this._sort._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this._cdr.markForCheck();\n        });\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._focusContainer);\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._focusMonitor.stopMonitoring(this._focusContainer);\n    }\n\n    _handleClick() {\n        this._sort.sort(this._key);\n    }\n\n    _onKeydown($event: KeyboardEvent) {\n        if ($event && ($event.keyCode === ENTER || $event.keyCode === SPACE)) {\n            this._sort.sort(this._key);\n\n            // prevent page from scrolling down\n            if ($event.keyCode === SPACE) {\n                $event.preventDefault();\n            }\n        }\n    }\n\n    _isSortedAscending() {\n        return this._sort.active === this._key && this._sort.direction === 'asc';\n    }\n\n    _isSortedDescending() {\n        return this._sort.active === this._key && this._sort.direction === 'desc';\n    }\n\n    _getAriaLabel(): string {\n        if (this._sort.active === this._key) {\n            if (this._sort.direction === 'asc') {\n                return `${this._intl.sortedAscendingAriaLabel}`;\n            }\n            return `${this._intl.sortedDescendingAriaLabel}`;\n        }\n\n        return '';\n    }\n\n    _getTitle(): string {\n        if (this._sort.active === this._key && this._sort.direction === 'asc') {\n            return `${this._intl.sortDescendingAriaLabel}`;\n        }\n        return `${this._intl.sortAscendingAriaLabel}`;\n    }\n}\n","<div #focusContainer class=\"nx-sort-header__focus-container\" role=\"button\" tabindex=\"0\" [title]=\"_getTitle()\" aria-live=\"polite\">\n    <div class=\"nx-sort-header__icons-container\" [attr.aria-label]=\"_getAriaLabel()\">\n        <nx-icon name=\"chevron-up-small\" class=\"nx-sort-header__icon-up\" [class.nx-sort-header__hidden-icon]=\"_isSortedDescending()\"> </nx-icon>\n        <nx-icon name=\"chevron-down-small\" class=\"nx-sort-header__icon-down\" [class.nx-sort-header__hidden-icon]=\"_isSortedAscending()\"> </nx-icon>\n    </div>\n\n    <ng-content></ng-content>\n</div>\n","import { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, Optional } from '@angular/core';\n\nimport { NxExpandableTableDirective } from './expandable/expandable-table.directive';\n\n/**\n * This is a table.\n * The table supports a `zebra` and a `condensed` mode.\n */\n@Component({\n    selector: 'table[nxTable]',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./table.component.scss'],\n    inputs: ['sticky'],\n    host: {\n        class: 'nx-table',\n        '[class.nx-table--condensed]': 'condensed',\n        '[class.nx-table--zebra]': 'zebra',\n        '[class.nx-table--sticky-first]': 'sticky === \"first\" || sticky === \"both\"',\n        '[class.nx-table--sticky-last]': 'sticky === \"last\" || sticky === \"both\"',\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxTableComponent {\n    private _condensed!: boolean;\n\n    private _zebra!: boolean;\n\n    private _sticky!: string;\n\n    constructor(private _cdr: ChangeDetectorRef, @Optional() private _expandableTableDirective: NxExpandableTableDirective | null) {}\n\n    /** Change the table mode to condensed  */\n    @Input() set condensed(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n\n        if (value !== this._condensed) {\n            this._condensed = newValue;\n            this._cdr.markForCheck();\n        }\n    }\n\n    get condensed(): boolean {\n        return this._condensed;\n    }\n\n    /** Change the table mode to zebra  */\n    @Input() set zebra(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n        if (value !== this._zebra) {\n            this._zebra = newValue;\n            this._cdr.markForCheck();\n        }\n    }\n\n    get zebra(): boolean {\n        return this._expandableTableDirective ? false : this._zebra;\n    }\n\n    /**\n     * Makes first or last column \"sticky\".\n     *\n     * Values: first | last | both\n     */\n    @Input() set sticky(value: string) {\n        this._sticky = value;\n        this._cdr.markForCheck();\n    }\n\n    get sticky(): string {\n        return this._sticky;\n    }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n/**\n * This is a table cell.\n */\n@Component({\n    selector: 'td[nxTableCell], td[nxCell]',\n    template: '<ng-content></ng-content>',\n    host: {\n        '[class.nx-table-cell]': 'true',\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxTableCellComponent {}\n","import { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SPACE } from '@angular/cdk/keycodes';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';\n\n/**\n * This is a table row.\n */\n@Component({\n    selector: 'tr[nxTableRow]',\n    host: {\n        class: 'nx-table-row',\n        '[class.is-selected]': 'selected',\n        '[class.nx-table-row--selectable]': 'selectable',\n        '[attr.aria-selected]': 'selected',\n        '(click)': '_onSelect($event)',\n        '(keydown.space)': '_onSelect($event)',\n    },\n    template: `<ng-content></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxTableRowComponent {\n    /** Whether this table row is selectable */\n    @Input()\n    set selectable(value: BooleanInput) {\n        this._selectable = coerceBooleanProperty(value);\n        this._cdr.markForCheck();\n    }\n    get selectable(): boolean {\n        return this._selectable;\n    }\n    private _selectable = false;\n\n    /** Whether this table row is selected */\n    @Input()\n    set selected(value: BooleanInput) {\n        this._selected = coerceBooleanProperty(value);\n        this._cdr.markForCheck();\n    }\n    get selected(): boolean {\n        return this._selected;\n    }\n    private _selected = false;\n\n    @Output()\n    select: EventEmitter<void> = new EventEmitter();\n\n    constructor(protected _cdr: ChangeDetectorRef, private _elementRef: ElementRef) {}\n\n    _onSelect($event: KeyboardEvent) {\n        if (!this._selectable || this.isSelectionPrevented($event)) {\n            return;\n        }\n\n        if ($event.keyCode === SPACE) {\n            $event.preventDefault();\n        }\n\n        this.select.emit();\n    }\n\n    /**\n     * Checks if the event would trigger an action or if default action is prevented.\n     * Returns `true` if a button, link, input or label are clicked.\n     */\n    private isSelectionPrevented($event: Event) {\n        if ($event.defaultPrevented) {\n            return true;\n        }\n\n        let parent: HTMLElement = $event.target as HTMLElement;\n\n        while (parent && parent !== this._elementRef.nativeElement) {\n            if (['A', 'INPUT', 'BUTTON', 'TEXTAREA'].includes(parent.tagName)) {\n                return true;\n            } else if (parent.tagName === 'LABEL' && parent.getAttribute('for')) {\n                return true;\n            }\n\n            parent = parent.parentElement as HTMLElement;\n        }\n\n        return false;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxCopytextModule } from '@aposin/ng-aquila/copytext';\nimport { NxIconModule } from '@aposin/ng-aquila/icon';\nimport { NxSwipebarModule } from '@aposin/ng-aquila/swipebar';\n\nimport { NxExpandableTableDirective } from './expandable/expandable-table.directive';\nimport { NxExpandableTableCellComponent } from './expandable/expandable-table-cell.component';\nimport { NxExpandableTableRowComponent } from './expandable/expandable-table-row.component';\nimport { NxToggleButtonComponent } from './expandable/toggle-button.component';\nimport { NxHeaderCellDirective } from './header-cell.directive';\nimport { NxSortDirective } from './sort-header/sort.directive';\nimport { NxSortHeaderComponent } from './sort-header/sort-header.component';\nimport { NxSortHeaderIntl } from './sort-header/sort-header-intl';\nimport { NxTableComponent } from './table.component';\nimport { NxTableCellComponent } from './table-cell.component';\nimport { NxTableRowComponent } from './table-row.component';\n\nconst EXPORTED_DECLARED_ELEMENTS = [\n    NxHeaderCellDirective,\n    NxTableComponent,\n    NxTableCellComponent,\n    NxTableComponent,\n    NxTableRowComponent,\n    NxToggleButtonComponent,\n    NxExpandableTableDirective,\n    NxExpandableTableRowComponent,\n    NxExpandableTableCellComponent,\n    NxSortHeaderComponent,\n    NxSortDirective,\n];\n\n@NgModule({\n    declarations: EXPORTED_DECLARED_ELEMENTS,\n    exports: [...EXPORTED_DECLARED_ELEMENTS, NxSwipebarModule],\n    imports: [CommonModule, NxIconModule, NxCopytextModule, NxSwipebarModule],\n    providers: [NxSortHeaderIntl],\n})\nexport class NxTableModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.NxExpandableTableRowComponent","i1.NxSortDirective","i2.NxSortHeaderIntl","i3","i4","i1.NxExpandableTableDirective"],"mappings":"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"}