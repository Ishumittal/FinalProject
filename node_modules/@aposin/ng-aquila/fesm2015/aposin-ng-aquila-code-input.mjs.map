{"version":3,"file":"aposin-ng-aquila-code-input.mjs","sources":["../../../projects/ng-aquila/src/code-input/code-input-intl.ts","../../../projects/ng-aquila/src/code-input/code-input.component.ts","../../../projects/ng-aquila/src/code-input/code-input.component.html","../../../projects/ng-aquila/src/code-input/code-input.module.ts","../../../projects/ng-aquila/src/code-input/aposin-ng-aquila-code-input.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class NxCodeInputIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    readonly changes: Subject<void> = new Subject<void>();\n\n    /** Label that should replace the 'Enter key' of the aria-label. */\n    inputFieldAriaLabel = 'Enter Key';\n\n    /** Label that should replace the 'of' of the aria-label. */\n    ofLabel?: string = 'of';\n}\n","import { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { BACKSPACE, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, DoCheck, ElementRef, Input, Optional, Self } from '@angular/core';\nimport { ControlValueAccessor, FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { ErrorStateMatcher } from '@aposin/ng-aquila/utils';\n\nimport { NxCodeInputIntl } from './code-input-intl';\n\nconst DEFAULT_INPUT_LENGTH = 6;\nconst TAG_NAME_INPUT = 'INPUT';\nconst AUTO_UPPERCASE = 'upper';\nconst AUTO_LOWERCASE = 'lower';\nconst INPUT_FIELD_GAP = 'nx-code-input--field-with-gap';\nexport type NxConversionTypes = 'lower' | 'upper';\n\n@Component({\n    selector: 'nx-code-input',\n    templateUrl: 'code-input.component.html',\n    styleUrls: ['code-input.scss'],\n    host: {\n        '[class.nx-code-input]': 'true',\n        '[class.has-error]': 'errorState',\n        '[class.is-negative]': 'negative',\n        '[class.is-disabled]': 'disabled',\n        '[attr.tabindex]': '-1',\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxCodeInputComponent implements ControlValueAccessor, DoCheck {\n    /** Whether the current input of the component has an error. */\n    errorState = false;\n\n    /** The length of the code input. Default: 6. */\n    @Input('length')\n    set codeLength(value: number) {\n        this._codeLength = value;\n        this.setInputLength();\n        this._cdr.markForCheck();\n    }\n    get codeLength() {\n        return this._codeLength;\n    }\n    private _codeLength: number = DEFAULT_INPUT_LENGTH;\n\n    /** The type of HTML input */\n    @Input()\n    set type(value: string) {\n        this._type = value;\n        this._cdr.markForCheck();\n    }\n    get type() {\n        return this._type;\n    }\n    private _type = 'text';\n    private _isUpDown = false;\n\n    /** Sets the tabindex of the contained input elements. */\n    @Input()\n    set tabindex(value: number) {\n        this._tabindex = value;\n        this._cdr.markForCheck();\n    }\n    get tabindex(): number {\n        return this._tabindex;\n    }\n    private _tabindex = 0;\n\n    /** Whether the form should auto capitalize or lowercase (optional). */\n    @Input('nxConvertTo')\n    set convertTo(value: NxConversionTypes) {\n        this._convertTo = value;\n        this._cdr.markForCheck();\n    }\n    get convertTo() {\n        return this._convertTo!;\n    }\n    private _convertTo?: NxConversionTypes;\n\n    /** The user input in array form */\n    _keyCode: string[] = new Array(DEFAULT_INPUT_LENGTH);\n    private _focused = false;\n\n    /** Whether the code input uses the negative set of styling. */\n    @Input()\n    set negative(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n        if (this._negative !== newValue) {\n            this._negative = newValue;\n            this._cdr.markForCheck();\n        }\n    }\n    get negative() {\n        return this._negative;\n    }\n\n    private _negative = false;\n\n    /** Whether the code input is disabled. */\n    @Input()\n    set disabled(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this._cdr.markForCheck();\n        }\n    }\n    get disabled() {\n        return this._disabled;\n    }\n\n    private _disabled = false;\n\n    constructor(\n        private _cdr: ChangeDetectorRef,\n        private _el: ElementRef,\n        @Optional() @Self() public _control: NgControl | null,\n        public _intl: NxCodeInputIntl,\n        private _errorStateMatcher: ErrorStateMatcher,\n        @Optional() private _parentForm: NgForm | null,\n        @Optional() private _parentFormGroup: FormGroupDirective | null,\n    ) {\n        if (this._control) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this._control.valueAccessor = this;\n        }\n    }\n\n    ngDoCheck() {\n        if (this._control) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n\n    /** Sets the length of the input fields. */\n    setInputLength(): void {\n        if (this.codeLength) {\n            this._keyCode = new Array(this.codeLength);\n        } else {\n            this._keyCode = new Array(DEFAULT_INPUT_LENGTH);\n        }\n    }\n\n    /** Converts to upper or lowercase when enabled. */\n    _convertLetterSize(value: any): string | undefined {\n        if (value === 'ÃŸ') {\n            return value;\n        }\n\n        if (typeof value === 'string') {\n            if (this.convertTo === AUTO_UPPERCASE) {\n                return value.toUpperCase();\n            } else if (this.convertTo === AUTO_LOWERCASE) {\n                return value.toLowerCase();\n            }\n\n            return value;\n        }\n        return undefined;\n    }\n\n    /** Reacts to keydown event. */\n    _keydownAction(event: KeyboardEvent): void | false {\n        const targetElement: HTMLInputElement = event.target as HTMLInputElement;\n        const previousInputField: HTMLInputElement = targetElement.previousElementSibling as HTMLInputElement;\n        const nextInputField: HTMLInputElement = targetElement.nextElementSibling as HTMLInputElement;\n\n        switch (event.keyCode) {\n            case SPACE:\n                return false;\n\n            case BACKSPACE:\n                if (targetElement.value === '') {\n                    if (previousInputField && previousInputField.tagName === TAG_NAME_INPUT) {\n                        this.selectInput(previousInputField);\n                    }\n                }\n                break;\n\n            case LEFT_ARROW:\n                if (previousInputField && previousInputField.tagName === TAG_NAME_INPUT) {\n                    event.preventDefault();\n                    this.selectInput(previousInputField);\n                }\n                break;\n\n            case RIGHT_ARROW:\n                if (nextInputField && nextInputField.tagName === TAG_NAME_INPUT) {\n                    this.selectInput(nextInputField);\n                }\n                event.preventDefault();\n                break;\n\n            case DOWN_ARROW:\n                this._isUpDown = true;\n                if (this._type === 'number' && (targetElement.value === '' || targetElement.value === '0')) {\n                    event.preventDefault();\n                }\n                break;\n\n            case UP_ARROW:\n                this._isUpDown = true;\n                if (this._type === 'number' && targetElement.value === '9') {\n                    event.preventDefault();\n                }\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    /** Selects the value on click of an input field. */\n    _selectText(event: Event): void {\n        this.selectInput(event.target as HTMLInputElement);\n    }\n\n    /** Automatically focuses and selects the next input on key input. */\n    _selectNextInput(event: Event): void {\n        const eventTarget: HTMLInputElement = event.target as HTMLInputElement;\n        eventTarget.value = this._convertLetterSize(eventTarget.value.slice(0, 1)) as string;\n        const currentIndex = Number(this._getFocusedInputIndex(event));\n        // save in model with uppercase if needed\n        this._keyCode[currentIndex] = eventTarget.value;\n        this.propagateChange(this._keyCode.join(''));\n\n        // don't jump to next input if the user uses UP/DOWn arrow (native behaviour)\n        const focusNextInput = !(this._isUpDown && this.type === 'number');\n\n        if (eventTarget.value && focusNextInput) {\n            const nextInputField = eventTarget.nextSibling as HTMLInputElement;\n\n            if (nextInputField !== null && nextInputField.tagName === TAG_NAME_INPUT) {\n                nextInputField.focus();\n                if (nextInputField.value !== '') {\n                    this.selectInput(nextInputField);\n                }\n            }\n        }\n\n        this._isUpDown = false;\n    }\n\n    /** Paste event to distribute content in input fields. */\n    _pasteClipboard(event: ClipboardEvent): void {\n        let copiedText = (event.clipboardData || (window as any).clipboardData).getData('text');\n        let copiedTextIndex = 0;\n        const inputIndex = Number(this._getFocusedInputIndex(event));\n\n        copiedText = this.type === 'number' ? this._formatNumberInput(copiedText) : copiedText;\n\n        for (let i: number = inputIndex; i < this.codeLength; i++) {\n            this._keyCode[i] = this._convertLetterSize(copiedText[copiedTextIndex]) as string;\n            copiedTextIndex++;\n        }\n\n        this.propagateChange(this._keyCode.join(''));\n\n        if (inputIndex + copiedText.length < this.codeLength) {\n            this._el.nativeElement.children.item(inputIndex + copiedText.length).focus();\n        } else {\n            this._el.nativeElement.children.item(this.codeLength - 1).focus();\n        }\n\n        event.preventDefault();\n    }\n\n    /** Returns the index of the code input, which is currently focused. */\n    private _getFocusedInputIndex(event: Event) {\n        let inputIndex;\n        for (let i = 0; i < this._el.nativeElement.children.length; i++) {\n            if (event.srcElement === this._el.nativeElement.children.item(i)) {\n                inputIndex = i;\n            }\n        }\n        return inputIndex;\n    }\n\n    /** Removes all characters from the input except for numbers [0-9]. */\n    private _formatNumberInput(copiedText: string) {\n        let formattedInput = '';\n        for (let i = 0; i < copiedText.length; i++) {\n            if (copiedText[i].match(/\\d$/)) {\n                formattedInput += copiedText[i];\n            }\n        }\n\n        return formattedInput;\n    }\n\n    /** Triggers when an input field is blurred. */\n    _onBlur(): void {\n        this._focused = false;\n        setTimeout(() => {\n            if (!this._focused) {\n                this.propagateTouch(this._keyCode.join(''));\n            }\n            this._cdr.markForCheck();\n        });\n    }\n\n    /** Sets _focused state and makes valid. */\n    _setFocusState(): void {\n        this._focused = true;\n    }\n\n    /**\n     * Disables the code input. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this._cdr.markForCheck();\n    }\n\n    /** Sets initial value, used by ControlValueAccessor. */\n    writeValue(value: string): void {\n        if (value) {\n            const valueAsArray = value.split('').slice(0, this.codeLength);\n\n            for (let i = 0; i < this.codeLength; i++) {\n                this._keyCode[i] = valueAsArray[i];\n            }\n        } else {\n            this.setInputLength();\n        }\n\n        this._cdr.markForCheck();\n    }\n\n    _trackByKeyCode(index: number, item: string): number {\n        return index;\n    }\n\n    /** Adds a gap to input fields when appropriate. */\n    _inputGap(index: number): string {\n        switch (this.codeLength) {\n            case 4:\n            case 6:\n            case 8:\n                if (index === this.codeLength / 2) {\n                    return INPUT_FIELD_GAP;\n                }\n                return '';\n\n            default:\n                return '';\n        }\n    }\n\n    /** @docs-private */\n    propagateChange = (_: any) => {};\n\n    /** @docs-private */\n    propagateTouch = (_: any) => {};\n\n    registerOnChange(fn: any) {\n        this.propagateChange = fn;\n    }\n\n    registerOnTouched(fn: any) {\n        this.propagateTouch = fn;\n    }\n\n    /** @docs-private */\n    updateErrorState() {\n        const oldState = this.errorState;\n        const parent = this._parentFormGroup || this._parentForm;\n        const control = this._control ? (this._control.control as FormControl) : null;\n        const newState = this._errorStateMatcher.isErrorState(control, parent);\n\n        if (newState !== oldState) {\n            this.errorState = newState;\n        }\n    }\n\n    getAriaLabel(keyIndex: number) {\n        return `${this._intl.inputFieldAriaLabel} ${keyIndex + 1} ${this._intl.ofLabel} ${this._keyCode.length}`;\n    }\n\n    /** @docs-private\n     * Workaround preventing the selection error because the `setSelectionRange` is not supported on input['type=number']\n     * */\n    selectInput(input: HTMLInputElement) {\n        input.focus();\n        try {\n            input.setSelectionRange(0, input.value.length);\n        } catch (err) {\n            if (err instanceof DOMException && err.name === 'InvalidStateError') {\n                // setSelectionRange does not apply\n            } else {\n                throw err;\n            }\n        }\n    }\n}\n","<input\n    class=\"nx-code-input__field\"\n    maxlength=\"1\"\n    *ngFor=\"let key of _keyCode; index as i; trackBy: _trackByKeyCode\"\n    [(ngModel)]=\"_keyCode[i]\"\n    [ngClass]=\"_inputGap(i)\"\n    [attr.aria-label]=\"getAriaLabel(i)\"\n    [attr.type]=\"type\"\n    (input)=\"_selectNextInput($event)\"\n    (paste)=\"_pasteClipboard($event)\"\n    (blur)=\"_onBlur()\"\n    (focus)=\"_setFocusState()\"\n    (click)=\"_selectText($event)\"\n    (keydown)=\"_keydownAction($event)\"\n    [attr.tabindex]=\"tabindex\"\n    [attr.disabled]=\"disabled ? '' : null\"\n/>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { NxCodeInputComponent } from './code-input.component';\nimport { NxCodeInputIntl } from './code-input-intl';\n\n@NgModule({\n    imports: [CommonModule, FormsModule, ReactiveFormsModule],\n    declarations: [NxCodeInputComponent],\n    exports: [NxCodeInputComponent],\n    providers: [NxCodeInputIntl],\n})\nexport class NxCodeInputModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i2.NxCodeInputIntl"],"mappings":"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"}