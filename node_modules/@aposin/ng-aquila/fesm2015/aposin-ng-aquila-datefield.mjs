import * as i1 from '@angular/cdk/platform';
import { PlatformModule } from '@angular/cdk/platform';
import * as i0 from '@angular/core';
import { InjectionToken, Injectable, Optional, Inject, LOCALE_ID, NgModule, forwardRef, EventEmitter, Directive, Input, Output, Component, ChangeDetectionStrategy, ViewChildren, ViewChild, ContentChild } from '@angular/core';
import { Subject, merge, Subscription, of } from 'rxjs';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { DOWN_ARROW, ENTER, PAGE_DOWN, PAGE_UP, END, HOME, UP_ARROW, RIGHT_ARROW, LEFT_ARROW, ESCAPE } from '@angular/cdk/keycodes';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS, Validators } from '@angular/forms';
import { NX_INPUT_VALUE_ACCESSOR } from '@aposin/ng-aquila/input';
import { takeUntil, take, filter } from 'rxjs/operators';
import * as i2 from '@aposin/ng-aquila/formfield';
import * as i4 from '@angular/cdk/a11y';
import { A11yModule } from '@angular/cdk/a11y';
import * as i6 from '@angular/cdk/overlay';
import { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';
import * as i2$1 from '@angular/common';
import { DOCUMENT, CommonModule } from '@angular/common';
import * as i5 from '@aposin/ng-aquila/icon';
import { NxIconModule } from '@aposin/ng-aquila/icon';
import * as i2$2 from '@angular/cdk/bidi';
import { ComponentPortal } from '@angular/cdk/portal';

/** Base class for all adapter implementations */
class NxDateAdapter {
    constructor() {
        this.locale = 'de-DE';
        this._localeChanges = new Subject();
    }
    /** A stream that emits when the locale changes. */
    get localeChanges() {
        return this._localeChanges;
    }
    /**
     * Attempts to deserialize a value to a valid date object. This is different from parsing in that
     * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601
     * string). The default implementation does not allow any deserialization, it simply checks that
     * the given value is already a valid date object or null. The `<nx-datefield>` will call this
     * method on all of its `@Input()` properties that accept dates. It is therefore possible to
     * support passing values from your backend directly to these properties by overriding this method
     * to also deserialize the format used by your backend.
     * @param value The value to be deserialized into a date object.
     * @returns The deserialized date object, either a valid date, null if the value can be
     *     deserialized into a null date (e.g. the empty string), or an invalid date.
     */
    deserialize(value) {
        if (value == null || (this.isDateInstance(value) && this.isValid(value))) {
            return value;
        }
        return this.invalid();
    }
    /**
     * Checks if two dates are equal.
     * @param first The first date to check.
     * @param second The second date to check.
     * @returns Whether the two dates are equal.
     *     Null dates are considered equal to other null dates.
     */
    sameDate(first, second) {
        if (first && second) {
            const firstValid = this.isValid(first);
            const secondValid = this.isValid(second);
            if (firstValid && secondValid) {
                return !this.compareDate(first, second);
            }
            return firstValid === secondValid;
        }
        return first === second;
    }
    /**
     * Compares two dates.
     * @param first The first date to compare.
     * @param second The second date to compare.
     * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,
     *     a number greater than 0 if the first date is later.
     */
    compareDate(first, second) {
        return this.getYear(first) - this.getYear(second) || this.getMonth(first) - this.getMonth(second) || this.getDate(first) - this.getDate(second);
    }
    /**
     * Sets the locale used for all dates.
     * @param locale The new locale.
     */
    setLocale(locale) {
        this.locale = locale;
        this._localeChanges.next(this.locale);
    }
    /** Returns the current set locale of the adapter. */
    getLocale() {
        return this.locale;
    }
    /**
     * Clamp the given date between min and max dates.
     * @param date The date to clamp.
     * @param min The minimum value to allow. If null or omitted no min is enforced.
     * @param max The maximum value to allow. If null or omitted no max is enforced.
     * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,
     *     otherwise `date`.
     */
    clampDate(date, min, max) {
        if (min && this.compareDate(date, min) < 0) {
            return min;
        }
        if (max && this.compareDate(date, max) > 0) {
            return max;
        }
        return date;
    }
}

const NX_DATE_FORMATS = new InjectionToken('nx-date-formats');

/** InjectionToken for datepicker that can be used to override default locale code. */
const NX_DATE_LOCALE = new InjectionToken('nx-date-locale');

// TODO(mmalerba): Remove when we no longer support safari 9.
/** Whether the browser supports the Intl API. */
const SUPPORTS_INTL_API = typeof Intl !== 'undefined';
/** The default month names to use if Intl API is not available. */
const DEFAULT_MONTH_NAMES = {
    long: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
    short: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
};
/** The default date names to use if Intl API is not available. */
const DEFAULT_DATE_NAMES = range(31, i => String(i + 1));
/** The default day of the week names to use if Intl API is not available. */
const DEFAULT_DAY_OF_WEEK_NAMES = {
    long: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    short: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
    narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
};
/**
 * Matches strings that have the form of a valid RFC 3339 string
 * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date
 * because the regex will match strings an with out of bounds month, date, etc.
 */
const ISO_8601_REGEX = /^\d{4}-\d{2}-\d{2}(?:T\d{2}:\d{2}:\d{2}(?:\.\d+)?(?:Z|(?:\+|-)\d{2}:\d{2})?)?$/;
/** Creates an array and fills it with values. */
function range(length, valueFunction) {
    const valuesArray = Array(length);
    for (let i = 0; i < length; i++) {
        valuesArray[i] = valueFunction(i);
    }
    return valuesArray;
}
/**
 * @docs-private
 * Adapts the native JS Date for use with cdk-based components that work with dates.
 */
class NxNativeDateAdapter extends NxDateAdapter {
    constructor(dateLocale, platform) {
        super();
        /**
         * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.
         * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off
         * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`
         * will produce `'8/13/1800'`.
         *
         * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now
         * getting the string representation of a Date object from it's utc representation. We're keeping
         * it here for sometime, just for precaution, in case we decide to revert some of these changes
         * though.
         */
        this.useUtcForDisplay = true;
        super.setLocale(dateLocale || 'en-US');
        // IE does its own time zone correction, so we disable this on IE.
        this.useUtcForDisplay = !platform.TRIDENT;
        this._clampDate = platform.TRIDENT || platform.EDGE;
    }
    getYear(date) {
        return date.getFullYear();
    }
    getMonth(date) {
        return date.getMonth();
    }
    getDate(date) {
        return date.getDate();
    }
    getDayOfWeek(date) {
        return date.getDay();
    }
    getMonthNames(style) {
        if (SUPPORTS_INTL_API) {
            const dtf = new Intl.DateTimeFormat(this.locale, { month: style, timeZone: 'utc' });
            return range(12, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));
        }
        return DEFAULT_MONTH_NAMES[style];
    }
    getDateNames() {
        if (SUPPORTS_INTL_API) {
            const dtf = new Intl.DateTimeFormat(this.locale, { day: 'numeric', timeZone: 'utc' });
            return range(31, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1))));
        }
        return DEFAULT_DATE_NAMES;
    }
    getDayOfWeekNames(style) {
        if (SUPPORTS_INTL_API) {
            const dtf = new Intl.DateTimeFormat(this.locale, { weekday: style, timeZone: 'utc' });
            return range(7, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1))));
        }
        return DEFAULT_DAY_OF_WEEK_NAMES[style];
    }
    getYearName(date) {
        if (SUPPORTS_INTL_API) {
            const dtf = new Intl.DateTimeFormat(this.locale, { year: 'numeric', timeZone: 'utc' });
            return this._stripDirectionalityCharacters(this._format(dtf, date));
        }
        return String(this.getYear(date));
    }
    getFirstDayOfWeek() {
        // We can't tell using native JS Date what the first day of the week is, we default to Sunday.
        return 0;
    }
    getNumDaysInMonth(date) {
        return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));
    }
    clone(date) {
        return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));
    }
    createDate(year, month, date) {
        // Check for invalid month and date (except upper bound on date which we have to check after
        // creating the Date).
        if (month < 0 || month > 11) {
            throw Error(`Invalid month index "${month}". Month index has to be between 0 and 11.`);
        }
        if (date < 1) {
            throw Error(`Invalid date "${date}". Date has to be greater than 0.`);
        }
        const result = this._createDateWithOverflow(year, month, date);
        // Check that the date wasn't above the upper bound for the month, causing the month to overflow
        if (result.getMonth() !== month) {
            throw Error(`Invalid date "${date}" for month with index "${month}".`);
        }
        return result;
    }
    today() {
        return new Date();
    }
    parse(value) {
        // We have no way using the native JS Date to set the parse format or locale, so we ignore these
        // parameters.
        if (typeof value === 'number') {
            return new Date(value);
        }
        return value ? new Date(Date.parse(value)) : null;
    }
    format(date, displayFormat) {
        if (!this.isValid(date)) {
            throw Error('NxNativeDateAdapter: Cannot format invalid date.');
        }
        if (SUPPORTS_INTL_API) {
            // On IE and Edge the i18n API will throw a hard error that can crash the entire app
            // if we attempt to format a date whose year is less than 1 or greater than 9999.
            if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {
                date = this.clone(date);
                date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));
            }
            displayFormat = Object.assign(Object.assign({}, displayFormat), { timeZone: 'utc' });
            const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);
            return this._stripDirectionalityCharacters(this._format(dtf, date));
        }
        return this._stripDirectionalityCharacters(date.toDateString());
    }
    addCalendarYears(date, years) {
        return this.addCalendarMonths(date, years * 12);
    }
    addCalendarMonths(date, months) {
        let newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date));
        // It's possible to wind up in the wrong month if the original month has more days than the new
        // month. In this case we want to go to the last day of the desired month.
        // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't
        // guarantee this.
        if (this.getMonth(newDate) !== (((this.getMonth(date) + months) % 12) + 12) % 12) {
            newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);
        }
        return newDate;
    }
    addCalendarDays(date, days) {
        return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);
    }
    toIso8601(date) {
        return [date.getUTCFullYear(), this._2digit(date.getUTCMonth() + 1), this._2digit(date.getUTCDate())].join('-');
    }
    /**
     * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings
     * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an
     * invalid date for all other values.
     */
    deserialize(value) {
        if (typeof value === 'string') {
            if (!value) {
                return null;
            }
            // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the
            // string is the right format first.
            if (ISO_8601_REGEX.test(value)) {
                const date = new Date(value);
                if (this.isValid(date)) {
                    return date;
                }
            }
        }
        return super.deserialize(value);
    }
    isDateInstance(obj) {
        return obj instanceof Date;
    }
    isValid(date) {
        return !isNaN(date.getTime());
    }
    invalid() {
        return new Date(NaN);
    }
    /** Creates a date but allows the month and date to overflow. */
    _createDateWithOverflow(year, month, date) {
        const result = new Date(year, month, date);
        // We need to correct for the fact that JS native Date treats years in range [0, 99] as
        // abbreviations for 19xx.
        if (year >= 0 && year < 100) {
            result.setFullYear(this.getYear(result) - 1900);
        }
        return result;
    }
    /**
     * Pads a number to make it two digits.
     * @param n The number to pad.
     * @returns The padded number.
     */
    _2digit(n) {
        return ('00' + n).slice(-2);
    }
    /**
     * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while
     * other browsers do not. We remove them to make output consistent and because they interfere with
     * date parsing.
     * @param str The string to strip direction characters from.
     * @returns The stripped string.
     */
    _stripDirectionalityCharacters(str) {
        return str.replace(/[\u200e\u200f]/g, '');
    }
    /**
     * When converting Date object to string, javascript built-in functions may return wrong
     * results because it applies its internal DST rules. The DST rules around the world change
     * very frequently, and the current valid rule is not always valid in previous years though.
     * We work around this problem building a new Date object which has its internal UTC
     * representation with the local date and time.
     * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have
     *    timeZone set to 'utc' to work fine.
     * @param date Date from which we want to get the string representation according to dtf
     * @returns A Date object with its UTC representation based on the passed in date info
     */
    _format(dtf, date) {
        const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
        return dtf.format(d);
    }
}
NxNativeDateAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNativeDateAdapter, deps: [{ token: NX_DATE_LOCALE, optional: true }, { token: i1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });
NxNativeDateAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNativeDateAdapter });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNativeDateAdapter, decorators: [{
            type: Injectable
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [NX_DATE_LOCALE]
                    }] }, { type: i1.Platform }];
    } });

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const NX_NATIVE_DATE_FORMATS = {
    parse: {
        dateInput: null,
    },
    display: {
        dateInput: { year: 'numeric', month: 'numeric', day: 'numeric' },
        monthYearLabel: { year: 'numeric', month: 'short' },
        dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },
        monthYearA11yLabel: { year: 'numeric', month: 'long' },
    },
};

const NX_DATE_LOCALE_PROVIDER = { provide: NX_DATE_LOCALE, useExisting: LOCALE_ID };
class NativeDateModule {
}
NativeDateModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NativeDateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NativeDateModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NativeDateModule, imports: [PlatformModule] });
NativeDateModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NativeDateModule, providers: [{ provide: NxDateAdapter, useClass: NxNativeDateAdapter }, NX_DATE_LOCALE_PROVIDER], imports: [[PlatformModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NativeDateModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [PlatformModule],
                    providers: [{ provide: NxDateAdapter, useClass: NxNativeDateAdapter }, NX_DATE_LOCALE_PROVIDER],
                }]
        }] });
class NxNativeDateModule {
}
NxNativeDateModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNativeDateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NxNativeDateModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNativeDateModule, imports: [NativeDateModule] });
NxNativeDateModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNativeDateModule, providers: [{ provide: NX_DATE_FORMATS, useValue: NX_NATIVE_DATE_FORMATS }], imports: [[NativeDateModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNativeDateModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [NativeDateModule],
                    providers: [{ provide: NX_DATE_FORMATS, useValue: NX_NATIVE_DATE_FORMATS }],
                }]
        }] });

/**
 * Provides a set of date validators that can be used by form controls.
 * @dynamic
 */
class NxDateValidators {
    /** The form control validator for whether the input parses. */
    static parse(dateAdapter, dateFormats, input, strict, customParseFormat) {
        return () => {
            if (!input.value) {
                return null;
            }
            const parsedValue = dateAdapter.parse(input.value, customParseFormat || dateFormats.parse.dateInput, strict);
            const valid = parsedValue && dateAdapter.isValid(parsedValue);
            return valid ? null : { nxDatefieldParse: { text: input } };
        };
    }
    /** The form control validator for the min date. */
    static min(dateAdapter, min) {
        return (control) => {
            const controlValue = getValidDateOrNull(dateAdapter, dateAdapter.deserialize(control.value));
            return !min || !controlValue || dateAdapter.compareDate(min, controlValue) <= 0 ? null : { nxDatefieldMin: { min, actual: controlValue } };
        };
    }
    /** The form control validator for the max date. */
    static max(dateAdapter, max) {
        return (control) => {
            const controlValue = getValidDateOrNull(dateAdapter, dateAdapter.deserialize(control.value));
            return !max || !controlValue || dateAdapter.compareDate(max, controlValue) >= 0 ? null : { nxDatefieldMax: { max, actual: controlValue } };
        };
    }
    /** The form control validator for the date filter. */
    static filter(dateAdapter, dateFilter) {
        return (control) => {
            const controlValue = getValidDateOrNull(dateAdapter, dateAdapter.deserialize(control.value));
            return !dateFilter || !controlValue || dateFilter(controlValue) ? null : { nxDatefieldFilter: true };
        };
    }
}
function getValidDateOrNull(dateAdapter, obj) {
    return dateAdapter.isDateInstance(obj) && dateAdapter.isValid(obj) ? obj : null;
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** @docs-private */
function createMissingDateImplError(provider) {
    return Error(`NxDatepicker: No provider found for ${provider}. You must import one of the following ` +
        `modules at your application root: NxNativeDateModule, NxMomentDateModule, NxIsoDateModule or provide a ` +
        `custom implementation.`);
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const NX_DATEFIELD_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NxDatefieldDirective),
    multi: true,
};
const NX_DATEFIELD_VALIDATORS = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(() => NxDatefieldDirective),
    multi: true,
};
/**
 * An event used for datepicker input and change events. We don't always have access to a native
 * input or change event because the event may have been triggered by the user clicking on the
 * calendar popup. For consistency, we always use NxDatepickerInputEvent instead.
 */
class NxDatepickerInputEvent {
    constructor(
    /** Reference to the datepicker input component that emitted the event. */
    target, 
    /** Reference to the native input element associated with the datepicker input. */
    targetElement) {
        this.target = target;
        this.targetElement = targetElement;
        this.value = this.target.value;
    }
}
/**
 * Directive used to provide date processing functionality to an input.
 */
class NxDatefieldDirective {
    constructor(_elementRef, _dateAdapter, _dateFormats, _formField) {
        this._elementRef = _elementRef;
        this._formField = _formField;
        /** @docs-private */
        this.currentFormattedDate = null;
        this._strict = true;
        /** Emits when a `change` event is fired on this `<input>`. */
        this.dateChange = new EventEmitter();
        /** Emits when an `input` event is fired on this `<input>`. */
        this.dateInput = new EventEmitter();
        /** Emits when the value changes (either due to user input or programmatic change). */
        this._valueChange = new EventEmitter();
        /** Emits when the disabled state has changed. */
        this._disabledChange = new EventEmitter();
        /** Emits when the readonly state has changed. */
        this._readonlyChange = new EventEmitter();
        this._destroyed = new Subject();
        this._onTouched = () => { };
        this._cvaOnChange = () => { };
        this._validatorOnChange = () => { };
        if (!_dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
        this._dateAdapter = _dateAdapter;
        if (!_dateFormats) {
            throw createMissingDateImplError('NX_DATE_FORMATS');
        }
        this._dateFormats = _dateFormats;
        // Update the displayed date when the locale changes.
        _dateAdapter.localeChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {
            const value = this.value;
            this.value = value; // invoke setter
        });
    }
    /** The datepicker that this input is associated with. */
    set datepicker(value) {
        this.registerDatepicker(value);
    }
    /** Function that can be used to filter out dates within the datepicker and invalidate values in the datefield. */
    set datefieldFilter(value) {
        this._dateFilter = value;
        this._validatorOnChange();
    }
    /** Provide or read the current date. It's type <D> depends on the chosen date implementation */
    get value() {
        return this._value;
    }
    set value(value) {
        value = this._dateAdapter.deserialize(value);
        value = this._getValidDateOrNull(value);
        const oldDate = this.value;
        this._value = value;
        this._formatValue(this.value);
        if (!this._dateAdapter.sameDate(oldDate, value)) {
            this._valueChange.emit(value);
        }
    }
    /** Sets the minimum valid date. */
    get min() {
        return this._min;
    }
    set min(value) {
        this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
        this._validatorOnChange();
    }
    /** Sets the maximum valid date. */
    get max() {
        return this._max;
    }
    set max(value) {
        this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
        this._validatorOnChange();
    }
    /**
     * If supported by the date implementation enable strict parsing (applies to Moment's parse function here).
     *
     * The date value is not updated on a `strict` change.
     */
    get strict() {
        return this._strict;
    }
    set strict(value) {
        this._strict = coerceBooleanProperty(value);
    }
    /**
     * Override the parse format given with parse.dateInput with the token NX_DATE_FORMATS.
     *
     * The date value is not updated on a `parseFormat` change.
     */
    get parseFormat() {
        return this._parseFormat;
    }
    set parseFormat(value) {
        this._parseFormat = value;
    }
    /** Override the display format given with display.dateInput with the token NX_DATE_FORMATS  */
    get displayFormat() {
        return this._displayFormat;
    }
    set displayFormat(value) {
        this._displayFormat = value;
        this._formatValue(this.value);
    }
    /** Whether the datepicker-input is disabled. */
    get disabled() {
        return !!this._disabled;
    }
    set disabled(value) {
        const newValue = coerceBooleanProperty(value);
        if (this._disabled !== newValue) {
            this._disabled = newValue;
            this._disabledChange.emit(newValue);
        }
        // In Ivy static bindings are invoked earlier, before the element is attached to the DOM.
        // This can cause an error to be thrown in some browsers (IE/Edge) which assert that the
        // element has been inserted.
        if (newValue && this._isInitialized) {
            // Normally, native input elements automatically blur if they turn disabled. This behavior
            // is problematic, because it would mean that it triggers another change detection cycle,
            // which then causes a changed after checked error if the input element was focused before.
            this._elementRef.nativeElement.blur();
        }
    }
    /** Whether the datefield is readonly. */
    get readonly() {
        return !!this._readonly;
    }
    set readonly(value) {
        const newValue = coerceBooleanProperty(value);
        if (this._readonly !== newValue) {
            this._readonly = newValue;
            this._readonlyChange.emit(newValue);
        }
    }
    ngAfterContentInit() {
        var _a;
        (_a = this._datepicker) === null || _a === void 0 ? void 0 : _a.selectedChanged.pipe(takeUntil(this._destroyed)).subscribe((selected) => {
            this.value = selected;
            this._cvaOnChange(selected);
            this._onTouched();
            this.dateInput.emit(new NxDatepickerInputEvent(this, this._elementRef.nativeElement));
            this.dateChange.emit(new NxDatepickerInputEvent(this, this._elementRef.nativeElement));
        });
        this._isInitialized = true;
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this._valueChange.complete();
        this._disabledChange.complete();
        this._readonlyChange.complete();
    }
    /** @docs-private */
    registerOnValidatorChange(fn) {
        this._validatorOnChange = fn;
    }
    /** @docs-private */
    validate(c) {
        const validator = Validators.compose(this.getValidators());
        return validator ? validator(c) : null;
    }
    /**
     * @docs-private
     *
     * Gets the element that the datepicker popup should be connected to.
     * @return The element to connect the popup to.
     */
    getConnectedOverlayOrigin() {
        // formfield not yet accessible as we don't have them in a secondary entry point to import yet.
        // return this._elementRef;
        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;
    }
    // Implemented as part of ControlValueAccessor.
    writeValue(value) {
        this.value = value;
    }
    // Implemented as part of ControlValueAccessor.
    registerOnChange(fn) {
        this._cvaOnChange = fn;
    }
    // Implemented as part of ControlValueAccessor.
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    // Implemented as part of ControlValueAccessor.
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    _onKeydown(event) {
        if (event.altKey && event.keyCode === DOWN_ARROW) {
            this._datepicker.open();
            event.preventDefault();
        }
    }
    _onInput(value) {
        let date = this._dateAdapter.parse(value, this._parseFormat || this._dateFormats.parse.dateInput, this.strict);
        date = this._getValidDateOrNull(date);
        this._value = date;
        if (date) {
            this.currentFormattedDate = this._dateAdapter.format(date, this._displayFormat || this._dateFormats.display.dateInput);
        }
        else {
            this.currentFormattedDate = null;
        }
        this._cvaOnChange(date);
        this._valueChange.emit(date);
        this.dateInput.emit(new NxDatepickerInputEvent(this, this._elementRef.nativeElement));
    }
    _onChange() {
        this.dateChange.emit(new NxDatepickerInputEvent(this, this._elementRef.nativeElement));
    }
    _focus() {
        this._elementRef.nativeElement.focus();
    }
    _onBlur() {
        // Reformat the input only if we have a valid value.
        if (this.value) {
            this._formatValue(this.value);
        }
        this._onTouched();
    }
    /** Returns the validators of the datefield. */
    getValidators() {
        return [
            NxDateValidators.parse(this._dateAdapter, this._dateFormats, this._elementRef.nativeElement, this._strict, this._parseFormat),
            NxDateValidators.min(this._dateAdapter, this.min),
            NxDateValidators.max(this._dateAdapter, this.max),
            NxDateValidators.filter(this._dateAdapter, this._dateFilter),
        ];
    }
    /** Formats a value and sets it on the input native element. */
    _formatValue(value) {
        this._elementRef.nativeElement.value = value ? this._dateAdapter.format(value, this._displayFormat || this._dateFormats.display.dateInput) : '';
    }
    /**
     * @param obj The object to check.
     * @returns The given object if it is both a date instance and valid, otherwise null.
     */
    _getValidDateOrNull(obj) {
        return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;
    }
    registerDatepicker(value) {
        if (value) {
            this._datepicker = value;
            this._datepicker.registerInput(this);
        }
    }
}
NxDatefieldDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDatefieldDirective, deps: [{ token: i0.ElementRef }, { token: NxDateAdapter, optional: true }, { token: NX_DATE_FORMATS, optional: true }, { token: i2.NxFormfieldComponent, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
NxDatefieldDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxDatefieldDirective, selector: "input[nxDatefield]", inputs: { datepicker: ["nxDatepicker", "datepicker"], datefieldFilter: ["nxDatefieldFilter", "datefieldFilter"], value: "value", min: ["nxMin", "min"], max: ["nxMax", "max"], strict: ["nxStrict", "strict"], parseFormat: ["nxParseFormat", "parseFormat"], displayFormat: ["nxDisplayFormat", "displayFormat"], disabled: "disabled", readonly: "readonly" }, outputs: { dateChange: "dateChange", dateInput: "dateInput" }, host: { listeners: { "input": "_onInput($event.target.value)", "change": "_onChange()", "blur": "_onBlur()", "keydown": "_onKeydown($event)" }, properties: { "attr.aria-haspopup": "true", "attr.aria-owns": "(_datepicker?.opened && _datepicker.id) || null", "attr.min": "min ? _dateAdapter.toIso8601(min) : null", "attr.max": "max ? _dateAdapter.toIso8601(max) : null", "disabled": "disabled", "readonly": "readonly" } }, providers: [
        NX_DATEFIELD_VALUE_ACCESSOR,
        NX_DATEFIELD_VALIDATORS,
        // {provide: NX_INPUT_VALUE_ACCESSOR, useExisting: NxDatefieldDirective},
        { provide: NX_INPUT_VALUE_ACCESSOR, useExisting: NxDatefieldDirective },
    ], exportAs: ["nxDatefield"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDatefieldDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[nxDatefield]',
                    providers: [
                        NX_DATEFIELD_VALUE_ACCESSOR,
                        NX_DATEFIELD_VALIDATORS,
                        // {provide: NX_INPUT_VALUE_ACCESSOR, useExisting: NxDatefieldDirective},
                        { provide: NX_INPUT_VALUE_ACCESSOR, useExisting: NxDatefieldDirective },
                    ],
                    host: {
                        '[attr.aria-haspopup]': 'true',
                        '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',
                        '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',
                        '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',
                        '[disabled]': 'disabled',
                        '[readonly]': 'readonly',
                        '(input)': '_onInput($event.target.value)',
                        '(change)': '_onChange()',
                        '(blur)': '_onBlur()',
                        '(keydown)': '_onKeydown($event)',
                    },
                    exportAs: 'nxDatefield',
                }]
        }], ctorParameters: function () {
        return [{ type: i0.ElementRef }, { type: NxDateAdapter, decorators: [{
                        type: Optional
                    }] }, { type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [NX_DATE_FORMATS]
                    }] }, { type: i2.NxFormfieldComponent, decorators: [{
                        type: Optional
                    }] }];
    }, propDecorators: { datepicker: [{
                type: Input,
                args: ['nxDatepicker']
            }], datefieldFilter: [{
                type: Input,
                args: ['nxDatefieldFilter']
            }], value: [{
                type: Input
            }], min: [{
                type: Input,
                args: ['nxMin']
            }], max: [{
                type: Input,
                args: ['nxMax']
            }], strict: [{
                type: Input,
                args: ['nxStrict']
            }], parseFormat: [{
                type: Input,
                args: ['nxParseFormat']
            }], displayFormat: [{
                type: Input,
                args: ['nxDisplayFormat']
            }], disabled: [{
                type: Input
            }], readonly: [{
                type: Input
            }], dateChange: [{
                type: Output
            }], dateInput: [{
                type: Output
            }] } });

/**
 * An internal class that represents the data corresponding to a single calendar cell.
 * @docs-private
 */
class NxCalendarCell {
    constructor(value, displayValue, ariaLabel, enabled) {
        this.value = value;
        this.displayValue = displayValue;
        this.ariaLabel = ariaLabel;
        this.enabled = enabled;
    }
}
/**
 * An internal component used to display calendar data in a table.
 * @docs-private
 */
class NxCalendarBodyComponent {
    constructor(_elementRef, _ngZone, _focusMonitor) {
        this._elementRef = _elementRef;
        this._ngZone = _ngZone;
        this._focusMonitor = _focusMonitor;
        /** The number of columns in the table. */
        this.numCols = 7;
        /** Whether to allow selection of disabled cells. */
        this.allowDisabledSelection = false;
        /** The cell number of the active cell in the table. */
        this.activeCell = 0;
        /** The items to display in the first row in the offset space. */
        this.previousItems = [];
        /** The items to display in the last row in the offset space. */
        this.followingItems = [[]];
        /** Emits when a new value out of rows is selected. */
        this.selectedValueChange = new EventEmitter();
        /** Emits when a new value out of previousItems is selected. */
        this.selectedValueChangeToPrevious = new EventEmitter();
        /** Emits when a new value out of followingItems is selected. */
        this.selectedValueChangeToFollowing = new EventEmitter();
        this._destroyed = new Subject();
    }
    ngAfterViewInit() {
        this._cells.forEach(cell => this._focusMonitor.monitor(cell));
        this._cellsPrevious = this._cells;
        this._cells.changes.pipe(takeUntil(this._destroyed)).subscribe(changes => {
            this._cellsPrevious.forEach(cell => this._focusMonitor.stopMonitoring(cell));
            this._cellsPrevious = this._cells;
            this._cells.forEach(cell => this._focusMonitor.monitor(cell));
        });
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this._cells.forEach(cell => this._focusMonitor.stopMonitoring(cell));
    }
    _previousCellClicked(cell) {
        if (!this.allowDisabledSelection && !cell.enabled) {
            return;
        }
        this.selectedValueChangeToPrevious.emit(cell.value);
    }
    _cellClicked(cell) {
        if (!this.allowDisabledSelection && !cell.enabled) {
            return;
        }
        this.selectedValueChange.emit(cell.value);
    }
    _followingCellClicked(cell) {
        if (!this.allowDisabledSelection && !cell.enabled) {
            return;
        }
        this.selectedValueChangeToFollowing.emit(cell.value);
    }
    /** The number of blank cells to put at the beginning for the first row. */
    get _firstRowOffset() {
        var _a;
        return ((_a = this.rows) === null || _a === void 0 ? void 0 : _a.length) && this.rows[0].length ? this.numCols - this.rows[0].length : 0;
    }
    /** The number of blank cells to put at the end of the last filled row. */
    get _lastRowOffset() {
        var _a;
        return ((_a = this.rows) === null || _a === void 0 ? void 0 : _a.length) && this.rows[this.rows.length - 1].length ? this.numCols - this.rows[this.rows.length - 1].length : 0;
    }
    /** The index of the last row. */
    get _lastRowIndex() {
        var _a;
        return ((_a = this.rows) === null || _a === void 0 ? void 0 : _a.length) ? this.rows.length - 1 : 0;
    }
    /**
     * The following full rows to display and fill up the calendar.
     */
    get _followingRows() {
        var _a;
        if ((_a = this.followingItems) === null || _a === void 0 ? void 0 : _a.length) {
            // if first row is not a full row => display them in offset space
            if (this.followingItems[0].length < this.numCols) {
                return this.followingItems.slice(1, this.followingItems.length);
            }
            return this.followingItems;
        }
        return [];
    }
    _isActiveCell(rowIndex, colIndex) {
        let cellNumber = rowIndex * this.numCols + colIndex;
        // Account for the fact that the first row may not have as many cells.
        if (rowIndex) {
            cellNumber -= this._firstRowOffset;
        }
        return cellNumber === this.activeCell;
    }
    /** Focuses the active cell after the microtask queue is empty. */
    _focusActiveCell() {
        this._ngZone.runOutsideAngular(() => {
            this._ngZone.onStable
                .asObservable()
                .pipe(take(1))
                .subscribe(() => {
                this._elementRef.nativeElement.querySelector('.nx-calendar-body-active').focus();
            });
        });
    }
}
NxCalendarBodyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxCalendarBodyComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i4.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });
NxCalendarBodyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxCalendarBodyComponent, selector: "[nx-calendar-body]", inputs: { label: "label", rows: "rows", todayValue: "todayValue", selectedValue: "selectedValue", numCols: "numCols", allowDisabledSelection: "allowDisabledSelection", activeCell: "activeCell", previousItems: "previousItems", followingItems: "followingItems" }, outputs: { selectedValueChange: "selectedValueChange", selectedValueChangeToPrevious: "selectedValueChangeToPrevious", selectedValueChangeToFollowing: "selectedValueChangeToFollowing" }, host: { attributes: { "role": "grid", "attr.aria-readonly": "true" }, classAttribute: "nx-calendar-body" }, viewQueries: [{ propertyName: "_cells", predicate: ["cell"], descendants: true }], exportAs: ["nxCalendarBody"], ngImport: i0, template: "<!-- Create the first and last row separately so we can include special spacer cells. -->\n<tr *ngFor=\"let row of rows; let rowIndex = index\" role=\"row\">\n    <!--\n    We mark this cell as aria-hidden so it doesn't get read out as one of the days in the week.\n    The aspect ratio of the table cells is maintained by setting the top and bottom padding as a\n    percentage of the width (a variant of the trick described here:\n    https://www.w3schools.com/howto/howto_css_aspect_ratio.asp).\n  -->\n    <ng-container *ngIf=\"rowIndex === 0\">\n        <td\n            *ngFor=\"let item of previousItems\"\n            aria-hidden=\"true\"\n            class=\"nx-calendar-adjacent-cell\"\n            [class.nx-calendar-body-disabled]=\"!item.enabled\"\n            (click)=\"_previousCellClicked(item)\"\n        >\n            <div aria-hidden=\"true\" class=\"nx-calendar-adjacent-cell-content\"> {{ item.displayValue }} </div>\n        </td>\n    </ng-container>\n\n    <td\n        *ngFor=\"let item of row; let colIndex = index\"\n        #cell\n        role=\"gridcell\"\n        class=\"nx-calendar-body-cell\"\n        [tabindex]=\"_isActiveCell(rowIndex, colIndex) ? 0 : -1\"\n        [class.nx-calendar-body-disabled]=\"!item.enabled\"\n        [class.nx-calendar-body-active]=\"_isActiveCell(rowIndex, colIndex)\"\n        [attr.aria-label]=\"item.ariaLabel\"\n        [attr.aria-disabled]=\"!item.enabled || null\"\n        (click)=\"_cellClicked(item)\"\n        [style.width.%]=\"100 / numCols\"\n    >\n        <div\n            class=\"nx-calendar-body-cell-content\"\n            [class.nx-calendar-body-selected]=\"selectedValue === item.value\"\n            [class.nx-calendar-body-today]=\"todayValue === item.value\"\n        >\n            {{item.displayValue}}\n        </div>\n    </td>\n\n    <ng-container *ngIf=\"rowIndex === _lastRowIndex && _lastRowOffset\">\n        <td\n            *ngFor=\"let item of followingItems[0]\"\n            aria-hidden=\"true\"\n            class=\"nx-calendar-adjacent-cell\"\n            [class.nx-calendar-body-disabled]=\"!item.enabled\"\n            (click)=\"_followingCellClicked(item)\"\n        >\n            <div aria-hidden=\"true\" class=\"nx-calendar-adjacent-cell-content\"> {{ item.displayValue }} </div>\n        </td>\n    </ng-container>\n</tr>\n\n<!-- \n  if there are still elements remaining in 'following-elements', then create some extra rows\n  to fill up the space\n-->\n<tr *ngFor=\"let row of _followingRows\" aria-hidden=\"true\">\n    <td *ngFor=\"let item of row\" class=\"nx-calendar-adjacent-cell\" [class.nx-calendar-body-disabled]=\"!item.enabled\" (click)=\"_followingCellClicked(item)\">\n        <div class=\"nx-calendar-adjacent-cell-content\"> {{ item.displayValue }} </div>\n    </td>\n</tr>\n", styles: [".nx-calendar-body-cell,.nx-calendar-adjacent-cell{position:relative;height:0;line-height:0;text-align:center;outline:none;vertical-align:text-bottom;cursor:pointer}.nx-calendar-body-disabled{cursor:default}.nx-calendar-body-cell-content{display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:40px;height:40px;margin:0 auto;font-size:var(--datefield-cell-font-size);line-height:var(--datefield-cell-line-height);font-weight:var(--datefield-cell-font-weight);letter-spacing:var(--datefield-cell-letter-spacing);color:var(--datefield-cell-color);border-radius:50%;line-height:1;box-shadow:0 0 0 6px transparent}@media screen and (-ms-high-contrast: active){.nx-calendar-body-cell-content{color:buttonText}}.nx-calendar-body-cell-content.nx-calendar-body-selected{color:var(--datefield-cell-selected-color);background-color:var(--datefield-cell-selected-background-color)}@media screen and (-ms-high-contrast: active){.nx-calendar-body-cell-content.nx-calendar-body-selected{-ms-high-contrast-adjust:none;background-color:highlight;color:highlightText}}.nx-calendar-body-cell-content.nx-calendar-body-today{color:var(--datefield-controls-color)!important}.nx-calendar-body-cell-content.nx-calendar-body-today:after{content:\"\";display:block;position:absolute;width:4px;height:4px;margin-top:24px;background-color:var(--datefield-controls-color);border-radius:50%}.nx-calendar-body-cell-content.nx-calendar-body-today.nx-calendar-body-selected{color:var(--datefield-cell-selected-color)!important}.nx-calendar-body-cell-content.nx-calendar-body-today.nx-calendar-body-selected:after{background-color:var(--datefield-cell-selected-color)}.nx-calendar-body-disabled>.nx-calendar-body-cell-content:not(.nx-calendar-body-selected){color:var(--datefield-cell-disabled-color);font-weight:400}@media screen and (-ms-high-contrast: active){.nx-calendar-body-disabled>.nx-calendar-body-cell-content:not(.nx-calendar-body-selected){color:GrayText}}:not(.nx-calendar-body-disabled):hover>.nx-calendar-body-cell-content:not(.nx-calendar-body-selected),:not(.nx-calendar-body-disabled):hover>.nx-calendar-adjacent-cell-content,.nx-calendar-body-active:not(.nx-calendar-body-disabled)>.nx-calendar-body-cell-content:not(.nx-calendar-body-selected),.nx-calendar-body-active:not(.nx-calendar-body-disabled)>.nx-calendar-adjacent-cell-content{color:var(--datefield-cell-hover-color);background-color:var(--datefield-cell-hover-background-color)}@media screen and (-ms-high-contrast: active){:not(.nx-calendar-body-disabled):hover>.nx-calendar-body-cell-content:not(.nx-calendar-body-selected),:not(.nx-calendar-body-disabled):hover>.nx-calendar-adjacent-cell-content,.nx-calendar-body-active:not(.nx-calendar-body-disabled)>.nx-calendar-body-cell-content:not(.nx-calendar-body-selected),.nx-calendar-body-active:not(.nx-calendar-body-disabled)>.nx-calendar-adjacent-cell-content{-ms-high-contrast-adjust:none;background-color:highlight;color:highlightText}}.nx-calendar-body-cell.cdk-keyboard-focused .nx-calendar-body-cell-content{box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-calendar-body-cell.cdk-keyboard-focused .nx-calendar-body-cell-content{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}.nx-calendar-body-cell.cdk-keyboard-focused.nx-calendar-body-disabled .nx-calendar-body-cell-content{color:var(--datefield-cell-disabled-color)}.nx-calendar-body-cell.cdk-keyboard-focused .nx-calendar-body-cell-content:not(.nx-calendar-body-selected){background-color:var(--datefield-cell-focused-background-color)}@media screen and (-ms-high-contrast: active){.nx-calendar-body-cell.cdk-keyboard-focused .nx-calendar-body-cell-content:not(.nx-calendar-body-selected){background-color:highlight}}.nx-calendar-adjacent-cell-content{display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:40px;height:40px;margin:0 auto;font-size:var(--datefield-cell-font-size);line-height:var(--datefield-cell-line-height);font-weight:var(--datefield-cell-font-weight);letter-spacing:var(--datefield-cell-letter-spacing);font-weight:400;color:var(--datefield-cell-disabled-color);border-radius:50%;line-height:1}@media screen and (-ms-high-contrast: active){.nx-calendar-adjacent-cell-content{color:GrayText}}\n"], directives: [{ type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxCalendarBodyComponent, decorators: [{
            type: Component,
            args: [{ selector: '[nx-calendar-body]', host: {
                        class: 'nx-calendar-body',
                        role: 'grid',
                        'attr.aria-readonly': 'true',
                    }, exportAs: 'nxCalendarBody', changeDetection: ChangeDetectionStrategy.OnPush, template: "<!-- Create the first and last row separately so we can include special spacer cells. -->\n<tr *ngFor=\"let row of rows; let rowIndex = index\" role=\"row\">\n    <!--\n    We mark this cell as aria-hidden so it doesn't get read out as one of the days in the week.\n    The aspect ratio of the table cells is maintained by setting the top and bottom padding as a\n    percentage of the width (a variant of the trick described here:\n    https://www.w3schools.com/howto/howto_css_aspect_ratio.asp).\n  -->\n    <ng-container *ngIf=\"rowIndex === 0\">\n        <td\n            *ngFor=\"let item of previousItems\"\n            aria-hidden=\"true\"\n            class=\"nx-calendar-adjacent-cell\"\n            [class.nx-calendar-body-disabled]=\"!item.enabled\"\n            (click)=\"_previousCellClicked(item)\"\n        >\n            <div aria-hidden=\"true\" class=\"nx-calendar-adjacent-cell-content\"> {{ item.displayValue }} </div>\n        </td>\n    </ng-container>\n\n    <td\n        *ngFor=\"let item of row; let colIndex = index\"\n        #cell\n        role=\"gridcell\"\n        class=\"nx-calendar-body-cell\"\n        [tabindex]=\"_isActiveCell(rowIndex, colIndex) ? 0 : -1\"\n        [class.nx-calendar-body-disabled]=\"!item.enabled\"\n        [class.nx-calendar-body-active]=\"_isActiveCell(rowIndex, colIndex)\"\n        [attr.aria-label]=\"item.ariaLabel\"\n        [attr.aria-disabled]=\"!item.enabled || null\"\n        (click)=\"_cellClicked(item)\"\n        [style.width.%]=\"100 / numCols\"\n    >\n        <div\n            class=\"nx-calendar-body-cell-content\"\n            [class.nx-calendar-body-selected]=\"selectedValue === item.value\"\n            [class.nx-calendar-body-today]=\"todayValue === item.value\"\n        >\n            {{item.displayValue}}\n        </div>\n    </td>\n\n    <ng-container *ngIf=\"rowIndex === _lastRowIndex && _lastRowOffset\">\n        <td\n            *ngFor=\"let item of followingItems[0]\"\n            aria-hidden=\"true\"\n            class=\"nx-calendar-adjacent-cell\"\n            [class.nx-calendar-body-disabled]=\"!item.enabled\"\n            (click)=\"_followingCellClicked(item)\"\n        >\n            <div aria-hidden=\"true\" class=\"nx-calendar-adjacent-cell-content\"> {{ item.displayValue }} </div>\n        </td>\n    </ng-container>\n</tr>\n\n<!-- \n  if there are still elements remaining in 'following-elements', then create some extra rows\n  to fill up the space\n-->\n<tr *ngFor=\"let row of _followingRows\" aria-hidden=\"true\">\n    <td *ngFor=\"let item of row\" class=\"nx-calendar-adjacent-cell\" [class.nx-calendar-body-disabled]=\"!item.enabled\" (click)=\"_followingCellClicked(item)\">\n        <div class=\"nx-calendar-adjacent-cell-content\"> {{ item.displayValue }} </div>\n    </td>\n</tr>\n", styles: [".nx-calendar-body-cell,.nx-calendar-adjacent-cell{position:relative;height:0;line-height:0;text-align:center;outline:none;vertical-align:text-bottom;cursor:pointer}.nx-calendar-body-disabled{cursor:default}.nx-calendar-body-cell-content{display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:40px;height:40px;margin:0 auto;font-size:var(--datefield-cell-font-size);line-height:var(--datefield-cell-line-height);font-weight:var(--datefield-cell-font-weight);letter-spacing:var(--datefield-cell-letter-spacing);color:var(--datefield-cell-color);border-radius:50%;line-height:1;box-shadow:0 0 0 6px transparent}@media screen and (-ms-high-contrast: active){.nx-calendar-body-cell-content{color:buttonText}}.nx-calendar-body-cell-content.nx-calendar-body-selected{color:var(--datefield-cell-selected-color);background-color:var(--datefield-cell-selected-background-color)}@media screen and (-ms-high-contrast: active){.nx-calendar-body-cell-content.nx-calendar-body-selected{-ms-high-contrast-adjust:none;background-color:highlight;color:highlightText}}.nx-calendar-body-cell-content.nx-calendar-body-today{color:var(--datefield-controls-color)!important}.nx-calendar-body-cell-content.nx-calendar-body-today:after{content:\"\";display:block;position:absolute;width:4px;height:4px;margin-top:24px;background-color:var(--datefield-controls-color);border-radius:50%}.nx-calendar-body-cell-content.nx-calendar-body-today.nx-calendar-body-selected{color:var(--datefield-cell-selected-color)!important}.nx-calendar-body-cell-content.nx-calendar-body-today.nx-calendar-body-selected:after{background-color:var(--datefield-cell-selected-color)}.nx-calendar-body-disabled>.nx-calendar-body-cell-content:not(.nx-calendar-body-selected){color:var(--datefield-cell-disabled-color);font-weight:400}@media screen and (-ms-high-contrast: active){.nx-calendar-body-disabled>.nx-calendar-body-cell-content:not(.nx-calendar-body-selected){color:GrayText}}:not(.nx-calendar-body-disabled):hover>.nx-calendar-body-cell-content:not(.nx-calendar-body-selected),:not(.nx-calendar-body-disabled):hover>.nx-calendar-adjacent-cell-content,.nx-calendar-body-active:not(.nx-calendar-body-disabled)>.nx-calendar-body-cell-content:not(.nx-calendar-body-selected),.nx-calendar-body-active:not(.nx-calendar-body-disabled)>.nx-calendar-adjacent-cell-content{color:var(--datefield-cell-hover-color);background-color:var(--datefield-cell-hover-background-color)}@media screen and (-ms-high-contrast: active){:not(.nx-calendar-body-disabled):hover>.nx-calendar-body-cell-content:not(.nx-calendar-body-selected),:not(.nx-calendar-body-disabled):hover>.nx-calendar-adjacent-cell-content,.nx-calendar-body-active:not(.nx-calendar-body-disabled)>.nx-calendar-body-cell-content:not(.nx-calendar-body-selected),.nx-calendar-body-active:not(.nx-calendar-body-disabled)>.nx-calendar-adjacent-cell-content{-ms-high-contrast-adjust:none;background-color:highlight;color:highlightText}}.nx-calendar-body-cell.cdk-keyboard-focused .nx-calendar-body-cell-content{box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-calendar-body-cell.cdk-keyboard-focused .nx-calendar-body-cell-content{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}.nx-calendar-body-cell.cdk-keyboard-focused.nx-calendar-body-disabled .nx-calendar-body-cell-content{color:var(--datefield-cell-disabled-color)}.nx-calendar-body-cell.cdk-keyboard-focused .nx-calendar-body-cell-content:not(.nx-calendar-body-selected){background-color:var(--datefield-cell-focused-background-color)}@media screen and (-ms-high-contrast: active){.nx-calendar-body-cell.cdk-keyboard-focused .nx-calendar-body-cell-content:not(.nx-calendar-body-selected){background-color:highlight}}.nx-calendar-adjacent-cell-content{display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:40px;height:40px;margin:0 auto;font-size:var(--datefield-cell-font-size);line-height:var(--datefield-cell-line-height);font-weight:var(--datefield-cell-font-weight);letter-spacing:var(--datefield-cell-letter-spacing);font-weight:400;color:var(--datefield-cell-disabled-color);border-radius:50%;line-height:1}@media screen and (-ms-high-contrast: active){.nx-calendar-adjacent-cell-content{color:GrayText}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i4.FocusMonitor }]; }, propDecorators: { label: [{
                type: Input
            }], rows: [{
                type: Input
            }], todayValue: [{
                type: Input
            }], selectedValue: [{
                type: Input
            }], numCols: [{
                type: Input
            }], allowDisabledSelection: [{
                type: Input
            }], activeCell: [{
                type: Input
            }], previousItems: [{
                type: Input
            }], followingItems: [{
                type: Input
            }], selectedValueChange: [{
                type: Output
            }], selectedValueChangeToPrevious: [{
                type: Output
            }], selectedValueChangeToFollowing: [{
                type: Output
            }], _cells: [{
                type: ViewChildren,
                args: ['cell']
            }] } });

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const DAYS_PER_WEEK = 7;
const TOTAL_DAYS_TO_DISPLAY = 6 * DAYS_PER_WEEK;
/**
 * An internal component used to display a single month in the datepicker.
 * @docs-private
 */
class NxMonthViewComponent {
    constructor(_cdr, _dateFormats, _dateAdapter, _dir) {
        this._cdr = _cdr;
        this._dir = _dir;
        /** Emits when a new date is selected. */
        this.selectedChange = new EventEmitter();
        /** Emits when any date is selected. */
        this._userSelection = new EventEmitter();
        /** Emits when any date is activated. */
        this.activeDateChange = new EventEmitter();
        /** Number of days that should be displayed in one row. */
        this._numCols = 7;
        if (!_dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
        this._dateAdapter = _dateAdapter;
        if (!_dateFormats) {
            throw createMissingDateImplError('MAT_DATE_FORMATS');
        }
        this._dateFormats = _dateFormats;
        const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();
        const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');
        const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');
        // Rotate the labels for days of the week based on the configured first day of the week.
        const weekdays = longWeekdays.map((long, i) => ({ long, narrow: narrowWeekdays[i] }));
        this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));
        this._activeDate = this._dateAdapter.today();
    }
    /**
     * The date to display in this month view (everything other than the month and year is ignored).
     */
    get activeDate() {
        return this._activeDate;
    }
    set activeDate(value) {
        const oldActiveDate = this._activeDate;
        const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();
        this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
        if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {
            this._init();
        }
    }
    /** The currently selected date. */
    get selected() {
        return this._selected;
    }
    set selected(value) {
        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
        this._selectedDate = this._getDateInCurrentMonth(this._selected);
    }
    /** The minimum selectable date. */
    get minDate() {
        return this._minDate;
    }
    set minDate(value) {
        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
    }
    /** The maximum selectable date. */
    get maxDate() {
        return this._maxDate;
    }
    set maxDate(value) {
        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
    }
    ngAfterContentInit() {
        this._init();
        this._focusActiveCell();
    }
    /** Handles when a new date is selected. */
    _dateSelected(date, monthsToAdd = 0) {
        if (this._selectedDate !== date) {
            const selectedYear = this._dateAdapter.getYear(this._dateAdapter.addCalendarMonths(this.activeDate, monthsToAdd));
            const selectedMonth = this._dateAdapter.getMonth(this._dateAdapter.addCalendarMonths(this.activeDate, monthsToAdd));
            const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);
            this.selectedChange.emit(selectedDate);
        }
        this._userSelection.emit();
    }
    /** Handles keydown events on the calendar body when calendar is in month view. */
    _handleCalendarBodyKeydown(event) {
        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
        // disabled ones from being selected. This may not be ideal, we should look into whether
        // navigation should skip over disabled dates, and if so, how to implement that efficiently.
        const oldActiveDate = this._activeDate;
        const isRtl = this._isRtl();
        switch (event.keyCode) {
            case LEFT_ARROW:
                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);
                break;
            case RIGHT_ARROW:
                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);
                break;
            case UP_ARROW:
                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -this._numCols);
                break;
            case DOWN_ARROW:
                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, this._numCols);
                break;
            case HOME:
                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1 - this._dateAdapter.getDate(this._activeDate));
                break;
            case END:
                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, this._dateAdapter.getNumDaysInMonth(this._activeDate) - this._dateAdapter.getDate(this._activeDate));
                break;
            case PAGE_UP:
                this.activeDate = event.altKey
                    ? this._dateAdapter.addCalendarYears(this._activeDate, -1)
                    : this._dateAdapter.addCalendarMonths(this._activeDate, -1);
                break;
            case PAGE_DOWN:
                this.activeDate = event.altKey
                    ? this._dateAdapter.addCalendarYears(this._activeDate, 1)
                    : this._dateAdapter.addCalendarMonths(this._activeDate, 1);
                break;
            case ENTER:
                if (!this.dateFilter || this.dateFilter(this._activeDate)) {
                    this._dateSelected(this._dateAdapter.getDate(this._activeDate));
                    this._userSelection.emit();
                    // Prevent unexpected default actions such as form submission.
                    event.preventDefault();
                }
                return;
            default:
                // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                return;
        }
        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {
            this.activeDateChange.emit(this.activeDate);
        }
        this._focusActiveCell();
        // Prevent unexpected default actions such as form submission.
        event.preventDefault();
    }
    /** Initializes this month view. */
    _init() {
        this._selectedDate = this._getDateInCurrentMonth(this.selected);
        this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());
        this._monthLabel = this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)].toLocaleUpperCase();
        const firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);
        this._firstWeekOffset = (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) - this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;
        this._createWeekCells();
        this._cdr.markForCheck();
    }
    /** Focuses the active cell after the microtask queue is empty. */
    _focusActiveCell() {
        this._nxCalendarBody._focusActiveCell();
    }
    /** Creates NxCalendarCells for the dates in this month. */
    _createWeekCells() {
        const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);
        const dateNames = this._dateAdapter.getDateNames();
        this._weeks = [[]];
        for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {
            if (cell === DAYS_PER_WEEK) {
                this._weeks.push([]);
                cell = 0;
            }
            const date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), i + 1);
            const enabled = this._shouldEnableDate(date);
            const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);
            this._weeks[this._weeks.length - 1].push(new NxCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));
        }
    }
    /** Date filter for the month */
    _shouldEnableDate(date) {
        return (!!date &&
            (!this.dateFilter || this.dateFilter(date)) &&
            (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&
            (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0));
    }
    /**
     * Gets the date in this month that the given Date falls on.
     * Returns null if the given Date is in another month.
     */
    _getDateInCurrentMonth(date) {
        return date && this._hasSameMonthAndYear(date, this.activeDate) ? this._dateAdapter.getDate(date) : null;
    }
    /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */
    _hasSameMonthAndYear(d1, d2) {
        return !!(d1 &&
            d2 &&
            this._dateAdapter.getMonth(d1) === this._dateAdapter.getMonth(d2) &&
            this._dateAdapter.getYear(d1) === this._dateAdapter.getYear(d2));
    }
    /**
     * @param obj The object to check.
     * @returns The given object if it is both a date instance and valid, otherwise null.
     */
    _getValidDateOrNull(obj) {
        return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;
    }
    /** Determines whether the user has the RTL layout direction. */
    _isRtl() {
        return this._dir && this._dir.value === 'rtl';
    }
    /**
     * The last days of the previous month that should be displayed
     * in the first row of the calendar.
     */
    _getLastDaysOfPreviousMonth() {
        const firstDayOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);
        const firstDayOfPreviousItems = this._dateAdapter.addCalendarDays(firstDayOfMonth, -this._firstWeekOffset);
        return this._getRowOfDays(firstDayOfPreviousItems, this._firstWeekOffset);
    }
    /**
     * The first days of the following month that should be displayed
     * after the days of the current month. After filling up the last
     * row of the current month, additional rows are added, so that a
     * total of 42 days (6 rows/weeks) is displayed.
     */
    _getFirstDaysOfFollowingMonth() {
        const followingDays = [];
        const firstDayOfNextMonth = this._dateAdapter.addCalendarMonths(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1), 1);
        // there should be displayed a total of 7 * 6 items
        const followingDaysCount = TOTAL_DAYS_TO_DISPLAY - this._firstWeekOffset - this._dateAdapter.getNumDaysInMonth(this.activeDate);
        const offsetItems = followingDaysCount % 7;
        // add a non-full row to following rows.
        // These items will fill up the last incomplete row of the current month.
        if (offsetItems > 0) {
            const offsetRow = this._getRowOfDays(firstDayOfNextMonth, offsetItems);
            followingDays.push(offsetRow);
        }
        let remainingDays = followingDaysCount - offsetItems;
        let firstDayInRow = this._dateAdapter.addCalendarDays(firstDayOfNextMonth, offsetItems);
        // fill remaining rows if needed
        while (remainingDays > 0) {
            followingDays.push(this._getRowOfDays(firstDayInRow, this._numCols));
            firstDayInRow = this._dateAdapter.addCalendarDays(firstDayInRow, this._numCols);
            remainingDays -= this._numCols;
        }
        return followingDays;
    }
    /**
     * Returns a row with days, beginning with the date of `firstDayInRow`-parameter.
     * The returned row contains `daysCount` elements.
     */
    _getRowOfDays(firstDayInRow, daysCount) {
        const nextRow = [];
        const dateNames = this._dateAdapter.getDateNames();
        for (let addDays = 0; addDays < daysCount; addDays++) {
            const date = this._dateAdapter.addCalendarDays(firstDayInRow, addDays);
            const day = this._dateAdapter.getDate(date);
            const enabled = this._shouldEnableDate(date);
            const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);
            nextRow.push(new NxCalendarCell(day, dateNames[day - 1], ariaLabel, enabled));
        }
        return nextRow;
    }
}
NxMonthViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxMonthViewComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: NX_DATE_FORMATS, optional: true }, { token: NxDateAdapter, optional: true }, { token: i2$2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NxMonthViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxMonthViewComponent, selector: "nx-month-view", inputs: { activeDate: "activeDate", selected: "selected", minDate: "minDate", maxDate: "maxDate", dateFilter: "dateFilter" }, outputs: { selectedChange: "selectedChange", _userSelection: "_userSelection", activeDateChange: "activeDateChange" }, viewQueries: [{ propertyName: "_nxCalendarBody", first: true, predicate: NxCalendarBodyComponent, descendants: true, static: true }], exportAs: ["nxMonthView"], ngImport: i0, template: "<table class=\"nx-calendar-table\">\n    <thead class=\"nx-calendar-table-head\">\n        <tr> <th class=\"nx-calendar-table-header\" *ngFor=\"let day of _weekdays\" [attr.aria-label]=\"day.long\">{{day.narrow}}</th></tr>\n        <tr> </tr\n    ></thead>\n\n    <tbody\n        nx-calendar-body\n        [label]=\"_monthLabel\"\n        [rows]=\"_weeks\"\n        [previousItems]=\"_getLastDaysOfPreviousMonth()\"\n        [followingItems]=\"_getFirstDaysOfFollowingMonth()\"\n        [todayValue]=\"_todayDate!\"\n        [numCols]=\"_numCols\"\n        [selectedValue]=\"_selectedDate!\"\n        [activeCell]=\"_dateAdapter.getDate(activeDate) - 1\"\n        (selectedValueChange)=\"_dateSelected($event)\"\n        (selectedValueChangeToPrevious)=\"_dateSelected($event, -1)\"\n        (selectedValueChangeToFollowing)=\"_dateSelected($event, 1)\"\n        (keydown)=\"_handleCalendarBodyKeydown($event)\"\n    >\n    </tbody>\n</table>\n", styles: [".nx-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.nx-calendar-table-header{font-size:var(--datefield-cell-font-size);line-height:var(--datefield-cell-line-height);font-weight:var(--datefield-cell-font-weight);letter-spacing:var(--datefield-cell-letter-spacing);color:var(--datefield-header-cell-color);text-align:center;height:40px}\n"], components: [{ type: NxCalendarBodyComponent, selector: "[nx-calendar-body]", inputs: ["label", "rows", "todayValue", "selectedValue", "numCols", "allowDisabledSelection", "activeCell", "previousItems", "followingItems"], outputs: ["selectedValueChange", "selectedValueChangeToPrevious", "selectedValueChangeToFollowing"], exportAs: ["nxCalendarBody"] }], directives: [{ type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxMonthViewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-month-view', exportAs: 'nxMonthView', changeDetection: ChangeDetectionStrategy.OnPush, template: "<table class=\"nx-calendar-table\">\n    <thead class=\"nx-calendar-table-head\">\n        <tr> <th class=\"nx-calendar-table-header\" *ngFor=\"let day of _weekdays\" [attr.aria-label]=\"day.long\">{{day.narrow}}</th></tr>\n        <tr> </tr\n    ></thead>\n\n    <tbody\n        nx-calendar-body\n        [label]=\"_monthLabel\"\n        [rows]=\"_weeks\"\n        [previousItems]=\"_getLastDaysOfPreviousMonth()\"\n        [followingItems]=\"_getFirstDaysOfFollowingMonth()\"\n        [todayValue]=\"_todayDate!\"\n        [numCols]=\"_numCols\"\n        [selectedValue]=\"_selectedDate!\"\n        [activeCell]=\"_dateAdapter.getDate(activeDate) - 1\"\n        (selectedValueChange)=\"_dateSelected($event)\"\n        (selectedValueChangeToPrevious)=\"_dateSelected($event, -1)\"\n        (selectedValueChangeToFollowing)=\"_dateSelected($event, 1)\"\n        (keydown)=\"_handleCalendarBodyKeydown($event)\"\n    >\n    </tbody>\n</table>\n", styles: [".nx-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.nx-calendar-table-header{font-size:var(--datefield-cell-font-size);line-height:var(--datefield-cell-line-height);font-weight:var(--datefield-cell-font-weight);letter-spacing:var(--datefield-cell-letter-spacing);color:var(--datefield-header-cell-color);text-align:center;height:40px}\n"] }]
        }], ctorParameters: function () {
        return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [NX_DATE_FORMATS]
                    }] }, { type: NxDateAdapter, decorators: [{
                        type: Optional
                    }] }, { type: i2$2.Directionality, decorators: [{
                        type: Optional
                    }] }];
    }, propDecorators: { activeDate: [{
                type: Input
            }], selected: [{
                type: Input
            }], minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], dateFilter: [{
                type: Input
            }], selectedChange: [{
                type: Output
            }], _userSelection: [{
                type: Output
            }], activeDateChange: [{
                type: Output
            }], _nxCalendarBody: [{
                type: ViewChild,
                args: [NxCalendarBodyComponent, { static: true }]
            }] } });

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const yearsPerPage$1 = 20;
const yearsPerRow = 4;
/**
 * An internal component used to display a year selector in the datepicker.
 * @docs-private
 */
class NxMultiYearViewComponent {
    constructor(_cdr, _dateAdapter, _dir) {
        this._cdr = _cdr;
        this._dir = _dir;
        /** Emits when a new year is selected. */
        this.selectedChange = new EventEmitter();
        /** Emits the selected year. This doesn't imply a change on the selected date */
        this.yearSelected = new EventEmitter();
        /** Emits when any date is activated. */
        this.activeDateChange = new EventEmitter();
        if (!_dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
        this._dateAdapter = _dateAdapter;
        this._activeDate = this._dateAdapter.today();
    }
    /** The date to display in this multi-year view (everything other than the year is ignored). */
    get activeDate() {
        return this._activeDate;
    }
    set activeDate(value) {
        const oldActiveDate = this._activeDate;
        const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();
        this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
        if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage$1) !== Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage$1)) {
            this._init();
        }
    }
    /** The currently selected date. */
    get selected() {
        return this._selected;
    }
    set selected(value) {
        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
        this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);
    }
    /** The minimum selectable date. */
    get minDate() {
        return this._minDate;
    }
    set minDate(value) {
        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
    }
    /** The maximum selectable date. */
    get maxDate() {
        return this._maxDate;
    }
    set maxDate(value) {
        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
    }
    ngAfterContentInit() {
        this._init();
        this._focusActiveCell();
    }
    /** Initializes this multi-year view. */
    _init() {
        this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());
        const activeYear = this._dateAdapter.getYear(this._activeDate);
        const activeOffset = activeYear % yearsPerPage$1;
        this._years = [];
        for (let i = 0, row = []; i < yearsPerPage$1; i++) {
            row.push(activeYear - activeOffset + i);
            if (row.length === yearsPerRow) {
                this._years.push(row.map(year => this._createCellForYear(year)));
                row = [];
            }
        }
        this._cdr.markForCheck();
    }
    /** Handles when a new year is selected. */
    _yearSelected(year) {
        this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));
        const month = this._dateAdapter.getMonth(this.activeDate);
        const daysInMonth = this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));
        this.selectedChange.emit(this._dateAdapter.createDate(year, month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));
    }
    /** Handles keydown events on the calendar body when calendar is in multi-year view. */
    _handleCalendarBodyKeydown(event) {
        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
        // disabled ones from being selected. This may not be ideal, we should look into whether
        // navigation should skip over disabled dates, and if so, how to implement that efficiently.
        const oldActiveDate = this._activeDate;
        const isRtl = this._isRtl();
        switch (event.keyCode) {
            case LEFT_ARROW:
                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);
                break;
            case RIGHT_ARROW:
                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);
                break;
            case UP_ARROW:
                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);
                break;
            case DOWN_ARROW:
                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);
                break;
            case HOME:
                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -this._dateAdapter.getYear(this._activeDate) % yearsPerPage$1);
                break;
            case END:
                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerPage$1 - (this._dateAdapter.getYear(this._activeDate) % yearsPerPage$1) - 1);
                break;
            case PAGE_UP:
                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -yearsPerPage$1 * 10 : -yearsPerPage$1);
                break;
            case PAGE_DOWN:
                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? yearsPerPage$1 * 10 : yearsPerPage$1);
                break;
            case ENTER:
                this._yearSelected(this._dateAdapter.getYear(this._activeDate));
                break;
            default:
                // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                return;
        }
        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {
            this.activeDateChange.emit(this.activeDate);
        }
        this._focusActiveCell();
        // Prevent unexpected default actions such as form submission.
        event.preventDefault();
    }
    _getActiveCell() {
        return this._dateAdapter.getYear(this.activeDate) % yearsPerPage$1;
    }
    /** Focuses the active cell after the microtask queue is empty. */
    _focusActiveCell() {
        this._nxCalendarBody._focusActiveCell();
    }
    /** Creates an NxCalendarCell for the given year. */
    _createCellForYear(year) {
        const yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));
        return new NxCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));
    }
    /** Whether the given year is enabled. */
    _shouldEnableYear(year) {
        // disable if the year is greater than maxDate lower than minDate
        if (year === undefined ||
            year === null ||
            (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||
            (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {
            return false;
        }
        // enable if it reaches here and there's no filter defined
        if (!this.dateFilter) {
            return true;
        }
        const firstOfYear = this._dateAdapter.createDate(year, 0, 1);
        // If any date in the year is enabled count the year as enabled.
        for (let date = firstOfYear; this._dateAdapter.getYear(date) === year; date = this._dateAdapter.addCalendarDays(date, 1)) {
            if (this.dateFilter(date)) {
                return true;
            }
        }
        return false;
    }
    /**
     * @param obj The object to check.
     * @returns The given object if it is both a date instance and valid, otherwise null.
     */
    _getValidDateOrNull(obj) {
        return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;
    }
    /** Determines whether the user has the RTL layout direction. */
    _isRtl() {
        return this._dir && this._dir.value === 'rtl';
    }
}
NxMultiYearViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxMultiYearViewComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: NxDateAdapter, optional: true }, { token: i2$2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NxMultiYearViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxMultiYearViewComponent, selector: "nx-multi-year-view", inputs: { activeDate: "activeDate", selected: "selected", minDate: "minDate", maxDate: "maxDate", dateFilter: "dateFilter" }, outputs: { selectedChange: "selectedChange", yearSelected: "yearSelected", activeDateChange: "activeDateChange" }, viewQueries: [{ propertyName: "_nxCalendarBody", first: true, predicate: NxCalendarBodyComponent, descendants: true, static: true }], exportAs: ["nxMultiYearView"], ngImport: i0, template: "<table class=\"nx-calendar-table\">\n    <tbody\n        nx-calendar-body\n        [rows]=\"_years\"\n        [todayValue]=\"_todayYear\"\n        [selectedValue]=\"_selectedYear!\"\n        [numCols]=\"4\"\n        [activeCell]=\"_getActiveCell()\"\n        (selectedValueChange)=\"_yearSelected($event)\"\n        (keydown)=\"_handleCalendarBodyKeydown($event)\"\n    >\n    </tbody>\n</table>\n", styles: [".nx-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}:host ::ng-deep .nx-calendar-body .nx-calendar-body-cell-content{margin:0 17.3333333333px 8px}@media (max-width: 703px){:host ::ng-deep .nx-calendar-body .nx-calendar-body-cell-content{margin:0 12px 8px}}:host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:first-child .nx-calendar-body-cell-content{margin-left:8px}@media (max-width: 703px){:host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:first-child .nx-calendar-body-cell-content{margin-left:16px}}[dir=rtl] :host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:first-child .nx-calendar-body-cell-content{margin-right:8px;margin-left:17.3333333333px}@media (max-width: 703px){[dir=rtl] :host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:first-child .nx-calendar-body-cell-content{margin-right:12px;margin-left:12px}}:host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:last-child .nx-calendar-body-cell-content{margin-right:8px}@media (max-width: 703px){:host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:last-child .nx-calendar-body-cell-content{margin-right:16px}}[dir=rtl] :host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:last-child .nx-calendar-body-cell-content{margin-right:17.3333333333px;margin-left:8px}@media (max-width: 703px){[dir=rtl] :host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:last-child .nx-calendar-body-cell-content{margin-right:12px;margin-left:12px}}\n"], components: [{ type: NxCalendarBodyComponent, selector: "[nx-calendar-body]", inputs: ["label", "rows", "todayValue", "selectedValue", "numCols", "allowDisabledSelection", "activeCell", "previousItems", "followingItems"], outputs: ["selectedValueChange", "selectedValueChangeToPrevious", "selectedValueChangeToFollowing"], exportAs: ["nxCalendarBody"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxMultiYearViewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-multi-year-view', exportAs: 'nxMultiYearView', changeDetection: ChangeDetectionStrategy.OnPush, template: "<table class=\"nx-calendar-table\">\n    <tbody\n        nx-calendar-body\n        [rows]=\"_years\"\n        [todayValue]=\"_todayYear\"\n        [selectedValue]=\"_selectedYear!\"\n        [numCols]=\"4\"\n        [activeCell]=\"_getActiveCell()\"\n        (selectedValueChange)=\"_yearSelected($event)\"\n        (keydown)=\"_handleCalendarBodyKeydown($event)\"\n    >\n    </tbody>\n</table>\n", styles: [".nx-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}:host ::ng-deep .nx-calendar-body .nx-calendar-body-cell-content{margin:0 17.3333333333px 8px}@media (max-width: 703px){:host ::ng-deep .nx-calendar-body .nx-calendar-body-cell-content{margin:0 12px 8px}}:host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:first-child .nx-calendar-body-cell-content{margin-left:8px}@media (max-width: 703px){:host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:first-child .nx-calendar-body-cell-content{margin-left:16px}}[dir=rtl] :host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:first-child .nx-calendar-body-cell-content{margin-right:8px;margin-left:17.3333333333px}@media (max-width: 703px){[dir=rtl] :host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:first-child .nx-calendar-body-cell-content{margin-right:12px;margin-left:12px}}:host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:last-child .nx-calendar-body-cell-content{margin-right:8px}@media (max-width: 703px){:host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:last-child .nx-calendar-body-cell-content{margin-right:16px}}[dir=rtl] :host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:last-child .nx-calendar-body-cell-content{margin-right:17.3333333333px;margin-left:8px}@media (max-width: 703px){[dir=rtl] :host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:last-child .nx-calendar-body-cell-content{margin-right:12px;margin-left:12px}}\n"] }]
        }], ctorParameters: function () {
        return [{ type: i0.ChangeDetectorRef }, { type: NxDateAdapter, decorators: [{
                        type: Optional
                    }] }, { type: i2$2.Directionality, decorators: [{
                        type: Optional
                    }] }];
    }, propDecorators: { activeDate: [{
                type: Input
            }], selected: [{
                type: Input
            }], minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], dateFilter: [{
                type: Input
            }], selectedChange: [{
                type: Output
            }], yearSelected: [{
                type: Output
            }], activeDateChange: [{
                type: Output
            }], _nxCalendarBody: [{
                type: ViewChild,
                args: [NxCalendarBodyComponent, { static: true }]
            }] } });

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * An internal component used to display a single year in the datepicker.
 * @docs-private
 */
class NxYearViewComponent {
    constructor(_cdr, _dateFormats, _dateAdapter, _dir) {
        this._cdr = _cdr;
        this._dir = _dir;
        /** Emits when a new month is selected. */
        this.selectedChange = new EventEmitter();
        /** Emits the selected month. This doesn't imply a change on the selected date */
        this.monthSelected = new EventEmitter();
        /** Emits when any date is activated. */
        this.activeDateChange = new EventEmitter();
        this._numCols = 3;
        if (!_dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
        this._dateAdapter = _dateAdapter;
        if (!_dateFormats) {
            throw createMissingDateImplError('MAT_DATE_FORMATS');
        }
        this._dateFormats = _dateFormats;
        this._activeDate = this._dateAdapter.today();
    }
    /** The date to display in this year view (everything other than the year is ignored). */
    get activeDate() {
        return this._activeDate;
    }
    set activeDate(value) {
        const oldActiveDate = this._activeDate;
        const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();
        this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
        if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {
            this._init();
        }
    }
    /** The currently selected date. */
    get selected() {
        return this._selected;
    }
    set selected(value) {
        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
        this._selectedMonth = this._getMonthInCurrentYear(this._selected);
    }
    /** The minimum selectable date. */
    get minDate() {
        return this._minDate;
    }
    set minDate(value) {
        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
    }
    /** The maximum selectable date. */
    get maxDate() {
        return this._maxDate;
    }
    set maxDate(value) {
        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
    }
    ngAfterContentInit() {
        this._init();
        this._focusActiveCell();
    }
    /** Handles when a new month is selected. */
    _monthSelected(month) {
        const normalizedDate = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);
        this.monthSelected.emit(normalizedDate);
        const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);
        this.selectedChange.emit(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));
    }
    /** Handles keydown events on the calendar body when calendar is in year view. */
    _handleCalendarBodyKeydown(event) {
        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
        // disabled ones from being selected. This may not be ideal, we should look into whether
        // navigation should skip over disabled dates, and if so, how to implement that efficiently.
        const oldActiveDate = this._activeDate;
        const isRtl = this._isRtl();
        switch (event.keyCode) {
            case LEFT_ARROW:
                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);
                break;
            case RIGHT_ARROW:
                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);
                break;
            case UP_ARROW:
                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -this._numCols);
                break;
            case DOWN_ARROW:
                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, this._numCols);
                break;
            case HOME:
                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -this._dateAdapter.getMonth(this._activeDate));
                break;
            case END:
                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 11 - this._dateAdapter.getMonth(this._activeDate));
                break;
            case PAGE_UP:
                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);
                break;
            case PAGE_DOWN:
                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);
                break;
            case ENTER:
                this._monthSelected(this._dateAdapter.getMonth(this._activeDate));
                break;
            default:
                // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                return;
        }
        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {
            this.activeDateChange.emit(this.activeDate);
        }
        this._focusActiveCell();
        // Prevent unexpected default actions such as form submission.
        event.preventDefault();
    }
    /** Initializes this year view. */
    _init() {
        this._selectedMonth = this._getMonthInCurrentYear(this.selected);
        this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());
        this._yearLabel = this._dateAdapter.getYearName(this.activeDate);
        const monthNames = this._dateAdapter.getMonthNames('short');
        this._months = [
            [0, 1, 2],
            [3, 4, 5],
            [6, 7, 8],
            [9, 10, 11],
        ].map(row => row.map(month => this._createCellForMonth(month, monthNames[month])));
        this._cdr.markForCheck();
    }
    /** Focuses the active cell after the microtask queue is empty. */
    _focusActiveCell() {
        this._nxCalendarBody._focusActiveCell();
    }
    /**
     * Gets the month in this year that the given Date falls on.
     * Returns null if the given Date is in another year.
     */
    _getMonthInCurrentYear(date) {
        return date && this._dateAdapter.getYear(date) === this._dateAdapter.getYear(this.activeDate) ? this._dateAdapter.getMonth(date) : null;
    }
    /** Creates an NxCalendarCell for the given month. */
    _createCellForMonth(month, monthName) {
        const ariaLabel = this._dateAdapter.format(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1), this._dateFormats.display.monthYearA11yLabel);
        return new NxCalendarCell(month, monthName, ariaLabel, this._shouldEnableMonth(month));
    }
    /** Whether the given month is enabled. */
    _shouldEnableMonth(month) {
        const activeYear = this._dateAdapter.getYear(this.activeDate);
        if (month === undefined ||
            month === null ||
            this._isYearAndMonthAfterMaxDate(activeYear, month) ||
            this._isYearAndMonthBeforeMinDate(activeYear, month)) {
            return false;
        }
        if (!this.dateFilter) {
            return true;
        }
        const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);
        // If any date in the month is enabled count the month as enabled.
        for (let date = firstOfMonth; this._dateAdapter.getMonth(date) === month; date = this._dateAdapter.addCalendarDays(date, 1)) {
            if (this.dateFilter(date)) {
                return true;
            }
        }
        return false;
    }
    /**
     * Tests whether the combination month/year is after this.maxDate, considering
     * just the month and year of this.maxDate
     */
    _isYearAndMonthAfterMaxDate(year, month) {
        if (this.maxDate) {
            const maxYear = this._dateAdapter.getYear(this.maxDate);
            const maxMonth = this._dateAdapter.getMonth(this.maxDate);
            return year > maxYear || (year === maxYear && month > maxMonth);
        }
        return false;
    }
    /**
     * Tests whether the combination month/year is before this.minDate, considering
     * just the month and year of this.minDate
     */
    _isYearAndMonthBeforeMinDate(year, month) {
        if (this.minDate) {
            const minYear = this._dateAdapter.getYear(this.minDate);
            const minMonth = this._dateAdapter.getMonth(this.minDate);
            return year < minYear || (year === minYear && month < minMonth);
        }
        return false;
    }
    /**
     * @param obj The object to check.
     * @returns The given object if it is both a date instance and valid, otherwise null.
     */
    _getValidDateOrNull(obj) {
        return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;
    }
    /** Determines whether the user has the RTL layout direction. */
    _isRtl() {
        return this._dir && this._dir.value === 'rtl';
    }
}
NxYearViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxYearViewComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: NX_DATE_FORMATS, optional: true }, { token: NxDateAdapter, optional: true }, { token: i2$2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NxYearViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxYearViewComponent, selector: "nx-year-view", inputs: { activeDate: "activeDate", selected: "selected", minDate: "minDate", maxDate: "maxDate", dateFilter: "dateFilter" }, outputs: { selectedChange: "selectedChange", monthSelected: "monthSelected", activeDateChange: "activeDateChange" }, viewQueries: [{ propertyName: "_nxCalendarBody", first: true, predicate: NxCalendarBodyComponent, descendants: true, static: true }], exportAs: ["nxYearView"], ngImport: i0, template: "<table class=\"nx-calendar-table\">\n    <tbody\n        nx-calendar-body\n        [label]=\"_yearLabel\"\n        [rows]=\"_months\"\n        [todayValue]=\"_todayMonth!\"\n        [selectedValue]=\"_selectedMonth!\"\n        [numCols]=\"_numCols\"\n        [activeCell]=\"_dateAdapter.getMonth(activeDate)\"\n        (selectedValueChange)=\"_monthSelected($event)\"\n        (keydown)=\"_handleCalendarBodyKeydown($event)\"\n    >\n    </tbody>\n</table>\n", styles: [".nx-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}:host ::ng-deep .nx-calendar-body .nx-calendar-body-cell-content{margin:0 36px 8px}@media (max-width: 703px){:host ::ng-deep .nx-calendar-body .nx-calendar-body-cell-content{margin:0 24px 8px}}:host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:first-child .nx-calendar-body-cell-content{margin-left:8px}@media (max-width: 703px){:host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:first-child .nx-calendar-body-cell-content{margin-left:24px}}[dir=rtl] :host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:first-child .nx-calendar-body-cell-content{margin-right:8px;margin-left:36px}@media (max-width: 703px){[dir=rtl] :host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:first-child .nx-calendar-body-cell-content{margin-right:24px;margin-left:24px}}:host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:last-child .nx-calendar-body-cell-content{margin-right:8px}@media (max-width: 703px){:host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:last-child .nx-calendar-body-cell-content{margin-right:24px}}[dir=rtl] :host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:last-child .nx-calendar-body-cell-content{margin-right:36px;margin-left:8px}@media (max-width: 703px){[dir=rtl] :host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:last-child .nx-calendar-body-cell-content{margin-right:24px;margin-left:24px}}\n"], components: [{ type: NxCalendarBodyComponent, selector: "[nx-calendar-body]", inputs: ["label", "rows", "todayValue", "selectedValue", "numCols", "allowDisabledSelection", "activeCell", "previousItems", "followingItems"], outputs: ["selectedValueChange", "selectedValueChangeToPrevious", "selectedValueChangeToFollowing"], exportAs: ["nxCalendarBody"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxYearViewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-year-view', exportAs: 'nxYearView', changeDetection: ChangeDetectionStrategy.OnPush, template: "<table class=\"nx-calendar-table\">\n    <tbody\n        nx-calendar-body\n        [label]=\"_yearLabel\"\n        [rows]=\"_months\"\n        [todayValue]=\"_todayMonth!\"\n        [selectedValue]=\"_selectedMonth!\"\n        [numCols]=\"_numCols\"\n        [activeCell]=\"_dateAdapter.getMonth(activeDate)\"\n        (selectedValueChange)=\"_monthSelected($event)\"\n        (keydown)=\"_handleCalendarBodyKeydown($event)\"\n    >\n    </tbody>\n</table>\n", styles: [".nx-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}:host ::ng-deep .nx-calendar-body .nx-calendar-body-cell-content{margin:0 36px 8px}@media (max-width: 703px){:host ::ng-deep .nx-calendar-body .nx-calendar-body-cell-content{margin:0 24px 8px}}:host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:first-child .nx-calendar-body-cell-content{margin-left:8px}@media (max-width: 703px){:host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:first-child .nx-calendar-body-cell-content{margin-left:24px}}[dir=rtl] :host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:first-child .nx-calendar-body-cell-content{margin-right:8px;margin-left:36px}@media (max-width: 703px){[dir=rtl] :host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:first-child .nx-calendar-body-cell-content{margin-right:24px;margin-left:24px}}:host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:last-child .nx-calendar-body-cell-content{margin-right:8px}@media (max-width: 703px){:host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:last-child .nx-calendar-body-cell-content{margin-right:24px}}[dir=rtl] :host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:last-child .nx-calendar-body-cell-content{margin-right:36px;margin-left:8px}@media (max-width: 703px){[dir=rtl] :host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:last-child .nx-calendar-body-cell-content{margin-right:24px;margin-left:24px}}\n"] }]
        }], ctorParameters: function () {
        return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [NX_DATE_FORMATS]
                    }] }, { type: NxDateAdapter, decorators: [{
                        type: Optional
                    }] }, { type: i2$2.Directionality, decorators: [{
                        type: Optional
                    }] }];
    }, propDecorators: { activeDate: [{
                type: Input
            }], selected: [{
                type: Input
            }], minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], dateFilter: [{
                type: Input
            }], selectedChange: [{
                type: Output
            }], monthSelected: [{
                type: Output
            }], activeDateChange: [{
                type: Output
            }], _nxCalendarBody: [{
                type: ViewChild,
                args: [NxCalendarBodyComponent, { static: true }]
            }] } });

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Datepicker data that requires internationalization. */
class NxDatepickerIntl {
    constructor() {
        /**
         * Stream that emits whenever the labels here are changed. Use this to notify
         * components if the labels have changed after initialization.
         */
        this.changes = new Subject();
        /** A label for the calendar popup (used by screen readers). */
        this.calendarLabel = 'Calendar';
        /** A label for the button used to open the calendar popup (used by screen readers). */
        this.openCalendarLabel = 'Open calendar';
        /** A label for the previous month button (used by screen readers). */
        this.prevMonthLabel = 'Previous month';
        /** A label for the next month button (used by screen readers). */
        this.nextMonthLabel = 'Next month';
        /** A label for the previous year button (used by screen readers). */
        this.prevYearLabel = 'Previous year';
        /** A label for the next year button (used by screen readers). */
        this.nextYearLabel = 'Next year';
        /** A label for the previous multi-year button (used by screen readers). */
        this.prevMultiYearLabel = 'Previous 20 years';
        /** A label for the next multi-year button (used by screen readers). */
        this.nextMultiYearLabel = 'Next 20 years';
        /** A label for the 'switch to month view' button (used by screen readers). */
        this.switchToMonthViewLabel = 'Choose date';
        /** A label for the 'switch to year view' button (used by screen readers). */
        this.switchToMultiYearViewLabel = 'Choose month and year';
    }
}
NxDatepickerIntl.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDatepickerIntl, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NxDatepickerIntl.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDatepickerIntl });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDatepickerIntl, decorators: [{
            type: Injectable
        }] });

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const yearsPerPage = 20;
/**
 * A calendar that is used as part of the datepicker.
 * @docs-private
 */
class NxCalendarComponent {
    constructor(_intl, _dateAdapter, _dir, _dateFormats, _cdr, _focusMonitor) {
        this._intl = _intl;
        this._dir = _dir;
        this._focusMonitor = _focusMonitor;
        /** Whether the calendar should be started in month or year view. */
        this.startView = 'month';
        /** Emits when the currently selected date changes. */
        this.selectedChange = new EventEmitter();
        /**
         * Emits the year chosen in multiyear view.
         * This doesn't imply a change on the selected date.
         */
        this.yearSelected = new EventEmitter();
        /**
         * Emits the month chosen in year view.
         * This doesn't imply a change on the selected date.
         */
        this.monthSelected = new EventEmitter();
        /** Emits when any date is selected. */
        this._userSelection = new EventEmitter();
        this._destroyed = new Subject();
        if (!_dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
        this._dateAdapter = _dateAdapter;
        if (!_dateFormats) {
            throw createMissingDateImplError('MAT_DATE_FORMATS');
        }
        this._dateFormats = _dateFormats;
        _intl.changes.pipe(takeUntil(this._destroyed)).subscribe(() => _cdr.markForCheck());
    }
    /** A date representing the period (month or year) to start the calendar in. */
    get startAt() {
        return this._startAt;
    }
    set startAt(value) {
        this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
    }
    /** The currently selected date. */
    get selected() {
        return this._selected;
    }
    set selected(value) {
        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
    }
    /** The minimum selectable date. */
    get minDate() {
        return this._minDate;
    }
    set minDate(value) {
        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
    }
    /** The maximum selectable date. */
    get maxDate() {
        return this._maxDate;
    }
    set maxDate(value) {
        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
    }
    /**
     * The current active date. This determines which time period is shown and which date is
     * highlighted when using keyboard navigation.
     */
    get _activeDate() {
        return this._clampedActiveDate;
    }
    set _activeDate(value) {
        this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);
    }
    /** The label for the current calendar view. */
    get _periodButtonText() {
        if (this._currentView === 'month') {
            return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel);
        }
        if (this._currentView === 'year') {
            return this._dateAdapter.getYearName(this._activeDate);
        }
        const activeYear = this._dateAdapter.getYear(this._activeDate);
        const firstYearInView = this._dateAdapter.getYearName(this._dateAdapter.createDate(activeYear - (activeYear % yearsPerPage), 0, 1));
        const lastYearInView = this._dateAdapter.getYearName(this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - (activeYear % yearsPerPage), 0, 1));
        return `${firstYearInView} \u2013 ${lastYearInView}`;
    }
    get _periodButtonLabel() {
        return this._currentView === 'month' ? this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;
    }
    /** The label for the the previous button. */
    get _prevButtonLabel() {
        return {
            month: this._intl.prevMonthLabel,
            year: this._intl.prevYearLabel,
            'multi-year': this._intl.prevMultiYearLabel,
        }[this._currentView];
    }
    /** The label for the the next button. */
    get _nextButtonLabel() {
        return {
            month: this._intl.nextMonthLabel,
            year: this._intl.nextYearLabel,
            'multi-year': this._intl.nextMultiYearLabel,
        }[this._currentView];
    }
    get _isRtl() {
        var _a;
        return ((_a = this._dir) === null || _a === void 0 ? void 0 : _a.value) === 'rtl';
    }
    ngAfterContentInit() {
        this._activeDate = this.startAt || this._dateAdapter.today();
        this._currentView = this.startView;
    }
    ngAfterViewInit() {
        this._focusMonitor.monitor(this._previousButton);
        this._focusMonitor.monitor(this._nextButton);
        this._focusMonitor.monitor(this._changeViewButton);
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this._focusMonitor.stopMonitoring(this._previousButton);
        this._focusMonitor.stopMonitoring(this._nextButton);
        this._focusMonitor.stopMonitoring(this._changeViewButton);
    }
    ngOnChanges(changes) {
        const change = changes.minDate || changes.maxDate || changes.dateFilter;
        if (change && !change.firstChange) {
            const view = this.monthView || this.yearView || this.multiYearView;
            if (view) {
                view._init();
            }
        }
    }
    /** Handles date selection in the month view. */
    _dateSelected(date) {
        if (!this._dateAdapter.sameDate(date, this.selected)) {
            this.selectedChange.emit(date);
        }
    }
    /** Handles year selection in the multiyear view. */
    _yearSelectedInMultiYearView(normalizedYear) {
        this.yearSelected.emit(normalizedYear);
    }
    /** Handles month selection in the year view. */
    _monthSelectedInYearView(normalizedMonth) {
        this.monthSelected.emit(normalizedMonth);
    }
    _userSelected() {
        this._userSelection.emit();
    }
    /** Handles year/month selection in the multi-year/year views. */
    _goToDateInView(date, view) {
        this._activeDate = date;
        this._currentView = view;
    }
    /** Handles user clicks on the period label. */
    _changeViewClicked() {
        this._currentView = this._currentView === 'month' ? 'multi-year' : 'month';
    }
    /** Handles user clicks on the previous button. */
    _previousClicked() {
        this._activeDate =
            this._currentView === 'month'
                ? this._dateAdapter.addCalendarMonths(this._activeDate, -1)
                : this._dateAdapter.addCalendarYears(this._activeDate, this._currentView === 'year' ? -1 : -yearsPerPage);
    }
    /** Handles user clicks on the next button. */
    _nextClicked() {
        this._activeDate =
            this._currentView === 'month'
                ? this._dateAdapter.addCalendarMonths(this._activeDate, 1)
                : this._dateAdapter.addCalendarYears(this._activeDate, this._currentView === 'year' ? 1 : yearsPerPage);
    }
    /** Whether the previous period button is enabled. */
    _previousEnabled() {
        if (!this.minDate) {
            return true;
        }
        return !this.minDate || !this._isSameView(this._activeDate, this.minDate);
    }
    /** Whether the next period button is enabled. */
    _nextEnabled() {
        return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);
    }
    /** Whether the two dates represent the same view in the current view mode (month or year). */
    _isSameView(date1, date2) {
        if (this._currentView === 'month') {
            return (this._dateAdapter.getYear(date1) === this._dateAdapter.getYear(date2) && this._dateAdapter.getMonth(date1) === this._dateAdapter.getMonth(date2));
        }
        if (this._currentView === 'year') {
            return this._dateAdapter.getYear(date1) === this._dateAdapter.getYear(date2);
        }
        // Otherwise we are in 'multi-year' view.
        return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) === Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);
    }
    /**
     * @param obj The object to check.
     * @returns The given object if it is both a date instance and valid, otherwise null.
     */
    _getValidDateOrNull(obj) {
        return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;
    }
}
NxCalendarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxCalendarComponent, deps: [{ token: NxDatepickerIntl }, { token: NxDateAdapter, optional: true }, { token: i2$2.Directionality, optional: true }, { token: NX_DATE_FORMATS, optional: true }, { token: i0.ChangeDetectorRef }, { token: i4.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });
NxCalendarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxCalendarComponent, selector: "nx-calendar", inputs: { startAt: "startAt", startView: "startView", selected: "selected", minDate: "minDate", maxDate: "maxDate", dateFilter: "dateFilter" }, outputs: { selectedChange: "selectedChange", yearSelected: "yearSelected", monthSelected: "monthSelected", _userSelection: "_userSelection" }, host: { classAttribute: "nx-calendar" }, viewQueries: [{ propertyName: "monthView", first: true, predicate: NxMonthViewComponent, descendants: true }, { propertyName: "yearView", first: true, predicate: NxYearViewComponent, descendants: true }, { propertyName: "multiYearView", first: true, predicate: NxMultiYearViewComponent, descendants: true }, { propertyName: "_previousButton", first: true, predicate: ["previousButton"], descendants: true }, { propertyName: "_nextButton", first: true, predicate: ["nextButton"], descendants: true }, { propertyName: "_changeViewButton", first: true, predicate: ["changeViewButton"], descendants: true }], exportAs: ["nxCalendar"], usesOnChanges: true, ngImport: i0, template: "<div class=\"nx-calendar-header\">\n    <div class=\"nx-calendar-controls\">\n        <button\n            #previousButton\n            class=\"nx-calendar-previous-button\"\n            [disabled]=\"!_previousEnabled()\"\n            (click)=\"_previousClicked()\"\n            [attr.aria-label]=\"_prevButtonLabel\"\n        >\n            <nx-icon [name]=\"this._isRtl ? 'chevron-right' : 'chevron-left'\"></nx-icon>\n        </button>\n\n        <span class=\"nx-calendar-period-label\"> {{_periodButtonText}} </span>\n\n        <button #nextButton class=\"nx-calendar-next-button\" [disabled]=\"!_nextEnabled()\" (click)=\"_nextClicked()\" [attr.aria-label]=\"_nextButtonLabel\">\n            <nx-icon [name]=\"this._isRtl ? 'chevron-left' : 'chevron-right'\"></nx-icon>\n        </button>\n    </div>\n\n    <div class=\"nx-calendar-view-controls\">\n        <button #changeViewButton class=\"nx-calendar-change-view-button\" (click)=\"_changeViewClicked()\" [attr.aria-label]=\"_periodButtonLabel\">\n            {{_periodButtonLabel}}\n        </button>\n    </div>\n</div>\n\n<div class=\"nx-calendar-content\" [ngSwitch]=\"_currentView\" cdkMonitorSubtreeFocus tabindex=\"-1\">\n    <nx-month-view\n        *ngSwitchCase=\"'month'\"\n        [(activeDate)]=\"_activeDate\"\n        [selected]=\"selected\"\n        [dateFilter]=\"dateFilter\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        (selectedChange)=\"_dateSelected($event!)\"\n        (_userSelection)=\"_userSelected()\"\n    >\n    </nx-month-view>\n\n    <nx-year-view\n        *ngSwitchCase=\"'year'\"\n        [(activeDate)]=\"_activeDate\"\n        [selected]=\"selected\"\n        [dateFilter]=\"dateFilter\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        (monthSelected)=\"_monthSelectedInYearView($event)\"\n        (selectedChange)=\"_goToDateInView($event, 'month')\"\n    >\n    </nx-year-view>\n\n    <nx-multi-year-view\n        *ngSwitchCase=\"'multi-year'\"\n        [(activeDate)]=\"_activeDate\"\n        [selected]=\"selected\"\n        [dateFilter]=\"dateFilter\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        (yearSelected)=\"_yearSelectedInMultiYearView($event)\"\n        (selectedChange)=\"_goToDateInView($event, 'year')\"\n    >\n    </nx-multi-year-view>\n</div>\n", styles: [".nx-calendar-content{width:280px;margin:16px auto 0}.nx-calendar-previous-button,.nx-calendar-next-button{color:var(--datefield-controls-color);font-size:var(--datefield-controls-icon-size);background-color:transparent;border:none;cursor:pointer;line-height:0;padding:0}.nx-calendar-previous-button:focus,.nx-calendar-next-button:focus{outline:0}.nx-calendar-previous-button:hover,.nx-calendar-next-button:hover{color:var(--datefield-controls-hover-color)}.nx-calendar-previous-button[disabled],.nx-calendar-next-button[disabled]{cursor:not-allowed}.nx-calendar-previous-button[disabled] nx-icon,.nx-calendar-next-button[disabled] nx-icon{color:var(--disabled-01)}.nx-calendar-controls{display:flex;justify-content:space-between;align-items:center;padding:0 40px}.nx-calendar-period-label{font-size:var(--datefield-period-label-font-size);line-height:var(--datefield-period-label-line-height);font-weight:var(--datefield-period-label-font-weight);letter-spacing:var(--datefield-period-label-letter-spacing);color:var(--datefield-period-label-color);text-align:center}.nx-calendar-view-controls{text-align:center;height:24px}.nx-calendar-change-view-button{font-size:var(--datefield-change-view-font-size);line-height:var(--datefield-change-view-line-height);font-weight:var(--datefield-change-view-font-weight);letter-spacing:var(--datefield-change-view-letter-spacing);color:var(--datefield-change-view-color);border:none;background-color:transparent;cursor:pointer;margin:8px 0 0;height:16px}.nx-calendar-change-view-button:focus{outline:0}.nx-calendar-change-view-button:hover{color:var(--datefield-change-view-hover-color)}.nx-calendar-change-view-button.cdk-keyboard-focused,.nx-calendar-previous-button.cdk-keyboard-focused,.nx-calendar-next-button.cdk-keyboard-focused{box-shadow:var(--focus-box-shadow);border-radius:4px}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-calendar-change-view-button.cdk-keyboard-focused,.nx-calendar-previous-button.cdk-keyboard-focused,.nx-calendar-next-button.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}button::-moz-focus-inner{border:0}\n"], components: [{ type: i5.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }, { type: NxMonthViewComponent, selector: "nx-month-view", inputs: ["activeDate", "selected", "minDate", "maxDate", "dateFilter"], outputs: ["selectedChange", "_userSelection", "activeDateChange"], exportAs: ["nxMonthView"] }, { type: NxYearViewComponent, selector: "nx-year-view", inputs: ["activeDate", "selected", "minDate", "maxDate", "dateFilter"], outputs: ["selectedChange", "monthSelected", "activeDateChange"], exportAs: ["nxYearView"] }, { type: NxMultiYearViewComponent, selector: "nx-multi-year-view", inputs: ["activeDate", "selected", "minDate", "maxDate", "dateFilter"], outputs: ["selectedChange", "yearSelected", "activeDateChange"], exportAs: ["nxMultiYearView"] }], directives: [{ type: i4.CdkMonitorFocus, selector: "[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]", outputs: ["cdkFocusChange"] }, { type: i2$1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2$1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxCalendarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-calendar', host: {
                        class: 'nx-calendar',
                    }, exportAs: 'nxCalendar', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"nx-calendar-header\">\n    <div class=\"nx-calendar-controls\">\n        <button\n            #previousButton\n            class=\"nx-calendar-previous-button\"\n            [disabled]=\"!_previousEnabled()\"\n            (click)=\"_previousClicked()\"\n            [attr.aria-label]=\"_prevButtonLabel\"\n        >\n            <nx-icon [name]=\"this._isRtl ? 'chevron-right' : 'chevron-left'\"></nx-icon>\n        </button>\n\n        <span class=\"nx-calendar-period-label\"> {{_periodButtonText}} </span>\n\n        <button #nextButton class=\"nx-calendar-next-button\" [disabled]=\"!_nextEnabled()\" (click)=\"_nextClicked()\" [attr.aria-label]=\"_nextButtonLabel\">\n            <nx-icon [name]=\"this._isRtl ? 'chevron-left' : 'chevron-right'\"></nx-icon>\n        </button>\n    </div>\n\n    <div class=\"nx-calendar-view-controls\">\n        <button #changeViewButton class=\"nx-calendar-change-view-button\" (click)=\"_changeViewClicked()\" [attr.aria-label]=\"_periodButtonLabel\">\n            {{_periodButtonLabel}}\n        </button>\n    </div>\n</div>\n\n<div class=\"nx-calendar-content\" [ngSwitch]=\"_currentView\" cdkMonitorSubtreeFocus tabindex=\"-1\">\n    <nx-month-view\n        *ngSwitchCase=\"'month'\"\n        [(activeDate)]=\"_activeDate\"\n        [selected]=\"selected\"\n        [dateFilter]=\"dateFilter\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        (selectedChange)=\"_dateSelected($event!)\"\n        (_userSelection)=\"_userSelected()\"\n    >\n    </nx-month-view>\n\n    <nx-year-view\n        *ngSwitchCase=\"'year'\"\n        [(activeDate)]=\"_activeDate\"\n        [selected]=\"selected\"\n        [dateFilter]=\"dateFilter\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        (monthSelected)=\"_monthSelectedInYearView($event)\"\n        (selectedChange)=\"_goToDateInView($event, 'month')\"\n    >\n    </nx-year-view>\n\n    <nx-multi-year-view\n        *ngSwitchCase=\"'multi-year'\"\n        [(activeDate)]=\"_activeDate\"\n        [selected]=\"selected\"\n        [dateFilter]=\"dateFilter\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        (yearSelected)=\"_yearSelectedInMultiYearView($event)\"\n        (selectedChange)=\"_goToDateInView($event, 'year')\"\n    >\n    </nx-multi-year-view>\n</div>\n", styles: [".nx-calendar-content{width:280px;margin:16px auto 0}.nx-calendar-previous-button,.nx-calendar-next-button{color:var(--datefield-controls-color);font-size:var(--datefield-controls-icon-size);background-color:transparent;border:none;cursor:pointer;line-height:0;padding:0}.nx-calendar-previous-button:focus,.nx-calendar-next-button:focus{outline:0}.nx-calendar-previous-button:hover,.nx-calendar-next-button:hover{color:var(--datefield-controls-hover-color)}.nx-calendar-previous-button[disabled],.nx-calendar-next-button[disabled]{cursor:not-allowed}.nx-calendar-previous-button[disabled] nx-icon,.nx-calendar-next-button[disabled] nx-icon{color:var(--disabled-01)}.nx-calendar-controls{display:flex;justify-content:space-between;align-items:center;padding:0 40px}.nx-calendar-period-label{font-size:var(--datefield-period-label-font-size);line-height:var(--datefield-period-label-line-height);font-weight:var(--datefield-period-label-font-weight);letter-spacing:var(--datefield-period-label-letter-spacing);color:var(--datefield-period-label-color);text-align:center}.nx-calendar-view-controls{text-align:center;height:24px}.nx-calendar-change-view-button{font-size:var(--datefield-change-view-font-size);line-height:var(--datefield-change-view-line-height);font-weight:var(--datefield-change-view-font-weight);letter-spacing:var(--datefield-change-view-letter-spacing);color:var(--datefield-change-view-color);border:none;background-color:transparent;cursor:pointer;margin:8px 0 0;height:16px}.nx-calendar-change-view-button:focus{outline:0}.nx-calendar-change-view-button:hover{color:var(--datefield-change-view-hover-color)}.nx-calendar-change-view-button.cdk-keyboard-focused,.nx-calendar-previous-button.cdk-keyboard-focused,.nx-calendar-next-button.cdk-keyboard-focused{box-shadow:var(--focus-box-shadow);border-radius:4px}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-calendar-change-view-button.cdk-keyboard-focused,.nx-calendar-previous-button.cdk-keyboard-focused,.nx-calendar-next-button.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}button::-moz-focus-inner{border:0}\n"] }]
        }], ctorParameters: function () {
        return [{ type: NxDatepickerIntl }, { type: NxDateAdapter, decorators: [{
                        type: Optional
                    }] }, { type: i2$2.Directionality, decorators: [{
                        type: Optional
                    }] }, { type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [NX_DATE_FORMATS]
                    }] }, { type: i0.ChangeDetectorRef }, { type: i4.FocusMonitor }];
    }, propDecorators: { startAt: [{
                type: Input
            }], startView: [{
                type: Input
            }], selected: [{
                type: Input
            }], minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], dateFilter: [{
                type: Input
            }], selectedChange: [{
                type: Output
            }], yearSelected: [{
                type: Output
            }], monthSelected: [{
                type: Output
            }], _userSelection: [{
                type: Output
            }], monthView: [{
                type: ViewChild,
                args: [NxMonthViewComponent]
            }], yearView: [{
                type: ViewChild,
                args: [NxYearViewComponent]
            }], multiYearView: [{
                type: ViewChild,
                args: [NxMultiYearViewComponent]
            }], _previousButton: [{
                type: ViewChild,
                args: ['previousButton']
            }], _nextButton: [{
                type: ViewChild,
                args: ['nextButton']
            }], _changeViewButton: [{
                type: ViewChild,
                args: ['changeViewButton']
            }] } });

/** Used to generate a unique ID for each datepicker instance. */
let datepickerUid = 0;
/** Injection token that determines the scroll handling while the calendar is open. */
const NX_DATEPICKER_SCROLL_STRATEGY = new InjectionToken('nx-datepicker-scroll-strategy');
/** @docs-private */
function NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {
    return () => overlay.scrollStrategies.reposition();
}
/** @docs-private */
const NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {
    provide: NX_DATEPICKER_SCROLL_STRATEGY,
    deps: [Overlay],
    useFactory: NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,
};
class DatepickerDefaultOptions {
}
DatepickerDefaultOptions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: DatepickerDefaultOptions, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
DatepickerDefaultOptions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: DatepickerDefaultOptions });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: DatepickerDefaultOptions, decorators: [{
            type: Injectable
        }] });
const DATEPICKER_DEFAULT_OPTIONS = new InjectionToken('DATEPICKER_DEFAULT_OPTIONS');
/**
 * @docs-private
 * Component used as the content for the datepicker dialog and popup. We use this instead of using
 * NxCalendarComponent directly as the content so we can control the initial focus. This also gives us a
 * place to put additional features of the popup that are not part of the calendar itself in the
 * future. (e.g. confirmation buttons).
 */
class NxDatepickerContentComponent {
    constructor(_intl, elementRef, _ngZone) {
        this._intl = _intl;
        this.elementRef = elementRef;
        this._ngZone = _ngZone;
    }
    ngAfterContentInit() {
        this._focusActiveCell();
    }
    /** Focuses the active cell after the microtask queue is empty. */
    _focusActiveCell() {
        this._ngZone.runOutsideAngular(() => {
            this._ngZone.onStable
                .asObservable()
                .pipe(take(1))
                .subscribe(() => {
                this.elementRef.nativeElement.querySelector('.nx-calendar-body-active').focus();
            });
        });
    }
}
NxDatepickerContentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDatepickerContentComponent, deps: [{ token: NxDatepickerIntl }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
NxDatepickerContentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxDatepickerContentComponent, selector: "nx-datepicker-content", host: { classAttribute: "nx-datepicker-content" }, viewQueries: [{ propertyName: "_calendar", first: true, predicate: NxCalendarComponent, descendants: true, static: true }], exportAs: ["nxDatepickerContent"], ngImport: i0, template: "<div class=\"nx-datepicker-header\">\n    <button (click)=\"datepicker.close()\" class=\"nx-datepicker-close\" type=\"button\">\n        <nx-icon name=\"close\"></nx-icon>\n    </button>\n</div>\n\n<nx-calendar\n    cdkTrapFocus\n    [id]=\"datepicker.id\"\n    [ngClass]=\"datepicker.panelClass\"\n    [startAt]=\"datepicker.startAt\"\n    [startView]=\"datepicker.startView\"\n    [minDate]=\"datepicker.minDate\"\n    [maxDate]=\"datepicker.maxDate\"\n    [dateFilter]=\"datepicker.dateFilter\"\n    [selected]=\"datepicker.selected\"\n    (selectedChange)=\"datepicker.select($event)\"\n    (yearSelected)=\"datepicker.selectYear($event)\"\n    (monthSelected)=\"datepicker.selectMonth($event)\"\n    (_userSelection)=\"datepicker.close()\"\n>\n</nx-calendar>\n", styles: [":host{background:var(--datefield-panel-background-color);display:flex;flex-flow:column nowrap;box-shadow:var(--shadow-large);border:1px solid var(--datefield-panel-border-color);border-radius:4px}.nx-datepicker-header{background:var(--datefield-panel-header-background-color);padding:15px 16px 16px;display:flex;height:55px}@media (max-width: 703px){.nx-datepicker-header{padding-left:19px;padding-right:19px}}.nx-datepicker-close{background-color:transparent;border:none;margin-left:auto;cursor:pointer;padding:0;font-size:var(--datefield-controls-icon-size);color:var(--datefield-controls-color);outline:none}:host-context([dir=rtl]) .nx-datepicker-close{margin-right:auto;margin-left:0;margin-left:initial}nx-calendar{width:342px;height:375px}@media (max-width: 703px){nx-calendar{width:302px;height:359px}}\n"], components: [{ type: i5.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }, { type: NxCalendarComponent, selector: "nx-calendar", inputs: ["startAt", "startView", "selected", "minDate", "maxDate", "dateFilter"], outputs: ["selectedChange", "yearSelected", "monthSelected", "_userSelection"], exportAs: ["nxCalendar"] }], directives: [{ type: i4.CdkTrapFocus, selector: "[cdkTrapFocus]", inputs: ["cdkTrapFocus", "cdkTrapFocusAutoCapture"], exportAs: ["cdkTrapFocus"] }, { type: i2$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDatepickerContentComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-datepicker-content', host: {
                        class: 'nx-datepicker-content',
                    }, exportAs: 'nxDatepickerContent', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"nx-datepicker-header\">\n    <button (click)=\"datepicker.close()\" class=\"nx-datepicker-close\" type=\"button\">\n        <nx-icon name=\"close\"></nx-icon>\n    </button>\n</div>\n\n<nx-calendar\n    cdkTrapFocus\n    [id]=\"datepicker.id\"\n    [ngClass]=\"datepicker.panelClass\"\n    [startAt]=\"datepicker.startAt\"\n    [startView]=\"datepicker.startView\"\n    [minDate]=\"datepicker.minDate\"\n    [maxDate]=\"datepicker.maxDate\"\n    [dateFilter]=\"datepicker.dateFilter\"\n    [selected]=\"datepicker.selected\"\n    (selectedChange)=\"datepicker.select($event)\"\n    (yearSelected)=\"datepicker.selectYear($event)\"\n    (monthSelected)=\"datepicker.selectMonth($event)\"\n    (_userSelection)=\"datepicker.close()\"\n>\n</nx-calendar>\n", styles: [":host{background:var(--datefield-panel-background-color);display:flex;flex-flow:column nowrap;box-shadow:var(--shadow-large);border:1px solid var(--datefield-panel-border-color);border-radius:4px}.nx-datepicker-header{background:var(--datefield-panel-header-background-color);padding:15px 16px 16px;display:flex;height:55px}@media (max-width: 703px){.nx-datepicker-header{padding-left:19px;padding-right:19px}}.nx-datepicker-close{background-color:transparent;border:none;margin-left:auto;cursor:pointer;padding:0;font-size:var(--datefield-controls-icon-size);color:var(--datefield-controls-color);outline:none}:host-context([dir=rtl]) .nx-datepicker-close{margin-right:auto;margin-left:0;margin-left:initial}nx-calendar{width:342px;height:375px}@media (max-width: 703px){nx-calendar{width:302px;height:359px}}\n"] }]
        }], ctorParameters: function () { return [{ type: NxDatepickerIntl }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { _calendar: [{
                type: ViewChild,
                args: [NxCalendarComponent, { static: true }]
            }] } });
/** Component responsible for managing the datepicker popup/dialog. */
class NxDatepickerComponent {
    constructor(_overlay, _ngZone, _viewContainerRef, _defaultScrollStrategyFactory, _dateAdapter, _dir, _document) {
        var _a;
        this._overlay = _overlay;
        this._ngZone = _ngZone;
        this._viewContainerRef = _viewContainerRef;
        this._defaultScrollStrategyFactory = _defaultScrollStrategyFactory;
        this._dir = _dir;
        this._document = _document;
        /** The view that the calendar should start in. */
        this.startView = 'month';
        /** @docs-private */
        this.selectedChanged = new EventEmitter();
        /**
         * Emits selected year in multiyear view.
         * This doesn't imply a change on the selected date.
         */
        this.yearSelected = new EventEmitter();
        /**
         * Emits selected month in year view.
         * This doesn't imply a change on the selected date.
         */
        this.monthSelected = new EventEmitter();
        /** Emits when the datepicker has been opened. */
        this.openedStream = new EventEmitter();
        /** Emits when the datepicker has been closed. */
        this.closedStream = new EventEmitter();
        this._opened = false;
        /**
         * @docs-private
         * The id for the datepicker calendar.
         */
        this.id = `nx-datepicker-${datepickerUid++}`;
        this._validSelected = null;
        /** The element that was focused before the datepicker was opened. */
        this._focusedElementBeforeOpen = null;
        /** Strategy factory that will be used to handle scrolling while the datepicker panel is open. */
        this._scrollStrategyFactory = this._defaultScrollStrategyFactory;
        /** Emits when the datepicker is disabled. */
        this._disabledChange = new Subject();
        this._destroyed = new Subject();
        if (!_dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
        this._dateAdapter = _dateAdapter;
        (_a = this._dir) === null || _a === void 0 ? void 0 : _a.change.pipe(takeUntil(this._destroyed)).subscribe(() => {
            this.close();
            this._destroyPopup();
        });
    }
    /** The date to open the calendar initially. */
    get startAt() {
        // If an explicit startAt is set we start there, otherwise we start at whatever the currently
        // selected value is.
        return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);
    }
    set startAt(value) {
        this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
    }
    /**
     * Whether the datepicker pop-up should be disabled.
     * The datepicker is also disabled if the belonging input is readonly.
     */
    get disabled() {
        return this._disabled === undefined && this._datepickerInput ? this._datepickerInput.disabled || this._datepickerInput.readonly : !!this._disabled;
    }
    set disabled(value) {
        const newValue = coerceBooleanProperty(value);
        if (newValue !== this._disabled) {
            this._disabled = newValue;
            this._disabledChange.next(newValue);
        }
    }
    /** Whether the calendar is open. */
    get opened() {
        return this._opened;
    }
    set opened(value) {
        value ? this.open() : this.close();
    }
    /**
     * @docs-private
     * The currently selected date.
     */
    get selected() {
        return this._validSelected;
    }
    set selected(value) {
        this._validSelected = value;
    }
    /**
     * @docs-private
     * The minimum selectable date.
     */
    get minDate() {
        var _a;
        return (_a = this._datepickerInput) === null || _a === void 0 ? void 0 : _a.min;
    }
    /**
     * @docs-private
     * The maximum selectable date.
     */
    get maxDate() {
        var _a;
        return (_a = this._datepickerInput) === null || _a === void 0 ? void 0 : _a.max;
    }
    /** @docs-private */
    get dateFilter() {
        var _a;
        return (_a = this._datepickerInput) === null || _a === void 0 ? void 0 : _a._dateFilter;
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this.close();
        this._disabledChange.complete();
        if (this._popupRef) {
            this._popupRef.dispose();
            this._popupComponentRef = null;
        }
    }
    /**
     * @docs-private
     * Selects the given date
     */
    select(date) {
        const oldValue = this.selected;
        this.selected = date;
        if (!this._dateAdapter.sameDate(oldValue, this.selected)) {
            this.selectedChanged.emit(date);
        }
    }
    /**
     * @docs-private
     * Emits the selected year in multiyear view
     */
    selectYear(normalizedYear) {
        this.yearSelected.emit(normalizedYear);
    }
    /**
     * @docs-private
     * Emits selected month in year view
     */
    selectMonth(normalizedMonth) {
        this.monthSelected.emit(normalizedMonth);
    }
    /**
     * @docs-private
     * Register an input with this datepicker.
     * @param input The datepicker input to register with this datepicker.
     */
    registerInput(input) {
        if (this._datepickerInput) {
            throw Error('A NxDatepicker can only be associated with a single input.');
        }
        this._datepickerInput = input;
        this._datepickerInput._valueChange.pipe(takeUntil(this._destroyed)).subscribe((value) => (this.selected = value));
    }
    /**
     * @docs-private
     * Register an input toggle with this datepicker.
     */
    registerToggle(toggle) {
        if (this._toggleButton) {
            throw Error('A NxDatepicker can only be associated with a single toggle button.');
        }
        this._toggleButton = toggle;
    }
    /**
     * @docs-private
     * Open the calendar.
     */
    open() {
        if (this._opened || this.disabled) {
            return;
        }
        if (!this._datepickerInput) {
            throw Error('Attempted to open an NxDatepicker with no associated input.');
        }
        if (this._document) {
            this._focusedElementBeforeOpen = this._document.activeElement;
        }
        this._openAsPopup();
        this._opened = true;
        this.openedStream.emit();
    }
    /**
     * @docs-private
     * Close the calendar.
     */
    close() {
        var _a, _b;
        if (!this._opened) {
            return;
        }
        if ((_a = this._popupRef) === null || _a === void 0 ? void 0 : _a.hasAttached()) {
            this._popupRef.detach();
        }
        if ((_b = this._calendarPortal) === null || _b === void 0 ? void 0 : _b.isAttached) {
            this._calendarPortal.detach();
        }
        const completeClose = () => {
            // The `_opened` could've been reset already if
            // we got two events in quick succession.
            if (this._opened) {
                this._opened = false;
                this.closedStream.emit();
                this._focusedElementBeforeOpen = null;
            }
        };
        if (this._focusedElementBeforeOpen && typeof this._focusedElementBeforeOpen.focus === 'function') {
            // Because IE moves focus asynchronously, we can't count on it being restored before we've
            // marked the datepicker as closed. If the event fires out of sequence and the element that
            // we're refocusing opens the datepicker on focus, the user could be stuck with not being
            // able to close the calendar at all. We work around it by making the logic, that marks
            // the datepicker as closed, async as well.
            this._focusedElementBeforeOpen.focus();
            setTimeout(completeClose);
        }
        else {
            completeClose();
        }
        // if the datepicker toggle button is not focusable, focus the associated input.
        if (this._toggleButton && this._toggleButton.tabindex < 0) {
            this._datepickerInput._focus();
        }
    }
    /** Open the calendar as a popup. */
    _openAsPopup() {
        if (!this._calendarPortal) {
            this._calendarPortal = new ComponentPortal(NxDatepickerContentComponent, this._viewContainerRef);
        }
        if (!this._popupRef) {
            this._createPopup();
        }
        if (!this._popupRef.hasAttached()) {
            this._popupComponentRef = this._popupRef.attach(this._calendarPortal);
            this._popupComponentRef.instance.datepicker = this;
            // Update the position once the calendar has rendered.
            this._ngZone.onStable
                .asObservable()
                .pipe(take(1))
                .subscribe(() => {
                this._popupRef.updatePosition();
            });
        }
    }
    /** Create the popup. */
    _createPopup() {
        var _a;
        const overlayConfig = new OverlayConfig({
            positionStrategy: this._createPopupPositionStrategy(),
            hasBackdrop: true,
            backdropClass: 'nx-overlay-transparent-backdrop',
            direction: ((_a = this._dir) === null || _a === void 0 ? void 0 : _a.value) || 'ltr',
            scrollStrategy: this._scrollStrategyFactory(),
            panelClass: 'nx-datepicker-popup',
        });
        this._popupRef = this._overlay.create(overlayConfig);
        merge(this._popupRef.backdropClick(), this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE)))
            .pipe(takeUntil(this._destroyed))
            .subscribe(() => this.close());
    }
    /** Destroy popup */
    _destroyPopup() {
        if (this._popupRef) {
            this._popupRef = null;
            this._popupComponentRef = null;
            this._calendarPortal = null;
        }
    }
    /** Create the popup PositionStrategy. */
    _createPopupPositionStrategy() {
        return this._overlay
            .position()
            .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())
            .withTransformOriginOn('.nx-datepicker-content')
            .withFlexibleDimensions(false)
            .withViewportMargin(8)
            .withLockedPosition()
            .withPositions([
            {
                originX: 'start',
                originY: 'bottom',
                overlayX: 'start',
                overlayY: 'top',
            },
            {
                originX: 'start',
                originY: 'top',
                overlayX: 'start',
                overlayY: 'bottom',
            },
            {
                originX: 'end',
                originY: 'bottom',
                overlayX: 'end',
                overlayY: 'top',
            },
            {
                originX: 'end',
                originY: 'top',
                overlayX: 'end',
                overlayY: 'bottom',
            },
        ]);
    }
    /**
     * @param obj The object to check.
     * @returns The given object if it is both a date instance and valid, otherwise null.
     */
    _getValidDateOrNull(obj) {
        return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;
    }
}
NxDatepickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDatepickerComponent, deps: [{ token: i6.Overlay }, { token: i0.NgZone }, { token: i0.ViewContainerRef }, { token: NX_DATEPICKER_SCROLL_STRATEGY }, { token: NxDateAdapter, optional: true }, { token: i2$2.Directionality, optional: true }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NxDatepickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxDatepickerComponent, selector: "nx-datepicker", inputs: { startAt: "startAt", startView: "startView", disabled: "disabled", panelClass: "panelClass", opened: "opened" }, outputs: { yearSelected: "yearSelected", monthSelected: "monthSelected", openedStream: "opened", closedStream: "closed" }, exportAs: ["nxDatepicker"], ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDatepickerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'nx-datepicker',
                    template: '',
                    exportAs: 'nxDatepicker',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () {
        return [{ type: i6.Overlay }, { type: i0.NgZone }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [NX_DATEPICKER_SCROLL_STRATEGY]
                    }] }, { type: NxDateAdapter, decorators: [{
                        type: Optional
                    }] }, { type: i2$2.Directionality, decorators: [{
                        type: Optional
                    }] }, { type: Document, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [DOCUMENT]
                    }] }];
    }, propDecorators: { startAt: [{
                type: Input
            }], startView: [{
                type: Input
            }], disabled: [{
                type: Input
            }], yearSelected: [{
                type: Output
            }], monthSelected: [{
                type: Output
            }], panelClass: [{
                type: Input
            }], openedStream: [{
                type: Output,
                args: ['opened']
            }], closedStream: [{
                type: Output,
                args: ['closed']
            }], opened: [{
                type: Input
            }] } });

/** Can be used to override the icon of a `nxDatepickerToggle`. */
class NxDatepickerToggleIconComponent {
}
NxDatepickerToggleIconComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDatepickerToggleIconComponent, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NxDatepickerToggleIconComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxDatepickerToggleIconComponent, selector: "[nxDatepickerToggleIcon]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDatepickerToggleIconComponent, decorators: [{
            type: Directive,
            args: [{
                    selector: '[nxDatepickerToggleIcon]',
                }]
        }] });
class NxDatepickerToggleComponent {
    constructor(_intl, _cdr, _defaultOptions, _focusMonitor) {
        var _a;
        this._intl = _intl;
        this._cdr = _cdr;
        this._defaultOptions = _defaultOptions;
        this._focusMonitor = _focusMonitor;
        this._stateChanges = Subscription.EMPTY;
        this._destroyed = new Subject();
        if ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.changes) {
            this._defaultOptions.changes.pipe(takeUntil(this._destroyed)).subscribe(() => {
                this._cdr.markForCheck();
            });
        }
    }
    /** Datepicker instance that the button will toggle. */
    set datepicker(value) {
        this.registerDatepicker(value);
    }
    get datepicker() {
        return this._datepicker;
    }
    /** Whether the toggle button is disabled. */
    get disabled() {
        return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
    }
    /** Sets the tabindex for the toggle button. Default: 0. */
    set tabindex(value) {
        const newValue = coerceNumberProperty(value);
        if (this._tabindex !== newValue) {
            this._tabindex = newValue;
        }
    }
    get tabindex() {
        var _a;
        if (this._tabindex !== undefined) {
            return this._tabindex;
        }
        if (((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.toggleIconTabindex) !== undefined) {
            return this._defaultOptions.toggleIconTabindex;
        }
        return 0;
    }
    ngAfterViewInit() {
        this._focusMonitor.monitor(this._toggleButton);
    }
    ngOnChanges(changes) {
        if (changes.datepicker) {
            this._watchStateChanges();
        }
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this._stateChanges.unsubscribe();
        this._focusMonitor.stopMonitoring(this._toggleButton);
    }
    ngAfterContentInit() {
        this._watchStateChanges();
    }
    _open(event) {
        if (this.datepicker && !this.disabled) {
            this.datepicker.open();
            event.stopPropagation();
        }
    }
    registerDatepicker(value) {
        if (value) {
            this._datepicker = value;
            this._datepicker.registerToggle(this);
        }
    }
    _watchStateChanges() {
        var _a, _b;
        const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : of();
        const inputDisabled = ((_a = this.datepicker) === null || _a === void 0 ? void 0 : _a._datepickerInput) ? this.datepicker._datepickerInput._disabledChange : of();
        const inputReadonly = ((_b = this.datepicker) === null || _b === void 0 ? void 0 : _b._datepickerInput) ? this.datepicker._datepickerInput._readonlyChange : of();
        const datepickerToggled = this.datepicker ? merge(this.datepicker.openedStream, this.datepicker.closedStream) : of();
        this._stateChanges.unsubscribe();
        this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled, inputReadonly, datepickerToggled)
            .pipe(takeUntil(this._destroyed))
            .subscribe(() => this._cdr.markForCheck());
    }
}
NxDatepickerToggleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDatepickerToggleComponent, deps: [{ token: NxDatepickerIntl }, { token: i0.ChangeDetectorRef }, { token: DATEPICKER_DEFAULT_OPTIONS, optional: true }, { token: i4.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });
NxDatepickerToggleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxDatepickerToggleComponent, selector: "nx-datepicker-toggle", inputs: { datepicker: ["for", "datepicker"], disabled: "disabled", tabindex: "tabindex" }, host: { properties: { "class.nx-datepicker-toggle-active": "datepicker && datepicker.opened", "class.nx-datepicker-toggle--disabled": "disabled" }, classAttribute: "nx-datepicker-toggle" }, queries: [{ propertyName: "_customIcon", first: true, predicate: NxDatepickerToggleIconComponent, descendants: true }], viewQueries: [{ propertyName: "_toggleButton", first: true, predicate: ["toggleButton"], descendants: true }], exportAs: ["nxDatepickerToggle"], usesOnChanges: true, ngImport: i0, template: "<button\n    #toggleButton\n    class=\"nx-datepicker-toggle-button\"\n    [tabindex]=\"tabindex\"\n    type=\"button\"\n    [attr.aria-label]=\"_intl.openCalendarLabel\"\n    [disabled]=\"disabled\"\n    (click)=\"_open($event)\"\n>\n    <nx-icon name=\"calendar\" *ngIf=\"!_customIcon\"></nx-icon>\n\n    <ng-content select=\"[nxDatepickerToggleIcon]\"></ng-content>\n</button>\n", styles: [":host{position:relative;display:flex}:host:active{outline:none}:host:hover{color:var(--hover-primary)}.nx-datepicker-toggle-button{border:none;background-color:transparent;color:inherit;outline:none;cursor:pointer;padding:0;margin:0}.nx-datepicker-toggle-button::-moz-focus-inner{border:0}@media screen and (-ms-high-contrast: active){.nx-datepicker-toggle-button{color:ButtonText}}.default-icon{display:block;height:var(--datefield-toggle-icon-size);width:var(--datefield-toggle-icon-size)}:host(.nx-datepicker-toggle--disabled) .nx-datepicker-toggle-button{cursor:not-allowed}@media screen and (-ms-high-contrast: active){:host(.nx-datepicker-toggle--disabled) .nx-datepicker-toggle-button{color:GrayText}}.nx-datepicker-toggle-button.cdk-keyboard-focused{border-radius:4px;box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-datepicker-toggle-button.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}\n"], components: [{ type: i5.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }], directives: [{ type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDatepickerToggleComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-datepicker-toggle', host: {
                        class: 'nx-datepicker-toggle',
                        '[class.nx-datepicker-toggle-active]': 'datepicker && datepicker.opened',
                        '[class.nx-datepicker-toggle--disabled]': 'disabled',
                    }, exportAs: 'nxDatepickerToggle', changeDetection: ChangeDetectionStrategy.OnPush, template: "<button\n    #toggleButton\n    class=\"nx-datepicker-toggle-button\"\n    [tabindex]=\"tabindex\"\n    type=\"button\"\n    [attr.aria-label]=\"_intl.openCalendarLabel\"\n    [disabled]=\"disabled\"\n    (click)=\"_open($event)\"\n>\n    <nx-icon name=\"calendar\" *ngIf=\"!_customIcon\"></nx-icon>\n\n    <ng-content select=\"[nxDatepickerToggleIcon]\"></ng-content>\n</button>\n", styles: [":host{position:relative;display:flex}:host:active{outline:none}:host:hover{color:var(--hover-primary)}.nx-datepicker-toggle-button{border:none;background-color:transparent;color:inherit;outline:none;cursor:pointer;padding:0;margin:0}.nx-datepicker-toggle-button::-moz-focus-inner{border:0}@media screen and (-ms-high-contrast: active){.nx-datepicker-toggle-button{color:ButtonText}}.default-icon{display:block;height:var(--datefield-toggle-icon-size);width:var(--datefield-toggle-icon-size)}:host(.nx-datepicker-toggle--disabled) .nx-datepicker-toggle-button{cursor:not-allowed}@media screen and (-ms-high-contrast: active){:host(.nx-datepicker-toggle--disabled) .nx-datepicker-toggle-button{color:GrayText}}.nx-datepicker-toggle-button.cdk-keyboard-focused{border-radius:4px;box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-datepicker-toggle-button.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}\n"] }]
        }], ctorParameters: function () {
        return [{ type: NxDatepickerIntl }, { type: i0.ChangeDetectorRef }, { type: DatepickerDefaultOptions, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [DATEPICKER_DEFAULT_OPTIONS]
                    }] }, { type: i4.FocusMonitor }];
    }, propDecorators: { _customIcon: [{
                type: ContentChild,
                args: [NxDatepickerToggleIconComponent]
            }], _toggleButton: [{
                type: ViewChild,
                args: ['toggleButton']
            }], datepicker: [{
                type: Input,
                args: ['for']
            }], disabled: [{
                type: Input
            }], tabindex: [{
                type: Input
            }] } });

class NxDatefieldModule {
}
NxDatefieldModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDatefieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NxDatefieldModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDatefieldModule, declarations: [NxDatefieldDirective,
        NxDatepickerComponent,
        NxDatepickerToggleIconComponent,
        NxDatepickerToggleComponent,
        NxDatepickerContentComponent,
        NxCalendarComponent,
        NxCalendarBodyComponent,
        NxMonthViewComponent,
        NxMultiYearViewComponent,
        NxYearViewComponent], imports: [CommonModule, OverlayModule, A11yModule, NxIconModule], exports: [NxDatefieldDirective,
        NxDatepickerComponent,
        NxDatepickerToggleIconComponent,
        NxDatepickerToggleComponent,
        NxCalendarComponent,
        NxCalendarBodyComponent,
        NxMonthViewComponent,
        NxMultiYearViewComponent,
        NxYearViewComponent] });
NxDatefieldModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDatefieldModule, providers: [
        // Provide our NX_DATE_LOCALE to determine the current language
        NX_DATE_LOCALE_PROVIDER,
        NxDatepickerIntl,
        NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER,
    ], imports: [[CommonModule, OverlayModule, A11yModule, NxIconModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDatefieldModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, OverlayModule, A11yModule, NxIconModule],
                    providers: [
                        // Provide our NX_DATE_LOCALE to determine the current language
                        NX_DATE_LOCALE_PROVIDER,
                        NxDatepickerIntl,
                        NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER,
                    ],
                    declarations: [
                        NxDatefieldDirective,
                        NxDatepickerComponent,
                        NxDatepickerToggleIconComponent,
                        NxDatepickerToggleComponent,
                        NxDatepickerContentComponent,
                        NxCalendarComponent,
                        NxCalendarBodyComponent,
                        NxMonthViewComponent,
                        NxMultiYearViewComponent,
                        NxYearViewComponent,
                    ],
                    exports: [
                        NxDatefieldDirective,
                        NxDatepickerComponent,
                        NxDatepickerToggleIconComponent,
                        NxDatepickerToggleComponent,
                        NxCalendarComponent,
                        NxCalendarBodyComponent,
                        NxMonthViewComponent,
                        NxMultiYearViewComponent,
                        NxYearViewComponent,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { DATEPICKER_DEFAULT_OPTIONS, DatepickerDefaultOptions, NX_DATEFIELD_VALIDATORS, NX_DATEFIELD_VALUE_ACCESSOR, NX_DATEPICKER_SCROLL_STRATEGY, NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER, NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY, NX_DATE_FORMATS, NX_DATE_LOCALE, NX_DATE_LOCALE_PROVIDER, NX_NATIVE_DATE_FORMATS, NativeDateModule, NxCalendarBodyComponent, NxCalendarCell, NxCalendarComponent, NxDateAdapter, NxDateValidators, NxDatefieldDirective, NxDatefieldModule, NxDatepickerComponent, NxDatepickerContentComponent, NxDatepickerInputEvent, NxDatepickerIntl, NxDatepickerToggleComponent, NxDatepickerToggleIconComponent, NxMonthViewComponent, NxMultiYearViewComponent, NxNativeDateAdapter, NxNativeDateModule, NxYearViewComponent, yearsPerPage$1 as yearsPerPage, yearsPerRow };
//# sourceMappingURL=aposin-ng-aquila-datefield.mjs.map
