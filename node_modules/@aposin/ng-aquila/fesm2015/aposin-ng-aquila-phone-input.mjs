import { __classPrivateFieldGet, __classPrivateFieldSet } from 'tslib';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import * as i0 from '@angular/core';
import { Injectable, Component, ChangeDetectionStrategy, Optional, Self, ViewChild, Input, NgModule } from '@angular/core';
import * as i6 from '@aposin/ng-aquila/dropdown';
import { NxDropdownComponent, NxDropdownModule } from '@aposin/ng-aquila/dropdown';
import * as i4 from '@aposin/ng-aquila/formfield';
import { NxFormfieldControl, NxFormfieldModule } from '@aposin/ng-aquila/formfield';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i1 from '@angular/cdk/a11y';
import * as i2 from '@aposin/ng-aquila/utils';
import countries$1 from 'i18n-iso-countries';
import en from 'i18n-iso-countries/langs/en.json';
import * as i5 from '@angular/forms';
import { FormsModule } from '@angular/forms';
import * as i7 from '@angular/common';
import { CommonModule } from '@angular/common';
import { NxInputModule } from '@aposin/ng-aquila/input';

var callingCodes = {
    "1": [
        "US",
        "AG",
        "AI",
        "AS",
        "BB",
        "BM",
        "BS",
        "CA",
        "DM",
        "DO",
        "GD",
        "GU",
        "JM",
        "KN",
        "KY",
        "LC",
        "MP",
        "MS",
        "PR",
        "SX",
        "TC",
        "TT",
        "VC",
        "VG",
        "VI"
    ],
    "7": [
        "RU",
        "KZ"
    ],
    "20": [
        "EG"
    ],
    "27": [
        "ZA"
    ],
    "30": [
        "GR"
    ],
    "31": [
        "NL"
    ],
    "32": [
        "BE"
    ],
    "33": [
        "FR"
    ],
    "34": [
        "ES"
    ],
    "36": [
        "HU"
    ],
    "39": [
        "IT",
        "VA"
    ],
    "40": [
        "RO"
    ],
    "41": [
        "CH"
    ],
    "43": [
        "AT"
    ],
    "44": [
        "GB",
        "GG",
        "IM",
        "JE"
    ],
    "45": [
        "DK"
    ],
    "46": [
        "SE"
    ],
    "47": [
        "NO",
        "SJ"
    ],
    "48": [
        "PL"
    ],
    "49": [
        "DE"
    ],
    "51": [
        "PE"
    ],
    "52": [
        "MX"
    ],
    "53": [
        "CU"
    ],
    "54": [
        "AR"
    ],
    "55": [
        "BR"
    ],
    "56": [
        "CL"
    ],
    "57": [
        "CO"
    ],
    "58": [
        "VE"
    ],
    "60": [
        "MY"
    ],
    "61": [
        "AU",
        "CC",
        "CX"
    ],
    "62": [
        "ID"
    ],
    "63": [
        "PH"
    ],
    "64": [
        "NZ"
    ],
    "65": [
        "SG"
    ],
    "66": [
        "TH"
    ],
    "81": [
        "JP"
    ],
    "82": [
        "KR"
    ],
    "84": [
        "VN"
    ],
    "86": [
        "CN"
    ],
    "90": [
        "TR"
    ],
    "91": [
        "IN"
    ],
    "92": [
        "PK"
    ],
    "93": [
        "AF"
    ],
    "94": [
        "LK"
    ],
    "95": [
        "MM"
    ],
    "98": [
        "IR"
    ],
    "211": [
        "SS"
    ],
    "212": [
        "MA",
        "EH"
    ],
    "213": [
        "DZ"
    ],
    "216": [
        "TN"
    ],
    "218": [
        "LY"
    ],
    "220": [
        "GM"
    ],
    "221": [
        "SN"
    ],
    "222": [
        "MR"
    ],
    "223": [
        "ML"
    ],
    "224": [
        "GN"
    ],
    "225": [
        "CI"
    ],
    "226": [
        "BF"
    ],
    "227": [
        "NE"
    ],
    "228": [
        "TG"
    ],
    "229": [
        "BJ"
    ],
    "230": [
        "MU"
    ],
    "231": [
        "LR"
    ],
    "232": [
        "SL"
    ],
    "233": [
        "GH"
    ],
    "234": [
        "NG"
    ],
    "235": [
        "TD"
    ],
    "236": [
        "CF"
    ],
    "237": [
        "CM"
    ],
    "238": [
        "CV"
    ],
    "239": [
        "ST"
    ],
    "240": [
        "GQ"
    ],
    "241": [
        "GA"
    ],
    "242": [
        "CG"
    ],
    "243": [
        "CD"
    ],
    "244": [
        "AO"
    ],
    "245": [
        "GW"
    ],
    "246": [
        "IO"
    ],
    "247": [
        "AC"
    ],
    "248": [
        "SC"
    ],
    "249": [
        "SD"
    ],
    "250": [
        "RW"
    ],
    "251": [
        "ET"
    ],
    "252": [
        "SO"
    ],
    "253": [
        "DJ"
    ],
    "254": [
        "KE"
    ],
    "255": [
        "TZ"
    ],
    "256": [
        "UG"
    ],
    "257": [
        "BI"
    ],
    "258": [
        "MZ"
    ],
    "260": [
        "ZM"
    ],
    "261": [
        "MG"
    ],
    "262": [
        "RE",
        "YT"
    ],
    "263": [
        "ZW"
    ],
    "264": [
        "NA"
    ],
    "265": [
        "MW"
    ],
    "266": [
        "LS"
    ],
    "267": [
        "BW"
    ],
    "268": [
        "SZ"
    ],
    "269": [
        "KM"
    ],
    "290": [
        "SH",
        "TA"
    ],
    "291": [
        "ER"
    ],
    "297": [
        "AW"
    ],
    "298": [
        "FO"
    ],
    "299": [
        "GL"
    ],
    "350": [
        "GI"
    ],
    "351": [
        "PT"
    ],
    "352": [
        "LU"
    ],
    "353": [
        "IE"
    ],
    "354": [
        "IS"
    ],
    "355": [
        "AL"
    ],
    "356": [
        "MT"
    ],
    "357": [
        "CY"
    ],
    "358": [
        "FI",
        "AX"
    ],
    "359": [
        "BG"
    ],
    "370": [
        "LT"
    ],
    "371": [
        "LV"
    ],
    "372": [
        "EE"
    ],
    "373": [
        "MD"
    ],
    "374": [
        "AM"
    ],
    "375": [
        "BY"
    ],
    "376": [
        "AD"
    ],
    "377": [
        "MC"
    ],
    "378": [
        "SM"
    ],
    "380": [
        "UA"
    ],
    "381": [
        "RS"
    ],
    "382": [
        "ME"
    ],
    "383": [
        "XK"
    ],
    "385": [
        "HR"
    ],
    "386": [
        "SI"
    ],
    "387": [
        "BA"
    ],
    "389": [
        "MK"
    ],
    "420": [
        "CZ"
    ],
    "421": [
        "SK"
    ],
    "423": [
        "LI"
    ],
    "500": [
        "FK"
    ],
    "501": [
        "BZ"
    ],
    "502": [
        "GT"
    ],
    "503": [
        "SV"
    ],
    "504": [
        "HN"
    ],
    "505": [
        "NI"
    ],
    "506": [
        "CR"
    ],
    "507": [
        "PA"
    ],
    "508": [
        "PM"
    ],
    "509": [
        "HT"
    ],
    "590": [
        "GP",
        "BL",
        "MF"
    ],
    "591": [
        "BO"
    ],
    "592": [
        "GY"
    ],
    "593": [
        "EC"
    ],
    "594": [
        "GF"
    ],
    "595": [
        "PY"
    ],
    "596": [
        "MQ"
    ],
    "597": [
        "SR"
    ],
    "598": [
        "UY"
    ],
    "599": [
        "CW",
        "BQ"
    ],
    "670": [
        "TL"
    ],
    "672": [
        "NF"
    ],
    "673": [
        "BN"
    ],
    "674": [
        "NR"
    ],
    "675": [
        "PG"
    ],
    "676": [
        "TO"
    ],
    "677": [
        "SB"
    ],
    "678": [
        "VU"
    ],
    "679": [
        "FJ"
    ],
    "680": [
        "PW"
    ],
    "681": [
        "WF"
    ],
    "682": [
        "CK"
    ],
    "683": [
        "NU"
    ],
    "685": [
        "WS"
    ],
    "686": [
        "KI"
    ],
    "687": [
        "NC"
    ],
    "688": [
        "TV"
    ],
    "689": [
        "PF"
    ],
    "690": [
        "TK"
    ],
    "691": [
        "FM"
    ],
    "692": [
        "MH"
    ],
    "850": [
        "KP"
    ],
    "852": [
        "HK"
    ],
    "853": [
        "MO"
    ],
    "855": [
        "KH"
    ],
    "856": [
        "LA"
    ],
    "880": [
        "BD"
    ],
    "886": [
        "TW"
    ],
    "960": [
        "MV"
    ],
    "961": [
        "LB"
    ],
    "962": [
        "JO"
    ],
    "963": [
        "SY"
    ],
    "964": [
        "IQ"
    ],
    "965": [
        "KW"
    ],
    "966": [
        "SA"
    ],
    "967": [
        "YE"
    ],
    "968": [
        "OM"
    ],
    "970": [
        "PS"
    ],
    "971": [
        "AE"
    ],
    "972": [
        "IL"
    ],
    "973": [
        "BH"
    ],
    "974": [
        "QA"
    ],
    "975": [
        "BT"
    ],
    "976": [
        "MN"
    ],
    "977": [
        "NP"
    ],
    "992": [
        "TJ"
    ],
    "993": [
        "TM"
    ],
    "994": [
        "AZ"
    ],
    "995": [
        "GE"
    ],
    "996": [
        "KG"
    ],
    "998": [
        "UZ"
    ]
};
var countries = {
    US: "1",
    AG: "1",
    AI: "1",
    AS: "1",
    BB: "1",
    BM: "1",
    BS: "1",
    CA: "1",
    DM: "1",
    DO: "1",
    GD: "1",
    GU: "1",
    JM: "1",
    KN: "1",
    KY: "1",
    LC: "1",
    MP: "1",
    MS: "1",
    PR: "1",
    SX: "1",
    TC: "1",
    TT: "1",
    VC: "1",
    VG: "1",
    VI: "1",
    RU: "7",
    KZ: "7",
    EG: "20",
    ZA: "27",
    GR: "30",
    NL: "31",
    BE: "32",
    FR: "33",
    ES: "34",
    HU: "36",
    IT: "39",
    VA: "39",
    RO: "40",
    CH: "41",
    AT: "43",
    GB: "44",
    GG: "44",
    IM: "44",
    JE: "44",
    DK: "45",
    SE: "46",
    NO: "47",
    SJ: "47",
    PL: "48",
    DE: "49",
    PE: "51",
    MX: "52",
    CU: "53",
    AR: "54",
    BR: "55",
    CL: "56",
    CO: "57",
    VE: "58",
    MY: "60",
    AU: "61",
    CC: "61",
    CX: "61",
    ID: "62",
    PH: "63",
    NZ: "64",
    SG: "65",
    TH: "66",
    JP: "81",
    KR: "82",
    VN: "84",
    CN: "86",
    TR: "90",
    IN: "91",
    PK: "92",
    AF: "93",
    LK: "94",
    MM: "95",
    IR: "98",
    SS: "211",
    MA: "212",
    EH: "212",
    DZ: "213",
    TN: "216",
    LY: "218",
    GM: "220",
    SN: "221",
    MR: "222",
    ML: "223",
    GN: "224",
    CI: "225",
    BF: "226",
    NE: "227",
    TG: "228",
    BJ: "229",
    MU: "230",
    LR: "231",
    SL: "232",
    GH: "233",
    NG: "234",
    TD: "235",
    CF: "236",
    CM: "237",
    CV: "238",
    ST: "239",
    GQ: "240",
    GA: "241",
    CG: "242",
    CD: "243",
    AO: "244",
    GW: "245",
    IO: "246",
    AC: "247",
    SC: "248",
    SD: "249",
    RW: "250",
    ET: "251",
    SO: "252",
    DJ: "253",
    KE: "254",
    TZ: "255",
    UG: "256",
    BI: "257",
    MZ: "258",
    ZM: "260",
    MG: "261",
    RE: "262",
    YT: "262",
    ZW: "263",
    NA: "264",
    MW: "265",
    LS: "266",
    BW: "267",
    SZ: "268",
    KM: "269",
    SH: "290",
    TA: "290",
    ER: "291",
    AW: "297",
    FO: "298",
    GL: "299",
    GI: "350",
    PT: "351",
    LU: "352",
    IE: "353",
    IS: "354",
    AL: "355",
    MT: "356",
    CY: "357",
    FI: "358",
    AX: "358",
    BG: "359",
    LT: "370",
    LV: "371",
    EE: "372",
    MD: "373",
    AM: "374",
    BY: "375",
    AD: "376",
    MC: "377",
    SM: "378",
    UA: "380",
    RS: "381",
    ME: "382",
    XK: "383",
    HR: "385",
    SI: "386",
    BA: "387",
    MK: "389",
    CZ: "420",
    SK: "421",
    LI: "423",
    FK: "500",
    BZ: "501",
    GT: "502",
    SV: "503",
    HN: "504",
    NI: "505",
    CR: "506",
    PA: "507",
    PM: "508",
    HT: "509",
    GP: "590",
    BL: "590",
    MF: "590",
    BO: "591",
    GY: "592",
    EC: "593",
    GF: "594",
    PY: "595",
    MQ: "596",
    SR: "597",
    UY: "598",
    CW: "599",
    BQ: "599",
    TL: "670",
    NF: "672",
    BN: "673",
    NR: "674",
    PG: "675",
    TO: "676",
    SB: "677",
    VU: "678",
    FJ: "679",
    PW: "680",
    WF: "681",
    CK: "682",
    NU: "683",
    WS: "685",
    KI: "686",
    NC: "687",
    TV: "688",
    PF: "689",
    TK: "690",
    FM: "691",
    MH: "692",
    KP: "850",
    HK: "852",
    MO: "853",
    KH: "855",
    LA: "856",
    BD: "880",
    TW: "886",
    MV: "960",
    LB: "961",
    JO: "962",
    SY: "963",
    IQ: "964",
    KW: "965",
    SA: "966",
    YE: "967",
    OM: "968",
    PS: "970",
    AE: "971",
    IL: "972",
    BH: "973",
    QA: "974",
    BT: "975",
    MN: "976",
    NP: "977",
    TJ: "992",
    TM: "993",
    AZ: "994",
    GE: "995",
    KG: "996",
    UZ: "998"
};
var rawMetadata = {
    callingCodes: callingCodes,
    countries: countries
};

// This file gets created in the postinstall hook, see extract-calling-codes.js script
const MAX_LENGTH_COUNTRY_CODE = 3;
class CountryMetadata {
    constructor(sourceObj) {
        this.countries = {};
        this.callingCodes = {};
        this.countries = sourceObj.countries;
        this.callingCodes = sourceObj.callingCodes;
    }
}
const metadata = new CountryMetadata(rawMetadata);
/** Get dial code by country code */
const getDialCodeByCountryCode = (countryCode) => metadata.countries[countryCode];
/** Get the country name by country code */
const getCountryNameByCountryCode = (countryNames, countryCode) => {
    const name = countryNames[countryCode];
    return Array.isArray(name) ? name[0] : name;
};
const getCountryCodeforCallingCode = (callingCode) => {
    const countries = metadata.callingCodes[callingCode];
    if (countries && countries.length > 0) {
        return countries[0];
    }
    throw new Error('Could not find calling code ' + callingCode);
};
// Extract the country calling code from a number string
// Returns the country calling code and the rest of the string with the calling code removed
// Throws an error if the input is not correctly formatted.
const getCountryCallingCodeFromNumber = (number) => {
    // there are a lot of cases a phone number could have, e.g. with a "IDD prefix"
    // e.g. instead of +49 123 it could be 0049 123 if you are calling from european countries
    // this IDD prefix is specific to countries/areas. libphonenumber has all the metadata for it
    // but as we don't want the dependency on it we only accept numbers with + sign and calling code
    // in the beginning. this can later be done better once we introduce an adapter and then a libphonenumber adapter
    // could have additional capabilities here.
    if (!number.startsWith('+')) {
        throw Error('Expected phone number to start with "+" sign followed by the calling code');
    }
    // Taken from libphonenumber-js
    // https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/source/helpers/extractCountryCallingCode.js
    let i = 2;
    while (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {
        const countryCallingCode = number.slice(1, i);
        if (countryCallingCode in metadata.callingCodes) {
            return {
                countryCallingCode,
                number: number.slice(i),
            };
        }
        i++;
    }
    throw new Error('No country code found');
};
/** Get sorted country code */
const getSortedCountryCodes = (countryNames) => Object.keys(countryNames)
    .filter(countryCode => countryCode in metadata.countries)
    .sort((a, b) => {
    // There are arrays and strings provided for locals. For example (en):
    // "RO": "Romania",
    // "RU": ["Russian Federation", "Russia"],
    const localA = (Array.isArray(countryNames[a]) ? countryNames[a][0] : countryNames[a]);
    const localB = (Array.isArray(countryNames[b]) ? countryNames[b][0] : countryNames[b]);
    return localA.localeCompare(localB);
});

countries$1.registerLocale(en);
class NxPhoneInputIntl {
    constructor() {
        /**
         * Stream that emits whenever the labels here are changed. Use this to notify
         * components if the properties have changed after initialization.
         */
        this.changes = new Subject();
        /** The label that is shown at the top of the opened overlay. */
        this.areaCodeLabel = 'Country code';
        /** The object providing the country name translations. */
        this.countryNames = countries$1.getNames('en');
    }
}
NxPhoneInputIntl.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxPhoneInputIntl, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NxPhoneInputIntl.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxPhoneInputIntl, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxPhoneInputIntl, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });

var _NxPhoneInputComponent_required;
let next = 0;
class NxPhoneInputComponent {
    constructor(_elementRef, _focusMonitor, _cdr, _errorStateMatcher, _intl, formFieldComponent, 
    /** @docs-private */ ngControl, _parentForm, _parentFormGroup) {
        this._elementRef = _elementRef;
        this._focusMonitor = _focusMonitor;
        this._cdr = _cdr;
        this._errorStateMatcher = _errorStateMatcher;
        this._intl = _intl;
        this.formFieldComponent = formFieldComponent;
        this.ngControl = ngControl;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this._inputValue = '';
        this._describedBy = '';
        this.stateChanges = new Subject();
        this.focused = false;
        this._uid = 'phone-input-' + next++;
        _NxPhoneInputComponent_required.set(this, false);
        this._disabled = false;
        this._readonly = false;
        this._countryCode = 'DE';
        this._initialCountryCode = 'DE';
        this._placeholder = '';
        // TODO we are disabling the floating label for now. the problem is: the label
        // is supposed to float next to the dropdown. we could introduce some changes to the
        // formfield that a control can also give something like an offset for the floating label
        // but for capacity reasons this has to be done at a later stage.
        this.shouldLabelFloat = true;
        /** @docs-private */
        this.errorState = false;
        this.controlType = 'nx-phone-input';
        this._countryCallingCode = getDialCodeByCountryCode(this.countryCode);
        this._destroyed = new Subject();
        this._inputFormatter = (inputValue, countryCode) => this._removeLeadingZero(inputValue);
        /** `View -> model callback called when value changes` */
        this._onChange = () => { };
        /** `View -> model callback called when select has been touched` */
        this._onTouched = () => { };
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
        _intl.changes.pipe(takeUntil(this._destroyed)).subscribe(_ => {
            this._sortCountries();
            this._cdr.detectChanges();
        });
    }
    get empty() {
        return !!this._inputValue;
    }
    /** Sets the id of the phone input component. */
    get id() {
        return this._id || this._uid;
    }
    set id(value) {
        this._id = value;
        this.stateChanges.next();
    }
    /** Whether the component should be required. */
    set required(value) {
        const coercedValue = coerceBooleanProperty(value);
        if (__classPrivateFieldGet(this, _NxPhoneInputComponent_required, "f") !== coercedValue) {
            __classPrivateFieldSet(this, _NxPhoneInputComponent_required, coercedValue, "f");
            this._cdr.markForCheck();
        }
    }
    get required() {
        return __classPrivateFieldGet(this, _NxPhoneInputComponent_required, "f");
    }
    /** Whether the component should be disabled. */
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = value; // TODO properly coerce input value
    }
    /** Whether the component should be read only. */
    get readonly() {
        return this._readonly;
    }
    set readonly(value) {
        this._readonly = coerceBooleanProperty(value);
        this.stateChanges.next();
    }
    /** Sets the initial country to be selected in the dropdown. Format is the international
     * country code like DE, US.
     * If there is already a number in the input field changing this property has no effect.
     */
    set countryCode(value) {
        if (this._inputValue) {
            return;
        }
        this._initialCountryCode = value;
        this._countryCode = value;
    }
    get countryCode() {
        return this._countryCode;
    }
    /** Set the text at the top of the dropdown. The default value is 'Area Code'. */
    get areaCodeLabel() {
        return this._areaCodeLabel || this._intl.areaCodeLabel;
    }
    set areaCodeLabel(value) {
        this._areaCodeLabel = value;
    }
    /** Set the translations of the countries. */
    get countryNames() {
        return this._countryNames || this._intl.countryNames;
    }
    set countryNames(value) {
        this._countryNames = value;
        this._sortCountries();
    }
    /** The placeholder to be shown in the input field. */
    get placeholder() {
        return this._placeholder;
    }
    set placeholder(value) {
        this._placeholder = value;
        this.stateChanges.next();
    }
    /**
     * Function to format the value in the input part of the component.
     * The function is called on blur. The default function removes leading zeros.
     * Please note: to determine the model value the component will remove parenthesis,
     * whitespace and dash characters from the formatted input.
     */
    get inputFormatter() {
        return this._inputFormatter;
    }
    set inputFormatter(formatFn) {
        this._inputFormatter = formatFn;
        this._inputValue = this._inputFormatter(this._inputValue, this._countryCallingCode);
    }
    ngDoCheck() {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this.updateErrorState();
        }
    }
    ngOnInit() {
        this._sortCountries();
    }
    ngAfterViewInit() {
        this._focusMonitor.monitor(this.dropdown.elementRef);
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
    setDescribedByIds(ids) {
        this._describedBy = ids.join(' ');
        this.dropdown.setDescribedByIds(ids);
    }
    get _ariaLabelledBy() {
        var _a;
        return (_a = this.formFieldComponent) === null || _a === void 0 ? void 0 : _a.labelId;
    }
    get elementRef() {
        return this._elementRef;
    }
    writeValue(value) {
        if (typeof value === 'string') {
            const noWhitespaceNumber = value.replace(/\s/g, '');
            const { countryCallingCode, number } = getCountryCallingCodeFromNumber(noWhitespaceNumber || '+' + getDialCodeByCountryCode(this.countryCode)); // requires string starting with '+'
            this._countryCallingCode = countryCallingCode;
            this._inputValue = this.inputFormatter(number, countryCallingCode);
            this._countryCode = getCountryCodeforCallingCode(countryCallingCode);
        }
        else {
            this.value = '';
            this._inputValue = '';
            this._countryCode = this._initialCountryCode;
        }
        this._cdr.markForCheck();
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this._cdr.markForCheck();
        this.stateChanges.next();
    }
    updateErrorState() {
        const oldState = this.errorState;
        const parent = this._parentFormGroup || this._parentForm;
        const control = this.ngControl ? this.ngControl.control : null;
        const newState = this._errorStateMatcher.isErrorState(control, parent);
        if (newState !== oldState) {
            this.errorState = newState;
            this.stateChanges.next();
        }
    }
    _onInputBlur() {
        this._onTouched();
        this._inputValue = this.inputFormatter(this._inputValue, this._countryCallingCode);
    }
    _onInput() {
        this.updateModel();
    }
    _onCountryChange(countryCode) {
        this._countryCode = countryCode;
        this._countryCallingCode = getDialCodeByCountryCode(this.countryCode);
        this._inputValue = this.inputFormatter(this._inputValue, this._countryCallingCode);
        this._onInput();
    }
    updateModel() {
        const hasNumber = typeof this._inputValue === 'string' && this._removeLeadingZero(this._trimInputValue(this._inputValue)).length > 0;
        if (hasNumber) {
            this._onChange(this.getModelValue());
        }
        else {
            this._onChange('');
        }
    }
    _trimInputValue(value) {
        return value.replace(/[\s()\-/]/g, '');
    }
    _removeLeadingZero(value) {
        return value.replace(/^0/, '');
    }
    /** Returns the combined string of selected calling code + input number */
    getModelValue() {
        return '+' + this._getCallingCode(this.dropdown.value) + this._trimInputValue(this._removeLeadingZero(this._inputValue));
    }
    _getCallingCode(country) {
        return getDialCodeByCountryCode(country);
    }
    _sortCountries() {
        this._sortedCountries = getSortedCountryCodes(this.countryNames).map(country => this._getDropdownOption(country));
    }
    _getDropdownOption(country) {
        return {
            value: country,
            label: `${this._getCountryName(country)} (+${this._getCallingCode(country)})`,
        };
    }
    _getCountryName(countryCode) {
        const name = this.countryNames[countryCode];
        return Array.isArray(name) ? name[0] : name;
    }
    _getReadonlyValue() {
        return this.getModelValue();
    }
}
_NxPhoneInputComponent_required = new WeakMap();
NxPhoneInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxPhoneInputComponent, deps: [{ token: i0.ElementRef }, { token: i1.FocusMonitor }, { token: i0.ChangeDetectorRef }, { token: i2.ErrorStateMatcher }, { token: NxPhoneInputIntl }, { token: i4.NxFormfieldComponent, optional: true }, { token: i5.NgControl, optional: true, self: true }, { token: i5.NgForm, optional: true }, { token: i5.FormGroupDirective, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NxPhoneInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxPhoneInputComponent, selector: "nx-phone-input", inputs: { id: "id", required: "required", disabled: "disabled", readonly: "readonly", countryCode: "countryCode", areaCodeLabel: "areaCodeLabel", countryNames: "countryNames", placeholder: "placeholder", inputFormatter: "inputFormatter" }, host: { properties: { "attr.id": "id" } }, providers: [{ provide: NxFormfieldControl, useExisting: NxPhoneInputComponent }], viewQueries: [{ propertyName: "dropdown", first: true, predicate: NxDropdownComponent, descendants: true, static: true }], ngImport: i0, template: "<div class=\"wrapper\">\n    <nx-dropdown\n        [class.hide]=\"readonly && !disabled\"\n        [nxValue]=\"countryCode\"\n        #dropdown\n        [nxShowFilter]=\"true\"\n        [nxDisabled]=\"disabled\"\n        [nxOverlayLabel]=\"areaCodeLabel\"\n        (nxValueChange)=\"_onCountryChange($event)\"\n        [options]=\"_sortedCountries\"\n    >\n        <span *nxClosedLabel>+{{ _getCallingCode(dropdown.value) }}</span>\n    </nx-dropdown>\n\n    <!-- adding c-input for the styles and to not get the overhead of the nxInput directive -->\n    <input\n        class=\"c-input\"\n        [class.hide]=\"readonly && !disabled\"\n        type=\"tel\"\n        (blur)=\"_onInputBlur()\"\n        [(ngModel)]=\"_inputValue\"\n        (ngModelChange)=\"_onInput()\"\n        [attr.aria-describedby]=\"_describedBy\"\n        [attr.aria-labelledby]=\"_ariaLabelledBy\"\n        [attr.required]=\"required || null\"\n        [attr.disabled]=\"disabled || null\"\n        [attr.placeholder]=\"placeholder || null\"\n    />\n\n    <input\n        class=\"c-input readonly-input\"\n        *ngIf=\"readonly && !disabled\"\n        type=\"tel\"\n        [attr.readonly]=\"readonly || null\"\n        [attr.aria-readonly]=\"readonly || null\"\n        [value]=\"_getReadonlyValue()\"\n        [attr.aria-describedby]=\"_describedBy\"\n        [attr.aria-labelledby]=\"_ariaLabelledBy\"\n    />\n</div>\n", styles: [":host{display:block;width:100%}.wrapper{display:flex;height:100%;align-items:center}.hide{display:none;visibility:hidden}input{flex:1}.readonly-input{margin-left:7px}nx-dropdown{width:auto;margin-right:8px}nx-dropdown.cdk-keyboard-focused{box-shadow:var(--focus-box-shadow);border-radius:4px}@media screen and (-ms-high-contrast: active),(forced-colors: active){nx-dropdown.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}nx-dropdown ::ng-deep .nx-dropdown__container{padding-right:0}nx-dropdown ::ng-deep .nx-dropdown__icon{margin-left:8px}nx-dropdown ::ng-deep .nx-dropdown__rendered{font-size:16px;line-height:24px}:host-context(.nx-formfield.has-outline) nx-dropdown{margin-left:7px}:host-context(.nx-formfield.has-outline) input{padding-left:0}:host-context(.nx-formfield.has-outline) ::ng-deep .nx-dropdown__container{padding:0}:host-context(.is-disabled) input{cursor:not-allowed}input{text-align:inherit;font-size:inherit;font-weight:inherit;background:0 0;color:inherit;border:none;outline:0;padding:0;margin:0}:host-context([dir=rtl]) nx-dropdown{margin-right:0;margin-left:8px}:host-context([dir=rtl]) nx-dropdown ::ng-deep .nx-dropdown__icon{margin-right:8px;margin-left:0}:host-context([dir=rtl]):host-context(.nx-formfield.has-outline) nx-dropdown{margin-right:7px;margin-left:8px}:host-context([dir=rtl]):host-context(.nx-formfield.has-outline) input{padding-left:7px;padding-right:0}\n"], components: [{ type: i6.NxDropdownComponent, selector: "nx-dropdown", inputs: ["options", "filterInputType", "tabIndex", "nxValue", "nxDisabled", "nxIsMultiselect", "nxRequired", "nxStyle", "placeholder", "nxIgnoreItemTrunctation", "nxShowFilter", "nxFilterPlaceholder", "nxOverlayLabel", "nxValueFormatter", "compareWith", "filterFn"], outputs: ["openedChange", "filterResult", "opened", "closed", "filterInput", "nxValueChange", "selectionChange"] }], directives: [{ type: i6.NxDropdownClosedLabelDirective, selector: "[nxClosedLabel]" }, { type: i5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i5.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxPhoneInputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-phone-input', changeDetection: ChangeDetectionStrategy.OnPush, providers: [{ provide: NxFormfieldControl, useExisting: NxPhoneInputComponent }], host: {
                        '[attr.id]': 'id',
                    }, template: "<div class=\"wrapper\">\n    <nx-dropdown\n        [class.hide]=\"readonly && !disabled\"\n        [nxValue]=\"countryCode\"\n        #dropdown\n        [nxShowFilter]=\"true\"\n        [nxDisabled]=\"disabled\"\n        [nxOverlayLabel]=\"areaCodeLabel\"\n        (nxValueChange)=\"_onCountryChange($event)\"\n        [options]=\"_sortedCountries\"\n    >\n        <span *nxClosedLabel>+{{ _getCallingCode(dropdown.value) }}</span>\n    </nx-dropdown>\n\n    <!-- adding c-input for the styles and to not get the overhead of the nxInput directive -->\n    <input\n        class=\"c-input\"\n        [class.hide]=\"readonly && !disabled\"\n        type=\"tel\"\n        (blur)=\"_onInputBlur()\"\n        [(ngModel)]=\"_inputValue\"\n        (ngModelChange)=\"_onInput()\"\n        [attr.aria-describedby]=\"_describedBy\"\n        [attr.aria-labelledby]=\"_ariaLabelledBy\"\n        [attr.required]=\"required || null\"\n        [attr.disabled]=\"disabled || null\"\n        [attr.placeholder]=\"placeholder || null\"\n    />\n\n    <input\n        class=\"c-input readonly-input\"\n        *ngIf=\"readonly && !disabled\"\n        type=\"tel\"\n        [attr.readonly]=\"readonly || null\"\n        [attr.aria-readonly]=\"readonly || null\"\n        [value]=\"_getReadonlyValue()\"\n        [attr.aria-describedby]=\"_describedBy\"\n        [attr.aria-labelledby]=\"_ariaLabelledBy\"\n    />\n</div>\n", styles: [":host{display:block;width:100%}.wrapper{display:flex;height:100%;align-items:center}.hide{display:none;visibility:hidden}input{flex:1}.readonly-input{margin-left:7px}nx-dropdown{width:auto;margin-right:8px}nx-dropdown.cdk-keyboard-focused{box-shadow:var(--focus-box-shadow);border-radius:4px}@media screen and (-ms-high-contrast: active),(forced-colors: active){nx-dropdown.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}nx-dropdown ::ng-deep .nx-dropdown__container{padding-right:0}nx-dropdown ::ng-deep .nx-dropdown__icon{margin-left:8px}nx-dropdown ::ng-deep .nx-dropdown__rendered{font-size:16px;line-height:24px}:host-context(.nx-formfield.has-outline) nx-dropdown{margin-left:7px}:host-context(.nx-formfield.has-outline) input{padding-left:0}:host-context(.nx-formfield.has-outline) ::ng-deep .nx-dropdown__container{padding:0}:host-context(.is-disabled) input{cursor:not-allowed}input{text-align:inherit;font-size:inherit;font-weight:inherit;background:0 0;color:inherit;border:none;outline:0;padding:0;margin:0}:host-context([dir=rtl]) nx-dropdown{margin-right:0;margin-left:8px}:host-context([dir=rtl]) nx-dropdown ::ng-deep .nx-dropdown__icon{margin-right:8px;margin-left:0}:host-context([dir=rtl]):host-context(.nx-formfield.has-outline) nx-dropdown{margin-right:7px;margin-left:8px}:host-context([dir=rtl]):host-context(.nx-formfield.has-outline) input{padding-left:7px;padding-right:0}\n"] }]
        }], ctorParameters: function () {
        return [{ type: i0.ElementRef }, { type: i1.FocusMonitor }, { type: i0.ChangeDetectorRef }, { type: i2.ErrorStateMatcher }, { type: NxPhoneInputIntl }, { type: i4.NxFormfieldComponent, decorators: [{
                        type: Optional
                    }] }, { type: i5.NgControl, decorators: [{
                        type: Optional
                    }, {
                        type: Self
                    }] }, { type: i5.NgForm, decorators: [{
                        type: Optional
                    }] }, { type: i5.FormGroupDirective, decorators: [{
                        type: Optional
                    }] }];
    }, propDecorators: { dropdown: [{
                type: ViewChild,
                args: [NxDropdownComponent, { static: true }]
            }], id: [{
                type: Input
            }], required: [{
                type: Input
            }], disabled: [{
                type: Input
            }], readonly: [{
                type: Input
            }], countryCode: [{
                type: Input
            }], areaCodeLabel: [{
                type: Input
            }], countryNames: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], inputFormatter: [{
                type: Input
            }] } });

class NxPhoneInputModule {
}
NxPhoneInputModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxPhoneInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NxPhoneInputModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxPhoneInputModule, declarations: [NxPhoneInputComponent], imports: [NxDropdownModule, CommonModule, FormsModule, NxInputModule], exports: [NxPhoneInputComponent, NxFormfieldModule] });
NxPhoneInputModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxPhoneInputModule, providers: [], imports: [[NxDropdownModule, CommonModule, FormsModule, NxInputModule], NxFormfieldModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxPhoneInputModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [NxDropdownModule, CommonModule, FormsModule, NxInputModule],
                    exports: [NxPhoneInputComponent, NxFormfieldModule],
                    declarations: [NxPhoneInputComponent],
                    providers: [],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { NxPhoneInputComponent, NxPhoneInputIntl, NxPhoneInputModule, getCountryCallingCodeFromNumber, getCountryCodeforCallingCode, getCountryNameByCountryCode, getDialCodeByCountryCode, getSortedCountryCodes };
//# sourceMappingURL=aposin-ng-aquila-phone-input.mjs.map
