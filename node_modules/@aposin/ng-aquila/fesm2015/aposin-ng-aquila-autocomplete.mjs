import { ActiveDescendantKeyManager, A11yModule } from '@angular/cdk/a11y';
import * as i0 from '@angular/core';
import { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, TemplateRef, Optional, ViewChild, ViewChildren, ContentChildren, forwardRef, InjectionToken, Directive, Host, Inject, NgModule } from '@angular/core';
import { Subject, Observable, Subscription, defer, merge, of, fromEvent } from 'rxjs';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { ENTER, SPACE, ESCAPE, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';
import * as i1 from '@aposin/ng-aquila/formfield';
import * as i3 from '@angular/common';
import { DOCUMENT, CommonModule } from '@angular/common';
import * as i1$1 from '@angular/cdk/overlay';
import { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';
import { TemplatePortal } from '@angular/cdk/portal';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { take, switchMap, filter, takeUntil, debounceTime, first, tap, delay } from 'rxjs/operators';
import * as i2 from '@angular/cdk/bidi';
import * as i3$1 from '@angular/cdk/text-field';
import * as i5 from '@aposin/ng-aquila/natural-language-form';

/** Option selected event */
class NxAutocompleteOptionSelected {
    constructor(
    /** The option that is selected or deselected. */
    source, 
    /** Whether the input was triggered by the user. */
    isUserInput = false) {
        this.source = source;
        this.isUserInput = isUserInput;
    }
}
/**
 * Option IDs need to be unique across components, so this counter exists outside of
 * the component definition.
 */
let _uniqueIdCounter = 0;
class NxAutocompleteOptionComponent {
    constructor(/** @docs-private */ elementRef, _cdr) {
        this.elementRef = elementRef;
        this._cdr = _cdr;
        this._id = `nx-autocomplete-option-${_uniqueIdCounter++}`;
        this._selected = false;
        this._active = false;
        this._disabled = false;
        /** Event emitted when the option is selected or deselected. */
        this.onSelectionChange = new EventEmitter();
    }
    /** Id of the autocomplete option. By default it is set to an incremented value. */
    get id() {
        return this._id;
    }
    /** Whether or not the option is currently selected. */
    get selected() {
        return this._selected;
    }
    /**
     * Whether or not the option is currently active and ready to be selected.
     * An active option displays styles as if it is focused, but the
     * focus is actually retained somewhere else. This comes in handy
     * for components like autocomplete where focus must remain on the input.
     */
    get active() {
        return this._active;
    }
    /** Whether the option is disabled. */
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        const newValue = coerceBooleanProperty(value);
        if (this._disabled !== newValue) {
            this._disabled = newValue;
        }
    }
    /** Ensures the option is selected when activated from the keyboard. */
    _handleKeydown(event) {
        if (event.keyCode === ENTER || event.keyCode === SPACE) {
            this._selectViaInteraction();
            // Prevent the page from scrolling down and form submits.
            event.preventDefault();
        }
    }
    /**
     * `Selects the option while indicating the selection came from the user. Used to
     * determine if the select's view -> model callback should be invoked.`
     */
    _selectViaInteraction() {
        if (!this.disabled) {
            this._selected = true;
            this._cdr.markForCheck();
            this._emitSelectionChangeEvent(true);
        }
    }
    /** Returns the correct tabindex for the option depending on disabled state. */
    _getTabIndex() {
        return this.disabled ? '-1' : '0';
    }
    /** Emits the selection change event. */
    _emitSelectionChangeEvent(isUserInput = false) {
        this.onSelectionChange.emit(new NxAutocompleteOptionSelected(this, isUserInput));
    }
    /** @docs-private */
    get viewValue() {
        return (this.elementRef.nativeElement.textContent || '').trim();
    }
    /**
     * @docs-private
     * This method sets display styles on the option to make it appear
     * active. This is used by the ActiveDescendantKeyManager so key
     * events will display the proper options as active on arrow key events.
     */
    setActiveStyles() {
        if (!this._active) {
            this._active = true;
            this._cdr.markForCheck();
        }
    }
    /**
     * @docs-private
     * This method removes display styles on the option that made it appear
     * active. This is used by the ActiveDescendantKeyManager so key
     * events will display the proper options as active on arrow key events.
     */
    setInactiveStyles() {
        if (this._active) {
            this._active = false;
            this._cdr.markForCheck();
        }
    }
    /**
     * @docs-private
     * Gets the label to be used when determining whether the option should be focused.
     */
    getLabel() {
        return this.viewValue;
    }
    /** Selects the option. */
    select() {
        this._selected = true;
        this._cdr.markForCheck();
        this._emitSelectionChangeEvent();
    }
    /** Deselects the option. */
    deselect() {
        this._selected = false;
        this._cdr.markForCheck();
        this._emitSelectionChangeEvent();
    }
    /**
     * @docs-private
     * Sets focus onto this option.
     */
    focus() {
        const element = this.elementRef.nativeElement;
        if (typeof element.focus === 'function') {
            element.focus();
        }
    }
}
NxAutocompleteOptionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxAutocompleteOptionComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NxAutocompleteOptionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxAutocompleteOptionComponent, selector: "nx-autocomplete-option", inputs: { disabled: "disabled", value: "value" }, outputs: { onSelectionChange: "onSelectionChange" }, host: { attributes: { "role": "option" }, listeners: { "click": "_selectViaInteraction()", "keydown": "_handleKeydown($event)" }, properties: { "attr.tabindex": "_getTabIndex()", "id": "id", "attr.aria-selected": "selected.toString()", "attr.aria-disabled": "disabled.toString()", "class.nx-active": "active", "class.nx-disabled": "disabled", "style.display": "\"block\"" } }, ngImport: i0, template: "<div class=\"nx-autocomplete-option\" [class.nx-active]=\"active\">\n    <div class=\"nx-autocomplete-option__label\">\n        <ng-content></ng-content>\n    </div>\n</div>\n", styles: [":host:focus{outline:none}:host:first-child .nx-autocomplete-option{padding-top:16px}:host:last-child .nx-autocomplete-option{padding-bottom:16px}:host .nx-autocomplete-option{font-size:var(--dropdown-item-font-size);line-height:var(--dropdown-item-line-height);font-weight:var(--dropdown-item-font-weight);letter-spacing:var(--dropdown-item-letter-spacing);cursor:pointer;position:relative;display:flex;max-width:100%;white-space:nowrap;padding:8px 32px}:host-context([dir=rtl]) :host .nx-autocomplete-option{padding:8px 8px 8px 32px}:host .nx-autocomplete-option:hover .nx-autocomplete-option__label,:host .nx-autocomplete-option.nx-active .nx-autocomplete-option__label{color:var(--dropdown-item-hover-color)}@media screen and (-ms-high-contrast: active){:host .nx-autocomplete-option:hover .nx-autocomplete-option__label,:host .nx-autocomplete-option.nx-active .nx-autocomplete-option__label{color:highlightText;background-color:highlight;border-radius:4px}}:host .nx-autocomplete-option.nx-active .nx-autocomplete-option__label{border-radius:4px;box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){:host .nx-autocomplete-option.nx-active .nx-autocomplete-option__label{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}:host-context([dir=rtl]) :host .nx-autocomplete-option{padding-right:32px}:host .nx-autocomplete-option__label{padding:0 12px;margin:0 -12px;color:var(--dropdown-item-text-color)}@media screen and (-ms-high-contrast: active){:host .nx-autocomplete-option__label{-ms-high-contrast-adjust:none;color:buttonText;background-color:buttonFace;border-radius:4px}}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxAutocompleteOptionComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-autocomplete-option', host: {
                        role: 'option',
                        '[attr.tabindex]': '_getTabIndex()',
                        '[id]': 'id',
                        '[attr.aria-selected]': 'selected.toString()',
                        '[attr.aria-disabled]': 'disabled.toString()',
                        '(click)': '_selectViaInteraction()',
                        '(keydown)': '_handleKeydown($event)',
                        '[class.nx-active]': 'active',
                        '[class.nx-disabled]': 'disabled',
                        '[style.display]': '"block"', // needed for to be able to calculate offset height
                    }, changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"nx-autocomplete-option\" [class.nx-active]=\"active\">\n    <div class=\"nx-autocomplete-option__label\">\n        <ng-content></ng-content>\n    </div>\n</div>\n", styles: [":host:focus{outline:none}:host:first-child .nx-autocomplete-option{padding-top:16px}:host:last-child .nx-autocomplete-option{padding-bottom:16px}:host .nx-autocomplete-option{font-size:var(--dropdown-item-font-size);line-height:var(--dropdown-item-line-height);font-weight:var(--dropdown-item-font-weight);letter-spacing:var(--dropdown-item-letter-spacing);cursor:pointer;position:relative;display:flex;max-width:100%;white-space:nowrap;padding:8px 32px}:host-context([dir=rtl]) :host .nx-autocomplete-option{padding:8px 8px 8px 32px}:host .nx-autocomplete-option:hover .nx-autocomplete-option__label,:host .nx-autocomplete-option.nx-active .nx-autocomplete-option__label{color:var(--dropdown-item-hover-color)}@media screen and (-ms-high-contrast: active){:host .nx-autocomplete-option:hover .nx-autocomplete-option__label,:host .nx-autocomplete-option.nx-active .nx-autocomplete-option__label{color:highlightText;background-color:highlight;border-radius:4px}}:host .nx-autocomplete-option.nx-active .nx-autocomplete-option__label{border-radius:4px;box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){:host .nx-autocomplete-option.nx-active .nx-autocomplete-option__label{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}:host-context([dir=rtl]) :host .nx-autocomplete-option{padding-right:32px}:host .nx-autocomplete-option__label{padding:0 12px;margin:0 -12px;color:var(--dropdown-item-text-color)}@media screen and (-ms-high-contrast: active){:host .nx-autocomplete-option__label{-ms-high-contrast-adjust:none;color:buttonText;background-color:buttonFace;border-radius:4px}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { disabled: [{
                type: Input
            }], value: [{
                type: Input
            }], onSelectionChange: [{
                type: Output
            }] } });

/**
 * Autocomplete IDs need to be unique across components, so this counter exists outside of
 * the component definition.
 */
let _uniqueAutocompleteIdCounter = 0;
/** Event object that is emitted when an autocomplete option is selected. */
class NxAutocompleteSelectedEvent {
    constructor(
    /** Reference to the autocomplete panel that emitted the event. */
    source, 
    /** Option that was selected. */
    option) {
        this.source = source;
        this.option = option;
    }
}
class NxAutocompleteComponent {
    constructor(_cdr, _elementRef, formFieldComponent) {
        this._cdr = _cdr;
        this._elementRef = _elementRef;
        this.formFieldComponent = formFieldComponent;
        /** Whether the autocomplete panel should be visible, depending on option length. */
        this.showPanel = false;
        this._isOpen = false;
        this._items = null;
        this._hasItems = false;
        /** Event that is emitted whenever an option from the list is selected. */
        this.optionSelected = new EventEmitter();
        /** Event that is emitted when the autocomplete panel is opened. */
        this.opened = new EventEmitter();
        /** Event that is emitted when the autocomplete panel is closed. */
        this.closed = new EventEmitter();
        this._classList = {};
        /** Unique ID to be used by autocomplete trigger's "aria-owns" property. */
        this.id = `nx-autocomplete-${_uniqueAutocompleteIdCounter++}`;
        this._destroyed = new Subject();
        /**
         * Value to string converter function.
         * As an autocomplete option can hold any value, a converter might be needed
         * to get a string representation of the value, which can be stored in the input.
         *
         * Default: value ? value.toString() : null.
         */
        this.valueFormatter = (value) => (value ? value.toString() : null);
    }
    /** Whether the autocomplete panel is open. */
    get isOpen() {
        return this._isOpen && this.showPanel;
    }
    /** Items observable. If given, autocomplete takes care of the options and ng-content is discarderd */
    set items(val) {
        var _a;
        this._hasItems = true;
        if (Array.isArray(val)) {
            this._items = val;
        }
        else if (val instanceof Observable) {
            (_a = this._itemsSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
            this._itemsSubscription = val.subscribe(itms => {
                this._items = itms;
                this._cdr.markForCheck();
                // and check visibility in next cycle, when options are set
                setTimeout(() => this._setVisibility());
            });
        }
        else if (val === null) {
            this._items = val;
        }
        else {
            throw new Error('Invalid argument for autocomplete items. It has to be Array<string> or Observable<Array<string>>');
        }
    }
    get items() {
        return this._items; // TODO properly coerce input as empty array
    }
    /**
     * @docs-private
     * Is items observable set
     */
    get hasItems() {
        return this._hasItems;
    }
    /** Autocomplete options */
    get options() {
        return this.hasItems ? this._vOptions : this._cOptions;
    }
    /**
     * Takes classes set on the host nx-autocomplete element and applies them to the panel
     * inside the overlay container to allow for easy styling.
     */
    set classList(value) {
        if (value === null || value === void 0 ? void 0 : value.length) {
            value.split(' ').forEach(className => (this._classList[className.trim()] = true));
            this._elementRef.nativeElement.className = '';
        }
    }
    ngAfterViewInit() {
        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();
        this._setVisibility();
    }
    ngOnDestroy() {
        var _a;
        this._destroyed.next();
        this._destroyed.complete();
        (_a = this._itemsSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    }
    /**
     * Sets the panel scrollTop. This allows us to manually scroll to display options
     * above or below the fold, as they are not actually being focused when active.
     */
    _setScrollTop(scrollTop) {
        if (this.panel) {
            this.panel.nativeElement.scrollTop = scrollTop;
        }
    }
    /** Returns the panel's scrollTop. */
    _getScrollTop() {
        return this.panel ? this.panel.nativeElement.scrollTop : 0;
    }
    /** Panel should hide itself when the option list is empty. */
    _setVisibility() {
        var _a;
        this.showPanel = !!((_a = this.options) === null || _a === void 0 ? void 0 : _a.length);
        this._classList['nx-autocomplete-visible'] = this.showPanel;
        this._classList['nx-autocomplete-hidden'] = !this.showPanel;
        this._cdr.markForCheck();
    }
    /** Emits the `select` event. */
    _emitSelectEvent(option) {
        const event = new NxAutocompleteSelectedEvent(this, option);
        this.optionSelected.emit(event);
    }
    get _isInOutlineField() {
        return this.formFieldComponent !== null && this.formFieldComponent.appearance === 'outline';
    }
}
NxAutocompleteComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxAutocompleteComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i1.NxFormfieldComponent, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NxAutocompleteComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxAutocompleteComponent, selector: "nx-autocomplete", inputs: { items: "items", classList: ["class", "classList"], valueFormatter: ["nxValueFormatter", "valueFormatter"] }, outputs: { optionSelected: "optionSelected", opened: "opened", closed: "closed" }, host: { classAttribute: "nx-autocomplete" }, queries: [{ propertyName: "_cOptions", predicate: NxAutocompleteOptionComponent, descendants: true }], viewQueries: [{ propertyName: "template", first: true, predicate: TemplateRef, descendants: true }, { propertyName: "panel", first: true, predicate: ["panel"], descendants: true }, { propertyName: "_vOptions", predicate: NxAutocompleteOptionComponent, descendants: true }], exportAs: ["nxAutocomplete"], ngImport: i0, template: "<ng-template>\n    <div\n        class=\"nx-autocomplete-panel\"\n        role=\"listbox\"\n        [id]=\"id\"\n        [ngClass]=\"_classList\"\n        [class.nx-autocomplete-panel--in-outline-field]=\"_isInOutlineField\"\n        #panel\n    >\n        <ng-container *ngIf=\"hasItems\">\n            <nx-autocomplete-option *ngFor=\"let item of items\" [value]=\"item\">\n                {{ item }}\n            </nx-autocomplete-option>\n        </ng-container>\n        <ng-container *ngIf=\"!hasItems\">\n            <ng-content></ng-content>\n        </ng-container>\n    </div>\n</ng-template>\n", styles: [":host ::ng-deep .c-input::-ms-clear{width:0;height:0}.nx-autocomplete-panel{background-color:var(--dropdown-panel-background-color);box-shadow:var(--shadow-small);overflow-y:auto;overflow-x:hidden;max-height:280px;width:100%;border-radius:4px}.nx-autocomplete-panel.nx-autocomplete-visible{visibility:visible}.nx-autocomplete-panel.nx-autocomplete-hidden{visibility:hidden}.nx-autocomplete-panel--in-outline-field ::ng-deep nx-autocomplete-option .nx-autocomplete-option,.nx-autocomplete-panel--in-outline-field ::ng-deep nx-autocomplete-option .nx-autocomplete-option__label{font-size:var(--dropdown-item-outline-font-size);line-height:var(--dropdown-item-outline-line-height);font-weight:var(--dropdown-item-outline-font-weight);letter-spacing:var(--dropdown-item-outline-letter-spacing)}@media screen and (-ms-high-contrast: active){.nx-autocomplete-panel{box-shadow:0 0 0 1px windowText}}\n"], components: [{ type: NxAutocompleteOptionComponent, selector: "nx-autocomplete-option", inputs: ["disabled", "value"], outputs: ["onSelectionChange"] }], directives: [{ type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxAutocompleteComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-autocomplete', changeDetection: ChangeDetectionStrategy.OnPush, exportAs: 'nxAutocomplete', host: {
                        class: 'nx-autocomplete',
                    }, template: "<ng-template>\n    <div\n        class=\"nx-autocomplete-panel\"\n        role=\"listbox\"\n        [id]=\"id\"\n        [ngClass]=\"_classList\"\n        [class.nx-autocomplete-panel--in-outline-field]=\"_isInOutlineField\"\n        #panel\n    >\n        <ng-container *ngIf=\"hasItems\">\n            <nx-autocomplete-option *ngFor=\"let item of items\" [value]=\"item\">\n                {{ item }}\n            </nx-autocomplete-option>\n        </ng-container>\n        <ng-container *ngIf=\"!hasItems\">\n            <ng-content></ng-content>\n        </ng-container>\n    </div>\n</ng-template>\n", styles: [":host ::ng-deep .c-input::-ms-clear{width:0;height:0}.nx-autocomplete-panel{background-color:var(--dropdown-panel-background-color);box-shadow:var(--shadow-small);overflow-y:auto;overflow-x:hidden;max-height:280px;width:100%;border-radius:4px}.nx-autocomplete-panel.nx-autocomplete-visible{visibility:visible}.nx-autocomplete-panel.nx-autocomplete-hidden{visibility:hidden}.nx-autocomplete-panel--in-outline-field ::ng-deep nx-autocomplete-option .nx-autocomplete-option,.nx-autocomplete-panel--in-outline-field ::ng-deep nx-autocomplete-option .nx-autocomplete-option__label{font-size:var(--dropdown-item-outline-font-size);line-height:var(--dropdown-item-outline-line-height);font-weight:var(--dropdown-item-outline-font-weight);letter-spacing:var(--dropdown-item-outline-letter-spacing)}@media screen and (-ms-high-contrast: active){.nx-autocomplete-panel{box-shadow:0 0 0 1px windowText}}\n"] }]
        }], ctorParameters: function () {
        return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i1.NxFormfieldComponent, decorators: [{
                        type: Optional
                    }] }];
    }, propDecorators: { template: [{
                type: ViewChild,
                args: [TemplateRef]
            }], panel: [{
                type: ViewChild,
                args: ['panel']
            }], items: [{
                type: Input
            }], optionSelected: [{
                type: Output
            }], opened: [{
                type: Output
            }], closed: [{
                type: Output
            }], _vOptions: [{
                type: ViewChildren,
                args: [NxAutocompleteOptionComponent]
            }], _cOptions: [{
                type: ContentChildren,
                args: [NxAutocompleteOptionComponent, { descendants: true }]
            }], classList: [{
                type: Input,
                args: ['class']
            }], valueFormatter: [{
                type: Input,
                args: ['nxValueFormatter']
            }] } });

/**
 * Provider that allows the autocomplete to register as a ControlValueAccessor.
 * @docs-private
 */
const NX_AUTOCOMPLETE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NxAutocompleteTriggerDirective),
    multi: true,
};
/** Injection token that determines the scroll handling while an autocomplete is open. */
const NX_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('nx-autocomplete-scroll-strategy');
/** @docs-private */
function NX_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {
    return () => overlay.scrollStrategies.reposition();
}
/** @docs-private */
const NX_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {
    provide: NX_AUTOCOMPLETE_SCROLL_STRATEGY,
    useFactory: NX_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,
    deps: [Overlay],
};
/**
 * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.
 */
function getNxAutocompleteMissingPanelError() {
    return Error('Attempting to open an undefined instance of `nx-autocomplete`. ' +
        'Make sure that the id passed to the `nxAutocomplete` is correct and that ' +
        "you're attempting to open it after the ngAfterContentInit hook.");
}
class NxAutocompleteTriggerDirective {
    constructor(_element, _overlay, _viewContainerRef, _zone, _cdr, _dir, _autofillMonitor, _nxFormField, _nxWordField, _document, _defaultScrollStrategyFactory, _viewportRuler) {
        this._element = _element;
        this._overlay = _overlay;
        this._viewContainerRef = _viewContainerRef;
        this._zone = _zone;
        this._cdr = _cdr;
        this._dir = _dir;
        this._autofillMonitor = _autofillMonitor;
        this._nxFormField = _nxFormField;
        this._nxWordField = _nxWordField;
        this._document = _document;
        this._defaultScrollStrategyFactory = _defaultScrollStrategyFactory;
        this._viewportRuler = _viewportRuler;
        this._componentDestroyed = false;
        this._isAutofill = false;
        /** Whether or not the label state is being overridden. */
        this._manuallyFloatingLabel = false;
        /** Subscription to viewport size changes. */
        this._viewportSubscription = Subscription.EMPTY;
        /**
         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,
         * closed autocomplete from being reopened if the user switches to another browser tab and then
         * comes back.
         */
        this._canOpenOnNextFocus = true;
        /** Stream of keyboard events that can close the panel. */
        this._closeKeyEventStream = new Subject();
        /** Value changes */
        this._valueChanges = new Subject();
        /** Strategy factory that will be used to handle scrolling while the autocomplete panel is open. */
        this._scrollStrategyFactory = this._defaultScrollStrategyFactory;
        this._debounce = 400;
        this._autocompleteDisabled = false;
        this._overlayAttached = false;
        /** Stream of autocomplete option selections. */
        this.optionSelections = defer(() => {
            var _a;
            if ((_a = this.autocomplete) === null || _a === void 0 ? void 0 : _a.options) {
                return merge(...this.autocomplete.options.map(option => option.onSelectionChange));
            }
            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.
            // Return a stream that we'll replace with the real one once everything is in place.
            return this._zone.onStable.asObservable().pipe(take(1), switchMap(() => this.optionSelections));
        });
        this._destroyed = new Subject();
        /**
         * Event handler for when the window is blurred. Needs to be an
         * arrow function in order to preserve the context.
         */
        this._windowBlurHandler = () => {
            // If the user blurred the window while the autocomplete is focused, it means that it'll be
            // refocused when they come back. In this case we want to skip the first focus event, if the
            // pane was closed, in order to avoid reopening it unintentionally.
            this._canOpenOnNextFocus = document.activeElement !== this._element.nativeElement || this.panelOpen;
        };
        /** `View -> model callback called when value changes` */
        this._onChange = val => {
            this._valueChanges.next(val);
        };
        /** `View -> model callback called when autocomplete has been touched` */
        this._onTouched = () => { };
        if (typeof window !== 'undefined') {
            _zone.runOutsideAngular(() => {
                window.addEventListener('blur', this._windowBlurHandler);
            });
        }
    }
    /** The items callback. Called with input value, must return Observable of Array of strings */
    set itemsCb(val) {
        if (typeof val === 'function') {
            this._itemsCb = val;
        }
        else {
            throw new Error('Wrong value type for nxAutocompleteItems');
        }
    }
    get itemsCb() {
        return this._itemsCb;
    }
    /** Debounce in ms before items callback is triggered. Defaults to 400 */
    set debounce(val) {
        this._debounce = coerceNumberProperty(val);
    }
    /** Whether autocomplete functionality is disabled. */
    set autocompleteDisabled(val) {
        this._autocompleteDisabled = val;
        this._bindAutocompleteItems();
    }
    get autocompleteDisabled() {
        return this._autocompleteDisabled;
    }
    /** Whether or not the autocomplete panel is open. */
    get panelOpen() {
        return this._overlayAttached && this.autocomplete.showPanel;
    }
    /** The currently active option, coerced to NxAutocompleteOptionComponent type. */
    get activeOption() {
        var _a;
        if ((_a = this.autocomplete) === null || _a === void 0 ? void 0 : _a._keyManager) {
            return this.autocomplete._keyManager.activeItem;
        }
        return null;
    }
    /** Stream of clicks outside of the autocomplete panel. */
    get _outsideClickStream() {
        if (!this._document) {
            return of(null);
        }
        return merge(fromEvent(this._document, 'mouseup'), fromEvent(this._document, 'touchend')).pipe(filter((event) => {
            const clickTarget = event.target;
            const formField = this._formField ? this._formField.elementRef.nativeElement : null;
            return (this._overlayAttached &&
                clickTarget !== this._element.nativeElement &&
                (!formField || !formField.contains(clickTarget)) &&
                !!this._overlayRef &&
                !this._overlayRef.overlayElement.contains(clickTarget));
        }));
    }
    get _formField() {
        if (this._nxFormField) {
            return this._nxFormField;
        }
        return this._nxWordField;
    }
    ngOnInit() {
        this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {
            this._flipDirection();
            this._cdr.markForCheck();
        });
        this._autofillMonitor
            .monitor(this._element.nativeElement)
            .pipe(takeUntil(this._destroyed))
            .subscribe(event => {
            this._isAutofill = event.isAutofilled;
        });
    }
    ngOnDestroy() {
        var _a, _b;
        this._destroyed.next();
        this._destroyed.complete();
        if (typeof window !== 'undefined') {
            window.removeEventListener('blur', this._windowBlurHandler);
        }
        this._viewportSubscription.unsubscribe();
        this._componentDestroyed = true;
        this._destroyPanel();
        this._closeKeyEventStream.complete();
        (_a = this._controlValueChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        (_b = this._itemsSubscription) === null || _b === void 0 ? void 0 : _b.unsubscribe();
        this._autofillMonitor.stopMonitoring(this._element.nativeElement);
    }
    ngOnChanges() {
        this._bindAutocompleteItems();
    }
    ngAfterViewInit() {
        this._bindAutocompleteItems();
    }
    /**
     * Binds or rebinds the autocomplete items. Prerequisites:
     * - items callback has to be defined
     * - autocomplete panel has to be bound
     */
    _bindAutocompleteItems() {
        var _a, _b, _c;
        if (this._controlValueChangesSubscription) {
            this._controlValueChangesSubscription.unsubscribe();
        }
        if (typeof this._itemsCb === 'function' && this.autocomplete && !this.autocompleteDisabled) {
            const itemsSubject = new Subject();
            this.autocomplete.items = itemsSubject;
            const valueChanges = ((_c = (_b = (_a = this._formField) === null || _a === void 0 ? void 0 : _a._control) === null || _b === void 0 ? void 0 : _b.ngControl) === null || _c === void 0 ? void 0 : _c.valueChanges) || this._valueChanges;
            this._controlValueChangesSubscription = valueChanges.pipe(debounceTime(this._debounce)).subscribe(input => {
                if (this._itemsSubscription) {
                    this._itemsSubscription.unsubscribe();
                }
                this._itemsSubscription = this._itemsCb(input)
                    .pipe(first())
                    .subscribe(result => {
                    itemsSubject.next(result);
                }, err => {
                    // On error reset
                    // TODO Log error?
                    itemsSubject.next([]);
                });
            });
        }
    }
    /** Opens the autocomplete suggestion panel. */
    openPanel() {
        if (!this.autocompleteDisabled) {
            this._attachOverlay();
            this._floatLabel();
        }
    }
    /** Closes the autocomplete suggestion panel. */
    closePanel() {
        var _a;
        this._resetLabel();
        if (!this._overlayAttached) {
            return;
        }
        if (this.panelOpen) {
            // Only emit if the panel was visible.
            this.autocomplete.closed.emit();
        }
        this.autocomplete._isOpen = this._overlayAttached = false;
        if ((_a = this._overlayRef) === null || _a === void 0 ? void 0 : _a.hasAttached()) {
            this._overlayRef.detach();
            this._closingActionsSubscription.unsubscribe();
        }
        // Note that in some cases this can end up being called after the component is destroyed.
        // Add a check to ensure that we don't try to run change detection on a destroyed view.
        if (!this._componentDestroyed) {
            // We need to trigger change detection manually, because
            // `fromEvent` doesn't seem to do it at the proper time.
            // This ensures that the label is reset when the
            // user clicks outside.
            this._cdr.detectChanges();
        }
    }
    /**
     * A stream of actions that should close the autocomplete panel, including
     * when an option is selected, on blur, and when TAB is pressed.
     */
    get panelClosingActions() {
        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._outsideClickStream, this._overlayRef ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) : of());
    }
    // Implemented as part of ControlValueAccessor.
    writeValue(value) {
        Promise.resolve(null).then(() => this._setTriggerValue(value));
    }
    // Implemented as part of ControlValueAccessor.
    registerOnChange(fn) {
        this._onChange = fn;
    }
    // Implemented as part of ControlValueAccessor.
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    // Implemented as part of ControlValueAccessor.
    setDisabledState(isDisabled) {
        this._element.nativeElement.disabled = isDisabled;
    }
    _handleKeydown(event) {
        const keyCode = event.keyCode;
        // Prevent the default action on all escape key presses. This is here primarily to bring IE
        // in line with other browsers. By default, pressing escape on IE will cause it to revert
        // the input value to the one that it had on focus, however it won't dispatch any events
        // which means that the model value will be out of sync with the view.
        if (keyCode === ESCAPE) {
            event.preventDefault();
        }
        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.
        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction
        if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {
            this._resetActiveItem();
            this._closeKeyEventStream.next();
            event.stopPropagation();
        }
        else if (this.activeOption && keyCode === ENTER && this.panelOpen) {
            this.activeOption._selectViaInteraction();
            this._resetActiveItem();
            event.preventDefault();
        }
        else {
            const prevActiveItem = this.autocomplete._keyManager.activeItem;
            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;
            if (this.panelOpen || keyCode === TAB) {
                this.autocomplete._keyManager.onKeydown(event);
            }
            else if (isArrowKey && this._isFieldEnabled()) {
                this.openPanel();
            }
            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {
                this._scrollToOption();
            }
        }
    }
    _handleInput(event) {
        const target = event.target;
        let value = target.value;
        // Based on `NumberValueAccessor` from forms.
        if (target.type === 'number') {
            value = value === '' ? null : parseFloat(value);
        }
        // in case of autofill from browser
        // input can come from any activeElement which differ from event.target
        // so checking if it's autofill instead.
        if (this._isFieldEnabled() && this._previousValue !== value && this._isAutofill) {
            this._previousValue = value;
            this._onChange(value);
            this._isAutofill = false;
            return;
        }
        // If the input has a placeholder, IE will fire the `input` event on page load,
        // focus and blur, in addition to when the user actually changed the value. To
        // filter out all of the extra events, we save the value on focus and between
        // `input` events, and we check whether it changed.
        // See: https://connect.microsoft.com/IE/feedback/details/885747/
        if (this._isFieldEnabled() && this._previousValue !== value && this._rootElement().activeElement === event.target) {
            this._previousValue = value;
            this._onChange(value);
            this.openPanel();
        }
    }
    _rootElement() {
        return this._element.nativeElement.getRootNode();
    }
    _handleFocus() {
        if (!this._canOpenOnNextFocus) {
            this._canOpenOnNextFocus = true;
        }
        else if (this._isFieldEnabled()) {
            this._previousValue = this._element.nativeElement.value;
            this.openPanel();
        }
    }
    /**
     * In "auto" mode, the label will animate down as soon as focus is lost.
     * This causes the value to jump when selecting an option with the mouse.
     * This method manually floats the label until the panel can be closed.
     * @param shouldAnimate Whether the label should be animated when it is floated.
     */
    _floatLabel() {
        if (this._nxFormField && this._nxFormField.floatLabel === 'auto') {
            this._nxFormField.floatLabel = 'always';
            this._manuallyFloatingLabel = true;
        }
    }
    /** If the label has been manually elevated, return it to its normal state. */
    _resetLabel() {
        if (this._nxFormField && this._manuallyFloatingLabel) {
            this._nxFormField.floatLabel = 'auto';
            this._manuallyFloatingLabel = false;
        }
    }
    /**
     * Given that we are not actually focusing active options, we must manually adjust scroll
     * to reveal options below the fold. First, we find the offset of the option from the top
     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -
     * the panel height + the option height, so the active option will be just visible at the
     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop
     * will become the offset. If that offset is visible within the panel already, the scrollTop is
     * not adjusted.
     */
    _scrollToOption() {
        if (this.autocomplete.options.length === 0) {
            return;
        }
        let optionOffset = 0;
        let optionHeight = this.autocomplete.options.first.elementRef.nativeElement.offsetHeight;
        if (this.autocomplete._keyManager.activeItem) {
            optionOffset = this.autocomplete._keyManager.activeItem.elementRef.nativeElement.offsetTop;
            optionHeight = this.autocomplete._keyManager.activeItem.elementRef.nativeElement.offsetHeight;
        }
        const panelOffsetTop = this.autocomplete.panel.nativeElement.offsetTop;
        const newScrollPosition = _getOptionScrollPosition(optionOffset, optionHeight, this.autocomplete._getScrollTop() + panelOffsetTop, this.autocomplete.panel.nativeElement.offsetHeight);
        this.autocomplete._setScrollTop(newScrollPosition - panelOffsetTop);
    }
    /**
     * This method listens to a stream of panel closing actions and resets the
     * stream every time the option list changes.
     */
    _subscribeToClosingActions() {
        const firstStable = this._zone.onStable.asObservable().pipe(take(1));
        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), 
        // Defer emitting to the stream until the next tick, because changing
        // bindings in here will cause "changed after checked" errors.
        delay(0));
        // When the zone is stable initially, and when the option list changes...
        return (merge(firstStable, optionChanges)
            .pipe(
        // create a new stream of panelClosingActions, replacing any previous streams
        // that were created, and flatten it so our stream only emits closing events...
        switchMap(() => {
            this._resetActiveItem();
            this.autocomplete._setVisibility();
            return this.panelClosingActions;
        }), 
        // when the first closing event occurs...
        take(1))
            // set the value, close the panel, and complete.
            .subscribe(event => this._setValueAndClose(event)));
    }
    /** Destroys the autocomplete suggestion panel. */
    _destroyPanel() {
        if (this._overlayRef) {
            this.closePanel();
            this._overlayRef.dispose();
            this._overlayRef = null;
        }
    }
    _setTriggerValue(value) {
        var _a;
        const toDisplay = ((_a = this.autocomplete) === null || _a === void 0 ? void 0 : _a.valueFormatter) ? this.autocomplete.valueFormatter(value) : value;
        // Simply falling back to an empty string if the display value is falsy does not work properly.
        // The display value can also be the number zero and shouldn't fall back to an empty string.
        const inputValue = toDisplay !== null && toDisplay !== void 0 ? toDisplay : '';
        // If it's used within a `NxFormField` or `NxWord`, we should set it through the property so it can go
        // through change detection.
        if (this._formField) {
            this._formField._control.value = inputValue;
        }
        else {
            this._element.nativeElement.value = inputValue;
        }
    }
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     */
    _setValueAndClose(event) {
        if (event === null || event === void 0 ? void 0 : event.source) {
            this._clearPreviousSelectedOption(event.source);
            this._setTriggerValue(event.source.value);
            this._onChange(event.source.value);
            this._element.nativeElement.focus();
            this.autocomplete._emitSelectEvent(event.source);
        }
        this.closePanel();
    }
    /**
     * Clear any previous selected option and emit a selection change event for this option
     */
    _clearPreviousSelectedOption(skip) {
        this.autocomplete.options.forEach(option => {
            if (option !== skip && option.selected) {
                option.deselect();
            }
        });
    }
    _attachOverlay() {
        if (!this.autocomplete) {
            throw getNxAutocompleteMissingPanelError();
        }
        if (this._overlayRef) {
            /** Update the panel width, in case the host width has changed */
            this._overlayRef.updateSize({ minWidth: this._getHostWidth() });
        }
        else {
            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);
            this._overlayRef = this._overlay.create(this._getOverlayConfig());
            if (this._viewportRuler) {
                this._viewportSubscription = this._viewportRuler.change().subscribe(() => {
                    if (this.panelOpen && this._overlayRef) {
                        this._overlayRef.updateSize({ minWidth: this._getHostWidth() });
                    }
                });
            }
        }
        if (this._overlayRef && !this._overlayRef.hasAttached()) {
            this._overlayRef.attach(this._portal);
            this._closingActionsSubscription = this._subscribeToClosingActions();
        }
        const wasOpen = this.panelOpen;
        this.autocomplete._setVisibility();
        this.autocomplete._isOpen = this._overlayAttached = true;
        // We need to do an extra `panelOpen` check in here, because the
        // autocomplete won't be shown if there are no options.
        if (this.panelOpen && wasOpen !== this.panelOpen) {
            this.autocomplete.opened.emit();
        }
    }
    _getOverlayConfig() {
        var _a;
        return new OverlayConfig({
            positionStrategy: this._getOverlayPosition(),
            scrollStrategy: this._scrollStrategyFactory(),
            minWidth: this._getHostWidth(),
            direction: ((_a = this._dir) === null || _a === void 0 ? void 0 : _a.value) || 'ltr',
        });
    }
    _getOverlayPosition() {
        var _a;
        const isRtl = ((_a = this._dir) === null || _a === void 0 ? void 0 : _a.value) === 'rtl';
        // HINT: somehow setting margin breaks overlay positioning for rtl
        const viewPortMargin = isRtl ? 0 : 16;
        this._positionStrategy = this._overlay
            .position()
            .flexibleConnectedTo(this._getConnectedElement())
            .withViewportMargin(viewPortMargin)
            .withPush(false)
            // to fix an edge case that would open the overlay after it has been visually hidden
            // and the trigger moved to the bottom edge of the viewport
            // problem is that the CDK overlay takes the last position into account which results
            // in the overlay only being 16px in height. this change disabled this code path for now
            .withGrowAfterOpen(true)
            .withPositions([
            {
                originX: 'start',
                originY: 'bottom',
                overlayX: 'start',
                overlayY: 'top',
            },
            {
                originX: 'start',
                originY: 'top',
                overlayX: 'start',
                overlayY: 'bottom',
            },
        ]);
        return this._positionStrategy;
    }
    _getConnectedElement() {
        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;
    }
    /** Returns the width of the input element, so the panel min-width can match it. */
    _getHostWidth() {
        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;
    }
    /**
     * Resets the active item to -1 so arrow events will activate the
     * correct options, or to 0 if the consumer opted into it.
     */
    _resetActiveItem() {
        this.autocomplete._keyManager.setActiveItem(-1);
    }
    /** Determines whether the panel can be opened. */
    _isFieldEnabled() {
        const element = this._element.nativeElement;
        return !element.readOnly && !element.disabled;
    }
    _flipDirection() {
        var _a, _b;
        (_a = this._overlayRef) === null || _a === void 0 ? void 0 : _a.setDirection(this._dir.value);
        (_b = this._overlayRef) === null || _b === void 0 ? void 0 : _b.updatePositionStrategy(this._getOverlayPosition());
    }
}
NxAutocompleteTriggerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxAutocompleteTriggerDirective, deps: [{ token: i0.ElementRef }, { token: i1$1.Overlay }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: i2.Directionality }, { token: i3$1.AutofillMonitor }, { token: i1.NxFormfieldComponent, host: true, optional: true }, { token: i5.NxWordComponent, host: true, optional: true }, { token: DOCUMENT, optional: true }, { token: NX_AUTOCOMPLETE_SCROLL_STRATEGY }, { token: i1$1.ViewportRuler }], target: i0.ɵɵFactoryTarget.Directive });
NxAutocompleteTriggerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxAutocompleteTriggerDirective, selector: "input[nxAutocomplete], textarea[nxAutocomplete]", inputs: { autocomplete: ["nxAutocomplete", "autocomplete"], itemsCb: ["nxAutocompleteItems", "itemsCb"], debounce: ["nxAutocompleteDebounce", "debounce"], autocompleteDisabled: ["nxAutocompleteDisabled", "autocompleteDisabled"] }, host: { attributes: { "role": "combobox", "autocomplete": "off", "aria-autocomplete": "list" }, listeners: { "focusin": "_handleFocus()", "blur": "_onTouched()", "input": "_handleInput($event)", "keydown": "_handleKeydown($event)" }, properties: { "attr.aria-activedescendant": "activeOption?.id", "attr.aria-expanded": "panelOpen.toString()", "attr.aria-owns": "autocomplete?.id" } }, providers: [NX_AUTOCOMPLETE_VALUE_ACCESSOR], exportAs: ["nxAutocompleteTrigger"], usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxAutocompleteTriggerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: `input[nxAutocomplete], textarea[nxAutocomplete]`,
                    host: {
                        role: 'combobox',
                        autocomplete: 'off',
                        'aria-autocomplete': 'list',
                        '[attr.aria-activedescendant]': 'activeOption?.id',
                        '[attr.aria-expanded]': 'panelOpen.toString()',
                        '[attr.aria-owns]': 'autocomplete?.id',
                        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel
                        // a little earlier. This avoids issues where IE delays the focusing of the input.
                        '(focusin)': '_handleFocus()',
                        '(blur)': '_onTouched()',
                        '(input)': '_handleInput($event)',
                        '(keydown)': '_handleKeydown($event)',
                    },
                    exportAs: 'nxAutocompleteTrigger',
                    providers: [NX_AUTOCOMPLETE_VALUE_ACCESSOR],
                }]
        }], ctorParameters: function () {
        return [{ type: i0.ElementRef }, { type: i1$1.Overlay }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: i2.Directionality }, { type: i3$1.AutofillMonitor }, { type: i1.NxFormfieldComponent, decorators: [{
                        type: Optional
                    }, {
                        type: Host
                    }] }, { type: i5.NxWordComponent, decorators: [{
                        type: Optional
                    }, {
                        type: Host
                    }] }, { type: Document, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [DOCUMENT]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [NX_AUTOCOMPLETE_SCROLL_STRATEGY]
                    }] }, { type: i1$1.ViewportRuler }];
    }, propDecorators: { autocomplete: [{
                type: Input,
                args: ['nxAutocomplete']
            }], itemsCb: [{
                type: Input,
                args: ['nxAutocompleteItems']
            }], debounce: [{
                type: Input,
                args: ['nxAutocompleteDebounce']
            }], autocompleteDisabled: [{
                type: Input,
                args: ['nxAutocompleteDisabled']
            }] } });
/**
 * Determines the position to which to scroll a panel in order for an option to be into view.
 * @param optionOffset Option offset
 * @param optionHeight Height of the options.
 * @param currentScrollPosition Current scroll position of the panel.
 * @param panelHeight Height of the panel.
 * @docs-private
 */
function _getOptionScrollPosition(optionOffset, optionHeight, currentScrollPosition, panelHeight) {
    if (optionOffset < currentScrollPosition) {
        return optionOffset;
    }
    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {
        return Math.max(0, optionOffset - panelHeight + optionHeight);
    }
    return currentScrollPosition;
}

class NxAutocompleteModule {
}
NxAutocompleteModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxAutocompleteModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NxAutocompleteModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxAutocompleteModule, declarations: [NxAutocompleteComponent, NxAutocompleteOptionComponent, NxAutocompleteTriggerDirective], imports: [CommonModule, OverlayModule, A11yModule], exports: [NxAutocompleteComponent, NxAutocompleteOptionComponent, NxAutocompleteTriggerDirective] });
NxAutocompleteModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxAutocompleteModule, providers: [NX_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER], imports: [[CommonModule, OverlayModule, A11yModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxAutocompleteModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NxAutocompleteComponent, NxAutocompleteOptionComponent, NxAutocompleteTriggerDirective],
                    exports: [NxAutocompleteComponent, NxAutocompleteOptionComponent, NxAutocompleteTriggerDirective],
                    imports: [CommonModule, OverlayModule, A11yModule],
                    providers: [NX_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { NX_AUTOCOMPLETE_SCROLL_STRATEGY, NX_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER, NX_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY, NX_AUTOCOMPLETE_VALUE_ACCESSOR, NxAutocompleteComponent, NxAutocompleteModule, NxAutocompleteOptionComponent, NxAutocompleteOptionSelected, NxAutocompleteSelectedEvent, NxAutocompleteTriggerDirective, getNxAutocompleteMissingPanelError };
//# sourceMappingURL=aposin-ng-aquila-autocomplete.mjs.map
