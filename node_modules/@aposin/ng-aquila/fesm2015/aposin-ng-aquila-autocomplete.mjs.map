{"version":3,"file":"aposin-ng-aquila-autocomplete.mjs","sources":["../../../projects/ng-aquila/src/autocomplete/autocomplete-option.component.ts","../../../projects/ng-aquila/src/autocomplete/autocomplete-option.component.html","../../../projects/ng-aquila/src/autocomplete/autocomplete.component.ts","../../../projects/ng-aquila/src/autocomplete/autocomplete.component.html","../../../projects/ng-aquila/src/autocomplete/autocomplete-trigger.directive.ts","../../../projects/ng-aquila/src/autocomplete/autocomplete.module.ts","../../../projects/ng-aquila/src/autocomplete/aposin-ng-aquila-autocomplete.ts"],"sourcesContent":["import { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';\n\n/** Option selected event */\nexport class NxAutocompleteOptionSelected {\n    constructor(\n        /** The option that is selected or deselected. */\n        public source: NxAutocompleteOptionComponent,\n        /** Whether the input was triggered by the user. */\n        public isUserInput = false,\n    ) {}\n}\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n@Component({\n    selector: 'nx-autocomplete-option',\n    templateUrl: 'autocomplete-option.component.html',\n    styleUrls: ['autocomplete-option.component.scss'],\n    host: {\n        role: 'option',\n        '[attr.tabindex]': '_getTabIndex()',\n        '[id]': 'id',\n        '[attr.aria-selected]': 'selected.toString()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '(click)': '_selectViaInteraction()',\n        '(keydown)': '_handleKeydown($event)',\n        '[class.nx-active]': 'active',\n        '[class.nx-disabled]': 'disabled',\n        '[style.display]': '\"block\"', // needed for to be able to calculate offset height\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxAutocompleteOptionComponent {\n    /** Id of the autocomplete option. By default it is set to an incremented value. */\n    get id(): string {\n        return this._id;\n    }\n    private _id = `nx-autocomplete-option-${_uniqueIdCounter++}`;\n\n    /** Whether or not the option is currently selected. */\n    get selected(): boolean {\n        return this._selected;\n    }\n    private _selected = false;\n\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active(): boolean {\n        return this._active;\n    }\n    private _active = false;\n\n    /** Whether the option is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n    set disabled(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n        }\n    }\n    private _disabled = false;\n\n    /** The value of the autocomplete option. */\n    @Input() value: any;\n\n    /** Event emitted when the option is selected or deselected. */\n    @Output() readonly onSelectionChange = new EventEmitter<NxAutocompleteOptionSelected>();\n\n    constructor(/** @docs-private */ public elementRef: ElementRef, private _cdr: ChangeDetectorRef) {}\n\n    /** Ensures the option is selected when activated from the keyboard. */\n    _handleKeydown(event: KeyboardEvent): void {\n        if (event.keyCode === ENTER || event.keyCode === SPACE) {\n            this._selectViaInteraction();\n\n            // Prevent the page from scrolling down and form submits.\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    _selectViaInteraction(): void {\n        if (!this.disabled) {\n            this._selected = true;\n            this._cdr.markForCheck();\n            this._emitSelectionChangeEvent(true);\n        }\n    }\n\n    /** Returns the correct tabindex for the option depending on disabled state. */\n    _getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    /** Emits the selection change event. */\n    private _emitSelectionChangeEvent(isUserInput = false): void {\n        this.onSelectionChange.emit(new NxAutocompleteOptionSelected(this, isUserInput));\n    }\n\n    /** @docs-private */\n    get viewValue(): string {\n        return (this.elementRef.nativeElement.textContent || '').trim();\n    }\n\n    /**\n     * @docs-private\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void {\n        if (!this._active) {\n            this._active = true;\n            this._cdr.markForCheck();\n        }\n    }\n\n    /**\n     * @docs-private\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void {\n        if (this._active) {\n            this._active = false;\n            this._cdr.markForCheck();\n        }\n    }\n\n    /**\n     * @docs-private\n     * Gets the label to be used when determining whether the option should be focused.\n     */\n    getLabel(): string {\n        return this.viewValue;\n    }\n\n    /** Selects the option. */\n    select(): void {\n        this._selected = true;\n        this._cdr.markForCheck();\n        this._emitSelectionChangeEvent();\n    }\n\n    /** Deselects the option. */\n    deselect(): void {\n        this._selected = false;\n        this._cdr.markForCheck();\n        this._emitSelectionChangeEvent();\n    }\n\n    /**\n     * @docs-private\n     * Sets focus onto this option.\n     */\n    focus(): void {\n        const element = this.elementRef.nativeElement;\n\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n}\n","<div class=\"nx-autocomplete-option\" [class.nx-active]=\"active\">\n    <div class=\"nx-autocomplete-option__label\">\n        <ng-content></ng-content>\n    </div>\n</div>\n","import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { NxFormfieldComponent } from '@aposin/ng-aquila/formfield';\nimport { Observable, Subject, Subscription } from 'rxjs';\n\nimport { NxAutocompleteOptionComponent } from './autocomplete-option.component';\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class NxAutocompleteSelectedEvent {\n    constructor(\n        /** Reference to the autocomplete panel that emitted the event. */\n        public source: NxAutocompleteComponent,\n        /** Option that was selected. */\n        public option: NxAutocompleteOptionComponent,\n    ) {}\n}\n\n@Component({\n    selector: 'nx-autocomplete',\n    templateUrl: 'autocomplete.component.html',\n    styleUrls: ['autocomplete.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'nxAutocomplete',\n    host: {\n        class: 'nx-autocomplete',\n    },\n})\nexport class NxAutocompleteComponent implements AfterViewInit, OnDestroy {\n    /** Manages active item in option list based on key events. */\n    _keyManager!: ActiveDescendantKeyManager<NxAutocompleteOptionComponent>;\n\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n    showPanel = false;\n\n    /** Whether the autocomplete panel is open. */\n    get isOpen(): boolean {\n        return this._isOpen && this.showPanel;\n    }\n    _isOpen = false;\n\n    /** @docs-private */\n    @ViewChild(TemplateRef) template!: TemplateRef<any>;\n\n    /**\n     * @docs-private\n     * Element for the panel containing the autocomplete options.\n     */\n    @ViewChild('panel') panel!: ElementRef;\n\n    /** Items observable. If given, autocomplete takes care of the options and ng-content is discarderd */\n    @Input()\n    set items(val: string[] | Observable<string[]>) {\n        this._hasItems = true;\n        if (Array.isArray(val)) {\n            this._items = val;\n        } else if (val instanceof Observable) {\n            this._itemsSubscription?.unsubscribe();\n            this._itemsSubscription = val.subscribe(itms => {\n                this._items = itms;\n                this._cdr.markForCheck();\n                // and check visibility in next cycle, when options are set\n                setTimeout(() => this._setVisibility());\n            });\n        } else if (val === null) {\n            this._items = val;\n        } else {\n            throw new Error('Invalid argument for autocomplete items. It has to be Array<string> or Observable<Array<string>>');\n        }\n    }\n    get items(): string[] {\n        return this._items as string[]; // TODO properly coerce input as empty array\n    }\n    private _items: string[] | null = null;\n    private _itemsSubscription?: Subscription;\n\n    /**\n     * @docs-private\n     * Is items observable set\n     */\n    get hasItems(): boolean {\n        return this._hasItems;\n    }\n    private _hasItems = false;\n\n    /** Event that is emitted whenever an option from the list is selected. */\n    @Output() readonly optionSelected: EventEmitter<NxAutocompleteSelectedEvent> = new EventEmitter<NxAutocompleteSelectedEvent>();\n\n    /** Event that is emitted when the autocomplete panel is opened. */\n    @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event that is emitted when the autocomplete panel is closed. */\n    @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Autocomplete options in view - ie from items */\n    @ViewChildren(NxAutocompleteOptionComponent)\n    private _vOptions!: QueryList<NxAutocompleteOptionComponent>;\n\n    /** Autocomplete options in content - ie user provided */\n    @ContentChildren(NxAutocompleteOptionComponent, { descendants: true })\n    private _cOptions!: QueryList<NxAutocompleteOptionComponent>;\n\n    /** Autocomplete options */\n    get options(): QueryList<NxAutocompleteOptionComponent> {\n        return this.hasItems ? this._vOptions : this._cOptions;\n    }\n\n    /**\n     * Takes classes set on the host nx-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    @Input('class')\n    set classList(value: string) {\n        if (value?.length) {\n            value.split(' ').forEach(className => (this._classList[className.trim()] = true));\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n    _classList: { [key: string]: boolean } = {};\n\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n    id = `nx-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n    private readonly _destroyed = new Subject<void>();\n\n    /**\n     * Value to string converter function.\n     * As an autocomplete option can hold any value, a converter might be needed\n     * to get a string representation of the value, which can be stored in the input.\n     *\n     * Default: value ? value.toString() : null.\n     */\n    @Input('nxValueFormatter')\n    valueFormatter: (value: any) => string = (value: any) => (value ? value.toString() : null);\n\n    constructor(private _cdr: ChangeDetectorRef, private _elementRef: ElementRef, @Optional() private formFieldComponent: NxFormfieldComponent | null) {}\n\n    ngAfterViewInit(): void {\n        this._keyManager = new ActiveDescendantKeyManager<NxAutocompleteOptionComponent>(this.options).withWrap();\n        this._setVisibility();\n    }\n\n    ngOnDestroy(): void {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._itemsSubscription?.unsubscribe();\n    }\n\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop: number): void {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n\n    /** Returns the panel's scrollTop. */\n    _getScrollTop(): number {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility() {\n        this.showPanel = !!this.options?.length;\n        this._classList['nx-autocomplete-visible'] = this.showPanel;\n        this._classList['nx-autocomplete-hidden'] = !this.showPanel;\n        this._cdr.markForCheck();\n    }\n\n    /** Emits the `select` event. */\n    _emitSelectEvent(option: NxAutocompleteOptionComponent): void {\n        const event = new NxAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n\n    get _isInOutlineField(): boolean {\n        return this.formFieldComponent !== null && this.formFieldComponent.appearance === 'outline';\n    }\n}\n","<ng-template>\n    <div\n        class=\"nx-autocomplete-panel\"\n        role=\"listbox\"\n        [id]=\"id\"\n        [ngClass]=\"_classList\"\n        [class.nx-autocomplete-panel--in-outline-field]=\"_isInOutlineField\"\n        #panel\n    >\n        <ng-container *ngIf=\"hasItems\">\n            <nx-autocomplete-option *ngFor=\"let item of items\" [value]=\"item\">\n                {{ item }}\n            </nx-autocomplete-option>\n        </ng-container>\n        <ng-container *ngIf=\"!hasItems\">\n            <ng-content></ng-content>\n        </ng-container>\n    </div>\n</ng-template>\n","import { Directionality } from '@angular/cdk/bidi';\nimport { coerceNumberProperty, NumberInput } from '@angular/cdk/coercion';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@angular/cdk/keycodes';\nimport { FlexibleConnectedPositionStrategy, Overlay, OverlayConfig, OverlayRef, PositionStrategy, ScrollStrategy, ViewportRuler } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { AutofillMonitor } from '@angular/cdk/text-field';\nimport { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    forwardRef,\n    Host,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    ViewContainerRef,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { NxFormfieldComponent } from '@aposin/ng-aquila/formfield';\nimport { NxWordComponent } from '@aposin/ng-aquila/natural-language-form';\nimport { defer, fromEvent, merge, Observable, of, Subject, Subscription } from 'rxjs';\nimport { debounceTime, delay, filter, first, switchMap, take, takeUntil, tap } from 'rxjs/operators';\n\nimport { NxAutocompleteComponent } from './autocomplete.component';\nimport { NxAutocompleteOptionComponent, NxAutocompleteOptionSelected } from './autocomplete-option.component';\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const NX_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NxAutocompleteTriggerDirective),\n    multi: true,\n};\n\n/** Injection token that determines the scroll handling while an autocomplete is open. */\nexport const NX_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken<() => ScrollStrategy>('nx-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function NX_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => ScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const NX_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n    provide: NX_AUTOCOMPLETE_SCROLL_STRATEGY,\n    useFactory: NX_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n    deps: [Overlay],\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getNxAutocompleteMissingPanelError(): Error {\n    return Error(\n        'Attempting to open an undefined instance of `nx-autocomplete`. ' +\n            'Make sure that the id passed to the `nxAutocomplete` is correct and that ' +\n            \"you're attempting to open it after the ngAfterContentInit hook.\",\n    );\n}\n\n@Directive({\n    selector: `input[nxAutocomplete], textarea[nxAutocomplete]`,\n    host: {\n        role: 'combobox',\n        autocomplete: 'off',\n        'aria-autocomplete': 'list',\n        '[attr.aria-activedescendant]': 'activeOption?.id',\n        '[attr.aria-expanded]': 'panelOpen.toString()',\n        '[attr.aria-owns]': 'autocomplete?.id',\n        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n        // a little earlier. This avoids issues where IE delays the focusing of the input.\n        '(focusin)': '_handleFocus()',\n        '(blur)': '_onTouched()',\n        '(input)': '_handleInput($event)',\n        '(keydown)': '_handleKeydown($event)',\n    },\n    exportAs: 'nxAutocompleteTrigger',\n    providers: [NX_AUTOCOMPLETE_VALUE_ACCESSOR],\n})\nexport class NxAutocompleteTriggerDirective implements ControlValueAccessor, OnDestroy, OnChanges, AfterViewInit, OnInit {\n    private _overlayRef!: OverlayRef | null;\n    private _portal!: TemplatePortal;\n    private _componentDestroyed = false;\n    private _isAutofill = false;\n\n    /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n    private _previousValue: string | number | null | undefined;\n\n    /** Strategy that is used to position the panel. */\n    private _positionStrategy!: FlexibleConnectedPositionStrategy;\n\n    /** Whether or not the label state is being overridden. */\n    private _manuallyFloatingLabel = false;\n\n    /** The subscription for closing actions (some are bound to document). */\n    private _closingActionsSubscription!: Subscription;\n\n    /** Subscription to viewport size changes. */\n    private _viewportSubscription = Subscription.EMPTY;\n\n    /** Subscription to control value changes */\n    private _controlValueChangesSubscription!: Subscription;\n\n    /** Subscription to items observable */\n    private _itemsSubscription!: Subscription;\n\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n    private _canOpenOnNextFocus = true;\n\n    /** Stream of keyboard events that can close the panel. */\n    private readonly _closeKeyEventStream = new Subject<void>();\n\n    /** Value changes */\n    private readonly _valueChanges: Subject<any> = new Subject<any>();\n\n    /** Strategy factory that will be used to handle scrolling while the autocomplete panel is open. */\n    private _scrollStrategyFactory = this._defaultScrollStrategyFactory;\n\n    /** The autocomplete panel to be attached to this trigger. */\n    @Input('nxAutocomplete') autocomplete!: NxAutocompleteComponent;\n\n    /** The items callback. Called with input value, must return Observable of Array of strings */\n    @Input('nxAutocompleteItems')\n    set itemsCb(val: (val: string) => Observable<string[]>) {\n        if (typeof val === 'function') {\n            this._itemsCb = val;\n        } else {\n            throw new Error('Wrong value type for nxAutocompleteItems');\n        }\n    }\n    get itemsCb() {\n        return this._itemsCb;\n    }\n    private _itemsCb!: (val: string) => Observable<string[]>;\n\n    /** Debounce in ms before items callback is triggered. Defaults to 400 */\n    @Input('nxAutocompleteDebounce')\n    set debounce(val: NumberInput) {\n        this._debounce = coerceNumberProperty(val);\n    }\n    private _debounce = 400;\n\n    /** Whether autocomplete functionality is disabled. */\n    @Input('nxAutocompleteDisabled')\n    set autocompleteDisabled(val: boolean) {\n        this._autocompleteDisabled = val;\n        this._bindAutocompleteItems();\n    }\n    get autocompleteDisabled() {\n        return this._autocompleteDisabled;\n    }\n    private _autocompleteDisabled = false;\n\n    /** Whether or not the autocomplete panel is open. */\n    get panelOpen(): boolean {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    private _overlayAttached = false;\n\n    /** Stream of autocomplete option selections. */\n    readonly optionSelections: Observable<NxAutocompleteOptionSelected> = defer<Observable<NxAutocompleteOptionSelected>>(() => {\n        if (this.autocomplete?.options) {\n            return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n        }\n\n        // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n        // Return a stream that we'll replace with the real one once everything is in place.\n        return this._zone.onStable.asObservable().pipe(\n            take(1),\n            switchMap(() => this.optionSelections),\n        );\n    });\n\n    /** The currently active option, coerced to NxAutocompleteOptionComponent type. */\n    get activeOption(): NxAutocompleteOptionComponent | null {\n        if (this.autocomplete?._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n\n        return null;\n    }\n\n    /** Stream of clicks outside of the autocomplete panel. */\n    private get _outsideClickStream(): Observable<any> {\n        if (!this._document) {\n            return of(null);\n        }\n\n        return merge(fromEvent<MouseEvent | TouchEvent>(this._document, 'mouseup'), fromEvent<MouseEvent | TouchEvent>(this._document, 'touchend')).pipe(\n            filter((event: MouseEvent | TouchEvent) => {\n                const clickTarget = event.target as HTMLElement;\n                const formField = this._formField ? this._formField.elementRef.nativeElement : null;\n\n                return (\n                    this._overlayAttached &&\n                    clickTarget !== this._element.nativeElement &&\n                    (!formField || !formField.contains(clickTarget)) &&\n                    !!this._overlayRef &&\n                    !this._overlayRef.overlayElement.contains(clickTarget)\n                );\n            }),\n        );\n    }\n\n    private readonly _destroyed = new Subject<void>();\n\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n    private _windowBlurHandler = () => {\n        // If the user blurred the window while the autocomplete is focused, it means that it'll be\n        // refocused when they come back. In this case we want to skip the first focus event, if the\n        // pane was closed, in order to avoid reopening it unintentionally.\n        this._canOpenOnNextFocus = document.activeElement !== this._element.nativeElement || this.panelOpen;\n    };\n\n    /** `View -> model callback called when value changes` */\n    _onChange: (value: any) => void = val => {\n        this._valueChanges.next(val);\n    };\n\n    /** `View -> model callback called when autocomplete has been touched` */\n    _onTouched = () => {};\n\n    private get _formField(): NxFormfieldComponent | NxWordComponent | null {\n        if (this._nxFormField) {\n            return this._nxFormField;\n        }\n        return this._nxWordField;\n    }\n\n    constructor(\n        private _element: ElementRef,\n        private _overlay: Overlay,\n        private _viewContainerRef: ViewContainerRef,\n        private _zone: NgZone,\n        private _cdr: ChangeDetectorRef,\n        private _dir: Directionality,\n        private _autofillMonitor: AutofillMonitor,\n        @Optional() @Host() private _nxFormField: NxFormfieldComponent | null,\n        @Optional() @Host() private _nxWordField: NxWordComponent | null,\n        @Optional() @Inject(DOCUMENT) private _document: Document | null,\n        @Inject(NX_AUTOCOMPLETE_SCROLL_STRATEGY) private _defaultScrollStrategyFactory: () => ScrollStrategy,\n        private _viewportRuler?: ViewportRuler,\n    ) {\n        if (typeof window !== 'undefined') {\n            _zone.runOutsideAngular(() => {\n                window.addEventListener('blur', this._windowBlurHandler);\n            });\n        }\n    }\n\n    ngOnInit() {\n        this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this._flipDirection();\n            this._cdr.markForCheck();\n        });\n        this._autofillMonitor\n            .monitor(this._element.nativeElement)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(event => {\n                this._isAutofill = event.isAutofilled;\n            });\n    }\n\n    ngOnDestroy(): void {\n        this._destroyed.next();\n        this._destroyed.complete();\n\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n        this._controlValueChangesSubscription?.unsubscribe();\n        this._itemsSubscription?.unsubscribe();\n        this._autofillMonitor.stopMonitoring(this._element.nativeElement);\n    }\n\n    ngOnChanges() {\n        this._bindAutocompleteItems();\n    }\n\n    ngAfterViewInit() {\n        this._bindAutocompleteItems();\n    }\n\n    /**\n     * Binds or rebinds the autocomplete items. Prerequisites:\n     * - items callback has to be defined\n     * - autocomplete panel has to be bound\n     */\n    private _bindAutocompleteItems() {\n        if (this._controlValueChangesSubscription) {\n            this._controlValueChangesSubscription.unsubscribe();\n        }\n\n        if (typeof this._itemsCb === 'function' && this.autocomplete && !this.autocompleteDisabled) {\n            const itemsSubject = new Subject<string[]>();\n\n            this.autocomplete.items = itemsSubject;\n\n            const valueChanges = this._formField?._control?.ngControl?.valueChanges || this._valueChanges;\n\n            this._controlValueChangesSubscription = valueChanges.pipe(debounceTime(this._debounce)).subscribe(input => {\n                if (this._itemsSubscription) {\n                    this._itemsSubscription.unsubscribe();\n                }\n                this._itemsSubscription = this._itemsCb(input)\n                    .pipe(first())\n                    .subscribe(\n                        result => {\n                            itemsSubject.next(result);\n                        },\n                        err => {\n                            // On error reset\n                            // TODO Log error?\n                            itemsSubject.next([]);\n                        },\n                    );\n            });\n        }\n    }\n\n    /** Opens the autocomplete suggestion panel. */\n    openPanel(): void {\n        if (!this.autocompleteDisabled) {\n            this._attachOverlay();\n            this._floatLabel();\n        }\n    }\n\n    /** Closes the autocomplete suggestion panel. */\n    closePanel(): void {\n        this._resetLabel();\n\n        if (!this._overlayAttached) {\n            return;\n        }\n\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocomplete.closed.emit();\n        }\n\n        this.autocomplete._isOpen = this._overlayAttached = false;\n\n        if (this._overlayRef?.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._cdr.detectChanges();\n        }\n    }\n\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions(): Observable<NxAutocompleteOptionSelected> {\n        return merge(\n            this.optionSelections,\n            this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n            this._closeKeyEventStream,\n            this._outsideClickStream,\n            this._overlayRef ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) : of(),\n        );\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any): void {\n        Promise.resolve(null).then(() => this._setTriggerValue(value));\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void) {\n        this._onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n\n    _handleKeydown(event: KeyboardEvent): void {\n        const keyCode = event.keyCode;\n\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n            this._resetActiveItem();\n            this._closeKeyEventStream.next();\n            event.stopPropagation();\n        } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        } else {\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete._keyManager.onKeydown(event);\n            } else if (isArrowKey && this._isFieldEnabled()) {\n                this.openPanel();\n            }\n\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption();\n            }\n        }\n    }\n\n    _handleInput(event: KeyboardEvent): void {\n        const target = event.target as HTMLInputElement;\n        let value: number | string | null = target.value;\n\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value === '' ? null : parseFloat(value);\n        }\n\n        // in case of autofill from browser\n        // input can come from any activeElement which differ from event.target\n        // so checking if it's autofill instead.\n        if (this._isFieldEnabled() && this._previousValue !== value && this._isAutofill) {\n            this._previousValue = value;\n            this._onChange(value);\n            this._isAutofill = false;\n            return;\n        }\n\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._isFieldEnabled() && this._previousValue !== value && this._rootElement().activeElement === event.target) {\n            this._previousValue = value;\n            this._onChange(value);\n            this.openPanel();\n        }\n    }\n\n    private _rootElement(): Document {\n        return this._element.nativeElement.getRootNode();\n    }\n\n    _handleFocus(): void {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        } else if (this._isFieldEnabled()) {\n            this._previousValue = this._element.nativeElement.value;\n            this.openPanel();\n        }\n    }\n\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    private _floatLabel(): void {\n        if (this._nxFormField && this._nxFormField.floatLabel === 'auto') {\n            this._nxFormField.floatLabel = 'always';\n            this._manuallyFloatingLabel = true;\n        }\n    }\n\n    /** If the label has been manually elevated, return it to its normal state. */\n    private _resetLabel(): void {\n        if (this._nxFormField && this._manuallyFloatingLabel) {\n            this._nxFormField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     */\n    private _scrollToOption(): void {\n        if (this.autocomplete.options.length === 0) {\n            return;\n        }\n        let optionOffset = 0;\n        let optionHeight = this.autocomplete.options.first.elementRef.nativeElement.offsetHeight;\n\n        if (this.autocomplete._keyManager.activeItem) {\n            optionOffset = this.autocomplete._keyManager.activeItem.elementRef.nativeElement.offsetTop;\n            optionHeight = this.autocomplete._keyManager.activeItem.elementRef.nativeElement.offsetHeight;\n        }\n\n        const panelOffsetTop = this.autocomplete.panel.nativeElement.offsetTop;\n\n        const newScrollPosition = _getOptionScrollPosition(\n            optionOffset,\n            optionHeight,\n            this.autocomplete._getScrollTop() + panelOffsetTop,\n            this.autocomplete.panel.nativeElement.offsetHeight,\n        );\n\n        this.autocomplete._setScrollTop(newScrollPosition - panelOffsetTop);\n    }\n\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    private _subscribeToClosingActions(): Subscription {\n        const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes.pipe(\n            tap(() => this._positionStrategy.reapplyLastPosition()),\n            // Defer emitting to the stream until the next tick, because changing\n            // bindings in here will cause \"changed after checked\" errors.\n            delay(0),\n        );\n\n        // When the zone is stable initially, and when the option list changes...\n        return (\n            merge(firstStable, optionChanges)\n                .pipe(\n                    // create a new stream of panelClosingActions, replacing any previous streams\n                    // that were created, and flatten it so our stream only emits closing events...\n                    switchMap(() => {\n                        this._resetActiveItem();\n                        this.autocomplete._setVisibility();\n                        return this.panelClosingActions;\n                    }),\n                    // when the first closing event occurs...\n                    take(1),\n                )\n                // set the value, close the panel, and complete.\n                .subscribe(event => this._setValueAndClose(event))\n        );\n    }\n\n    /** Destroys the autocomplete suggestion panel. */\n    private _destroyPanel(): void {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n\n    private _setTriggerValue(value: any): void {\n        const toDisplay = this.autocomplete?.valueFormatter ? this.autocomplete.valueFormatter(value) : value;\n\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay ?? '';\n\n        // If it's used within a `NxFormField` or `NxWord`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        } else {\n            this._element.nativeElement.value = inputValue;\n        }\n    }\n\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    private _setValueAndClose(event: NxAutocompleteOptionSelected | null): void {\n        if (event?.source) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n            this._element.nativeElement.focus();\n            this.autocomplete._emitSelectEvent(event.source);\n        }\n\n        this.closePanel();\n    }\n\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    private _clearPreviousSelectedOption(skip: NxAutocompleteOptionComponent) {\n        this.autocomplete.options.forEach(option => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n\n    private _attachOverlay(): void {\n        if (!this.autocomplete) {\n            throw getNxAutocompleteMissingPanelError();\n        }\n\n        if (this._overlayRef) {\n            /** Update the panel width, in case the host width has changed */\n            this._overlayRef.updateSize({ minWidth: this._getHostWidth() });\n        } else {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n            this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n            if (this._viewportRuler) {\n                this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                    if (this.panelOpen && this._overlayRef) {\n                        this._overlayRef.updateSize({ minWidth: this._getHostWidth() });\n                    }\n                });\n            }\n        }\n\n        if (this._overlayRef && !this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n\n        const wasOpen = this.panelOpen;\n\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n\n    private _getOverlayConfig(): OverlayConfig {\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategyFactory(),\n            minWidth: this._getHostWidth(),\n            direction: this._dir?.value || 'ltr',\n        });\n    }\n\n    private _getOverlayPosition(): PositionStrategy {\n        const isRtl = this._dir?.value === 'rtl';\n        // HINT: somehow setting margin breaks overlay positioning for rtl\n        const viewPortMargin = isRtl ? 0 : 16;\n        this._positionStrategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withViewportMargin(viewPortMargin)\n            .withPush(false)\n            // to fix an edge case that would open the overlay after it has been visually hidden\n            // and the trigger moved to the bottom edge of the viewport\n            // problem is that the CDK overlay takes the last position into account which results\n            // in the overlay only being 16px in height. this change disabled this code path for now\n            .withGrowAfterOpen(true)\n            .withPositions([\n                {\n                    originX: 'start',\n                    originY: 'bottom',\n                    overlayX: 'start',\n                    overlayY: 'top',\n                },\n                {\n                    originX: 'start',\n                    originY: 'top',\n                    overlayX: 'start',\n                    overlayY: 'bottom',\n                },\n            ]);\n\n        return this._positionStrategy;\n    }\n\n    private _getConnectedElement(): ElementRef {\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n\n    /** Returns the width of the input element, so the panel min-width can match it. */\n    private _getHostWidth(): number {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    private _resetActiveItem(): void {\n        this.autocomplete._keyManager.setActiveItem(-1);\n    }\n\n    /** Determines whether the panel can be opened. */\n    private _isFieldEnabled(): boolean {\n        const element: HTMLInputElement = this._element.nativeElement;\n        return !element.readOnly && !element.disabled;\n    }\n\n    private _flipDirection(): void {\n        this._overlayRef?.setDirection(this._dir.value);\n        this._overlayRef?.updatePositionStrategy(this._getOverlayPosition());\n    }\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionOffset Option offset\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nfunction _getOptionScrollPosition(optionOffset: number, optionHeight: number, currentScrollPosition: number, panelHeight: number): number {\n    if (optionOffset < currentScrollPosition) {\n        return optionOffset;\n    }\n\n    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n        return Math.max(0, optionOffset - panelHeight + optionHeight);\n    }\n\n    return currentScrollPosition;\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NxAutocompleteComponent } from './autocomplete.component';\nimport { NxAutocompleteOptionComponent } from './autocomplete-option.component';\nimport { NX_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER, NxAutocompleteTriggerDirective } from './autocomplete-trigger.directive';\n\n@NgModule({\n    declarations: [NxAutocompleteComponent, NxAutocompleteOptionComponent, NxAutocompleteTriggerDirective],\n    exports: [NxAutocompleteComponent, NxAutocompleteOptionComponent, NxAutocompleteTriggerDirective],\n    imports: [CommonModule, OverlayModule, A11yModule],\n    providers: [NX_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n})\nexport class NxAutocompleteModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i2.NxAutocompleteOptionComponent","i1","i3","i4"],"mappings":"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"}