import { coerceBooleanProperty, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';
import * as i0 from '@angular/core';
import { EventEmitter, Directive, Component, Optional, ViewChild, Input, Output, ContentChildren, ContentChild, InjectionToken, Inject, PLATFORM_ID, HostBinding, ChangeDetectionStrategy, NgModule } from '@angular/core';
import * as i1 from '@aposin/ng-aquila/utils';
import { NxBreakpoints } from '@aposin/ng-aquila/utils';
import { Subject, merge } from 'rxjs';
import { filter, mapTo, takeUntil, delay } from 'rxjs/operators';
import * as i3 from '@angular/common';
import { isPlatformBrowser, CommonModule } from '@angular/common';
import * as i3$2 from '@angular/cdk/scrolling';
import { CdkScrollable } from '@angular/cdk/scrolling';
import { ENTER, SPACE } from '@angular/cdk/keycodes';
import { trigger, state, style, transition, animate } from '@angular/animations';
import * as i2 from '@angular/cdk/a11y';
import * as i4 from '@aposin/ng-aquila/icon';
import { NxIconModule } from '@aposin/ng-aquila/icon';
import * as i3$1 from '@angular/cdk/bidi';
import { NxButtonBase } from '@aposin/ng-aquila/button';

/** @docs-private */
class NxComparisonTableBase {
    constructor(viewportService, _cdr) {
        this.viewportService = viewportService;
        this._cdr = _cdr;
        this._disabledIndexes = [];
        this._hiddenIndexes = [];
        this.viewTypeChange = new EventEmitter();
        this._viewType = 'desktop';
        this._destroyed = new Subject();
        const mobile$ = this.viewportService.max(NxBreakpoints.BREAKPOINT_MEDIUM);
        const tablet$ = this.viewportService.between(NxBreakpoints.BREAKPOINT_MEDIUM, NxBreakpoints.BREAKPOINT_LARGE);
        const desktop$ = this.viewportService.min(NxBreakpoints.BREAKPOINT_LARGE);
        merge(mobile$.pipe(filter(value => value), mapTo('mobile')), tablet$.pipe(filter(value => value), mapTo('tablet')), desktop$.pipe(filter(value => value), mapTo('desktop')))
            .pipe(takeUntil(this._destroyed))
            .subscribe(value => {
            if (this._viewType !== value) {
                this.viewTypeChange.emit(value);
            }
            this._viewType = value;
            // We need to run change detection here or the view doesn't get updated
            // if the component is wrapped inside a parent with onPush change detection
            // we need mark for check as parts like the description cell look at the table's
            // viewType but because the description cell is part of ng-content it is not checked
            // when the comparison table view is checked but only when the component where the ng-content
            // gets declared is checked
            this._cdr.markForCheck();
        });
    }
    /** @docs-private */
    get viewType() {
        return this._viewType;
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
}
NxComparisonTableBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableBase, deps: [{ token: i1.NxViewportService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
NxComparisonTableBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxComparisonTableBase, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableBase, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.NxViewportService }, { type: i0.ChangeDetectorRef }]; } });

/** @docs-private */
class NxComparisonTableRowBase {
}
NxComparisonTableRowBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableRowBase, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NxComparisonTableRowBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxComparisonTableRowBase, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableRowBase, decorators: [{
            type: Directive
        }] });

/** @docs-private */
class NxToggleSectionBase {
    /** Toggles the toggle section. */
    toggleExpanded() {
        this.isExpanded = !this.isExpanded;
    }
    /** @docs-private */
    getOpenState() {
        return this.isExpanded ? 'open' : 'closed';
    }
}
NxToggleSectionBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxToggleSectionBase, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NxToggleSectionBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxToggleSectionBase, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxToggleSectionBase, decorators: [{
            type: Directive
        }] });

let nextId$3 = 0;
class NxComparisonTableCell {
    constructor(_table, _row, _toggleSection) {
        this._table = _table;
        this._row = _row;
        this._toggleSection = _toggleSection;
        this._disabledColumn = false;
        /** @docs-private */
        this.indexChange = new EventEmitter();
        this._id = `nx-comparison-table-cell-${nextId$3++}`;
        this._type = 'content';
    }
    /** @docs-private */
    set index(newValue) {
        if (this._index !== newValue) {
            if (this._disabledColumn) {
                this._table._removeDisabledColumn(this._index);
                this._table._addDisabledColumn(newValue);
            }
            this._index = newValue;
            this.indexChange.emit(this._index);
        }
    }
    get index() {
        return this._index;
    }
    /** Sets all cells below a header cell to be disabled (disabled column).
     *  Important: this property can be set only on header cells.
     */
    set disabledColumn(value) {
        const newValue = coerceBooleanProperty(value);
        if (this._type === 'header' && newValue !== this.disabledColumn) {
            this._disabledColumn = newValue;
            if (this._disabledColumn) {
                this._table._addDisabledColumn(this._index);
            }
            else {
                this._table._removeDisabledColumn(this._index);
            }
        }
    }
    get disabledColumn() {
        return this._disabledColumn;
    }
    /** Sets the Id of the cell. */
    set id(value) {
        if (this._id !== value) {
            this._id = value;
        }
    }
    get id() {
        return this._id;
    }
    /** Sets the type of the cell. Default: 'content'. */
    set type(value) {
        if (this._type !== value) {
            this._type = value;
        }
    }
    get type() {
        return this._type;
    }
    _isSelected() {
        return this.index !== undefined && this.index === this._table.selectedIndex;
    }
    _isCellHidden() {
        return Array.isArray(this._table._hiddenIndexes) && this._table._hiddenIndexes.includes(this.index);
    }
    _selectCell() {
        this._table.selectedIndex = this.index;
    }
    get _isCellDisabled() {
        return this._table._disabledIndexes.includes(this.index);
    }
    _getHeaderIds() {
        // product header cell + (toggle-section) + description-cell
        const headerCell = this._table._getHeaderCells().find((cell) => cell.index === this.index);
        let headers = headerCell ? `${headerCell.id}` : '';
        if (this._row.descriptionCell) {
            headers += ` ${this._row.descriptionCell.id}`;
        }
        if (this._toggleSection) {
            headers += ` ${this._toggleSection.toggleSectionHeader.id}`;
        }
        return headers;
    }
}
NxComparisonTableCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableCell, deps: [{ token: NxComparisonTableBase }, { token: NxComparisonTableRowBase }, { token: NxToggleSectionBase, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NxComparisonTableCell.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxComparisonTableCell, selector: "nx-comparison-table-cell", inputs: { index: "index", disabledColumn: "disabledColumn", id: "id", type: "type" }, outputs: { indexChange: "indexChange" }, viewQueries: [{ propertyName: "_content", first: true, predicate: ["content"], descendants: true, static: true }], ngImport: i0, template: "<ng-template #content>\n    <ng-container *ngIf=\"_table.viewType === 'desktop' || _table.viewType === 'tablet'\">\n        <div\n            class=\"nx-comparison-table__cell\"\n            [class.is-disabled]=\"_isCellDisabled\"\n            [attr.role]=\"type === 'header' ? 'columnheader' : 'cell'\"\n            [class.is-selected]=\"_isSelected()\"\n            [class.is-hidden]=\"_isCellHidden()\"\n            [attr.id]=\"id\"\n            [attr.headers]=\"_getHeaderIds()\"\n        >\n            <div class=\"nx-comparison-table__cell-content\">\n                <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n            </div>\n        </div>\n    </ng-container>\n    <ng-container *ngIf=\"_table.viewType === 'mobile'\">\n        <td\n            [class.nx-comparison-table__mobile-header-cell]=\"type === 'header'\"\n            [class.nx-comparison-table__cell]=\"type !== 'header'\"\n            [class.is-selected]=\"_isSelected()\"\n            [class.is-hidden]=\"_isCellHidden()\"\n            [attr.scope]=\"type === 'header' ? 'row' : ''\"\n            [attr.id]=\"id\"\n            [attr.headers]=\"_getHeaderIds()\"\n        >\n            <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n        </td>\n    </ng-container>\n</ng-template>\n\n<ng-template #ngContent>\n    <ng-content></ng-content>\n</ng-template>\n", styles: [".nx-comparison-table__mobile-header-cell.is-selected,.nx-comparison-table__cell.is-selected{background-color:var(--comparison-table-selected-column-background-color);color:var(--comparison-table-selected-column-text-color)}.nx-comparison-table__mobile-header-cell.is-hidden,.nx-comparison-table__cell.is-hidden{display:none}\n"], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableCell, decorators: [{
            type: Component,
            args: [{ selector: 'nx-comparison-table-cell', template: "<ng-template #content>\n    <ng-container *ngIf=\"_table.viewType === 'desktop' || _table.viewType === 'tablet'\">\n        <div\n            class=\"nx-comparison-table__cell\"\n            [class.is-disabled]=\"_isCellDisabled\"\n            [attr.role]=\"type === 'header' ? 'columnheader' : 'cell'\"\n            [class.is-selected]=\"_isSelected()\"\n            [class.is-hidden]=\"_isCellHidden()\"\n            [attr.id]=\"id\"\n            [attr.headers]=\"_getHeaderIds()\"\n        >\n            <div class=\"nx-comparison-table__cell-content\">\n                <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n            </div>\n        </div>\n    </ng-container>\n    <ng-container *ngIf=\"_table.viewType === 'mobile'\">\n        <td\n            [class.nx-comparison-table__mobile-header-cell]=\"type === 'header'\"\n            [class.nx-comparison-table__cell]=\"type !== 'header'\"\n            [class.is-selected]=\"_isSelected()\"\n            [class.is-hidden]=\"_isCellHidden()\"\n            [attr.scope]=\"type === 'header' ? 'row' : ''\"\n            [attr.id]=\"id\"\n            [attr.headers]=\"_getHeaderIds()\"\n        >\n            <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n        </td>\n    </ng-container>\n</ng-template>\n\n<ng-template #ngContent>\n    <ng-content></ng-content>\n</ng-template>\n", styles: [".nx-comparison-table__mobile-header-cell.is-selected,.nx-comparison-table__cell.is-selected{background-color:var(--comparison-table-selected-column-background-color);color:var(--comparison-table-selected-column-text-color)}.nx-comparison-table__mobile-header-cell.is-hidden,.nx-comparison-table__cell.is-hidden{display:none}\n"] }]
        }], ctorParameters: function () {
        return [{ type: NxComparisonTableBase }, { type: NxComparisonTableRowBase }, { type: NxToggleSectionBase, decorators: [{
                        type: Optional
                    }] }];
    }, propDecorators: { _content: [{
                type: ViewChild,
                args: ['content', { static: true }]
            }], index: [{
                type: Input
            }], disabledColumn: [{
                type: Input
            }], indexChange: [{
                type: Output
            }], id: [{
                type: Input
            }], type: [{
                type: Input
            }] } });

let nextId$2 = 0;
class NxComparisonTableDescriptionCell {
    constructor(_table, _row) {
        this._table = _table;
        this._row = _row;
        this._id = `nx-comparison-table-description-cell-${nextId$2++}`;
        if (this._row.type === 'header' || this._row.type === 'footer') {
            console.warn('`nxComparisonTableRow` should not contain a `nx-comparison-table-description-cell` for type === "header" or type === "footer".');
        }
    }
    /** Sets the Id of the description cell. */
    set id(value) {
        if (this._id !== value) {
            this._id = value;
        }
    }
    get id() {
        return this._id;
    }
    _getMobileClipPathInset() {
        if (this._mobileCell) {
            const cellRect = this._mobileCell.nativeElement.getBoundingClientRect();
            return this._table._getMobileClipPathInset(cellRect);
        }
        return '0';
    }
}
NxComparisonTableDescriptionCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableDescriptionCell, deps: [{ token: NxComparisonTableBase }, { token: NxComparisonTableRowBase }], target: i0.ɵɵFactoryTarget.Component });
NxComparisonTableDescriptionCell.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxComparisonTableDescriptionCell, selector: "nx-comparison-table-description-cell", inputs: { id: "id" }, viewQueries: [{ propertyName: "_content", first: true, predicate: ["content"], descendants: true, static: true }, { propertyName: "_mobileCell", first: true, predicate: ["mobileCell"], descendants: true }], ngImport: i0, template: "<ng-template #content>\n    <ng-container *ngIf=\"_table.viewType === 'desktop' || _table.viewType === 'tablet'\">\n        <div\n            class=\"nx-comparison-table__description-cell\"\n            [attr.role]=\"_table.viewType === 'desktop' ? 'rowheader' : 'columnheader'\"\n            [attr.aria-colspan]=\"_table.viewType === 'tablet' ? _table._infoColumnCount() : '1'\"\n            [attr.id]=\"id\"\n        >\n            <div class=\"nx-comparison-table__cell-content\">\n                <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n            </div>\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"_table.viewType === 'mobile'\">\n        <th\n            #mobileCell\n            class=\"nx-comparison-table__description-cell\"\n            [class.is-intersection-column]=\"_row._isIntersectionRow()\"\n            scope=\"col\"\n            [attr.id]=\"id\"\n            [ngStyle]=\"{ 'clip-path': 'inset(' + _getMobileClipPathInset() + ')' }\"\n        >\n            <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n        </th>\n    </ng-container>\n</ng-template>\n\n<ng-template #ngContent>\n    <ng-content></ng-content>\n</ng-template>\n", directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i3.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableDescriptionCell, decorators: [{
            type: Component,
            args: [{ selector: 'nx-comparison-table-description-cell', template: "<ng-template #content>\n    <ng-container *ngIf=\"_table.viewType === 'desktop' || _table.viewType === 'tablet'\">\n        <div\n            class=\"nx-comparison-table__description-cell\"\n            [attr.role]=\"_table.viewType === 'desktop' ? 'rowheader' : 'columnheader'\"\n            [attr.aria-colspan]=\"_table.viewType === 'tablet' ? _table._infoColumnCount() : '1'\"\n            [attr.id]=\"id\"\n        >\n            <div class=\"nx-comparison-table__cell-content\">\n                <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n            </div>\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"_table.viewType === 'mobile'\">\n        <th\n            #mobileCell\n            class=\"nx-comparison-table__description-cell\"\n            [class.is-intersection-column]=\"_row._isIntersectionRow()\"\n            scope=\"col\"\n            [attr.id]=\"id\"\n            [ngStyle]=\"{ 'clip-path': 'inset(' + _getMobileClipPathInset() + ')' }\"\n        >\n            <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n        </th>\n    </ng-container>\n</ng-template>\n\n<ng-template #ngContent>\n    <ng-content></ng-content>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: NxComparisonTableBase }, { type: NxComparisonTableRowBase }]; }, propDecorators: { _content: [{
                type: ViewChild,
                args: ['content', { static: true }]
            }], _mobileCell: [{
                type: ViewChild,
                args: ['mobileCell']
            }], id: [{
                type: Input
            }] } });

class NxComparisonTableIntersectionCell {
    constructor(_table, _row, _toggleSection) {
        this._table = _table;
        this._row = _row;
        this._toggleSection = _toggleSection;
    }
    _getHeaderIds() {
        // description cell + (toggle section)
        let headers = '';
        if (this._toggleSection) {
            headers += this._toggleSection.toggleSectionHeader.id;
        }
        if (this._row.descriptionCell) {
            headers += ' ' + this._row.descriptionCell.id;
        }
        return headers;
    }
    _getMobileRowspan() {
        return this._table._getPopularCell() ? this._table._infoColumnCount() + 1 : this._table._infoColumnCount();
    }
}
NxComparisonTableIntersectionCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableIntersectionCell, deps: [{ token: NxComparisonTableBase }, { token: NxComparisonTableRowBase }, { token: NxToggleSectionBase, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NxComparisonTableIntersectionCell.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxComparisonTableIntersectionCell, selector: "nx-comparison-table-intersection-cell", viewQueries: [{ propertyName: "_content", first: true, predicate: ["content"], descendants: true, static: true }], ngImport: i0, template: "<ng-template #content>\n    <ng-container *ngIf=\"_table.viewType === 'desktop' || _table.viewType === 'tablet'\">\n        <div\n            class=\"nx-comparison-table__intersection-cell\"\n            role=\"cell\"\n            [attr.aria-colspan]=\"_table._infoColumnCount()\"\n            [style.flex-grow]=\"_table._infoColumnCount()\"\n            [attr.headers]=\"_getHeaderIds()\"\n        >\n            <div class=\"nx-comparison-table__cell-content\">\n                <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n            </div>\n        </div>\n    </ng-container>\n    <ng-container *ngIf=\"_table.viewType === 'mobile'\">\n        <td class=\"nx-comparison-table__intersection-cell\" [attr.rowspan]=\"_getMobileRowspan()\" [attr.headers]=\"_getHeaderIds()\">\n            <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n        </td>\n    </ng-container>\n</ng-template>\n\n<ng-template #ngContent>\n    <ng-content></ng-content>\n</ng-template>\n", directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableIntersectionCell, decorators: [{
            type: Component,
            args: [{ selector: 'nx-comparison-table-intersection-cell', template: "<ng-template #content>\n    <ng-container *ngIf=\"_table.viewType === 'desktop' || _table.viewType === 'tablet'\">\n        <div\n            class=\"nx-comparison-table__intersection-cell\"\n            role=\"cell\"\n            [attr.aria-colspan]=\"_table._infoColumnCount()\"\n            [style.flex-grow]=\"_table._infoColumnCount()\"\n            [attr.headers]=\"_getHeaderIds()\"\n        >\n            <div class=\"nx-comparison-table__cell-content\">\n                <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n            </div>\n        </div>\n    </ng-container>\n    <ng-container *ngIf=\"_table.viewType === 'mobile'\">\n        <td class=\"nx-comparison-table__intersection-cell\" [attr.rowspan]=\"_getMobileRowspan()\" [attr.headers]=\"_getHeaderIds()\">\n            <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n        </td>\n    </ng-container>\n</ng-template>\n\n<ng-template #ngContent>\n    <ng-content></ng-content>\n</ng-template>\n" }]
        }], ctorParameters: function () {
        return [{ type: NxComparisonTableBase }, { type: NxComparisonTableRowBase }, { type: NxToggleSectionBase, decorators: [{
                        type: Optional
                    }] }];
    }, propDecorators: { _content: [{
                type: ViewChild,
                args: ['content', { static: true }]
            }] } });

let nextId$1 = 0;
class NxComparisonTablePopularCell {
    constructor(_table, _row) {
        this._table = _table;
        this._row = _row;
        this._id = `nx-comparison-table-popular-cell-${nextId$1++}`;
        if (this._row.type !== 'header') {
            console.warn('A popular cell should be only in a header row.');
        }
    }
    /** Sets the Id of the popular cell. */
    set id(value) {
        if (this._id !== value) {
            this._id = value;
        }
    }
    get id() {
        return this._id;
    }
    /** Sets the id of the column above which the popular cell should be displayed.
     *
     * Note: counting starts from 1. If set to 1 the popular cell will appear above the first header column of the table.
     */
    set forColumn(value) {
        const newValue = coerceNumberProperty(value);
        if (this._forColumn !== newValue) {
            this._forColumn = newValue;
        }
    }
    get forColumn() {
        return this._forColumn;
    }
}
NxComparisonTablePopularCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTablePopularCell, deps: [{ token: NxComparisonTableBase }, { token: NxComparisonTableRowBase }], target: i0.ɵɵFactoryTarget.Component });
NxComparisonTablePopularCell.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxComparisonTablePopularCell, selector: "nx-comparison-table-popular-cell", inputs: { id: "id", forColumn: "forColumn" }, viewQueries: [{ propertyName: "_content", first: true, predicate: ["content"], descendants: true, static: true }], ngImport: i0, template: "<ng-template #content>\n    <ng-container *ngIf=\"_table.viewType === 'desktop' || _table.viewType === 'tablet'\">\n        <div class=\"nx-comparison-table__popular-cell\" [class.is-hidden]=\"_table._hiddenIndexes.indexOf(forColumn - 1) !== -1\" role=\"cell\" [attr.id]=\"id\">\n            <div class=\"nx-comparison-table__cell-content\">\n                <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n            </div>\n        </div>\n    </ng-container>\n    <ng-container *ngIf=\"_table.viewType === 'mobile'\">\n        <td class=\"nx-comparison-table__mobile-popular-cell\" [class.is-hidden]=\"_table._hiddenIndexes.indexOf(forColumn - 1) !== -1\" [attr.id]=\"id\">\n            <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n        </td>\n    </ng-container>\n</ng-template>\n\n<ng-template #ngContent>\n    <ng-content></ng-content>\n</ng-template>\n", styles: [".nx-comparison-table__popular-cell.is-hidden,::ng-deep td.nx-comparison-table__mobile-popular-cell.is-hidden div{display:none}td.nx-comparison-table__mobile-popular-cell.is-hidden{padding:0}\n"], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTablePopularCell, decorators: [{
            type: Component,
            args: [{ selector: 'nx-comparison-table-popular-cell', template: "<ng-template #content>\n    <ng-container *ngIf=\"_table.viewType === 'desktop' || _table.viewType === 'tablet'\">\n        <div class=\"nx-comparison-table__popular-cell\" [class.is-hidden]=\"_table._hiddenIndexes.indexOf(forColumn - 1) !== -1\" role=\"cell\" [attr.id]=\"id\">\n            <div class=\"nx-comparison-table__cell-content\">\n                <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n            </div>\n        </div>\n    </ng-container>\n    <ng-container *ngIf=\"_table.viewType === 'mobile'\">\n        <td class=\"nx-comparison-table__mobile-popular-cell\" [class.is-hidden]=\"_table._hiddenIndexes.indexOf(forColumn - 1) !== -1\" [attr.id]=\"id\">\n            <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n        </td>\n    </ng-container>\n</ng-template>\n\n<ng-template #ngContent>\n    <ng-content></ng-content>\n</ng-template>\n", styles: [".nx-comparison-table__popular-cell.is-hidden,::ng-deep td.nx-comparison-table__mobile-popular-cell.is-hidden div{display:none}td.nx-comparison-table__mobile-popular-cell.is-hidden{padding:0}\n"] }]
        }], ctorParameters: function () { return [{ type: NxComparisonTableBase }, { type: NxComparisonTableRowBase }]; }, propDecorators: { _content: [{
                type: ViewChild,
                args: ['content', { static: true }]
            }], id: [{
                type: Input
            }], forColumn: [{
                type: Input
            }] } });

/**
 * @docs-private
 * This is a base class for NxToggleSectionDirective and NxComparisonTableRowDirective.
 */
class NxTableContentElement {
}
NxTableContentElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTableContentElement, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NxTableContentElement.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxTableContentElement, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTableContentElement, decorators: [{
            type: Directive
        }] });

/** @docs-private */
class NxComparisonTableRowGroupBase {
}
NxComparisonTableRowGroupBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableRowGroupBase, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NxComparisonTableRowGroupBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxComparisonTableRowGroupBase, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableRowGroupBase, decorators: [{
            type: Directive
        }] });

class NxComparisonTableRowDirective extends NxComparisonTableRowBase {
    constructor(_toggleSection, _rowGroup) {
        super();
        this._toggleSection = _toggleSection;
        this._rowGroup = _rowGroup;
        this._type = 'content';
        this._mayStick = true;
        this._requestCellClippingUpdate$ = new Subject();
        this._destroyed = new Subject();
    }
    /** Sets the type of the row. Default: 'content'. */
    set type(newValue) {
        if (newValue !== this._type) {
            this._type = newValue;
        }
    }
    get type() {
        return this._type;
    }
    set mayStick(newValue) {
        if (newValue !== this._mayStick) {
            this._mayStick = coerceBooleanProperty(newValue);
            this._requestCellClippingUpdate$.next(undefined);
        }
    }
    get mayStick() {
        return this._type === 'header' && this._mayStick;
    }
    ngAfterContentInit() {
        this._setCellIndexes();
        this.cells.changes.pipe(takeUntil(this._destroyed)).subscribe(() => {
            this._setCellIndexes();
        });
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
    _setCellIndexes() {
        this.cells.forEach((cell, index) => {
            cell.index = index;
        });
    }
    _isPartOfToggleSection() {
        return !!this._toggleSection;
    }
    _isPartOfRowGroup() {
        return !!this._rowGroup;
    }
    _isIntersectionRow() {
        return !!this.intersectionCell;
    }
}
NxComparisonTableRowDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableRowDirective, deps: [{ token: NxToggleSectionBase, optional: true }, { token: NxComparisonTableRowGroupBase, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
NxComparisonTableRowDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxComparisonTableRowDirective, selector: "[nxComparisonTableRow]", inputs: { type: "type", mayStick: "mayStick" }, providers: [
        { provide: NxTableContentElement, useExisting: NxComparisonTableRowDirective },
        { provide: NxComparisonTableRowBase, useExisting: NxComparisonTableRowDirective },
    ], queries: [{ propertyName: "intersectionCell", first: true, predicate: NxComparisonTableIntersectionCell, descendants: true }, { propertyName: "descriptionCell", first: true, predicate: NxComparisonTableDescriptionCell, descendants: true }, { propertyName: "popularCell", first: true, predicate: NxComparisonTablePopularCell, descendants: true }, { propertyName: "cells", predicate: NxComparisonTableCell }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableRowDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[nxComparisonTableRow]',
                    providers: [
                        { provide: NxTableContentElement, useExisting: NxComparisonTableRowDirective },
                        { provide: NxComparisonTableRowBase, useExisting: NxComparisonTableRowDirective },
                    ],
                }]
        }], ctorParameters: function () {
        return [{ type: NxToggleSectionBase, decorators: [{
                        type: Optional
                    }] }, { type: NxComparisonTableRowGroupBase, decorators: [{
                        type: Optional
                    }] }];
    }, propDecorators: { cells: [{
                type: ContentChildren,
                args: [NxComparisonTableCell]
            }], intersectionCell: [{
                type: ContentChild,
                args: [NxComparisonTableIntersectionCell, { static: false }]
            }], descriptionCell: [{
                type: ContentChild,
                args: [NxComparisonTableDescriptionCell, { static: false }]
            }], popularCell: [{
                type: ContentChild,
                args: [NxComparisonTablePopularCell, { static: false }]
            }], type: [{
                type: Input
            }], mayStick: [{
                type: Input
            }] } });

const COMPARISON_TABLE_DEFAULT_OPTIONS = new InjectionToken('COMPARISON_TABLE_DEFAULT_OPTIONS');

class NxComparisonTableRowGroupDirective extends NxComparisonTableRowGroupBase {
    constructor(_toggleSection, _defaultOptions) {
        super();
        this._toggleSection = _toggleSection;
        this._defaultOptions = _defaultOptions;
        this._labelCollapsed = 'More services';
        this._labelExpanded = 'Less services';
        this._visibleRows = 5;
        this._isExpanded = false;
        /** An event emitted every time the expanded state of the group changes */
        this.isExpandedChange = new EventEmitter();
    }
    /**
     * Sets the label of the expandable area that is shown when the row group is collapsed.
     */
    set labelCollapsed(newValue) {
        if (newValue !== this._labelCollapsed) {
            this._labelCollapsed = newValue;
        }
    }
    get labelCollapsed() {
        return this._labelCollapsed;
    }
    /** Sets the label of the expandable area that is shown when the row group is expanded. */
    set labelExpanded(newValue) {
        if (newValue !== this._labelExpanded) {
            this._labelExpanded = newValue;
        }
    }
    get labelExpanded() {
        return this._labelExpanded;
    }
    /** Sets the number of rows that are visible when loading the component. Default: 5. */
    set visibleRows(value) {
        const newValue = coerceNumberProperty(value);
        if (newValue !== this._visibleRows) {
            this._visibleRows = newValue;
        }
    }
    get visibleRows() {
        return this._visibleRows;
    }
    /** Sets the expanded state of the row group */
    set isExpanded(value) {
        const newValue = coerceBooleanProperty(value);
        if (newValue !== this._isExpanded) {
            this._isExpanded = newValue;
        }
    }
    get isExpanded() {
        return this._isExpanded;
    }
    /**
     * **Expert Option**
     *
     * Sets if the expandable area uses the full width of the row or leaves out the first column. Default: false.
     */
    set useFullRowForExpandableArea(value) {
        this._useFullRowForExpandableArea = coerceBooleanProperty(value);
    }
    get useFullRowForExpandableArea() {
        var _a;
        if (this._useFullRowForExpandableArea !== undefined) {
            return this._useFullRowForExpandableArea;
        }
        if (((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.useFullRowForExpandableArea) !== undefined) {
            return this._defaultOptions.useFullRowForExpandableArea;
        }
        return false;
    }
    _isPartOfToggleSection() {
        return !!this._toggleSection;
    }
    _handleIsExpandedChange(value) {
        this.isExpanded = value;
        this.isExpandedChange.emit(this.isExpanded);
    }
}
NxComparisonTableRowGroupDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableRowGroupDirective, deps: [{ token: NxToggleSectionBase, optional: true }, { token: COMPARISON_TABLE_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
NxComparisonTableRowGroupDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxComparisonTableRowGroupDirective, selector: "[nxComparisonTableRowGroup]", inputs: { labelCollapsed: "labelCollapsed", labelExpanded: "labelExpanded", visibleRows: "visibleRows", isExpanded: "isExpanded", useFullRowForExpandableArea: "useFullRowForExpandableArea" }, outputs: { isExpandedChange: "isExpandedChange" }, providers: [
        { provide: NxTableContentElement, useExisting: NxComparisonTableRowGroupDirective },
        { provide: NxComparisonTableRowGroupBase, useExisting: NxComparisonTableRowGroupDirective },
    ], queries: [{ propertyName: "rows", predicate: NxComparisonTableRowDirective }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableRowGroupDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[nxComparisonTableRowGroup]',
                    providers: [
                        { provide: NxTableContentElement, useExisting: NxComparisonTableRowGroupDirective },
                        { provide: NxComparisonTableRowGroupBase, useExisting: NxComparisonTableRowGroupDirective },
                    ],
                }]
        }], ctorParameters: function () {
        return [{ type: NxToggleSectionBase, decorators: [{
                        type: Optional
                    }] }, { type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [COMPARISON_TABLE_DEFAULT_OPTIONS]
                    }] }];
    }, propDecorators: { rows: [{
                type: ContentChildren,
                args: [NxComparisonTableRowDirective]
            }], labelCollapsed: [{
                type: Input
            }], labelExpanded: [{
                type: Input
            }], visibleRows: [{
                type: Input
            }], isExpanded: [{
                type: Input
            }], useFullRowForExpandableArea: [{
                type: Input
            }], isExpandedChange: [{
                type: Output
            }] } });

const NxToggleSectionAnimations = {
    bodyExpansion: trigger('bodyExpansion', [
        state('closed', style({ height: '0px', visibility: 'hidden' })),
        state('open', style({ height: '*', visibility: 'visible' })),
        transition('open <=> closed', animate('.5s cubic-bezier(0.86, 0, 0.07, 1)')),
    ]),
    indicatorRotate: trigger('indicatorRotate', [
        state('closed', style({ transform: 'rotate(0deg)' })),
        state('open', style({ transform: 'rotate(180deg)' })),
        transition('open <=> closed', animate('.3s ease')),
    ]),
};

let nextId = 0;
class NxToggleSectionHeaderComponent {
    constructor(_table, _toggleSection, _focusMonitor, _ngZone, platformId) {
        this._table = _table;
        this._toggleSection = _toggleSection;
        this._focusMonitor = _focusMonitor;
        this._ngZone = _ngZone;
        this._id = `nx-comparison-table-toggle-section-header-${nextId++}`;
        this._destroyed = new Subject();
        if (isPlatformBrowser(platformId)) {
            this._table.viewTypeChange.pipe(takeUntil(this._destroyed)).subscribe(() => {
                this._updateFocusMonitoringTimeout();
            });
        }
    }
    /** Sets the id of the toggle section header. */
    set id(value) {
        if (this._id !== value) {
            this._id = value;
        }
    }
    get id() {
        return this._id;
    }
    ngAfterViewInit() {
        this._updateFocusMonitoringTimeout();
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this._focusMonitor.stopMonitoring(this._wrapperElement);
    }
    _updateFocusMonitoringTimeout() {
        this._ngZone.runOutsideAngular(() => 
        // timeout is needed here so that the focus monitor is updated after the view was updated
        setTimeout(() => this._updateFocusMonitoring()));
    }
    _updateFocusMonitoring() {
        if (this._wrapperElementPrevious && !this._wrapperElement) {
            this._focusMonitor.stopMonitoring(this._wrapperElementPrevious);
            this._wrapperElementPrevious = this._wrapperElement;
        }
        if (!this._wrapperElementPrevious && this._wrapperElement) {
            this._focusMonitor
                .monitor(this._wrapperElement)
                .pipe(takeUntil(this._destroyed))
                .subscribe(origin => {
                if (origin === 'keyboard') {
                    this._table._scrollElementIntoView(this._wrapperElement, 8);
                }
            });
            this._wrapperElementPrevious = this._wrapperElement;
        }
    }
    /** Toggles the toggle section. */
    toggle() {
        if (this._table.viewType !== 'mobile') {
            this._toggleSection.toggleExpanded();
        }
    }
    _onKeydown($event) {
        if ($event && ($event.keyCode === ENTER || $event.keyCode === SPACE)) {
            this.toggle();
            // prevent page from scrolling down
            if ($event.keyCode === SPACE) {
                $event.preventDefault();
            }
        }
    }
    _getMobileClipPathInset() {
        if (this._mobileCell) {
            const cellRect = this._mobileCell.nativeElement.getBoundingClientRect();
            return this._table._getMobileClipPathInset(cellRect);
        }
        return '0';
    }
}
NxToggleSectionHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxToggleSectionHeaderComponent, deps: [{ token: NxComparisonTableBase }, { token: NxToggleSectionBase }, { token: i2.FocusMonitor }, { token: i0.NgZone }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });
NxToggleSectionHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxToggleSectionHeaderComponent, selector: "nx-comparison-table-toggle-section-header", inputs: { id: "id" }, viewQueries: [{ propertyName: "_content", first: true, predicate: ["content"], descendants: true, static: true }, { propertyName: "_mobileCell", first: true, predicate: ["mobileCell"], descendants: true }, { propertyName: "_wrapperElement", first: true, predicate: ["wrapper"], descendants: true }], ngImport: i0, template: "<ng-template #content>\n    <ng-container *ngIf=\"_table.viewType === 'desktop' || _table.viewType === 'tablet'\">\n        <div\n            #wrapper\n            class=\"nx-comparison-table-toggle-section__header-wrapper\"\n            role=\"columnheader\"\n            [attr.aria-colspan]=\"_table.viewType === 'desktop' ? _table._getHeaderCells().length + 1 : _table._getHeaderCells().length\"\n            [attr.aria-expanded]=\"_toggleSection.isExpanded\"\n            [attr.id]=\"id\"\n            (click)=\"toggle()\"\n            [attr.tabindex]=\"0\"\n            (keydown)=\"_onKeydown($event)\"\n        >\n            <div class=\"nx-comparison-table-toggle-section__header-content\">\n                <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n                <nx-icon class=\"nx-expansion-panel__chevron\" [@indicatorRotate]=\"_toggleSection.getOpenState()\" name=\"chevron-down\" aria-hidden=\"true\">\n                </nx-icon>\n            </div>\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"_table.viewType === 'mobile'\">\n        <th\n            #mobileCell\n            class=\"nx-comparison-table__mobile-toggle-section-header\"\n            scope=\"col\"\n            [attr.colspan]=\"_toggleSection._numberOfRows()\"\n            [attr.id]=\"id\"\n            [ngStyle]=\"{ 'clip-path': 'inset(' + _getMobileClipPathInset() + ')' }\"\n        >\n            <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n        </th>\n    </ng-container>\n</ng-template>\n\n<ng-template #ngContent>\n    <ng-content></ng-content>\n</ng-template>\n", styles: [".nx-comparison-table__mobile-toggle-section-header{font-size:var(--comparison-table-mobile-section-header-font-size);line-height:var(--comparison-table-mobile-section-header-line-height);font-weight:var(--comparison-table-mobile-section-header-font-weight);letter-spacing:var(--comparison-table-mobile-section-header-letter-spacing);background-color:var(--comparison-table-toggle-section-header-background-color);padding:8px 16px;border-top:1px solid var(--comparison-table-border-color)}.nx-comparison-table-toggle-section__header-wrapper{display:block;width:100%;cursor:pointer}.nx-comparison-table-toggle-section__header-wrapper:focus{outline:0}.nx-comparison-table-toggle-section__header-content{font-size:var(--comparison-table-toggle-section-header-font-size);line-height:var(--comparison-table-toggle-section-header-line-height);font-weight:var(--comparison-table-toggle-section-header-font-weight);letter-spacing:var(--comparison-table-toggle-section-header-letter-spacing);border:1px solid var(--comparison-table-border-color);background-color:var(--comparison-table-toggle-section-header-background-color);display:flex;justify-content:space-between;align-items:center}@media screen and (-ms-high-contrast: active){.nx-comparison-table-toggle-section__header-content{border-color:buttonText;background-color:buttonFace;color:buttonText}}.nx-expansion-panel__chevron{pointer-events:none;font-size:var(--comparison-table-toggle-section-chevron-size);color:var(--comparison-table-toggle-section-chevron-color)}\n"], components: [{ type: i4.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i3.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }], animations: [NxToggleSectionAnimations.indicatorRotate] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxToggleSectionHeaderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-comparison-table-toggle-section-header', animations: [NxToggleSectionAnimations.indicatorRotate], template: "<ng-template #content>\n    <ng-container *ngIf=\"_table.viewType === 'desktop' || _table.viewType === 'tablet'\">\n        <div\n            #wrapper\n            class=\"nx-comparison-table-toggle-section__header-wrapper\"\n            role=\"columnheader\"\n            [attr.aria-colspan]=\"_table.viewType === 'desktop' ? _table._getHeaderCells().length + 1 : _table._getHeaderCells().length\"\n            [attr.aria-expanded]=\"_toggleSection.isExpanded\"\n            [attr.id]=\"id\"\n            (click)=\"toggle()\"\n            [attr.tabindex]=\"0\"\n            (keydown)=\"_onKeydown($event)\"\n        >\n            <div class=\"nx-comparison-table-toggle-section__header-content\">\n                <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n                <nx-icon class=\"nx-expansion-panel__chevron\" [@indicatorRotate]=\"_toggleSection.getOpenState()\" name=\"chevron-down\" aria-hidden=\"true\">\n                </nx-icon>\n            </div>\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"_table.viewType === 'mobile'\">\n        <th\n            #mobileCell\n            class=\"nx-comparison-table__mobile-toggle-section-header\"\n            scope=\"col\"\n            [attr.colspan]=\"_toggleSection._numberOfRows()\"\n            [attr.id]=\"id\"\n            [ngStyle]=\"{ 'clip-path': 'inset(' + _getMobileClipPathInset() + ')' }\"\n        >\n            <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n        </th>\n    </ng-container>\n</ng-template>\n\n<ng-template #ngContent>\n    <ng-content></ng-content>\n</ng-template>\n", styles: [".nx-comparison-table__mobile-toggle-section-header{font-size:var(--comparison-table-mobile-section-header-font-size);line-height:var(--comparison-table-mobile-section-header-line-height);font-weight:var(--comparison-table-mobile-section-header-font-weight);letter-spacing:var(--comparison-table-mobile-section-header-letter-spacing);background-color:var(--comparison-table-toggle-section-header-background-color);padding:8px 16px;border-top:1px solid var(--comparison-table-border-color)}.nx-comparison-table-toggle-section__header-wrapper{display:block;width:100%;cursor:pointer}.nx-comparison-table-toggle-section__header-wrapper:focus{outline:0}.nx-comparison-table-toggle-section__header-content{font-size:var(--comparison-table-toggle-section-header-font-size);line-height:var(--comparison-table-toggle-section-header-line-height);font-weight:var(--comparison-table-toggle-section-header-font-weight);letter-spacing:var(--comparison-table-toggle-section-header-letter-spacing);border:1px solid var(--comparison-table-border-color);background-color:var(--comparison-table-toggle-section-header-background-color);display:flex;justify-content:space-between;align-items:center}@media screen and (-ms-high-contrast: active){.nx-comparison-table-toggle-section__header-content{border-color:buttonText;background-color:buttonFace;color:buttonText}}.nx-expansion-panel__chevron{pointer-events:none;font-size:var(--comparison-table-toggle-section-chevron-size);color:var(--comparison-table-toggle-section-chevron-color)}\n"] }]
        }], ctorParameters: function () {
        return [{ type: NxComparisonTableBase }, { type: NxToggleSectionBase }, { type: i2.FocusMonitor }, { type: i0.NgZone }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [PLATFORM_ID]
                    }] }];
    }, propDecorators: { _content: [{
                type: ViewChild,
                args: ['content', { static: true }]
            }], _mobileCell: [{
                type: ViewChild,
                args: ['mobileCell']
            }], _wrapperElement: [{
                type: ViewChild,
                args: ['wrapper']
            }], id: [{
                type: Input
            }] } });

class NxToggleSectionDirective extends NxToggleSectionBase {
    constructor() {
        super(...arguments);
        this._isExpanded = true;
    }
    /** Whether the toggle section is expanded. Default: true. */
    set isExpanded(value) {
        if (this._isExpanded !== value) {
            this._isExpanded = value;
        }
    }
    get isExpanded() {
        return this._isExpanded;
    }
    _numberOfRows() {
        return this.rows.filter(row => row instanceof NxComparisonTableRowDirective).length;
    }
}
NxToggleSectionDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxToggleSectionDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
NxToggleSectionDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxToggleSectionDirective, selector: "[nxComparisonTableToggleSection]", inputs: { isExpanded: "isExpanded" }, providers: [
        { provide: NxTableContentElement, useExisting: NxToggleSectionDirective },
        { provide: NxToggleSectionBase, useExisting: NxToggleSectionDirective },
    ], queries: [{ propertyName: "toggleSectionHeader", first: true, predicate: NxToggleSectionHeaderComponent, descendants: true }, { propertyName: "rows", predicate: NxTableContentElement }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxToggleSectionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[nxComparisonTableToggleSection]',
                    providers: [
                        { provide: NxTableContentElement, useExisting: NxToggleSectionDirective },
                        { provide: NxToggleSectionBase, useExisting: NxToggleSectionDirective },
                    ],
                }]
        }], propDecorators: { toggleSectionHeader: [{
                type: ContentChild,
                args: [NxToggleSectionHeaderComponent, { static: false }]
            }], rows: [{
                type: ContentChildren,
                args: [NxTableContentElement]
            }], isExpanded: [{
                type: Input
            }] } });

/**
 * @docs-private
 *
 * Component that is only used internally for displaying a `nxComparisonTableRow`
 * (header, content and footer rows) in desktop and tablet view.
 */
class NxComparisonTableFlexRow {
    constructor(_table, _elementRef, _focusMonitor) {
        this._table = _table;
        this._elementRef = _elementRef;
        this._focusMonitor = _focusMonitor;
        this._destroyed = new Subject();
        this._focusMonitor
            .monitor(this._elementRef, true)
            .pipe(takeUntil(this._destroyed))
            .subscribe(origin => {
            if (this.row.type !== 'header' && origin === 'keyboard') {
                this._table._scrollElementIntoView(this._elementRef);
            }
        });
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this._focusMonitor.stopMonitoring(this._elementRef);
    }
    get elementRef() {
        return this._elementRef;
    }
}
NxComparisonTableFlexRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableFlexRow, deps: [{ token: NxComparisonTableBase }, { token: i0.ElementRef }, { token: i2.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });
NxComparisonTableFlexRow.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxComparisonTableFlexRow, selector: "nx-comparison-table-flex-row", inputs: { row: "row" }, host: { properties: { "class.is-header-row": "row.type === \"header\"", "class.is-sticky-row": "row.type === \"header\" && row.mayStick", "class.is-footer-row": "row.type === \"footer\"", "class.is-content-row": "row.type === \"content\"", "class.has-intersection": "row.intersectionCell" } }, ngImport: i0, template: "<!-- own row for description cell for tablet view -->\n<div *ngIf=\"row.type === 'content' && row.descriptionCell && _table.viewType === 'tablet'\" class=\"nx-comparison-table__row\" role=\"row\">\n    <ng-container *ngTemplateOutlet=\"row.descriptionCell._content\"></ng-container>\n</div>\n\n<!-- special row for the popular cell -->\n<div *ngIf=\"row.popularCell && (_table.viewType === 'desktop' || _table.viewType === 'tablet')\" class=\"nx-comparison-table__row\" role=\"row\">\n    <!-- this placeholder cell is removed on tablet, as the row header disappears there  -->\n    <div *ngIf=\"!(_table.viewType === 'tablet')\" role=\"cell\" class=\"nx-comparison-table__placeholder-cell is-popular-placeholder-cell\">\n        <div class=\"nx-comparison-table__cell-content\"></div>\n    </div>\n\n    <div\n        *ngFor=\"let emptyCellBeforePopular of [].constructor(row.popularCell.forColumn - 1); let i = index\"\n        role=\"cell\"\n        class=\"nx-comparison-table__placeholder-cell is-popular-placeholder-cell\"\n        [class.is-hidden]=\"_table._hiddenIndexes.indexOf(i) !== -1\"\n    >\n        <div class=\"nx-comparison-table__cell-content\"></div>\n    </div>\n\n    <!-- popular cell content -->\n    <ng-container *ngTemplateOutlet=\"row.popularCell._content\"></ng-container>\n\n    <div\n        *ngFor=\"let emptyCellAfterPopular of [].constructor(row.cells.length - row.popularCell.forColumn); let i = index\"\n        role=\"cell\"\n        class=\"nx-comparison-table__placeholder-cell is-popular-placeholder-cell\"\n        [class.is-hidden]=\"_table._hiddenIndexes.indexOf(row.popularCell.forColumn + i) !== -1\"\n    >\n        <div class=\"nx-comparison-table__cell-content\"></div>\n    </div>\n</div>\n\n<div class=\"nx-comparison-table__row\" role=\"row\">\n    <!-- header row -->\n    <ng-container *ngIf=\"row.type === 'header'\">\n        <div *ngIf=\"_table.viewType === 'desktop'\" role=\"columnheader\" class=\"nx-comparison-table__placeholder-cell\">\n            <div class=\"nx-comparison-table__cell-content\"></div>\n        </div>\n        <ng-container *ngFor=\"let headerCell of row.cells; let i = index\">\n            <ng-container *ngTemplateOutlet=\"headerCell._content\"></ng-container>\n        </ng-container>\n    </ng-container>\n\n    <!-- content row -->\n    <!-- description cell only displayed here if desktop view -->\n    <ng-container *ngIf=\"row.type === 'content'\">\n        <ng-container *ngIf=\"row.descriptionCell && _table.viewType === 'desktop'\">\n            <ng-container *ngTemplateOutlet=\"row.descriptionCell._content\"></ng-container>\n        </ng-container>\n\n        <ng-container *ngFor=\"let cell of row.cells\">\n            <ng-container *ngTemplateOutlet=\"cell._content\"></ng-container>\n        </ng-container>\n\n        <ng-container *ngIf=\"row.intersectionCell\">\n            <ng-container *ngTemplateOutlet=\"row.intersectionCell._content\"></ng-container>\n        </ng-container>\n    </ng-container>\n\n    <!-- footer row -->\n    <ng-container *ngIf=\"row.type === 'footer'\">\n        <div *ngIf=\"_table.viewType === 'desktop'\" class=\"nx-comparison-table__placeholder-cell\" role=\"cell\">\n            <div class=\"nx-comparison-table__cell-content\"></div>\n        </div>\n        <ng-container *ngFor=\"let footerCell of row.cells\">\n            <ng-container *ngTemplateOutlet=\"footerCell._content\"></ng-container>\n        </ng-container>\n    </ng-container>\n</div>\n", styles: [":host{display:block}:host.is-sticky-row{position:-webkit-sticky;position:sticky;top:0;z-index:1}.is-hidden{display:none}\n"], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableFlexRow, decorators: [{
            type: Component,
            args: [{ selector: 'nx-comparison-table-flex-row', host: {
                        '[class.is-header-row]': 'row.type === "header"',
                        '[class.is-sticky-row]': 'row.type === "header" && row.mayStick',
                        '[class.is-footer-row]': 'row.type === "footer"',
                        '[class.is-content-row]': 'row.type === "content"',
                        '[class.has-intersection]': 'row.intersectionCell',
                    }, template: "<!-- own row for description cell for tablet view -->\n<div *ngIf=\"row.type === 'content' && row.descriptionCell && _table.viewType === 'tablet'\" class=\"nx-comparison-table__row\" role=\"row\">\n    <ng-container *ngTemplateOutlet=\"row.descriptionCell._content\"></ng-container>\n</div>\n\n<!-- special row for the popular cell -->\n<div *ngIf=\"row.popularCell && (_table.viewType === 'desktop' || _table.viewType === 'tablet')\" class=\"nx-comparison-table__row\" role=\"row\">\n    <!-- this placeholder cell is removed on tablet, as the row header disappears there  -->\n    <div *ngIf=\"!(_table.viewType === 'tablet')\" role=\"cell\" class=\"nx-comparison-table__placeholder-cell is-popular-placeholder-cell\">\n        <div class=\"nx-comparison-table__cell-content\"></div>\n    </div>\n\n    <div\n        *ngFor=\"let emptyCellBeforePopular of [].constructor(row.popularCell.forColumn - 1); let i = index\"\n        role=\"cell\"\n        class=\"nx-comparison-table__placeholder-cell is-popular-placeholder-cell\"\n        [class.is-hidden]=\"_table._hiddenIndexes.indexOf(i) !== -1\"\n    >\n        <div class=\"nx-comparison-table__cell-content\"></div>\n    </div>\n\n    <!-- popular cell content -->\n    <ng-container *ngTemplateOutlet=\"row.popularCell._content\"></ng-container>\n\n    <div\n        *ngFor=\"let emptyCellAfterPopular of [].constructor(row.cells.length - row.popularCell.forColumn); let i = index\"\n        role=\"cell\"\n        class=\"nx-comparison-table__placeholder-cell is-popular-placeholder-cell\"\n        [class.is-hidden]=\"_table._hiddenIndexes.indexOf(row.popularCell.forColumn + i) !== -1\"\n    >\n        <div class=\"nx-comparison-table__cell-content\"></div>\n    </div>\n</div>\n\n<div class=\"nx-comparison-table__row\" role=\"row\">\n    <!-- header row -->\n    <ng-container *ngIf=\"row.type === 'header'\">\n        <div *ngIf=\"_table.viewType === 'desktop'\" role=\"columnheader\" class=\"nx-comparison-table__placeholder-cell\">\n            <div class=\"nx-comparison-table__cell-content\"></div>\n        </div>\n        <ng-container *ngFor=\"let headerCell of row.cells; let i = index\">\n            <ng-container *ngTemplateOutlet=\"headerCell._content\"></ng-container>\n        </ng-container>\n    </ng-container>\n\n    <!-- content row -->\n    <!-- description cell only displayed here if desktop view -->\n    <ng-container *ngIf=\"row.type === 'content'\">\n        <ng-container *ngIf=\"row.descriptionCell && _table.viewType === 'desktop'\">\n            <ng-container *ngTemplateOutlet=\"row.descriptionCell._content\"></ng-container>\n        </ng-container>\n\n        <ng-container *ngFor=\"let cell of row.cells\">\n            <ng-container *ngTemplateOutlet=\"cell._content\"></ng-container>\n        </ng-container>\n\n        <ng-container *ngIf=\"row.intersectionCell\">\n            <ng-container *ngTemplateOutlet=\"row.intersectionCell._content\"></ng-container>\n        </ng-container>\n    </ng-container>\n\n    <!-- footer row -->\n    <ng-container *ngIf=\"row.type === 'footer'\">\n        <div *ngIf=\"_table.viewType === 'desktop'\" class=\"nx-comparison-table__placeholder-cell\" role=\"cell\">\n            <div class=\"nx-comparison-table__cell-content\"></div>\n        </div>\n        <ng-container *ngFor=\"let footerCell of row.cells\">\n            <ng-container *ngTemplateOutlet=\"footerCell._content\"></ng-container>\n        </ng-container>\n    </ng-container>\n</div>\n", styles: [":host{display:block}:host.is-sticky-row{position:-webkit-sticky;position:sticky;top:0;z-index:1}.is-hidden{display:none}\n"] }]
        }], ctorParameters: function () { return [{ type: NxComparisonTableBase }, { type: i0.ElementRef }, { type: i2.FocusMonitor }]; }, propDecorators: { row: [{
                type: Input
            }] } });

/**
 * @docs-private
 *
 * Component that is only used internally for displaying a `nxComparisonTableRowGroup` in desktop and tablet view.
 */
class NxComparisonTableDesktopGroup {
    constructor(_table, _focusMonitor, _dir, _defaultOptions) {
        this._table = _table;
        this._focusMonitor = _focusMonitor;
        this._dir = _dir;
        this._defaultOptions = _defaultOptions;
        this._expanded = false;
        this._useFullRowForExpandableArea = false;
        this.isExpandedChange = new EventEmitter();
        this._destroyed = new Subject();
    }
    /** Sets if the row group is expanded. Default: false. */
    set isExpanded(value) {
        this._expanded = coerceBooleanProperty(value);
    }
    get isExpanded() {
        return this._expanded;
    }
    /** Sets if the expansion cell uses the full row of the table or leaves out the first column. Default: false. */
    set useFullRowForExpandableArea(value) {
        this._useFullRowForExpandableArea = coerceBooleanProperty(value);
    }
    get useFullRowForExpandableArea() {
        var _a;
        if (this._useFullRowForExpandableArea !== undefined) {
            return this._useFullRowForExpandableArea;
        }
        if (((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.useFullRowForExpandableArea) !== undefined) {
            return this._defaultOptions.useFullRowForExpandableArea;
        }
        return false;
    }
    ngAfterViewInit() {
        var _a;
        this._updateFocusMonitoring();
        (_a = this.group) === null || _a === void 0 ? void 0 : _a.rows.changes.pipe(takeUntil(this._destroyed)).subscribe(rows => 
        // timeout is needed here so that the focus monitor is updated after the view was updated
        setTimeout(() => this._updateFocusMonitoring()));
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this._focusMonitor.stopMonitoring(this._expansionCell);
    }
    /** The text direction of the containing app. */
    get dir() {
        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
    }
    toggleGroup() {
        this.isExpanded = !this.isExpanded;
        this.isExpandedChange.emit(this.isExpanded);
    }
    _updateFocusMonitoring() {
        if (this._expansionCellPrevious && !this._expansionCell) {
            this._focusMonitor.stopMonitoring(this._expansionCellPrevious);
            this._expansionCellPrevious = this._expansionCell;
        }
        if (!this._expansionCellPrevious && this._expansionCell) {
            this._focusMonitor
                .monitor(this._expansionCell)
                .pipe(takeUntil(this._destroyed))
                .subscribe(origin => {
                if (origin === 'keyboard') {
                    this._table._scrollElementIntoView(this._expansionCell, 8);
                }
            });
            this._expansionCellPrevious = this._expansionCell;
        }
    }
    _onKeydown(event) {
        if (event.keyCode === ENTER) {
            this.toggleGroup();
        }
        else if (event.keyCode === SPACE) {
            this.toggleGroup();
            event.preventDefault(); // prevent from scrolling
        }
    }
    getOpenState() {
        return this._expanded ? 'open' : 'closed';
    }
    get _expandedAreaColspan() {
        if (this._table.viewType === 'desktop' && this._useFullRowForExpandableArea) {
            return this._table._infoColumnCount() + 1;
        }
        return this._table._infoColumnCount();
    }
}
NxComparisonTableDesktopGroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableDesktopGroup, deps: [{ token: NxComparisonTableBase }, { token: i2.FocusMonitor }, { token: i3$1.Directionality, optional: true }, { token: COMPARISON_TABLE_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NxComparisonTableDesktopGroup.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxComparisonTableDesktopGroup, selector: "nx-comparison-table-desktop-group", inputs: { group: "group", isExpanded: "isExpanded", useFullRowForExpandableArea: "useFullRowForExpandableArea" }, outputs: { isExpandedChange: "isExpandedChange" }, viewQueries: [{ propertyName: "_expansionCell", first: true, predicate: ["expansionCell"], descendants: true }], ngImport: i0, template: "<ng-container *ngFor=\"let row of group.rows; let i = index\">\n    <nx-comparison-table-flex-row *ngIf=\"i < group.visibleRows || _expanded\" [row]=\"row\"> </nx-comparison-table-flex-row>\n</ng-container>\n\n<div *ngIf=\"group.rows.length > group.visibleRows\" class=\"nx-comparison-table__row\" role=\"row\">\n    <div *ngIf=\"_table.viewType === 'desktop' && !useFullRowForExpandableArea\" class=\"nx-comparison-table__placeholder-cell\" role=\"cell\">\n        <div class=\"nx-comparison-table__cell-content\"></div>\n    </div>\n    <div\n        #expansionCell\n        class=\"nx-comparison-table__intersection-cell nx-comparison-table__group-expansion-cell\"\n        [class.full-width]=\"_table.viewType === 'desktop' && useFullRowForExpandableArea\"\n        role=\"cell\"\n        [attr.aria-colspan]=\"_expandedAreaColspan\"\n        [style.flex-grow]=\"_expandedAreaColspan\"\n        (click)=\"toggleGroup()\"\n        [attr.aria-expanded]=\"_expanded\"\n        tabindex=\"0\"\n        (keydown)=\"_onKeydown($event)\"\n    >\n        <div class=\"nx-comparison-table__cell-content\">\n            <span class=\"group-label\">{{ _expanded ? group.labelExpanded : group.labelCollapsed }}</span>\n            <nx-icon\n                [name]=\"_expanded ? 'chevron-up' : 'chevron-down'\"\n                aria-hidden=\"true\"\n                size=\"s\"\n                [class.nx-margin-left-2xs]=\"dir === 'ltr'\"\n                [class.nx-margin-right-2xs]=\"dir === 'rtl'\"\n            >\n            </nx-icon>\n        </div>\n    </div>\n</div>\n", styles: [":host{display:block}:host .nx-comparison-table__group-expansion-cell{cursor:pointer;color:var(--comparison-table-expansion-cell-color)}:host .nx-comparison-table__group-expansion-cell:focus{outline:0}:host .nx-comparison-table__group-expansion-cell .nx-comparison-table__cell-content{display:flex;justify-content:center}:host .nx-comparison-table__group-expansion-cell .group-label{font-size:var(--comparison-table-group-label-font-size);line-height:var(--comparison-table-group-label-line-height);font-weight:var(--comparison-table-group-label-font-weight);letter-spacing:var(--comparison-table-group-label-letter-spacing)}@media screen and (-ms-high-contrast: active){:host .nx-comparison-table__group-expansion-cell{color:buttonText;background:buttonFace;border-color:buttonText}}.nx-comparison-table__group-expansion-cell.cdk-keyboard-focused .nx-comparison-table__cell-content{box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-comparison-table__group-expansion-cell.cdk-keyboard-focused .nx-comparison-table__cell-content{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}\n"], components: [{ type: NxComparisonTableFlexRow, selector: "nx-comparison-table-flex-row", inputs: ["row"] }, { type: i4.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }], directives: [{ type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableDesktopGroup, decorators: [{
            type: Component,
            args: [{ selector: 'nx-comparison-table-desktop-group', template: "<ng-container *ngFor=\"let row of group.rows; let i = index\">\n    <nx-comparison-table-flex-row *ngIf=\"i < group.visibleRows || _expanded\" [row]=\"row\"> </nx-comparison-table-flex-row>\n</ng-container>\n\n<div *ngIf=\"group.rows.length > group.visibleRows\" class=\"nx-comparison-table__row\" role=\"row\">\n    <div *ngIf=\"_table.viewType === 'desktop' && !useFullRowForExpandableArea\" class=\"nx-comparison-table__placeholder-cell\" role=\"cell\">\n        <div class=\"nx-comparison-table__cell-content\"></div>\n    </div>\n    <div\n        #expansionCell\n        class=\"nx-comparison-table__intersection-cell nx-comparison-table__group-expansion-cell\"\n        [class.full-width]=\"_table.viewType === 'desktop' && useFullRowForExpandableArea\"\n        role=\"cell\"\n        [attr.aria-colspan]=\"_expandedAreaColspan\"\n        [style.flex-grow]=\"_expandedAreaColspan\"\n        (click)=\"toggleGroup()\"\n        [attr.aria-expanded]=\"_expanded\"\n        tabindex=\"0\"\n        (keydown)=\"_onKeydown($event)\"\n    >\n        <div class=\"nx-comparison-table__cell-content\">\n            <span class=\"group-label\">{{ _expanded ? group.labelExpanded : group.labelCollapsed }}</span>\n            <nx-icon\n                [name]=\"_expanded ? 'chevron-up' : 'chevron-down'\"\n                aria-hidden=\"true\"\n                size=\"s\"\n                [class.nx-margin-left-2xs]=\"dir === 'ltr'\"\n                [class.nx-margin-right-2xs]=\"dir === 'rtl'\"\n            >\n            </nx-icon>\n        </div>\n    </div>\n</div>\n", styles: [":host{display:block}:host .nx-comparison-table__group-expansion-cell{cursor:pointer;color:var(--comparison-table-expansion-cell-color)}:host .nx-comparison-table__group-expansion-cell:focus{outline:0}:host .nx-comparison-table__group-expansion-cell .nx-comparison-table__cell-content{display:flex;justify-content:center}:host .nx-comparison-table__group-expansion-cell .group-label{font-size:var(--comparison-table-group-label-font-size);line-height:var(--comparison-table-group-label-line-height);font-weight:var(--comparison-table-group-label-font-weight);letter-spacing:var(--comparison-table-group-label-letter-spacing)}@media screen and (-ms-high-contrast: active){:host .nx-comparison-table__group-expansion-cell{color:buttonText;background:buttonFace;border-color:buttonText}}.nx-comparison-table__group-expansion-cell.cdk-keyboard-focused .nx-comparison-table__cell-content{box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-comparison-table__group-expansion-cell.cdk-keyboard-focused .nx-comparison-table__cell-content{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}\n"] }]
        }], ctorParameters: function () {
        return [{ type: NxComparisonTableBase }, { type: i2.FocusMonitor }, { type: i3$1.Directionality, decorators: [{
                        type: Optional
                    }] }, { type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [COMPARISON_TABLE_DEFAULT_OPTIONS]
                    }] }];
    }, propDecorators: { group: [{
                type: Input
            }], _expansionCell: [{
                type: ViewChild,
                args: ['expansionCell']
            }], isExpanded: [{
                type: Input
            }], useFullRowForExpandableArea: [{
                type: Input
            }], isExpandedChange: [{
                type: Output
            }] } });

class NxComparisonTableComponent extends NxComparisonTableBase {
    constructor(_element, _dir, viewportService, _cdr, scrollDispatch, _ngZone) {
        super(viewportService, _cdr);
        this._element = _element;
        this._dir = _dir;
        this._cdr = _cdr;
        this.scrollDispatch = scrollDispatch;
        this._ngZone = _ngZone;
        /** The top value for the clip-path of the _desktopContentDiv. */
        this._desktopContentClip = 0;
        /** An event that is is dispatched each time selected index of the table has changed. */
        this.selectedIndexChange = new EventEmitter();
        this._scrollHandler = (event) => {
            this._updateCellClipping();
        };
        this._scrollableArea = new CdkScrollable(this._element, this.scrollDispatch, this._ngZone);
    }
    /** Sets which info column is selected. */
    set selectedIndex(value) {
        const newValue = coerceNumberProperty(value);
        if (this._selectedIndex !== newValue) {
            this._selectedIndex = newValue;
            this.selectedIndexChange.emit(this._selectedIndex);
        }
    }
    get selectedIndex() {
        return this._selectedIndex;
    }
    /** Sets which column is hidden. */
    set hiddenIndexes(value) {
        const newValue = coerceArray(value);
        if (this._hiddenIndexes !== newValue) {
            this._hiddenIndexes = newValue;
        }
    }
    get hiddenIndexes() {
        return this._hiddenIndexes;
    }
    /** @docs-private */
    get dir() {
        var _a;
        return ((_a = this._dir) === null || _a === void 0 ? void 0 : _a.value) || 'ltr';
    }
    ngOnInit() {
        window.addEventListener('scroll', this._scrollHandler, true);
        this.scrollDispatch.register(this._scrollableArea);
        // set the clipping for the cells once at the beginnig
        setTimeout(() => this._updateCellClipping());
    }
    ngAfterViewInit() {
        var _a;
        (_a = this._getHeaderRow()) === null || _a === void 0 ? void 0 : _a._requestCellClippingUpdate$.pipe(delay(0), takeUntil(this._destroyed)).subscribe(() => this._updateCellClipping());
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        window.removeEventListener('scroll', this._scrollHandler, true);
        this.scrollDispatch.deregister(this._scrollableArea);
    }
    _updateCellClipping() {
        if (this.viewType === 'desktop' || this.viewType === 'tablet') {
            const headerRect = this._headerRowElement.elementRef.nativeElement.getBoundingClientRect();
            const contentRect = this._desktopContentDiv.nativeElement.getBoundingClientRect();
            const newContentClip = headerRect.bottom - contentRect.top;
            if (this._desktopContentClip !== newContentClip) {
                this._desktopContentClip = newContentClip;
                this._cdr.markForCheck();
            }
        }
        else if (this.viewType === 'mobile') {
            if (this._stickyMobileCell) {
                const stickyRect = this._stickyMobileCell.nativeElement.getBoundingClientRect();
                const isRTL = this._dir && this._dir.value === 'rtl';
                this._mobileStickyEdge = isRTL ? stickyRect.left : stickyRect.right;
                this._cdr.markForCheck();
                // clip paths for placeholder cells with borders
                const placeholderCells = this._element.nativeElement.getElementsByClassName('needs-clipping');
                for (const cell of placeholderCells) {
                    const cellRect = cell.getBoundingClientRect();
                    cell.style['clip-path'] = `inset(${this._getMobileClipPathInset(cellRect)})`;
                }
            }
        }
    }
    _getMobileClipPathInset(cellRect) {
        if (!this._mobileStickyEdge) {
            return '0';
        }
        if (this._dir && this._dir.value === 'rtl') {
            const clip = cellRect.right - this._mobileStickyEdge;
            return clip > 0 ? `0 ${clip}px 0 0` : '0';
        }
        const clip = this._mobileStickyEdge - cellRect.left;
        return clip > 0 ? `0 0 0 ${clip}px` : '0';
    }
    /** Whether the element is a row. */
    _isRow(element) {
        return element instanceof NxComparisonTableRowDirective;
    }
    /** Whether the element is a toggle section. */
    _isToggleSection(element) {
        return element instanceof NxToggleSectionDirective;
    }
    /** Whether the element is a row group. */
    _isRowGroup(element) {
        return element instanceof NxComparisonTableRowGroupDirective;
    }
    /** Whether row is the first item in a new block of rows or a section. */
    _isFirstInfoOfBlock(rowIndex) {
        const elements = this.elements.toArray();
        // if first row after header
        let firstRowAfterHeader = 1;
        while (!this._isRow(elements[firstRowAfterHeader])) {
            firstRowAfterHeader++;
        }
        if (rowIndex === firstRowAfterHeader) {
            return true;
        }
        // if first row: false
        if (rowIndex === 0) {
            return false;
        }
        // if toggle section
        if (this._isToggleSection(elements[rowIndex])) {
            return true;
        }
        // if first row after a section
        if (this._isRow(elements[rowIndex]) &&
            elements[rowIndex - 1] instanceof NxComparisonTableRowDirective &&
            elements[rowIndex - 1]._isPartOfToggleSection()) {
            return true;
        }
        // if last row and the last row is a footer row: true
        if (rowIndex === elements.length - 1 && this._isRow(elements[rowIndex] && elements[rowIndex].type === 'footer')) {
            return true;
        }
        return false;
    }
    _getHeaderCells() {
        const row = this.elements.find(element => this._isRow(element) && element.type === 'header');
        return row.cells.toArray();
    }
    _getPopularCell() {
        const row = this.elements.find(element => this._isRow(element) && element.type === 'header');
        return row.popularCell;
    }
    _getFooterCells() {
        const row = this.elements.find(element => this._isRow(element) && element.type === 'footer');
        return row ? row.cells.toArray() : [];
    }
    _containsToggleSection() {
        return this.elements.filter(element => this._isToggleSection(element)).length > 0;
    }
    _infoColumnCount() {
        return this._getHeaderCells().length - this.hiddenIndexes.length;
    }
    _getMobileColumnCount() {
        return this._getFooterCells().length ? this.elements.length - 1 : this.elements.length;
    }
    _isMobileRowDisabled(i) {
        return this._getHeaderCells ? this._getHeaderCells()[i].disabledColumn : false;
    }
    _addDisabledColumn(disabledColumn) {
        if (!this._disabledIndexes.includes(disabledColumn)) {
            this._disabledIndexes.push(disabledColumn);
        }
    }
    _removeDisabledColumn(enabledColumn) {
        const indexOfElement = this._disabledIndexes.indexOf(enabledColumn);
        if (indexOfElement !== -1) {
            this._disabledIndexes.splice(indexOfElement, 1);
        }
    }
    _getHeaderRow() {
        const headerRow = this.elements.find(element => this._isRow(element) && element.type === 'header');
        return headerRow;
    }
    _scrollElementIntoView(element, additionalSpacing = 0) {
        // check if element starts above the bottom of the header
        // if yes: modify scrollTop position
        const scrolledParent = this._getScrollParent(element.nativeElement);
        if (!scrolledParent) {
            return;
        }
        const headerBottom = this._headerRowElement.elementRef.nativeElement.offsetTop + this._headerRowElement.elementRef.nativeElement.getBoundingClientRect().height;
        const elementTop = element.nativeElement.offsetTop;
        if (elementTop < headerBottom) {
            const diff = headerBottom - elementTop;
            scrolledParent.scrollTop = scrolledParent.scrollTop - diff - additionalSpacing;
        }
    }
    // Taken from https://github.com/olahol/scrollparent.js (MIT License)
    _getScrollParent(node) {
        const regex = /(auto|scroll)/;
        const parents = (_node, ps) => {
            if (_node.parentNode === null) {
                return ps;
            }
            return parents(_node.parentNode, ps.concat([_node]));
        };
        const style = (_node, prop) => getComputedStyle(_node, null).getPropertyValue(prop);
        const overflow = (_node) => style(_node, 'overflow') + style(_node, 'overflow-y') + style(_node, 'overflow-x');
        const scroll = (_node) => regex.test(overflow(_node));
        const scrollParent = (_node) => {
            if (!(_node instanceof HTMLElement || _node instanceof SVGElement)) {
                return;
            }
            const ps = parents(_node.parentNode, []);
            for (let i = 0; i < ps.length; i += 1) {
                if (scroll(ps[i])) {
                    return ps[i];
                }
            }
            return document.scrollingElement || document.documentElement;
        };
        return scrollParent(node);
    }
}
NxComparisonTableComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableComponent, deps: [{ token: i0.ElementRef }, { token: i3$1.Directionality, optional: true }, { token: i1.NxViewportService }, { token: i0.ChangeDetectorRef }, { token: i3$2.ScrollDispatcher }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
NxComparisonTableComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxComparisonTableComponent, selector: "nx-comparison-table", inputs: { selectedIndex: "selectedIndex", hiddenIndexes: "hiddenIndexes" }, outputs: { selectedIndexChange: "selectedIndexChange" }, host: { properties: { "attr.dir": "this.dir" } }, providers: [{ provide: NxComparisonTableBase, useExisting: NxComparisonTableComponent }], queries: [{ propertyName: "elements", predicate: NxTableContentElement, descendants: true }], viewQueries: [{ propertyName: "_headerRowElement", first: true, predicate: ["headerRow"], descendants: true }, { propertyName: "_desktopContentDiv", first: true, predicate: ["desktopContent"], descendants: true }, { propertyName: "_stickyMobileCell", first: true, predicate: ["stickyMobileCell"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<!-- basic structure:\n\nDesktop:\n\n+--------+-----------+-----------+-----------+\n|        |           | Popular   |           |\n|--------|-----------|-----------|-----------|\n|        | Header 1  | Header 2  | Header 3  |\n|--------|-----------|-----------|-----------|\n| Info 1 |           |           |           |\n|--------|-----------|-----------|-----------|\n| Info 2 |           |           |           |\n|--------|-----------|-----------|-----------|\n|        | Footer 1  | Footer 2  | Footer 3  |\n+--------+-----------+-----------+-----------+\n\nTablet: Info info columns are shifted \"into\" the content:\n\n+-----------+-----------+-----------+\n|           | Popular   |           |\n|-----------|-----------|-----------|\n| Header 1  | Header 2  | Header 3  |\n|-----------+-----------+-----------|\n| Info 1                            |\n|-----------+-----------+-----------|\n|           |           |           |\n|-----------+-----------+-----------|\n| Info 2                            |\n|-----------+-----------+-----------|\n|           |           |           |\n|-----------|-----------|-----------|\n| Footer 1  | Footer 2  | Footer 3  |\n+-----------+-----------+-----------+\n\nMobile: table is flipped diagonally (with no footer cells!):\n\n+-----------+--------+--------+\n|           | Info 1 | Info 2 |\n|-----------|--------|--------|\n| Header 1  |        |        |\n|-----------|--------+--------+\n| Popular   |\n|-----------|--------+--------+\n| Header 2  |        |        |\n|-----------|--------|--------|\n| Header 3  |        |        |\n+-----------+--------+--------+\n\n-->\n\n<ng-container *ngIf=\"viewType === 'desktop' || viewType === 'tablet'\">\n    <ng-container *ngTemplateOutlet=\"desktopView\"></ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"viewType === 'mobile'\">\n    <ng-container *ngTemplateOutlet=\"mobileTable\"></ng-container>\n</ng-container>\n\n<!-- desktop + tablet template ---------------------------------->\n\n<ng-template #desktopView>\n    <div role=\"table\">\n        <nx-comparison-table-flex-row #headerRow [row]=\"_getHeaderRow()\"></nx-comparison-table-flex-row>\n\n        <div #desktopContent class=\"nx-comparison-table__table-body\" [ngStyle]=\"{ 'clip-path': 'inset(' + _desktopContentClip + 'px -12px -1px)' }\">\n            <ng-container *ngFor=\"let element of elements; let i = index\">\n                <nx-comparison-table-flex-row\n                    *ngIf=\"_isRow(element) && element.type !== 'header' && !element._isPartOfToggleSection() && !element._isPartOfRowGroup()\"\n                    [row]=\"element\"\n                ></nx-comparison-table-flex-row>\n                <nx-comparison-table-desktop-group\n                    *ngIf=\"_isRowGroup(element) && !element._isPartOfToggleSection()\"\n                    [group]=\"element\"\n                    [isExpanded]=\"element.isExpanded\"\n                    [useFullRowForExpandableArea]=\"element.useFullRowForExpandableArea\"\n                    (isExpandedChange)=\"element._handleIsExpandedChange($event)\"\n                >\n                </nx-comparison-table-desktop-group>\n\n                <!-- add role=table here to prevent screen reader wrong reading. since toggleSection is like another table, -->\n                <div role=\"table\" *ngIf=\"_isToggleSection(element)\" class=\"nx-comparison-table__toggle-section\">\n                    <div class=\"nx-comparison-table__toggle-section-header\" role=\"row\">\n                        <ng-container *ngTemplateOutlet=\"element.toggleSectionHeader._content\"></ng-container>\n                    </div>\n\n                    <div class=\"nx-comparison-table__toggle-section-body\" [@bodyExpansion]=\"element.getOpenState()\" role=\"rowgroup\">\n                        <ng-container *ngFor=\"let elementOfSection of element.rows\">\n                            <nx-comparison-table-flex-row\n                                *ngIf=\"_isRow(elementOfSection) && !elementOfSection._isPartOfRowGroup()\"\n                                [row]=\"elementOfSection\"\n                            ></nx-comparison-table-flex-row>\n                            <nx-comparison-table-desktop-group\n                                *ngIf=\"_isRowGroup(elementOfSection)\"\n                                [group]=\"elementOfSection\"\n                                [isExpanded]=\"elementOfSection.isExpanded\"\n                                [useFullRowForExpandableArea]=\"elementOfSection.useFullRowForExpandableArea\"\n                                (isExpandedChange)=\"elementOfSection._handleIsExpandedChange($event)\"\n                            >\n                            </nx-comparison-table-desktop-group>\n                        </ng-container>\n                    </div>\n                </div>\n            </ng-container>\n        </div>\n    </div>\n</ng-template>\n\n<!-- mobile template ------------------------------------------->\n\n<ng-template #mobileTable>\n    <table>\n        <!-- row for toggle section headers -->\n        <tr *ngIf=\"_containsToggleSection()\" class=\"nx-comparison-table__toggle-section-header-row\">\n            <th class=\"nx-comparison-table__placeholder-cell\"></th>\n            <ng-container *ngFor=\"let element of elements; let i = index\">\n                <!-- TODO split up in header row and content rows -->\n                <ng-container *ngIf=\"i !== 0 && i < _getMobileColumnCount()\">\n                    <ng-container *ngIf=\"_isRow(element) && !element._isPartOfToggleSection()\">\n                        <!-- placeholder cell if this is a new block of info rows -->\n                        <ng-container *ngIf=\"_isFirstInfoOfBlock(i)\">\n                            <th class=\"nx-comparison-table__placeholder-cell\" aria-hidden=\"true\"></th>\n                        </ng-container>\n\n                        <th class=\"nx-comparison-table__placeholder-cell\"></th>\n                    </ng-container>\n\n                    <ng-container *ngIf=\"_isToggleSection(element)\">\n                        <th class=\"nx-comparison-table__placeholder-cell needs-clipping\" aria-hidden=\"true\"></th>\n                        <ng-container *ngTemplateOutlet=\"element.toggleSectionHeader._content\"></ng-container>\n                    </ng-container>\n                </ng-container>\n            </ng-container>\n        </tr>\n\n        <!-- rows for all description cells -->\n        <tr class=\"nx-comparison-table__description-row\">\n            <th #stickyMobileCell class=\"nx-comparison-table__placeholder-cell\" scope=\"col\"></th>\n            <ng-container *ngFor=\"let element of elements; let headerIndex = index\">\n                <ng-container *ngIf=\"_isRow(element) && !element._isPartOfToggleSection()\">\n                    <!-- we need the extra ng-container or VE will fail because of the _isRow method -->\n                    <ng-container *ngIf=\"headerIndex > 0 && headerIndex < _getMobileColumnCount()\">\n                        <!-- placeholder cell if this is a new block of info rows -->\n                        <ng-container *ngIf=\"_isFirstInfoOfBlock(headerIndex)\">\n                            <th class=\"nx-comparison-table__placeholder-cell\" aria-hidden=\"true\"></th>\n                        </ng-container>\n\n                        <ng-container *ngTemplateOutlet=\"element?.descriptionCell?._content ?? null\"> </ng-container>\n                    </ng-container>\n                </ng-container>\n\n                <ng-container *ngIf=\"_isToggleSection(element)\">\n                    <th class=\"nx-comparison-table__placeholder-cell needs-clipping\" aria-hidden=\"true\"></th>\n                    <ng-container *ngFor=\"let row of element.rows\">\n                        <ng-container *ngIf=\"_isRow(row)\">\n                            <ng-container *ngTemplateOutlet=\"row.descriptionCell?._content ?? null\"></ng-container>\n                        </ng-container>\n                    </ng-container>\n                </ng-container>\n            </ng-container>\n        </tr>\n\n        <!-- row for every product -->\n        <!-- intersection cells have to be placed in first row -->\n        <ng-container *ngFor=\"let headerCell of _getHeaderCells(); let headerIndex = index\">\n            <tr *ngIf=\"_getPopularCell() && _getPopularCell().forColumn === headerIndex + 1\" class=\"nx-comparison-table__popular-row\">\n                <ng-container *ngTemplateOutlet=\"_getPopularCell()._content\"></ng-container>\n\n                <ng-container *ngFor=\"let element of elements; let infoIndex = index\">\n                    <ng-container *ngIf=\"_isRow(element) && !element._isPartOfToggleSection()\">\n                        <!-- we need the extra ng-container or VE will fail because of the _isRow method -->\n                        <ng-container *ngIf=\"infoIndex > 0 && infoIndex < _getMobileColumnCount()\">\n                            <!-- placeholder cell if this is a new block of info rows -->\n                            <ng-container *ngIf=\"_isFirstInfoOfBlock(infoIndex)\">\n                                <td class=\"nx-comparison-table__placeholder-cell\" aria-hidden=\"true\"></td>\n                            </ng-container>\n                            <!-- if there is an intersection cell, we need a marker so that we know we have to place a left border to the next cell -->\n                            <ng-container *ngIf=\"element.intersectionCell\">\n                                <div class=\"nx-comparison-table__intersection-cell-marker\"></div>\n                            </ng-container>\n                            <!-- placeholder cell for every cell of the row, except intersection cells -->\n                            <ng-container *ngIf=\"element.cells.length > 0\">\n                                <td class=\"nx-comparison-table__placeholder-with-border-cell\" aria-hidden=\"true\"></td>\n                            </ng-container>\n                        </ng-container>\n                    </ng-container>\n\n                    <ng-container *ngIf=\"_isToggleSection(element)\">\n                        <td class=\"nx-comparison-table__placeholder-cell\" aria-hidden=\"true\"></td>\n                        <ng-container *ngFor=\"let row of element.rows\">\n                            <ng-container *ngIf=\"_isRow(row)\">\n                                <!-- if there is an intersection cell, we need a marker so that we know we have to place a left border to the next cell -->\n                                <ng-container *ngIf=\"row.intersectionCell\">\n                                    <div class=\"nx-comparison-table__intersection-cell-marker\"></div>\n                                </ng-container>\n                                <!-- placeholder cell for every cell of the row, except intersection cells -->\n                                <ng-container *ngIf=\"row.cells.length > 0\">\n                                    <td class=\"nx-comparison-table__placeholder-with-border-cell\" aria-hidden=\"true\"></td>\n                                </ng-container>\n                            </ng-container>\n                        </ng-container>\n                    </ng-container>\n                </ng-container>\n            </tr>\n\n            <tr [class.is-disabled]=\"_isMobileRowDisabled(headerIndex)\">\n                <ng-container *ngTemplateOutlet=\"headerCell._content\"></ng-container>\n                <ng-container *ngFor=\"let element of elements; let infoIndex = index\">\n                    <ng-container *ngIf=\"_isRow(element) && !element._isPartOfToggleSection()\">\n                        <!-- we need the extra ng-container or VE will fail because of the _isRow method -->\n                        <ng-container *ngIf=\"infoIndex > 0 && infoIndex < _getMobileColumnCount()\">\n                            <!-- placeholder cell if this is a new block of info rows -->\n                            <ng-container *ngIf=\"_isFirstInfoOfBlock(infoIndex)\">\n                                <td class=\"nx-comparison-table__placeholder-cell\" aria-hidden=\"true\"></td>\n                            </ng-container>\n\n                            <!-- if first mobile row: show intersection cells -->\n                            <ng-container *ngIf=\"headerIndex === 0 && element.intersectionCell\">\n                                <ng-container *ngTemplateOutlet=\"(element?.intersectionCell)!._content\"></ng-container>\n                            </ng-container>\n                            <ng-container *ngIf=\"element.cells.length > 0\">\n                                <ng-container *ngTemplateOutlet=\"element.cells.toArray()[headerIndex]!._content\"></ng-container>\n                            </ng-container>\n                        </ng-container>\n                    </ng-container>\n\n                    <ng-container *ngIf=\"_isToggleSection(element)\">\n                        <td class=\"nx-comparison-table__placeholder-cell\" aria-hidden=\"true\"></td>\n                        <ng-container *ngFor=\"let row of element.rows\">\n                            <ng-container *ngIf=\"_isRow(row)\">\n                                <!-- if first mobile row: show intersection cells -->\n                                <ng-container *ngIf=\"headerIndex === 0 && row.intersectionCell\">\n                                    <ng-container *ngTemplateOutlet=\"row.intersectionCell._content\"> </ng-container>\n                                </ng-container>\n\n                                <ng-container *ngIf=\"row.cells.length > 0\">\n                                    <ng-container *ngTemplateOutlet=\"row.cells.toArray()[headerIndex]._content\"></ng-container>\n                                </ng-container>\n                            </ng-container>\n                        </ng-container>\n                    </ng-container>\n                </ng-container>\n            </tr>\n        </ng-container>\n    </table>\n</ng-template>\n", styles: [":host{display:block;font-size:var(--comparison-table-font-size);line-height:var(--comparison-table-line-height);font-weight:var(--comparison-table-font-weight);letter-spacing:var(--comparison-table-letter-spacing)}:host ::ng-deep .nx-comparison-table__row{display:flex}:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__popular-cell{display:flex;justify-content:center;align-items:center}:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__popular-cell .nx-comparison-table__cell-content{font-size:var(--comparison-table-popular-cell-font-size);line-height:var(--comparison-table-popular-cell-line-height);font-weight:var(--comparison-table-popular-cell-font-weight);letter-spacing:var(--comparison-table-popular-cell-letter-spacing);background-color:var(--comparison-table-popular-cell-background-color);color:var(--comparison-table-popular-cell-text-color);width:100%;padding:8px 12px}[dir=ltr]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__popular-cell .nx-comparison-table__cell-content{margin-right:1px}[dir=rtl]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__popular-cell .nx-comparison-table__cell-content{margin-left:1px}:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__description-cell,:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__popular-cell{font-weight:600;width:0}[dir=ltr]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__description-cell,[dir=ltr]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__popular-cell{text-align:left}[dir=rtl]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__description-cell,[dir=rtl]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__popular-cell{text-align:right}:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__cell,:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__intersection-cell,:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__placeholder-cell{text-align:center;width:0}:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__cell,:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__description-cell,:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__popular-cell,:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__intersection-cell,:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__placeholder-cell{flex:1 1 auto}:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__intersection-cell .nx-comparison-table__cell-content,:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__description-cell .nx-comparison-table__cell-content,:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__cell .nx-comparison-table__cell-content{padding:16px;height:100%;background-color:var(--comparison-table-cell-background-color)}:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__placeholder-cell .nx-comparison-table__cell-content{height:100%}:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__cell.is-selected .nx-comparison-table__cell-content{background-color:var(--comparison-table-selected-column-background-color)}:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__cell.is-disabled{color:var(--comparison-table-disabled-text-color)}:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__cell.is-disabled ::ng-deep nx-icon:not(.nx-comparison-table__select-button){opacity:40%}[dir=ltr]:host ::ng-deep .nx-comparison-table-toggle-section__header-content{padding:var(--comparison-table-toggle-section-header-padding)}[dir=rtl]:host ::ng-deep .nx-comparison-table-toggle-section__header-content{padding:var(--comparison-table-toggle-section-header-padding-rtl)}:host .nx-comparison-table__toggle-section-body{overflow-y:hidden}:host ::ng-deep nx-comparison-table-flex-row.is-header-row .nx-comparison-table__cell .nx-comparison-table__cell-content,:host ::ng-deep nx-comparison-table-flex-row.is-footer-row .nx-comparison-table__cell .nx-comparison-table__cell-content{padding:16px 4px;background-color:var(--comparison-table-header-background-color)}:host ::ng-deep nx-comparison-table-flex-row.is-header-row .nx-comparison-table__row:last-child .nx-comparison-table__placeholder-cell .nx-comparison-table__cell-content,:host ::ng-deep nx-comparison-table-flex-row.is-footer-row .nx-comparison-table__row:last-child .nx-comparison-table__placeholder-cell .nx-comparison-table__cell-content{background-color:var(--comparison-table-placeholder-cell-background-color);border-bottom:1px solid var(--comparison-table-placeholder-cell-border-color);border-top:1px solid var(--comparison-table-placeholder-cell-border-color)}[dir=ltr]:host ::ng-deep nx-comparison-table-flex-row.is-header-row .nx-comparison-table__row:last-child .nx-comparison-table__placeholder-cell .nx-comparison-table__cell-content,[dir=ltr]:host ::ng-deep nx-comparison-table-flex-row.is-footer-row .nx-comparison-table__row:last-child .nx-comparison-table__placeholder-cell .nx-comparison-table__cell-content{border-left:1px solid var(--comparison-table-placeholder-cell-border-color)}[dir=rtl]:host ::ng-deep nx-comparison-table-flex-row.is-header-row .nx-comparison-table__row:last-child .nx-comparison-table__placeholder-cell .nx-comparison-table__cell-content,[dir=rtl]:host ::ng-deep nx-comparison-table-flex-row.is-footer-row .nx-comparison-table__row:last-child .nx-comparison-table__placeholder-cell .nx-comparison-table__cell-content{border-right:1px solid var(--comparison-table-placeholder-cell-border-color)}:host ::ng-deep nx-comparison-table-flex-row.is-header-row .nx-comparison-table__cell:not(.is-selected) .nx-comparison-table__cell-content,:host ::ng-deep nx-comparison-table-flex-row.is-footer-row .nx-comparison-table__cell:not(.is-selected) .nx-comparison-table__cell-content{color:var(--comparison-table-header-text-color)}:host ::ng-deep nx-comparison-table-flex-row.is-header-row .nx-comparison-table__cell.is-disabled .nx-comparison-table__cell-content,:host ::ng-deep nx-comparison-table-flex-row.is-footer-row .nx-comparison-table__cell.is-disabled .nx-comparison-table__cell-content{color:var(--comparison-table-disabled-column-header-text-color)}:host ::ng-deep nx-comparison-table-flex-row.has-intersection .nx-comparison-table__description-cell .nx-comparison-table__cell-content,:host ::ng-deep nx-comparison-table-flex-row.has-intersection .nx-comparison-table__intersection-cell .nx-comparison-table__cell-content{background:var(--comparison-table-intersection-cell-background-color)}[dir=ltr]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__cell .nx-comparison-table__cell-content,[dir=ltr]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__description-cell .nx-comparison-table__cell-content,[dir=ltr]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__intersection-cell .nx-comparison-table__cell-content,[dir=ltr]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__placeholder-cell .nx-comparison-table__cell-content{border-right:1px solid var(--comparison-table-border-color)}[dir=rtl]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__cell .nx-comparison-table__cell-content,[dir=rtl]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__description-cell .nx-comparison-table__cell-content,[dir=rtl]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__intersection-cell .nx-comparison-table__cell-content,[dir=rtl]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__placeholder-cell .nx-comparison-table__cell-content{border-left:1px solid var(--comparison-table-border-color)}[dir=ltr]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__cell:first-child .nx-comparison-table__cell-content,[dir=ltr]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__description-cell .nx-comparison-table__cell-content{border-left:1px solid var(--comparison-table-border-color)}[dir=rtl]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__cell:first-child .nx-comparison-table__cell-content,[dir=rtl]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__description-cell .nx-comparison-table__cell-content{border-right:1px solid var(--comparison-table-border-color)}:host ::ng-deep nx-comparison-table-flex-row.is-header-row .nx-comparison-table__cell .nx-comparison-table__cell-content,:host ::ng-deep nx-comparison-table-flex-row.is-footer-row .nx-comparison-table__cell .nx-comparison-table__cell-content{border-top:1px solid var(--comparison-table-border-color);border-bottom:1px solid var(--comparison-table-border-color)}:host ::ng-deep nx-comparison-table-flex-row.is-content-row .nx-comparison-table__cell .nx-comparison-table__cell-content,:host ::ng-deep nx-comparison-table-flex-row.is-content-row .nx-comparison-table__description-cell .nx-comparison-table__cell-content,:host ::ng-deep nx-comparison-table-flex-row.is-content-row .nx-comparison-table__intersection-cell .nx-comparison-table__cell-content{border-bottom:1px solid var(--comparison-table-border-color)}:host ::ng-deep nx-comparison-table-desktop-group .nx-comparison-table__group-expansion-cell{border-bottom:1px solid var(--comparison-table-border-color)}[dir=ltr]:host ::ng-deep nx-comparison-table-desktop-group .nx-comparison-table__group-expansion-cell.full-width{border-left:1px solid var(--comparison-table-border-color)}[dir=rtl]:host ::ng-deep nx-comparison-table-desktop-group .nx-comparison-table__group-expansion-cell.full-width{border-right:1px solid var(--comparison-table-border-color)}[dir=ltr]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__placeholder-cell.is-popular-placeholder-cell .nx-comparison-table__cell-content{border-right:none}[dir=rtl]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__placeholder-cell.is-popular-placeholder-cell .nx-comparison-table__cell-content{border-left:none}:host ::ng-deep nx-comparison-table-flex-row.is-header-row .nx-comparison-table__description-cell .nx-comparison-table__cell-content,:host ::ng-deep .nx-comparison-table__table-body>nx-comparison-table-flex-row:first-child .nx-comparison-table__description-cell .nx-comparison-table__cell-content,:host ::ng-deep .nx-comparison-table__toggle-section+nx-comparison-table-flex-row .nx-comparison-table__description-cell .nx-comparison-table__cell-content,:host ::ng-deep .nx-comparison-table__table-body>nx-comparison-table-desktop-group:first-child nx-comparison-table-flex-row:first-child .nx-comparison-table__description-cell .nx-comparison-table__cell-content,:host ::ng-deep .nx-comparison-table__toggle-section+nx-comparison-table-desktop-group nx-comparison-table-flex-row:first-child .nx-comparison-table__description-cell .nx-comparison-table__cell-content{border-top:1px solid var(--comparison-table-border-color)}@media (min-width: 992px){:host ::ng-deep nx-comparison-table-flex-row.is-header-row .nx-comparison-table__cell .nx-comparison-table__cell-content,:host ::ng-deep nx-comparison-table-flex-row.is-header-row .nx-comparison-table__intersection-cell .nx-comparison-table__cell-content,:host ::ng-deep .nx-comparison-table__table-body>nx-comparison-table-flex-row:first-child .nx-comparison-table__cell .nx-comparison-table__cell-content,:host ::ng-deep .nx-comparison-table__table-body>nx-comparison-table-flex-row:first-child .nx-comparison-table__intersection-cell .nx-comparison-table__cell-content,:host ::ng-deep .nx-comparison-table__toggle-section+nx-comparison-table-flex-row .nx-comparison-table__cell .nx-comparison-table__cell-content,:host ::ng-deep .nx-comparison-table__toggle-section+nx-comparison-table-flex-row .nx-comparison-table__intersection-cell .nx-comparison-table__cell-content,:host ::ng-deep .nx-comparison-table__table-body>nx-comparison-table-desktop-group:first-child nx-comparison-table-flex-row:first-child .nx-comparison-table__cell .nx-comparison-table__cell-content,:host ::ng-deep .nx-comparison-table__table-body>nx-comparison-table-desktop-group:first-child nx-comparison-table-flex-row:first-child .nx-comparison-table__intersection-cell .nx-comparison-table__cell-content,:host ::ng-deep .nx-comparison-table__toggle-section+nx-comparison-table-desktop-group nx-comparison-table-flex-row:first-child .nx-comparison-table__cell .nx-comparison-table__cell-content,:host ::ng-deep .nx-comparison-table__toggle-section+nx-comparison-table-desktop-group nx-comparison-table-flex-row:first-child .nx-comparison-table__intersection-cell .nx-comparison-table__cell-content{border-top:1px solid var(--comparison-table-border-color)}}@media (max-width: 991px){[dir=ltr]:host ::ng-deep nx-comparison-table-flex-row .nx-comparison-table__intersection-cell .nx-comparison-table__cell-content,[dir=ltr]:host ::ng-deep nx-comparison-table-desktop-group .nx-comparison-table__intersection-cell .nx-comparison-table__cell-content{border-left:1px solid var(--comparison-table-border-color)}[dir=rtl]:host ::ng-deep nx-comparison-table-flex-row .nx-comparison-table__intersection-cell .nx-comparison-table__cell-content,[dir=rtl]:host ::ng-deep nx-comparison-table-desktop-group .nx-comparison-table__intersection-cell .nx-comparison-table__cell-content{border-right:1px solid var(--comparison-table-border-color)}}:host ::ng-deep nx-comparison-table-flex-row.is-header-row{margin-bottom:8px}:host ::ng-deep nx-comparison-table-flex-row.is-footer-row,:host ::ng-deep nx-comparison-table-flex-row+.nx-comparison-table__toggle-section,:host ::ng-deep nx-comparison-table-desktop-group+.nx-comparison-table__toggle-section,:host ::ng-deep .nx-comparison-table__toggle-section+.nx-comparison-table__toggle-section,:host ::ng-deep .nx-comparison-table__toggle-section+nx-comparison-table-flex-row,:host ::ng-deep .nx-comparison-table__toggle-section+nx-comparison-table-desktop-group,:host ::ng-deep nx-comparison-table-desktop-group+nx-comparison-table-desktop-group{margin-top:16px}@media (max-width: 703px){:host{overflow-x:scroll}}:host ::ng-deep table{border-collapse:separate;border-spacing:0}:host ::ng-deep table .nx-comparison-table__intersection-cell,:host ::ng-deep table .nx-comparison-table__cell,:host ::ng-deep table .nx-comparison-table__description-cell,:host ::ng-deep table .nx-comparison-table__mobile-header-cell{text-align:center;border-top:1px solid var(--comparison-table-border-color);vertical-align:top}[dir=ltr]:host ::ng-deep table .nx-comparison-table__intersection-cell,[dir=ltr]:host ::ng-deep table .nx-comparison-table__cell,[dir=ltr]:host ::ng-deep table .nx-comparison-table__description-cell,[dir=ltr]:host ::ng-deep table .nx-comparison-table__mobile-header-cell{border-left:1px solid var(--comparison-table-border-color)}[dir=rtl]:host ::ng-deep table .nx-comparison-table__intersection-cell,[dir=rtl]:host ::ng-deep table .nx-comparison-table__cell,[dir=rtl]:host ::ng-deep table .nx-comparison-table__description-cell,[dir=rtl]:host ::ng-deep table .nx-comparison-table__mobile-header-cell{border-right:1px solid var(--comparison-table-border-color)}:host ::ng-deep table .nx-comparison-table__intersection-cell,:host ::ng-deep table .nx-comparison-table__cell,:host ::ng-deep table .nx-comparison-table__description-cell{padding:8px;background-color:var(--comparison-table-cell-background-color)}:host ::ng-deep table .nx-comparison-table__mobile-popular-cell{font-size:var(--comparison-table-popular-cell-font-size);line-height:var(--comparison-table-popular-cell-line-height);font-weight:var(--comparison-table-popular-cell-font-weight);letter-spacing:var(--comparison-table-popular-cell-letter-spacing);background-color:var(--comparison-table-popular-cell-background-color);color:var(--comparison-table-popular-cell-text-color);padding:4px}:host ::ng-deep table .nx-comparison-table__mobile-header-cell{padding:8px 4px}:host ::ng-deep table .nx-comparison-table__mobile-header-cell:not(.is-selected){background-color:var(--comparison-table-header-background-color);color:var(--comparison-table-header-text-color)}:host ::ng-deep table .nx-comparison-table__mobile-header-cell.is-disabled{color:var(--comparison-table-disabled-column-header-text-color)}:host ::ng-deep table .nx-comparison-table__mobile-popular-cell,:host ::ng-deep table .nx-comparison-table__placeholder-with-border-cell{border-top:1px solid var(--comparison-table-border-color)}:host ::ng-deep table .nx-comparison-table__intersection-cell-marker{display:none}[dir=ltr]:host ::ng-deep table .nx-comparison-table__intersection-cell-marker+.nx-comparison-table__placeholder-with-border-cell{border-left:1px solid var(--comparison-table-border-color)}[dir=rtl]:host ::ng-deep table .nx-comparison-table__intersection-cell-marker+.nx-comparison-table__placeholder-with-border-cell{border-right:1px solid var(--comparison-table-border-color)}:host ::ng-deep table tr:last-child .nx-comparison-table__cell,:host ::ng-deep table tr:last-child .nx-comparison-table__description-cell,:host ::ng-deep table tr:last-child .nx-comparison-table__mobile-header-cell{border-bottom:1px solid var(--comparison-table-border-color)}:host ::ng-deep table .nx-comparison-table__intersection-cell{border-bottom:1px solid var(--comparison-table-border-color)}[dir=ltr]:host ::ng-deep table .nx-comparison-table__mobile-header-cell{border-right:1px solid var(--comparison-table-border-color)}[dir=rtl]:host ::ng-deep table .nx-comparison-table__mobile-header-cell{border-left:1px solid var(--comparison-table-border-color)}[dir=ltr]:host ::ng-deep table tr th:last-child,[dir=ltr]:host ::ng-deep table tr td:last-child:not(.nx-comparison-table__placeholder-with-border-cell){border-right:1px solid var(--comparison-table-border-color)}[dir=rtl]:host ::ng-deep table tr th:last-child,[dir=rtl]:host ::ng-deep table tr td:last-child:not(.nx-comparison-table__placeholder-with-border-cell){border-left:1px solid var(--comparison-table-border-color)}:host ::ng-deep table .nx-comparison-table__intersection-cell{min-width:256px;width:256px;background:var(--comparison-table-intersection-cell-background-color)}:host ::ng-deep table .nx-comparison-table__description-cell.is-intersection-column{background:var(--comparison-table-intersection-cell-background-color)}:host ::ng-deep table .nx-comparison-table__description-cell{font-size:var(--comparison-table-description-cell-mobile-font-size);line-height:var(--comparison-table-description-cell-mobile-line-height);font-weight:var(--comparison-table-description-cell-mobile-font-weight);letter-spacing:var(--comparison-table-description-cell-mobile-letter-spacing)}:host ::ng-deep table .nx-comparison-table__cell,:host ::ng-deep table .nx-comparison-table__description-cell,:host ::ng-deep table .nx-comparison-table__mobile-header-cell{width:128px;min-width:128px}:host ::ng-deep table .nx-comparison-table__placeholder-cell{padding:0;border:none;min-width:4px}[dir=ltr]:host ::ng-deep table .nx-comparison-table__mobile-toggle-section-header{text-align:left;border-left:1px solid var(--comparison-table-border-color)}[dir=rtl]:host ::ng-deep table .nx-comparison-table__mobile-toggle-section-header{text-align:right;border-right:1px solid var(--comparison-table-border-color)}[dir=ltr]:host ::ng-deep table .nx-comparison-table__mobile-toggle-section-header+.nx-comparison-table__placeholder-cell,[dir=ltr]:host ::ng-deep table .nx-comparison-table__description-cell+.nx-comparison-table__placeholder-cell,[dir=ltr]:host ::ng-deep table .nx-comparison-table__cell+.nx-comparison-table__placeholder-cell{border-left:1px solid var(--comparison-table-border-color)}[dir=rtl]:host ::ng-deep table .nx-comparison-table__mobile-toggle-section-header+.nx-comparison-table__placeholder-cell,[dir=rtl]:host ::ng-deep table .nx-comparison-table__description-cell+.nx-comparison-table__placeholder-cell,[dir=rtl]:host ::ng-deep table .nx-comparison-table__cell+.nx-comparison-table__placeholder-cell{border-right:1px solid var(--comparison-table-border-color)}:host ::ng-deep table .nx-comparison-table__description-cell+.nx-comparison-table__placeholder-cell{min-width:8px}:host ::ng-deep table tr th:first-child,:host ::ng-deep table tr td:first-child{position:-webkit-sticky;position:sticky;z-index:1}[dir=ltr]:host ::ng-deep table tr th:first-child,[dir=ltr]:host ::ng-deep table tr td:first-child{left:0}[dir=rtl]:host ::ng-deep table tr th:first-child,[dir=rtl]:host ::ng-deep table tr td:first-child{right:0}:host ::ng-deep table tr.is-disabled ::ng-deep .nx-comparison-table__mobile-header-cell,:host ::ng-deep table tr.is-disabled ::ng-deep .nx-comparison-table__cell{color:var(--comparison-table-disabled-text-color)}:host ::ng-deep table tr.is-disabled ::ng-deep .nx-comparison-table__mobile-header-cell ::ng-deep nx-icon:not(.nx-comparison-table__select-button),:host ::ng-deep table tr.is-disabled ::ng-deep .nx-comparison-table__cell ::ng-deep nx-icon:not(.nx-comparison-table__select-button){opacity:40%}:host ::ng-deep .nx-comparison-table__intersection-cell nx-checkbox,:host ::ng-deep .nx-comparison-table__cell nx-checkbox,:host ::ng-deep .nx-comparison-table__description-cell nx-checkbox,:host ::ng-deep .nx-comparison-table__mobile-header-cell nx-checkbox{margin:0}:host ::ng-deep .nx-comparison-table__intersection-cell nx-checkbox .nx-checkbox__label,:host ::ng-deep .nx-comparison-table__cell nx-checkbox .nx-checkbox__label,:host ::ng-deep .nx-comparison-table__description-cell nx-checkbox .nx-checkbox__label,:host ::ng-deep .nx-comparison-table__mobile-header-cell nx-checkbox .nx-checkbox__label{padding:0}:host ::ng-deep .nx-comparison-table__intersection-cell .nx-button,:host ::ng-deep .nx-comparison-table__cell .nx-button,:host ::ng-deep .nx-comparison-table__description-cell .nx-button,:host ::ng-deep .nx-comparison-table__mobile-header-cell .nx-button{margin:0}:host ::ng-deep .nx-comparison-table__intersection-cell nx-formfield .nx-formfield__wrapper,:host ::ng-deep .nx-comparison-table__cell nx-formfield .nx-formfield__wrapper,:host ::ng-deep .nx-comparison-table__description-cell nx-formfield .nx-formfield__wrapper,:host ::ng-deep .nx-comparison-table__mobile-header-cell nx-formfield .nx-formfield__wrapper{padding-bottom:0}:host ::ng-deep .nx-comparison-table__intersection-cell nx-formfield.has-outline .nx-formfield__wrapper,:host ::ng-deep .nx-comparison-table__cell nx-formfield.has-outline .nx-formfield__wrapper,:host ::ng-deep .nx-comparison-table__description-cell nx-formfield.has-outline .nx-formfield__wrapper,:host ::ng-deep .nx-comparison-table__mobile-header-cell nx-formfield.has-outline .nx-formfield__wrapper{padding-top:0}:host ::ng-deep .nx-comparison-table__intersection-cell .nx-list,:host ::ng-deep .nx-comparison-table__cell .nx-list,:host ::ng-deep .nx-comparison-table__description-cell .nx-list,:host ::ng-deep .nx-comparison-table__mobile-header-cell .nx-list{margin:0}:host ::ng-deep .nx-comparison-table__intersection-cell .nx-list li:last-child,:host ::ng-deep .nx-comparison-table__cell .nx-list li:last-child,:host ::ng-deep .nx-comparison-table__description-cell .nx-list li:last-child,:host ::ng-deep .nx-comparison-table__mobile-header-cell .nx-list li:last-child{margin-bottom:0}:host ::ng-deep .nx-comparison-table__intersection-cell nx-link a,:host ::ng-deep .nx-comparison-table__cell nx-link a,:host ::ng-deep .nx-comparison-table__description-cell nx-link a,:host ::ng-deep .nx-comparison-table__mobile-header-cell nx-link a{display:inline-flex}::ng-deep .nx-comparison-table-toggle-section__header-wrapper.cdk-keyboard-focused .nx-comparison-table-toggle-section__header-content{box-shadow:var(--focus-box-shadow);z-index:1;position:relative}@media screen and (-ms-high-contrast: active),(forced-colors: active){::ng-deep .nx-comparison-table-toggle-section__header-wrapper.cdk-keyboard-focused .nx-comparison-table-toggle-section__header-content{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}@media screen and (-ms-high-contrast: active){::ng-deep .nx-comparison-table__popular-cell,::ng-deep .nx-comparison-table__mobile-popular-cell{border-top:1px solid windowText;border-right:1px solid windowText;border-left:1px solid windowText}}\n"], components: [{ type: NxComparisonTableFlexRow, selector: "nx-comparison-table-flex-row", inputs: ["row"] }, { type: NxComparisonTableDesktopGroup, selector: "nx-comparison-table-desktop-group", inputs: ["group", "isExpanded", "useFullRowForExpandableArea"], outputs: ["isExpandedChange"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i3.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], animations: [NxToggleSectionAnimations.bodyExpansion] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-comparison-table', animations: [NxToggleSectionAnimations.bodyExpansion], providers: [{ provide: NxComparisonTableBase, useExisting: NxComparisonTableComponent }], template: "<!-- basic structure:\n\nDesktop:\n\n+--------+-----------+-----------+-----------+\n|        |           | Popular   |           |\n|--------|-----------|-----------|-----------|\n|        | Header 1  | Header 2  | Header 3  |\n|--------|-----------|-----------|-----------|\n| Info 1 |           |           |           |\n|--------|-----------|-----------|-----------|\n| Info 2 |           |           |           |\n|--------|-----------|-----------|-----------|\n|        | Footer 1  | Footer 2  | Footer 3  |\n+--------+-----------+-----------+-----------+\n\nTablet: Info info columns are shifted \"into\" the content:\n\n+-----------+-----------+-----------+\n|           | Popular   |           |\n|-----------|-----------|-----------|\n| Header 1  | Header 2  | Header 3  |\n|-----------+-----------+-----------|\n| Info 1                            |\n|-----------+-----------+-----------|\n|           |           |           |\n|-----------+-----------+-----------|\n| Info 2                            |\n|-----------+-----------+-----------|\n|           |           |           |\n|-----------|-----------|-----------|\n| Footer 1  | Footer 2  | Footer 3  |\n+-----------+-----------+-----------+\n\nMobile: table is flipped diagonally (with no footer cells!):\n\n+-----------+--------+--------+\n|           | Info 1 | Info 2 |\n|-----------|--------|--------|\n| Header 1  |        |        |\n|-----------|--------+--------+\n| Popular   |\n|-----------|--------+--------+\n| Header 2  |        |        |\n|-----------|--------|--------|\n| Header 3  |        |        |\n+-----------+--------+--------+\n\n-->\n\n<ng-container *ngIf=\"viewType === 'desktop' || viewType === 'tablet'\">\n    <ng-container *ngTemplateOutlet=\"desktopView\"></ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"viewType === 'mobile'\">\n    <ng-container *ngTemplateOutlet=\"mobileTable\"></ng-container>\n</ng-container>\n\n<!-- desktop + tablet template ---------------------------------->\n\n<ng-template #desktopView>\n    <div role=\"table\">\n        <nx-comparison-table-flex-row #headerRow [row]=\"_getHeaderRow()\"></nx-comparison-table-flex-row>\n\n        <div #desktopContent class=\"nx-comparison-table__table-body\" [ngStyle]=\"{ 'clip-path': 'inset(' + _desktopContentClip + 'px -12px -1px)' }\">\n            <ng-container *ngFor=\"let element of elements; let i = index\">\n                <nx-comparison-table-flex-row\n                    *ngIf=\"_isRow(element) && element.type !== 'header' && !element._isPartOfToggleSection() && !element._isPartOfRowGroup()\"\n                    [row]=\"element\"\n                ></nx-comparison-table-flex-row>\n                <nx-comparison-table-desktop-group\n                    *ngIf=\"_isRowGroup(element) && !element._isPartOfToggleSection()\"\n                    [group]=\"element\"\n                    [isExpanded]=\"element.isExpanded\"\n                    [useFullRowForExpandableArea]=\"element.useFullRowForExpandableArea\"\n                    (isExpandedChange)=\"element._handleIsExpandedChange($event)\"\n                >\n                </nx-comparison-table-desktop-group>\n\n                <!-- add role=table here to prevent screen reader wrong reading. since toggleSection is like another table, -->\n                <div role=\"table\" *ngIf=\"_isToggleSection(element)\" class=\"nx-comparison-table__toggle-section\">\n                    <div class=\"nx-comparison-table__toggle-section-header\" role=\"row\">\n                        <ng-container *ngTemplateOutlet=\"element.toggleSectionHeader._content\"></ng-container>\n                    </div>\n\n                    <div class=\"nx-comparison-table__toggle-section-body\" [@bodyExpansion]=\"element.getOpenState()\" role=\"rowgroup\">\n                        <ng-container *ngFor=\"let elementOfSection of element.rows\">\n                            <nx-comparison-table-flex-row\n                                *ngIf=\"_isRow(elementOfSection) && !elementOfSection._isPartOfRowGroup()\"\n                                [row]=\"elementOfSection\"\n                            ></nx-comparison-table-flex-row>\n                            <nx-comparison-table-desktop-group\n                                *ngIf=\"_isRowGroup(elementOfSection)\"\n                                [group]=\"elementOfSection\"\n                                [isExpanded]=\"elementOfSection.isExpanded\"\n                                [useFullRowForExpandableArea]=\"elementOfSection.useFullRowForExpandableArea\"\n                                (isExpandedChange)=\"elementOfSection._handleIsExpandedChange($event)\"\n                            >\n                            </nx-comparison-table-desktop-group>\n                        </ng-container>\n                    </div>\n                </div>\n            </ng-container>\n        </div>\n    </div>\n</ng-template>\n\n<!-- mobile template ------------------------------------------->\n\n<ng-template #mobileTable>\n    <table>\n        <!-- row for toggle section headers -->\n        <tr *ngIf=\"_containsToggleSection()\" class=\"nx-comparison-table__toggle-section-header-row\">\n            <th class=\"nx-comparison-table__placeholder-cell\"></th>\n            <ng-container *ngFor=\"let element of elements; let i = index\">\n                <!-- TODO split up in header row and content rows -->\n                <ng-container *ngIf=\"i !== 0 && i < _getMobileColumnCount()\">\n                    <ng-container *ngIf=\"_isRow(element) && !element._isPartOfToggleSection()\">\n                        <!-- placeholder cell if this is a new block of info rows -->\n                        <ng-container *ngIf=\"_isFirstInfoOfBlock(i)\">\n                            <th class=\"nx-comparison-table__placeholder-cell\" aria-hidden=\"true\"></th>\n                        </ng-container>\n\n                        <th class=\"nx-comparison-table__placeholder-cell\"></th>\n                    </ng-container>\n\n                    <ng-container *ngIf=\"_isToggleSection(element)\">\n                        <th class=\"nx-comparison-table__placeholder-cell needs-clipping\" aria-hidden=\"true\"></th>\n                        <ng-container *ngTemplateOutlet=\"element.toggleSectionHeader._content\"></ng-container>\n                    </ng-container>\n                </ng-container>\n            </ng-container>\n        </tr>\n\n        <!-- rows for all description cells -->\n        <tr class=\"nx-comparison-table__description-row\">\n            <th #stickyMobileCell class=\"nx-comparison-table__placeholder-cell\" scope=\"col\"></th>\n            <ng-container *ngFor=\"let element of elements; let headerIndex = index\">\n                <ng-container *ngIf=\"_isRow(element) && !element._isPartOfToggleSection()\">\n                    <!-- we need the extra ng-container or VE will fail because of the _isRow method -->\n                    <ng-container *ngIf=\"headerIndex > 0 && headerIndex < _getMobileColumnCount()\">\n                        <!-- placeholder cell if this is a new block of info rows -->\n                        <ng-container *ngIf=\"_isFirstInfoOfBlock(headerIndex)\">\n                            <th class=\"nx-comparison-table__placeholder-cell\" aria-hidden=\"true\"></th>\n                        </ng-container>\n\n                        <ng-container *ngTemplateOutlet=\"element?.descriptionCell?._content ?? null\"> </ng-container>\n                    </ng-container>\n                </ng-container>\n\n                <ng-container *ngIf=\"_isToggleSection(element)\">\n                    <th class=\"nx-comparison-table__placeholder-cell needs-clipping\" aria-hidden=\"true\"></th>\n                    <ng-container *ngFor=\"let row of element.rows\">\n                        <ng-container *ngIf=\"_isRow(row)\">\n                            <ng-container *ngTemplateOutlet=\"row.descriptionCell?._content ?? null\"></ng-container>\n                        </ng-container>\n                    </ng-container>\n                </ng-container>\n            </ng-container>\n        </tr>\n\n        <!-- row for every product -->\n        <!-- intersection cells have to be placed in first row -->\n        <ng-container *ngFor=\"let headerCell of _getHeaderCells(); let headerIndex = index\">\n            <tr *ngIf=\"_getPopularCell() && _getPopularCell().forColumn === headerIndex + 1\" class=\"nx-comparison-table__popular-row\">\n                <ng-container *ngTemplateOutlet=\"_getPopularCell()._content\"></ng-container>\n\n                <ng-container *ngFor=\"let element of elements; let infoIndex = index\">\n                    <ng-container *ngIf=\"_isRow(element) && !element._isPartOfToggleSection()\">\n                        <!-- we need the extra ng-container or VE will fail because of the _isRow method -->\n                        <ng-container *ngIf=\"infoIndex > 0 && infoIndex < _getMobileColumnCount()\">\n                            <!-- placeholder cell if this is a new block of info rows -->\n                            <ng-container *ngIf=\"_isFirstInfoOfBlock(infoIndex)\">\n                                <td class=\"nx-comparison-table__placeholder-cell\" aria-hidden=\"true\"></td>\n                            </ng-container>\n                            <!-- if there is an intersection cell, we need a marker so that we know we have to place a left border to the next cell -->\n                            <ng-container *ngIf=\"element.intersectionCell\">\n                                <div class=\"nx-comparison-table__intersection-cell-marker\"></div>\n                            </ng-container>\n                            <!-- placeholder cell for every cell of the row, except intersection cells -->\n                            <ng-container *ngIf=\"element.cells.length > 0\">\n                                <td class=\"nx-comparison-table__placeholder-with-border-cell\" aria-hidden=\"true\"></td>\n                            </ng-container>\n                        </ng-container>\n                    </ng-container>\n\n                    <ng-container *ngIf=\"_isToggleSection(element)\">\n                        <td class=\"nx-comparison-table__placeholder-cell\" aria-hidden=\"true\"></td>\n                        <ng-container *ngFor=\"let row of element.rows\">\n                            <ng-container *ngIf=\"_isRow(row)\">\n                                <!-- if there is an intersection cell, we need a marker so that we know we have to place a left border to the next cell -->\n                                <ng-container *ngIf=\"row.intersectionCell\">\n                                    <div class=\"nx-comparison-table__intersection-cell-marker\"></div>\n                                </ng-container>\n                                <!-- placeholder cell for every cell of the row, except intersection cells -->\n                                <ng-container *ngIf=\"row.cells.length > 0\">\n                                    <td class=\"nx-comparison-table__placeholder-with-border-cell\" aria-hidden=\"true\"></td>\n                                </ng-container>\n                            </ng-container>\n                        </ng-container>\n                    </ng-container>\n                </ng-container>\n            </tr>\n\n            <tr [class.is-disabled]=\"_isMobileRowDisabled(headerIndex)\">\n                <ng-container *ngTemplateOutlet=\"headerCell._content\"></ng-container>\n                <ng-container *ngFor=\"let element of elements; let infoIndex = index\">\n                    <ng-container *ngIf=\"_isRow(element) && !element._isPartOfToggleSection()\">\n                        <!-- we need the extra ng-container or VE will fail because of the _isRow method -->\n                        <ng-container *ngIf=\"infoIndex > 0 && infoIndex < _getMobileColumnCount()\">\n                            <!-- placeholder cell if this is a new block of info rows -->\n                            <ng-container *ngIf=\"_isFirstInfoOfBlock(infoIndex)\">\n                                <td class=\"nx-comparison-table__placeholder-cell\" aria-hidden=\"true\"></td>\n                            </ng-container>\n\n                            <!-- if first mobile row: show intersection cells -->\n                            <ng-container *ngIf=\"headerIndex === 0 && element.intersectionCell\">\n                                <ng-container *ngTemplateOutlet=\"(element?.intersectionCell)!._content\"></ng-container>\n                            </ng-container>\n                            <ng-container *ngIf=\"element.cells.length > 0\">\n                                <ng-container *ngTemplateOutlet=\"element.cells.toArray()[headerIndex]!._content\"></ng-container>\n                            </ng-container>\n                        </ng-container>\n                    </ng-container>\n\n                    <ng-container *ngIf=\"_isToggleSection(element)\">\n                        <td class=\"nx-comparison-table__placeholder-cell\" aria-hidden=\"true\"></td>\n                        <ng-container *ngFor=\"let row of element.rows\">\n                            <ng-container *ngIf=\"_isRow(row)\">\n                                <!-- if first mobile row: show intersection cells -->\n                                <ng-container *ngIf=\"headerIndex === 0 && row.intersectionCell\">\n                                    <ng-container *ngTemplateOutlet=\"row.intersectionCell._content\"> </ng-container>\n                                </ng-container>\n\n                                <ng-container *ngIf=\"row.cells.length > 0\">\n                                    <ng-container *ngTemplateOutlet=\"row.cells.toArray()[headerIndex]._content\"></ng-container>\n                                </ng-container>\n                            </ng-container>\n                        </ng-container>\n                    </ng-container>\n                </ng-container>\n            </tr>\n        </ng-container>\n    </table>\n</ng-template>\n", styles: [":host{display:block;font-size:var(--comparison-table-font-size);line-height:var(--comparison-table-line-height);font-weight:var(--comparison-table-font-weight);letter-spacing:var(--comparison-table-letter-spacing)}:host ::ng-deep .nx-comparison-table__row{display:flex}:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__popular-cell{display:flex;justify-content:center;align-items:center}:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__popular-cell .nx-comparison-table__cell-content{font-size:var(--comparison-table-popular-cell-font-size);line-height:var(--comparison-table-popular-cell-line-height);font-weight:var(--comparison-table-popular-cell-font-weight);letter-spacing:var(--comparison-table-popular-cell-letter-spacing);background-color:var(--comparison-table-popular-cell-background-color);color:var(--comparison-table-popular-cell-text-color);width:100%;padding:8px 12px}[dir=ltr]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__popular-cell .nx-comparison-table__cell-content{margin-right:1px}[dir=rtl]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__popular-cell .nx-comparison-table__cell-content{margin-left:1px}:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__description-cell,:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__popular-cell{font-weight:600;width:0}[dir=ltr]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__description-cell,[dir=ltr]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__popular-cell{text-align:left}[dir=rtl]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__description-cell,[dir=rtl]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__popular-cell{text-align:right}:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__cell,:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__intersection-cell,:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__placeholder-cell{text-align:center;width:0}:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__cell,:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__description-cell,:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__popular-cell,:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__intersection-cell,:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__placeholder-cell{flex:1 1 auto}:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__intersection-cell .nx-comparison-table__cell-content,:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__description-cell .nx-comparison-table__cell-content,:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__cell .nx-comparison-table__cell-content{padding:16px;height:100%;background-color:var(--comparison-table-cell-background-color)}:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__placeholder-cell .nx-comparison-table__cell-content{height:100%}:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__cell.is-selected .nx-comparison-table__cell-content{background-color:var(--comparison-table-selected-column-background-color)}:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__cell.is-disabled{color:var(--comparison-table-disabled-text-color)}:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__cell.is-disabled ::ng-deep nx-icon:not(.nx-comparison-table__select-button){opacity:40%}[dir=ltr]:host ::ng-deep .nx-comparison-table-toggle-section__header-content{padding:var(--comparison-table-toggle-section-header-padding)}[dir=rtl]:host ::ng-deep .nx-comparison-table-toggle-section__header-content{padding:var(--comparison-table-toggle-section-header-padding-rtl)}:host .nx-comparison-table__toggle-section-body{overflow-y:hidden}:host ::ng-deep nx-comparison-table-flex-row.is-header-row .nx-comparison-table__cell .nx-comparison-table__cell-content,:host ::ng-deep nx-comparison-table-flex-row.is-footer-row .nx-comparison-table__cell .nx-comparison-table__cell-content{padding:16px 4px;background-color:var(--comparison-table-header-background-color)}:host ::ng-deep nx-comparison-table-flex-row.is-header-row .nx-comparison-table__row:last-child .nx-comparison-table__placeholder-cell .nx-comparison-table__cell-content,:host ::ng-deep nx-comparison-table-flex-row.is-footer-row .nx-comparison-table__row:last-child .nx-comparison-table__placeholder-cell .nx-comparison-table__cell-content{background-color:var(--comparison-table-placeholder-cell-background-color);border-bottom:1px solid var(--comparison-table-placeholder-cell-border-color);border-top:1px solid var(--comparison-table-placeholder-cell-border-color)}[dir=ltr]:host ::ng-deep nx-comparison-table-flex-row.is-header-row .nx-comparison-table__row:last-child .nx-comparison-table__placeholder-cell .nx-comparison-table__cell-content,[dir=ltr]:host ::ng-deep nx-comparison-table-flex-row.is-footer-row .nx-comparison-table__row:last-child .nx-comparison-table__placeholder-cell .nx-comparison-table__cell-content{border-left:1px solid var(--comparison-table-placeholder-cell-border-color)}[dir=rtl]:host ::ng-deep nx-comparison-table-flex-row.is-header-row .nx-comparison-table__row:last-child .nx-comparison-table__placeholder-cell .nx-comparison-table__cell-content,[dir=rtl]:host ::ng-deep nx-comparison-table-flex-row.is-footer-row .nx-comparison-table__row:last-child .nx-comparison-table__placeholder-cell .nx-comparison-table__cell-content{border-right:1px solid var(--comparison-table-placeholder-cell-border-color)}:host ::ng-deep nx-comparison-table-flex-row.is-header-row .nx-comparison-table__cell:not(.is-selected) .nx-comparison-table__cell-content,:host ::ng-deep nx-comparison-table-flex-row.is-footer-row .nx-comparison-table__cell:not(.is-selected) .nx-comparison-table__cell-content{color:var(--comparison-table-header-text-color)}:host ::ng-deep nx-comparison-table-flex-row.is-header-row .nx-comparison-table__cell.is-disabled .nx-comparison-table__cell-content,:host ::ng-deep nx-comparison-table-flex-row.is-footer-row .nx-comparison-table__cell.is-disabled .nx-comparison-table__cell-content{color:var(--comparison-table-disabled-column-header-text-color)}:host ::ng-deep nx-comparison-table-flex-row.has-intersection .nx-comparison-table__description-cell .nx-comparison-table__cell-content,:host ::ng-deep nx-comparison-table-flex-row.has-intersection .nx-comparison-table__intersection-cell .nx-comparison-table__cell-content{background:var(--comparison-table-intersection-cell-background-color)}[dir=ltr]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__cell .nx-comparison-table__cell-content,[dir=ltr]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__description-cell .nx-comparison-table__cell-content,[dir=ltr]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__intersection-cell .nx-comparison-table__cell-content,[dir=ltr]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__placeholder-cell .nx-comparison-table__cell-content{border-right:1px solid var(--comparison-table-border-color)}[dir=rtl]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__cell .nx-comparison-table__cell-content,[dir=rtl]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__description-cell .nx-comparison-table__cell-content,[dir=rtl]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__intersection-cell .nx-comparison-table__cell-content,[dir=rtl]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__placeholder-cell .nx-comparison-table__cell-content{border-left:1px solid var(--comparison-table-border-color)}[dir=ltr]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__cell:first-child .nx-comparison-table__cell-content,[dir=ltr]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__description-cell .nx-comparison-table__cell-content{border-left:1px solid var(--comparison-table-border-color)}[dir=rtl]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__cell:first-child .nx-comparison-table__cell-content,[dir=rtl]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__description-cell .nx-comparison-table__cell-content{border-right:1px solid var(--comparison-table-border-color)}:host ::ng-deep nx-comparison-table-flex-row.is-header-row .nx-comparison-table__cell .nx-comparison-table__cell-content,:host ::ng-deep nx-comparison-table-flex-row.is-footer-row .nx-comparison-table__cell .nx-comparison-table__cell-content{border-top:1px solid var(--comparison-table-border-color);border-bottom:1px solid var(--comparison-table-border-color)}:host ::ng-deep nx-comparison-table-flex-row.is-content-row .nx-comparison-table__cell .nx-comparison-table__cell-content,:host ::ng-deep nx-comparison-table-flex-row.is-content-row .nx-comparison-table__description-cell .nx-comparison-table__cell-content,:host ::ng-deep nx-comparison-table-flex-row.is-content-row .nx-comparison-table__intersection-cell .nx-comparison-table__cell-content{border-bottom:1px solid var(--comparison-table-border-color)}:host ::ng-deep nx-comparison-table-desktop-group .nx-comparison-table__group-expansion-cell{border-bottom:1px solid var(--comparison-table-border-color)}[dir=ltr]:host ::ng-deep nx-comparison-table-desktop-group .nx-comparison-table__group-expansion-cell.full-width{border-left:1px solid var(--comparison-table-border-color)}[dir=rtl]:host ::ng-deep nx-comparison-table-desktop-group .nx-comparison-table__group-expansion-cell.full-width{border-right:1px solid var(--comparison-table-border-color)}[dir=ltr]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__placeholder-cell.is-popular-placeholder-cell .nx-comparison-table__cell-content{border-right:none}[dir=rtl]:host ::ng-deep .nx-comparison-table__row .nx-comparison-table__placeholder-cell.is-popular-placeholder-cell .nx-comparison-table__cell-content{border-left:none}:host ::ng-deep nx-comparison-table-flex-row.is-header-row .nx-comparison-table__description-cell .nx-comparison-table__cell-content,:host ::ng-deep .nx-comparison-table__table-body>nx-comparison-table-flex-row:first-child .nx-comparison-table__description-cell .nx-comparison-table__cell-content,:host ::ng-deep .nx-comparison-table__toggle-section+nx-comparison-table-flex-row .nx-comparison-table__description-cell .nx-comparison-table__cell-content,:host ::ng-deep .nx-comparison-table__table-body>nx-comparison-table-desktop-group:first-child nx-comparison-table-flex-row:first-child .nx-comparison-table__description-cell .nx-comparison-table__cell-content,:host ::ng-deep .nx-comparison-table__toggle-section+nx-comparison-table-desktop-group nx-comparison-table-flex-row:first-child .nx-comparison-table__description-cell .nx-comparison-table__cell-content{border-top:1px solid var(--comparison-table-border-color)}@media (min-width: 992px){:host ::ng-deep nx-comparison-table-flex-row.is-header-row .nx-comparison-table__cell .nx-comparison-table__cell-content,:host ::ng-deep nx-comparison-table-flex-row.is-header-row .nx-comparison-table__intersection-cell .nx-comparison-table__cell-content,:host ::ng-deep .nx-comparison-table__table-body>nx-comparison-table-flex-row:first-child .nx-comparison-table__cell .nx-comparison-table__cell-content,:host ::ng-deep .nx-comparison-table__table-body>nx-comparison-table-flex-row:first-child .nx-comparison-table__intersection-cell .nx-comparison-table__cell-content,:host ::ng-deep .nx-comparison-table__toggle-section+nx-comparison-table-flex-row .nx-comparison-table__cell .nx-comparison-table__cell-content,:host ::ng-deep .nx-comparison-table__toggle-section+nx-comparison-table-flex-row .nx-comparison-table__intersection-cell .nx-comparison-table__cell-content,:host ::ng-deep .nx-comparison-table__table-body>nx-comparison-table-desktop-group:first-child nx-comparison-table-flex-row:first-child .nx-comparison-table__cell .nx-comparison-table__cell-content,:host ::ng-deep .nx-comparison-table__table-body>nx-comparison-table-desktop-group:first-child nx-comparison-table-flex-row:first-child .nx-comparison-table__intersection-cell .nx-comparison-table__cell-content,:host ::ng-deep .nx-comparison-table__toggle-section+nx-comparison-table-desktop-group nx-comparison-table-flex-row:first-child .nx-comparison-table__cell .nx-comparison-table__cell-content,:host ::ng-deep .nx-comparison-table__toggle-section+nx-comparison-table-desktop-group nx-comparison-table-flex-row:first-child .nx-comparison-table__intersection-cell .nx-comparison-table__cell-content{border-top:1px solid var(--comparison-table-border-color)}}@media (max-width: 991px){[dir=ltr]:host ::ng-deep nx-comparison-table-flex-row .nx-comparison-table__intersection-cell .nx-comparison-table__cell-content,[dir=ltr]:host ::ng-deep nx-comparison-table-desktop-group .nx-comparison-table__intersection-cell .nx-comparison-table__cell-content{border-left:1px solid var(--comparison-table-border-color)}[dir=rtl]:host ::ng-deep nx-comparison-table-flex-row .nx-comparison-table__intersection-cell .nx-comparison-table__cell-content,[dir=rtl]:host ::ng-deep nx-comparison-table-desktop-group .nx-comparison-table__intersection-cell .nx-comparison-table__cell-content{border-right:1px solid var(--comparison-table-border-color)}}:host ::ng-deep nx-comparison-table-flex-row.is-header-row{margin-bottom:8px}:host ::ng-deep nx-comparison-table-flex-row.is-footer-row,:host ::ng-deep nx-comparison-table-flex-row+.nx-comparison-table__toggle-section,:host ::ng-deep nx-comparison-table-desktop-group+.nx-comparison-table__toggle-section,:host ::ng-deep .nx-comparison-table__toggle-section+.nx-comparison-table__toggle-section,:host ::ng-deep .nx-comparison-table__toggle-section+nx-comparison-table-flex-row,:host ::ng-deep .nx-comparison-table__toggle-section+nx-comparison-table-desktop-group,:host ::ng-deep nx-comparison-table-desktop-group+nx-comparison-table-desktop-group{margin-top:16px}@media (max-width: 703px){:host{overflow-x:scroll}}:host ::ng-deep table{border-collapse:separate;border-spacing:0}:host ::ng-deep table .nx-comparison-table__intersection-cell,:host ::ng-deep table .nx-comparison-table__cell,:host ::ng-deep table .nx-comparison-table__description-cell,:host ::ng-deep table .nx-comparison-table__mobile-header-cell{text-align:center;border-top:1px solid var(--comparison-table-border-color);vertical-align:top}[dir=ltr]:host ::ng-deep table .nx-comparison-table__intersection-cell,[dir=ltr]:host ::ng-deep table .nx-comparison-table__cell,[dir=ltr]:host ::ng-deep table .nx-comparison-table__description-cell,[dir=ltr]:host ::ng-deep table .nx-comparison-table__mobile-header-cell{border-left:1px solid var(--comparison-table-border-color)}[dir=rtl]:host ::ng-deep table .nx-comparison-table__intersection-cell,[dir=rtl]:host ::ng-deep table .nx-comparison-table__cell,[dir=rtl]:host ::ng-deep table .nx-comparison-table__description-cell,[dir=rtl]:host ::ng-deep table .nx-comparison-table__mobile-header-cell{border-right:1px solid var(--comparison-table-border-color)}:host ::ng-deep table .nx-comparison-table__intersection-cell,:host ::ng-deep table .nx-comparison-table__cell,:host ::ng-deep table .nx-comparison-table__description-cell{padding:8px;background-color:var(--comparison-table-cell-background-color)}:host ::ng-deep table .nx-comparison-table__mobile-popular-cell{font-size:var(--comparison-table-popular-cell-font-size);line-height:var(--comparison-table-popular-cell-line-height);font-weight:var(--comparison-table-popular-cell-font-weight);letter-spacing:var(--comparison-table-popular-cell-letter-spacing);background-color:var(--comparison-table-popular-cell-background-color);color:var(--comparison-table-popular-cell-text-color);padding:4px}:host ::ng-deep table .nx-comparison-table__mobile-header-cell{padding:8px 4px}:host ::ng-deep table .nx-comparison-table__mobile-header-cell:not(.is-selected){background-color:var(--comparison-table-header-background-color);color:var(--comparison-table-header-text-color)}:host ::ng-deep table .nx-comparison-table__mobile-header-cell.is-disabled{color:var(--comparison-table-disabled-column-header-text-color)}:host ::ng-deep table .nx-comparison-table__mobile-popular-cell,:host ::ng-deep table .nx-comparison-table__placeholder-with-border-cell{border-top:1px solid var(--comparison-table-border-color)}:host ::ng-deep table .nx-comparison-table__intersection-cell-marker{display:none}[dir=ltr]:host ::ng-deep table .nx-comparison-table__intersection-cell-marker+.nx-comparison-table__placeholder-with-border-cell{border-left:1px solid var(--comparison-table-border-color)}[dir=rtl]:host ::ng-deep table .nx-comparison-table__intersection-cell-marker+.nx-comparison-table__placeholder-with-border-cell{border-right:1px solid var(--comparison-table-border-color)}:host ::ng-deep table tr:last-child .nx-comparison-table__cell,:host ::ng-deep table tr:last-child .nx-comparison-table__description-cell,:host ::ng-deep table tr:last-child .nx-comparison-table__mobile-header-cell{border-bottom:1px solid var(--comparison-table-border-color)}:host ::ng-deep table .nx-comparison-table__intersection-cell{border-bottom:1px solid var(--comparison-table-border-color)}[dir=ltr]:host ::ng-deep table .nx-comparison-table__mobile-header-cell{border-right:1px solid var(--comparison-table-border-color)}[dir=rtl]:host ::ng-deep table .nx-comparison-table__mobile-header-cell{border-left:1px solid var(--comparison-table-border-color)}[dir=ltr]:host ::ng-deep table tr th:last-child,[dir=ltr]:host ::ng-deep table tr td:last-child:not(.nx-comparison-table__placeholder-with-border-cell){border-right:1px solid var(--comparison-table-border-color)}[dir=rtl]:host ::ng-deep table tr th:last-child,[dir=rtl]:host ::ng-deep table tr td:last-child:not(.nx-comparison-table__placeholder-with-border-cell){border-left:1px solid var(--comparison-table-border-color)}:host ::ng-deep table .nx-comparison-table__intersection-cell{min-width:256px;width:256px;background:var(--comparison-table-intersection-cell-background-color)}:host ::ng-deep table .nx-comparison-table__description-cell.is-intersection-column{background:var(--comparison-table-intersection-cell-background-color)}:host ::ng-deep table .nx-comparison-table__description-cell{font-size:var(--comparison-table-description-cell-mobile-font-size);line-height:var(--comparison-table-description-cell-mobile-line-height);font-weight:var(--comparison-table-description-cell-mobile-font-weight);letter-spacing:var(--comparison-table-description-cell-mobile-letter-spacing)}:host ::ng-deep table .nx-comparison-table__cell,:host ::ng-deep table .nx-comparison-table__description-cell,:host ::ng-deep table .nx-comparison-table__mobile-header-cell{width:128px;min-width:128px}:host ::ng-deep table .nx-comparison-table__placeholder-cell{padding:0;border:none;min-width:4px}[dir=ltr]:host ::ng-deep table .nx-comparison-table__mobile-toggle-section-header{text-align:left;border-left:1px solid var(--comparison-table-border-color)}[dir=rtl]:host ::ng-deep table .nx-comparison-table__mobile-toggle-section-header{text-align:right;border-right:1px solid var(--comparison-table-border-color)}[dir=ltr]:host ::ng-deep table .nx-comparison-table__mobile-toggle-section-header+.nx-comparison-table__placeholder-cell,[dir=ltr]:host ::ng-deep table .nx-comparison-table__description-cell+.nx-comparison-table__placeholder-cell,[dir=ltr]:host ::ng-deep table .nx-comparison-table__cell+.nx-comparison-table__placeholder-cell{border-left:1px solid var(--comparison-table-border-color)}[dir=rtl]:host ::ng-deep table .nx-comparison-table__mobile-toggle-section-header+.nx-comparison-table__placeholder-cell,[dir=rtl]:host ::ng-deep table .nx-comparison-table__description-cell+.nx-comparison-table__placeholder-cell,[dir=rtl]:host ::ng-deep table .nx-comparison-table__cell+.nx-comparison-table__placeholder-cell{border-right:1px solid var(--comparison-table-border-color)}:host ::ng-deep table .nx-comparison-table__description-cell+.nx-comparison-table__placeholder-cell{min-width:8px}:host ::ng-deep table tr th:first-child,:host ::ng-deep table tr td:first-child{position:-webkit-sticky;position:sticky;z-index:1}[dir=ltr]:host ::ng-deep table tr th:first-child,[dir=ltr]:host ::ng-deep table tr td:first-child{left:0}[dir=rtl]:host ::ng-deep table tr th:first-child,[dir=rtl]:host ::ng-deep table tr td:first-child{right:0}:host ::ng-deep table tr.is-disabled ::ng-deep .nx-comparison-table__mobile-header-cell,:host ::ng-deep table tr.is-disabled ::ng-deep .nx-comparison-table__cell{color:var(--comparison-table-disabled-text-color)}:host ::ng-deep table tr.is-disabled ::ng-deep .nx-comparison-table__mobile-header-cell ::ng-deep nx-icon:not(.nx-comparison-table__select-button),:host ::ng-deep table tr.is-disabled ::ng-deep .nx-comparison-table__cell ::ng-deep nx-icon:not(.nx-comparison-table__select-button){opacity:40%}:host ::ng-deep .nx-comparison-table__intersection-cell nx-checkbox,:host ::ng-deep .nx-comparison-table__cell nx-checkbox,:host ::ng-deep .nx-comparison-table__description-cell nx-checkbox,:host ::ng-deep .nx-comparison-table__mobile-header-cell nx-checkbox{margin:0}:host ::ng-deep .nx-comparison-table__intersection-cell nx-checkbox .nx-checkbox__label,:host ::ng-deep .nx-comparison-table__cell nx-checkbox .nx-checkbox__label,:host ::ng-deep .nx-comparison-table__description-cell nx-checkbox .nx-checkbox__label,:host ::ng-deep .nx-comparison-table__mobile-header-cell nx-checkbox .nx-checkbox__label{padding:0}:host ::ng-deep .nx-comparison-table__intersection-cell .nx-button,:host ::ng-deep .nx-comparison-table__cell .nx-button,:host ::ng-deep .nx-comparison-table__description-cell .nx-button,:host ::ng-deep .nx-comparison-table__mobile-header-cell .nx-button{margin:0}:host ::ng-deep .nx-comparison-table__intersection-cell nx-formfield .nx-formfield__wrapper,:host ::ng-deep .nx-comparison-table__cell nx-formfield .nx-formfield__wrapper,:host ::ng-deep .nx-comparison-table__description-cell nx-formfield .nx-formfield__wrapper,:host ::ng-deep .nx-comparison-table__mobile-header-cell nx-formfield .nx-formfield__wrapper{padding-bottom:0}:host ::ng-deep .nx-comparison-table__intersection-cell nx-formfield.has-outline .nx-formfield__wrapper,:host ::ng-deep .nx-comparison-table__cell nx-formfield.has-outline .nx-formfield__wrapper,:host ::ng-deep .nx-comparison-table__description-cell nx-formfield.has-outline .nx-formfield__wrapper,:host ::ng-deep .nx-comparison-table__mobile-header-cell nx-formfield.has-outline .nx-formfield__wrapper{padding-top:0}:host ::ng-deep .nx-comparison-table__intersection-cell .nx-list,:host ::ng-deep .nx-comparison-table__cell .nx-list,:host ::ng-deep .nx-comparison-table__description-cell .nx-list,:host ::ng-deep .nx-comparison-table__mobile-header-cell .nx-list{margin:0}:host ::ng-deep .nx-comparison-table__intersection-cell .nx-list li:last-child,:host ::ng-deep .nx-comparison-table__cell .nx-list li:last-child,:host ::ng-deep .nx-comparison-table__description-cell .nx-list li:last-child,:host ::ng-deep .nx-comparison-table__mobile-header-cell .nx-list li:last-child{margin-bottom:0}:host ::ng-deep .nx-comparison-table__intersection-cell nx-link a,:host ::ng-deep .nx-comparison-table__cell nx-link a,:host ::ng-deep .nx-comparison-table__description-cell nx-link a,:host ::ng-deep .nx-comparison-table__mobile-header-cell nx-link a{display:inline-flex}::ng-deep .nx-comparison-table-toggle-section__header-wrapper.cdk-keyboard-focused .nx-comparison-table-toggle-section__header-content{box-shadow:var(--focus-box-shadow);z-index:1;position:relative}@media screen and (-ms-high-contrast: active),(forced-colors: active){::ng-deep .nx-comparison-table-toggle-section__header-wrapper.cdk-keyboard-focused .nx-comparison-table-toggle-section__header-content{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}@media screen and (-ms-high-contrast: active){::ng-deep .nx-comparison-table__popular-cell,::ng-deep .nx-comparison-table__mobile-popular-cell{border-top:1px solid windowText;border-right:1px solid windowText;border-left:1px solid windowText}}\n"] }]
        }], ctorParameters: function () {
        return [{ type: i0.ElementRef }, { type: i3$1.Directionality, decorators: [{
                        type: Optional
                    }] }, { type: i1.NxViewportService }, { type: i0.ChangeDetectorRef }, { type: i3$2.ScrollDispatcher }, { type: i0.NgZone }];
    }, propDecorators: { elements: [{
                type: ContentChildren,
                args: [NxTableContentElement, { descendants: true }]
            }], _headerRowElement: [{
                type: ViewChild,
                args: ['headerRow']
            }], _desktopContentDiv: [{
                type: ViewChild,
                args: ['desktopContent']
            }], _stickyMobileCell: [{
                type: ViewChild,
                args: ['stickyMobileCell']
            }], selectedIndex: [{
                type: Input
            }], selectedIndexChange: [{
                type: Output
            }], hiddenIndexes: [{
                type: Input
            }], dir: [{
                type: HostBinding,
                args: ['attr.dir']
            }] } });

class NxComparisonTableSelectButton extends NxButtonBase {
    constructor(_cdr, _elementRef, _cell, _table, _focusMonitor) {
        super(_cdr, _elementRef, _focusMonitor);
        this._cell = _cell;
        this._table = _table;
        this._selectedLabel = 'Selected';
        this._ariaPressed = false;
        this._unselectedLabel = 'Select';
        this._unselectedClassNames = 'secondary small';
        this._selectedClassNames = 'primary small';
        this._destroyed = new Subject();
        this._setClassNames();
        this._cell.indexChange.pipe(takeUntil(this._destroyed)).subscribe(index => {
            setTimeout(() => {
                this._setClassNames();
                this._setAriaPressed();
            });
        });
        this._table.selectedIndexChange.pipe(takeUntil(this._destroyed)).subscribe(index => {
            this._setClassNames();
            this._setAriaPressed();
        });
    }
    /** Sets the label that is displayed when the column is selected. Default: 'Selected'. */
    set selectedLabel(value) {
        this._selectedLabel = value;
    }
    get selectedLabel() {
        return this._selectedLabel;
    }
    /** Sets the label that is displayed when the column is not selected. Default: 'Select'. */
    set unselectedLabel(value) {
        this._unselectedLabel = value;
    }
    get unselectedLabel() {
        return this._unselectedLabel;
    }
    /** Sets the classNames (style, size and negative) of the unselected button. Default: 'secondary small'. */
    set unselectedClassNames(value) {
        if (value !== this._unselectedClassNames) {
            this._unselectedClassNames = value;
            this._setClassNames();
        }
    }
    get unselectedClassNames() {
        return this._unselectedClassNames;
    }
    /** Sets the classNames (style, size and negative) of the selected button. Default: 'primary small'. */
    set selectedClassNames(value) {
        if (value !== this._selectedClassNames) {
            this._selectedClassNames = value;
            this._setClassNames();
        }
    }
    get selectedClassNames() {
        return this._selectedClassNames;
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
    _setClassNames() {
        this.classNames = this._cell._isSelected() ? this.selectedClassNames : this.unselectedClassNames;
    }
    _selectCell() {
        this._cell._selectCell();
    }
    _getButtonLabel() {
        return this._cell._isSelected() ? this._selectedLabel : this._unselectedLabel;
    }
    _setAriaPressed() {
        this._ariaPressed = this._cell._isSelected();
    }
}
NxComparisonTableSelectButton.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableSelectButton, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: NxComparisonTableCell }, { token: NxComparisonTableBase }, { token: i2.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });
NxComparisonTableSelectButton.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxComparisonTableSelectButton, selector: "button[nxComparisonTableSelectButton]", inputs: { selectedLabel: "selectedLabel", unselectedLabel: "unselectedLabel", unselectedClassNames: "unselectedClassNames", selectedClassNames: "selectedClassNames" }, host: { listeners: { "click": "_selectCell()" }, properties: { "disabled": "_cell._isCellDisabled", "attr.aria-pressed": "_ariaPressed" }, classAttribute: "nx-comparison-table__select-button" }, usesInheritance: true, ngImport: i0, template: "<nx-icon *ngIf=\"_cell._isSelected()\" class=\"nx-comparison-table__select-button-icon\" name=\"check\" fill=\"true\" outline=\"true\" aria-hidden=\"true\"> </nx-icon\n>{{ _getButtonLabel() }}\n", styles: [":host{font-size:var(--button-medium-font-size);line-height:var(--button-medium-line-height);font-weight:var(--button-medium-font-weight);letter-spacing:var(--button-medium-letter-spacing);min-height:var(--button-medium-height);text-transform:var(--button-text-transform);border-width:var(--button-border-width);border-radius:var(--button-border-radius);border-style:solid;border-color:transparent;cursor:pointer;padding:calc(12px - var(--button-border-width)) calc(32px - var(--button-border-width));transition:background-color .2s ease,border-color .2s ease,color .2s ease,box-shadow .2s ease;-webkit-user-select:none;user-select:none;width:auto;-webkit-hyphens:none;hyphens:none;vertical-align:middle;overflow:visible}@media (max-width: 703px){:host{display:block;width:100%}}:host[disabled]{cursor:not-allowed}:host:focus{outline:none}:host::-moz-focus-inner{border:0}:host.cdk-keyboard-focused,:host.cdk-keyboard-focused.nx-button--negative{box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){:host.cdk-keyboard-focused,:host.cdk-keyboard-focused.nx-button--negative{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}:host(.nx-button--primary){color:var(--button-primary-text-color);background-color:var(--button-primary-background-color);border-color:var(--button-primary-border-color)}:host(.nx-button--primary):hover:not([disabled]):not(:active){background-color:var(--button-primary-hover-background-color);color:var(--button-primary-hover-text-color);border-color:var(--button-primary-hover-border-color)}@media (hover: none){:host(.nx-button--primary):hover:not([disabled]):not(:active){color:var(--button-primary-text-color);background-color:var(--button-primary-background-color);border-color:var(--button-primary-border-color)}}:host(.nx-button--primary):active,:host(.nx-button--primary).nx-button--active{background-color:var(--button-primary-active-background-color);color:var(--button-primary-active-text-color);border-color:var(--button-primary-active-border-color)}:host(.nx-button--primary)[disabled]{background-color:var(--button-primary-disabled-background-color);color:var(--button-primary-disabled-text-color);border-color:var(--button-primary-disabled-border-color)}:host(.nx-button--primary.nx-button--danger){color:var(--button-primary-danger-text-color);background-color:var(--button-primary-danger-background-color);border-color:var(--button-primary-danger-border-color)}:host(.nx-button--primary.nx-button--danger):hover:not([disabled]):not(:active){background-color:var(--button-primary-danger-hover-background-color);color:var(--button-primary-danger-hover-text-color);border-color:var(--button-primary-danger-hover-border-color)}@media (hover: none){:host(.nx-button--primary.nx-button--danger):hover:not([disabled]):not(:active){color:var(--button-primary-danger-text-color);background-color:var(--button-primary-danger-background-color);border-color:var(--button-primary-danger-border-color)}}:host(.nx-button--primary.nx-button--danger):active,:host(.nx-button--primary.nx-button--danger).nx-button--active{background-color:var(--button-primary-danger-active-background-color);color:var(--button-primary-danger-active-text-color);border-color:var(--button-primary-danger-active-border-color)}:host(.nx-button--primary.nx-button--danger)[disabled]{background-color:var(--button-primary-danger-disabled-background-color);color:var(--button-primary-danger-disabled-text-color);border-color:var(--button-primary-danger-disabled-border-color)}:host(.nx-button--primary.nx-button--negative){background-color:var(--negative);border-color:var(--negative);color:var(--negative-accent)}:host(.nx-button--primary.nx-button--negative):hover:not([disabled]):not(:active){background-color:var(--negative-01);border-color:var(--negative-01);color:var(--negative-accent)}@media (hover: none){:host(.nx-button--primary.nx-button--negative):hover:not([disabled]):not(:active){background-color:var(--negative);border-color:var(--negative);color:var(--negative-accent)}}:host(.nx-button--primary.nx-button--negative):active,:host(.nx-button--primary.nx-button--negative).nx-button--active{background-color:var(--negative-02);border-color:var(--negative-02);color:var(--negative-accent)}:host(.nx-button--primary.nx-button--negative)[disabled]{background-color:var(--negative-dimmed);border-color:transparent;color:var(--negative-background-dimmed)}:host(.nx-button--secondary){color:var(--button-secondary-text-color);background-color:var(--button-secondary-background-color);border-color:var(--button-secondary-border-color)}:host(.nx-button--secondary):hover:not([disabled]):not(:active){background-color:var(--button-secondary-hover-background-color);color:var(--button-secondary-hover-text-color);border-color:var(--button-secondary-hover-border-color)}@media (hover: none){:host(.nx-button--secondary):hover:not([disabled]):not(:active){color:var(--button-secondary-text-color);background-color:var(--button-secondary-background-color);border-color:var(--button-secondary-border-color)}}:host(.nx-button--secondary):active,:host(.nx-button--secondary).nx-button--active{background-color:var(--button-secondary-active-background-color);color:var(--button-secondary-active-text-color);border-color:var(--button-secondary-active-border-color)}:host(.nx-button--secondary)[disabled]{background-color:var(--button-secondary-disabled-background-color);color:var(--button-secondary-disabled-text-color);border-color:var(--button-secondary-disabled-border-color)}:host(.nx-button--secondary.nx-button--danger){color:var(--button-secondary-danger-text-color);background-color:var(--button-secondary-danger-background-color);border-color:var(--button-secondary-danger-border-color)}:host(.nx-button--secondary.nx-button--danger):hover:not([disabled]):not(:active){background-color:var(--button-secondary-danger-hover-background-color);color:var(--button-secondary-danger-hover-text-color);border-color:var(--button-secondary-danger-hover-border-color)}@media (hover: none){:host(.nx-button--secondary.nx-button--danger):hover:not([disabled]):not(:active){color:var(--button-secondary-danger-text-color);background-color:var(--button-secondary-danger-background-color);border-color:var(--button-secondary-danger-border-color)}}:host(.nx-button--secondary.nx-button--danger):active,:host(.nx-button--secondary.nx-button--danger).nx-button--active{background-color:var(--button-secondary-danger-active-background-color);color:var(--button-secondary-danger-active-text-color);border-color:var(--button-secondary-danger-active-border-color)}:host(.nx-button--secondary.nx-button--danger)[disabled]{background-color:var(--button-secondary-danger-disabled-background-color);color:var(--button-secondary-danger-disabled-text-color);border-color:var(--button-secondary-danger-disabled-border-color)}:host(.nx-button--secondary.nx-button--negative){color:var(--negative);border-color:var(--negative)}:host(.nx-button--secondary.nx-button--negative):hover:not([disabled]):not(:active){background-color:var(--negative-01);border-color:var(--negative-01);color:var(--button-secondary-text-color)}@media (hover: none){:host(.nx-button--secondary.nx-button--negative):hover:not([disabled]):not(:active){background-color:transparent;border-color:var(--negative);color:var(--negative)}}:host(.nx-button--secondary.nx-button--negative):active,:host(.nx-button--secondary.nx-button--negative).nx-button--active{background-color:var(--negative-02);border-color:var(--negative-02);color:var(--button-secondary-text-color)}:host(.nx-button--secondary.nx-button--negative)[disabled]{background-color:transparent;border-color:var(--negative-dimmed);color:var(--negative-dimmed)}:host(.nx-button--tertiary){color:var(--button-tertiary-text-color);background-color:var(--button-tertiary-background-color);border-color:var(--button-tertiary-border-color)}:host(.nx-button--tertiary):hover:not([disabled]):not(:active){background-color:var(--button-tertiary-hover-background-color);color:var(--button-tertiary-hover-text-color);border-color:var(--button-tertiary-hover-border-color)}@media (hover: none){:host(.nx-button--tertiary):hover:not([disabled]):not(:active){color:var(--button-tertiary-text-color);background-color:var(--button-tertiary-background-color);border-color:var(--button-tertiary-border-color)}}:host(.nx-button--tertiary):active,:host(.nx-button--tertiary).nx-button--active{background-color:var(--button-tertiary-active-background-color);color:var(--button-tertiary-active-text-color);border-color:var(--button-tertiary-active-border-color)}:host(.nx-button--tertiary)[disabled]{background-color:var(--button-tertiary-disabled-background-color);color:var(--button-tertiary-disabled-text-color);border-color:var(--button-tertiary-disabled-border-color)}:host(.nx-button--tertiary.nx-button--danger){color:var(--button-tertiary-danger-text-color);background-color:var(--button-tertiary-danger-background-color);border-color:var(--button-tertiary-danger-border-color)}:host(.nx-button--tertiary.nx-button--danger):hover:not([disabled]):not(:active){background-color:var(--button-tertiary-danger-hover-background-color);color:var(--button-tertiary-danger-hover-text-color);border-color:var(--button-tertiary-danger-hover-border-color)}@media (hover: none){:host(.nx-button--tertiary.nx-button--danger):hover:not([disabled]):not(:active){color:var(--button-tertiary-danger-text-color);background-color:var(--button-tertiary-danger-background-color);border-color:var(--button-tertiary-danger-border-color)}}:host(.nx-button--tertiary.nx-button--danger):active,:host(.nx-button--tertiary.nx-button--danger).nx-button--active{background-color:var(--button-tertiary-danger-active-background-color);color:var(--button-tertiary-danger-active-text-color);border-color:var(--button-tertiary-danger-active-border-color)}:host(.nx-button--tertiary.nx-button--danger)[disabled]{background-color:var(--button-tertiary-danger-disabled-background-color);color:var(--button-tertiary-danger-disabled-text-color);border-color:var(--button-tertiary-danger-disabled-border-color)}:host(.nx-button--tertiary.nx-button--negative){color:var(--negative)}:host(.nx-button--tertiary.nx-button--negative):hover:not([disabled]):not(:active){background-color:var(--negative-01);color:var(--button-secondary-text-color)}@media (hover: none){:host(.nx-button--tertiary.nx-button--negative):hover:not([disabled]):not(:active){background-color:transparent;color:var(--negative)}}:host(.nx-button--tertiary.nx-button--negative):active,:host(.nx-button--tertiary.nx-button--negative).nx-button--active{background-color:var(--negative-02);color:var(--button-secondary-text-color)}:host(.nx-button--tertiary.nx-button--negative)[disabled]{background-color:transparent;color:var(--negative-dimmed)}:host(.nx-button--large){font-size:var(--button-large-font-size);line-height:var(--button-large-line-height);font-weight:var(--button-large-font-weight);letter-spacing:var(--button-large-letter-spacing);min-height:var(--button-large-height);padding:calc(24px - var(--button-border-width)) calc(48px - var(--button-border-width))}@media (max-width: 703px){:host(.nx-button--large){padding:calc(24px - var(--button-border-width)) calc(32px - var(--button-border-width))}}:host(.nx-button--small-medium){display:inline-block;font-size:var(--button-small-medium-font-size);line-height:var(--button-small-medium-line-height);font-weight:var(--button-small-medium-font-weight);letter-spacing:var(--button-small-medium-letter-spacing);padding:calc(8px - var(--button-border-width)) calc(24px - var(--button-border-width));text-transform:none;width:auto;min-height:var(--button-small-medium-height)}:host(.nx-button--small){font-size:var(--button-small-font-size);line-height:var(--button-small-line-height);font-weight:var(--button-small-font-weight);letter-spacing:var(--button-small-letter-spacing);min-height:var(--button-small-height);display:inline-block;padding:calc(8px - var(--button-border-width)) calc(16px - var(--button-border-width));text-transform:none;width:auto}:host(.nx-button--cta){color:var(--button-cta-text-color);background-color:var(--button-cta-background-color);border-color:var(--button-cta-border-color)}:host(.nx-button--cta):hover:not([disabled]):not(:active){background-color:var(--button-cta-hover-background-color);color:var(--button-cta-hover-text-color);border-color:var(--button-cta-hover-border-color)}@media (hover: none){:host(.nx-button--cta):hover:not([disabled]):not(:active){color:var(--button-cta-text-color);background-color:var(--button-cta-background-color);border-color:var(--button-cta-border-color)}}:host(.nx-button--cta):active,:host(.nx-button--cta).nx-button--active{background-color:var(--button-cta-active-background-color);color:var(--button-cta-active-text-color);border-color:var(--button-cta-active-border-color)}:host(.nx-button--cta)[disabled]{background-color:var(--button-cta-disabled-background-color);color:var(--button-cta-disabled-text-color);border-color:var(--button-cta-disabled-border-color)}:host(.nx-button--emphasis){color:var(--button-emphasis-text-color);background-color:var(--button-emphasis-background-color);border-color:var(--button-emphasis-border-color)}:host(.nx-button--emphasis):hover:not([disabled]):not(:active){background-color:var(--button-emphasis-hover-background-color);color:var(--button-emphasis-hover-text-color);border-color:var(--button-emphasis-hover-border-color)}@media (hover: none){:host(.nx-button--emphasis):hover:not([disabled]):not(:active){color:var(--button-emphasis-text-color);background-color:var(--button-emphasis-background-color);border-color:var(--button-emphasis-border-color)}}:host(.nx-button--emphasis):active,:host(.nx-button--emphasis).nx-button--active{background-color:var(--button-emphasis-active-background-color);color:var(--button-emphasis-active-text-color);border-color:var(--button-emphasis-active-border-color)}:host(.nx-button--emphasis)[disabled]{background-color:var(--button-emphasis-disabled-background-color);color:var(--button-emphasis-disabled-text-color);border-color:var(--button-emphasis-disabled-border-color)}@media (min-width: 704px){:host(.nx-button--block){display:block;width:100%}}:host .nx-button__content-wrapper{display:inline-flex;align-items:center;justify-content:center;vertical-align:bottom;position:relative}:host(.nx-icon-button),:host(.nx-sidebar__toggle-button){padding:0;flex:0 0 auto}:host(.nx-icon-button).nx-button--small,:host(.nx-sidebar__toggle-button).nx-button--small{width:var(--button-small-height);font-size:var(--icon-button-small-icon-size)}:host(.nx-icon-button).nx-button--small-medium,:host(.nx-sidebar__toggle-button).nx-button--small-medium{width:var(--button-small-medium-height);font-size:var(--icon-button-small-medium-icon-size)}:host(.nx-icon-button).nx-button--medium,:host(.nx-sidebar__toggle-button).nx-button--medium{width:var(--button-medium-height);font-size:var(--icon-button-medium-icon-size)}:host(.nx-icon-button).nx-button--large,:host(.nx-sidebar__toggle-button).nx-button--large{width:var(--button-large-height);font-size:var(--icon-button-large-icon-size)}:host(.nx-button).nx-button--small ::ng-deep nx-icon{font-size:var(--button-small-icon-size)}:host(.nx-button).nx-button--small-medium ::ng-deep nx-icon{font-size:var(--button-small-medium-icon-size)}:host(.nx-button).nx-button--medium ::ng-deep nx-icon{font-size:var(--button-medium-icon-size)}:host(.nx-button).nx-button--large ::ng-deep nx-icon{font-size:var(--button-large-icon-size)}@media screen and (-ms-high-contrast: active){:host{forced-color-adjust:none;background-color:buttonFace!important;border-color:buttonText!important;color:buttonText!important}:host .nx-button__content-wrapper{-ms-high-contrast-adjust:none}:host[disabled]{background-color:buttonFace!important;border-color:GrayText!important;color:GrayText!important}}:host(a){display:inline-block;height:-webkit-fit-content;height:-moz-fit-content;height:fit-content;text-align:center;text-decoration:none}:host(a.nx-icon-button){display:inline-flex;justify-content:center}\n", ":host .nx-comparison-table__select-button-icon ::ng-deep{background:var(--button-primary-text-color);color:var(--button-primary-background-color);width:16px;height:16px;vertical-align:bottom}[dir=ltr] :host .nx-comparison-table__select-button-icon ::ng-deep{margin-right:4px}[dir=rtl] :host .nx-comparison-table__select-button-icon ::ng-deep{margin-left:4px}@media screen and (-ms-high-contrast: active){:host .nx-comparison-table__select-button-icon ::ng-deep{background:buttonFace;border:1px solid buttonText;border-radius:50%}}\n"], components: [{ type: i4.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableSelectButton, decorators: [{
            type: Component,
            args: [{ selector: 'button[nxComparisonTableSelectButton]', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[disabled]': '_cell._isCellDisabled',
                        class: 'nx-comparison-table__select-button',
                        '(click)': '_selectCell()',
                        '[attr.aria-pressed]': '_ariaPressed',
                    }, template: "<nx-icon *ngIf=\"_cell._isSelected()\" class=\"nx-comparison-table__select-button-icon\" name=\"check\" fill=\"true\" outline=\"true\" aria-hidden=\"true\"> </nx-icon\n>{{ _getButtonLabel() }}\n", styles: [":host{font-size:var(--button-medium-font-size);line-height:var(--button-medium-line-height);font-weight:var(--button-medium-font-weight);letter-spacing:var(--button-medium-letter-spacing);min-height:var(--button-medium-height);text-transform:var(--button-text-transform);border-width:var(--button-border-width);border-radius:var(--button-border-radius);border-style:solid;border-color:transparent;cursor:pointer;padding:calc(12px - var(--button-border-width)) calc(32px - var(--button-border-width));transition:background-color .2s ease,border-color .2s ease,color .2s ease,box-shadow .2s ease;-webkit-user-select:none;user-select:none;width:auto;-webkit-hyphens:none;hyphens:none;vertical-align:middle;overflow:visible}@media (max-width: 703px){:host{display:block;width:100%}}:host[disabled]{cursor:not-allowed}:host:focus{outline:none}:host::-moz-focus-inner{border:0}:host.cdk-keyboard-focused,:host.cdk-keyboard-focused.nx-button--negative{box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){:host.cdk-keyboard-focused,:host.cdk-keyboard-focused.nx-button--negative{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}:host(.nx-button--primary){color:var(--button-primary-text-color);background-color:var(--button-primary-background-color);border-color:var(--button-primary-border-color)}:host(.nx-button--primary):hover:not([disabled]):not(:active){background-color:var(--button-primary-hover-background-color);color:var(--button-primary-hover-text-color);border-color:var(--button-primary-hover-border-color)}@media (hover: none){:host(.nx-button--primary):hover:not([disabled]):not(:active){color:var(--button-primary-text-color);background-color:var(--button-primary-background-color);border-color:var(--button-primary-border-color)}}:host(.nx-button--primary):active,:host(.nx-button--primary).nx-button--active{background-color:var(--button-primary-active-background-color);color:var(--button-primary-active-text-color);border-color:var(--button-primary-active-border-color)}:host(.nx-button--primary)[disabled]{background-color:var(--button-primary-disabled-background-color);color:var(--button-primary-disabled-text-color);border-color:var(--button-primary-disabled-border-color)}:host(.nx-button--primary.nx-button--danger){color:var(--button-primary-danger-text-color);background-color:var(--button-primary-danger-background-color);border-color:var(--button-primary-danger-border-color)}:host(.nx-button--primary.nx-button--danger):hover:not([disabled]):not(:active){background-color:var(--button-primary-danger-hover-background-color);color:var(--button-primary-danger-hover-text-color);border-color:var(--button-primary-danger-hover-border-color)}@media (hover: none){:host(.nx-button--primary.nx-button--danger):hover:not([disabled]):not(:active){color:var(--button-primary-danger-text-color);background-color:var(--button-primary-danger-background-color);border-color:var(--button-primary-danger-border-color)}}:host(.nx-button--primary.nx-button--danger):active,:host(.nx-button--primary.nx-button--danger).nx-button--active{background-color:var(--button-primary-danger-active-background-color);color:var(--button-primary-danger-active-text-color);border-color:var(--button-primary-danger-active-border-color)}:host(.nx-button--primary.nx-button--danger)[disabled]{background-color:var(--button-primary-danger-disabled-background-color);color:var(--button-primary-danger-disabled-text-color);border-color:var(--button-primary-danger-disabled-border-color)}:host(.nx-button--primary.nx-button--negative){background-color:var(--negative);border-color:var(--negative);color:var(--negative-accent)}:host(.nx-button--primary.nx-button--negative):hover:not([disabled]):not(:active){background-color:var(--negative-01);border-color:var(--negative-01);color:var(--negative-accent)}@media (hover: none){:host(.nx-button--primary.nx-button--negative):hover:not([disabled]):not(:active){background-color:var(--negative);border-color:var(--negative);color:var(--negative-accent)}}:host(.nx-button--primary.nx-button--negative):active,:host(.nx-button--primary.nx-button--negative).nx-button--active{background-color:var(--negative-02);border-color:var(--negative-02);color:var(--negative-accent)}:host(.nx-button--primary.nx-button--negative)[disabled]{background-color:var(--negative-dimmed);border-color:transparent;color:var(--negative-background-dimmed)}:host(.nx-button--secondary){color:var(--button-secondary-text-color);background-color:var(--button-secondary-background-color);border-color:var(--button-secondary-border-color)}:host(.nx-button--secondary):hover:not([disabled]):not(:active){background-color:var(--button-secondary-hover-background-color);color:var(--button-secondary-hover-text-color);border-color:var(--button-secondary-hover-border-color)}@media (hover: none){:host(.nx-button--secondary):hover:not([disabled]):not(:active){color:var(--button-secondary-text-color);background-color:var(--button-secondary-background-color);border-color:var(--button-secondary-border-color)}}:host(.nx-button--secondary):active,:host(.nx-button--secondary).nx-button--active{background-color:var(--button-secondary-active-background-color);color:var(--button-secondary-active-text-color);border-color:var(--button-secondary-active-border-color)}:host(.nx-button--secondary)[disabled]{background-color:var(--button-secondary-disabled-background-color);color:var(--button-secondary-disabled-text-color);border-color:var(--button-secondary-disabled-border-color)}:host(.nx-button--secondary.nx-button--danger){color:var(--button-secondary-danger-text-color);background-color:var(--button-secondary-danger-background-color);border-color:var(--button-secondary-danger-border-color)}:host(.nx-button--secondary.nx-button--danger):hover:not([disabled]):not(:active){background-color:var(--button-secondary-danger-hover-background-color);color:var(--button-secondary-danger-hover-text-color);border-color:var(--button-secondary-danger-hover-border-color)}@media (hover: none){:host(.nx-button--secondary.nx-button--danger):hover:not([disabled]):not(:active){color:var(--button-secondary-danger-text-color);background-color:var(--button-secondary-danger-background-color);border-color:var(--button-secondary-danger-border-color)}}:host(.nx-button--secondary.nx-button--danger):active,:host(.nx-button--secondary.nx-button--danger).nx-button--active{background-color:var(--button-secondary-danger-active-background-color);color:var(--button-secondary-danger-active-text-color);border-color:var(--button-secondary-danger-active-border-color)}:host(.nx-button--secondary.nx-button--danger)[disabled]{background-color:var(--button-secondary-danger-disabled-background-color);color:var(--button-secondary-danger-disabled-text-color);border-color:var(--button-secondary-danger-disabled-border-color)}:host(.nx-button--secondary.nx-button--negative){color:var(--negative);border-color:var(--negative)}:host(.nx-button--secondary.nx-button--negative):hover:not([disabled]):not(:active){background-color:var(--negative-01);border-color:var(--negative-01);color:var(--button-secondary-text-color)}@media (hover: none){:host(.nx-button--secondary.nx-button--negative):hover:not([disabled]):not(:active){background-color:transparent;border-color:var(--negative);color:var(--negative)}}:host(.nx-button--secondary.nx-button--negative):active,:host(.nx-button--secondary.nx-button--negative).nx-button--active{background-color:var(--negative-02);border-color:var(--negative-02);color:var(--button-secondary-text-color)}:host(.nx-button--secondary.nx-button--negative)[disabled]{background-color:transparent;border-color:var(--negative-dimmed);color:var(--negative-dimmed)}:host(.nx-button--tertiary){color:var(--button-tertiary-text-color);background-color:var(--button-tertiary-background-color);border-color:var(--button-tertiary-border-color)}:host(.nx-button--tertiary):hover:not([disabled]):not(:active){background-color:var(--button-tertiary-hover-background-color);color:var(--button-tertiary-hover-text-color);border-color:var(--button-tertiary-hover-border-color)}@media (hover: none){:host(.nx-button--tertiary):hover:not([disabled]):not(:active){color:var(--button-tertiary-text-color);background-color:var(--button-tertiary-background-color);border-color:var(--button-tertiary-border-color)}}:host(.nx-button--tertiary):active,:host(.nx-button--tertiary).nx-button--active{background-color:var(--button-tertiary-active-background-color);color:var(--button-tertiary-active-text-color);border-color:var(--button-tertiary-active-border-color)}:host(.nx-button--tertiary)[disabled]{background-color:var(--button-tertiary-disabled-background-color);color:var(--button-tertiary-disabled-text-color);border-color:var(--button-tertiary-disabled-border-color)}:host(.nx-button--tertiary.nx-button--danger){color:var(--button-tertiary-danger-text-color);background-color:var(--button-tertiary-danger-background-color);border-color:var(--button-tertiary-danger-border-color)}:host(.nx-button--tertiary.nx-button--danger):hover:not([disabled]):not(:active){background-color:var(--button-tertiary-danger-hover-background-color);color:var(--button-tertiary-danger-hover-text-color);border-color:var(--button-tertiary-danger-hover-border-color)}@media (hover: none){:host(.nx-button--tertiary.nx-button--danger):hover:not([disabled]):not(:active){color:var(--button-tertiary-danger-text-color);background-color:var(--button-tertiary-danger-background-color);border-color:var(--button-tertiary-danger-border-color)}}:host(.nx-button--tertiary.nx-button--danger):active,:host(.nx-button--tertiary.nx-button--danger).nx-button--active{background-color:var(--button-tertiary-danger-active-background-color);color:var(--button-tertiary-danger-active-text-color);border-color:var(--button-tertiary-danger-active-border-color)}:host(.nx-button--tertiary.nx-button--danger)[disabled]{background-color:var(--button-tertiary-danger-disabled-background-color);color:var(--button-tertiary-danger-disabled-text-color);border-color:var(--button-tertiary-danger-disabled-border-color)}:host(.nx-button--tertiary.nx-button--negative){color:var(--negative)}:host(.nx-button--tertiary.nx-button--negative):hover:not([disabled]):not(:active){background-color:var(--negative-01);color:var(--button-secondary-text-color)}@media (hover: none){:host(.nx-button--tertiary.nx-button--negative):hover:not([disabled]):not(:active){background-color:transparent;color:var(--negative)}}:host(.nx-button--tertiary.nx-button--negative):active,:host(.nx-button--tertiary.nx-button--negative).nx-button--active{background-color:var(--negative-02);color:var(--button-secondary-text-color)}:host(.nx-button--tertiary.nx-button--negative)[disabled]{background-color:transparent;color:var(--negative-dimmed)}:host(.nx-button--large){font-size:var(--button-large-font-size);line-height:var(--button-large-line-height);font-weight:var(--button-large-font-weight);letter-spacing:var(--button-large-letter-spacing);min-height:var(--button-large-height);padding:calc(24px - var(--button-border-width)) calc(48px - var(--button-border-width))}@media (max-width: 703px){:host(.nx-button--large){padding:calc(24px - var(--button-border-width)) calc(32px - var(--button-border-width))}}:host(.nx-button--small-medium){display:inline-block;font-size:var(--button-small-medium-font-size);line-height:var(--button-small-medium-line-height);font-weight:var(--button-small-medium-font-weight);letter-spacing:var(--button-small-medium-letter-spacing);padding:calc(8px - var(--button-border-width)) calc(24px - var(--button-border-width));text-transform:none;width:auto;min-height:var(--button-small-medium-height)}:host(.nx-button--small){font-size:var(--button-small-font-size);line-height:var(--button-small-line-height);font-weight:var(--button-small-font-weight);letter-spacing:var(--button-small-letter-spacing);min-height:var(--button-small-height);display:inline-block;padding:calc(8px - var(--button-border-width)) calc(16px - var(--button-border-width));text-transform:none;width:auto}:host(.nx-button--cta){color:var(--button-cta-text-color);background-color:var(--button-cta-background-color);border-color:var(--button-cta-border-color)}:host(.nx-button--cta):hover:not([disabled]):not(:active){background-color:var(--button-cta-hover-background-color);color:var(--button-cta-hover-text-color);border-color:var(--button-cta-hover-border-color)}@media (hover: none){:host(.nx-button--cta):hover:not([disabled]):not(:active){color:var(--button-cta-text-color);background-color:var(--button-cta-background-color);border-color:var(--button-cta-border-color)}}:host(.nx-button--cta):active,:host(.nx-button--cta).nx-button--active{background-color:var(--button-cta-active-background-color);color:var(--button-cta-active-text-color);border-color:var(--button-cta-active-border-color)}:host(.nx-button--cta)[disabled]{background-color:var(--button-cta-disabled-background-color);color:var(--button-cta-disabled-text-color);border-color:var(--button-cta-disabled-border-color)}:host(.nx-button--emphasis){color:var(--button-emphasis-text-color);background-color:var(--button-emphasis-background-color);border-color:var(--button-emphasis-border-color)}:host(.nx-button--emphasis):hover:not([disabled]):not(:active){background-color:var(--button-emphasis-hover-background-color);color:var(--button-emphasis-hover-text-color);border-color:var(--button-emphasis-hover-border-color)}@media (hover: none){:host(.nx-button--emphasis):hover:not([disabled]):not(:active){color:var(--button-emphasis-text-color);background-color:var(--button-emphasis-background-color);border-color:var(--button-emphasis-border-color)}}:host(.nx-button--emphasis):active,:host(.nx-button--emphasis).nx-button--active{background-color:var(--button-emphasis-active-background-color);color:var(--button-emphasis-active-text-color);border-color:var(--button-emphasis-active-border-color)}:host(.nx-button--emphasis)[disabled]{background-color:var(--button-emphasis-disabled-background-color);color:var(--button-emphasis-disabled-text-color);border-color:var(--button-emphasis-disabled-border-color)}@media (min-width: 704px){:host(.nx-button--block){display:block;width:100%}}:host .nx-button__content-wrapper{display:inline-flex;align-items:center;justify-content:center;vertical-align:bottom;position:relative}:host(.nx-icon-button),:host(.nx-sidebar__toggle-button){padding:0;flex:0 0 auto}:host(.nx-icon-button).nx-button--small,:host(.nx-sidebar__toggle-button).nx-button--small{width:var(--button-small-height);font-size:var(--icon-button-small-icon-size)}:host(.nx-icon-button).nx-button--small-medium,:host(.nx-sidebar__toggle-button).nx-button--small-medium{width:var(--button-small-medium-height);font-size:var(--icon-button-small-medium-icon-size)}:host(.nx-icon-button).nx-button--medium,:host(.nx-sidebar__toggle-button).nx-button--medium{width:var(--button-medium-height);font-size:var(--icon-button-medium-icon-size)}:host(.nx-icon-button).nx-button--large,:host(.nx-sidebar__toggle-button).nx-button--large{width:var(--button-large-height);font-size:var(--icon-button-large-icon-size)}:host(.nx-button).nx-button--small ::ng-deep nx-icon{font-size:var(--button-small-icon-size)}:host(.nx-button).nx-button--small-medium ::ng-deep nx-icon{font-size:var(--button-small-medium-icon-size)}:host(.nx-button).nx-button--medium ::ng-deep nx-icon{font-size:var(--button-medium-icon-size)}:host(.nx-button).nx-button--large ::ng-deep nx-icon{font-size:var(--button-large-icon-size)}@media screen and (-ms-high-contrast: active){:host{forced-color-adjust:none;background-color:buttonFace!important;border-color:buttonText!important;color:buttonText!important}:host .nx-button__content-wrapper{-ms-high-contrast-adjust:none}:host[disabled]{background-color:buttonFace!important;border-color:GrayText!important;color:GrayText!important}}:host(a){display:inline-block;height:-webkit-fit-content;height:-moz-fit-content;height:fit-content;text-align:center;text-decoration:none}:host(a.nx-icon-button){display:inline-flex;justify-content:center}\n", ":host .nx-comparison-table__select-button-icon ::ng-deep{background:var(--button-primary-text-color);color:var(--button-primary-background-color);width:16px;height:16px;vertical-align:bottom}[dir=ltr] :host .nx-comparison-table__select-button-icon ::ng-deep{margin-right:4px}[dir=rtl] :host .nx-comparison-table__select-button-icon ::ng-deep{margin-left:4px}@media screen and (-ms-high-contrast: active){:host .nx-comparison-table__select-button-icon ::ng-deep{background:buttonFace;border:1px solid buttonText;border-radius:50%}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: NxComparisonTableCell }, { type: NxComparisonTableBase }, { type: i2.FocusMonitor }]; }, propDecorators: { selectedLabel: [{
                type: Input
            }], unselectedLabel: [{
                type: Input
            }], unselectedClassNames: [{
                type: Input
            }], selectedClassNames: [{
                type: Input
            }] } });

class NxComparisonTableModule {
}
NxComparisonTableModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NxComparisonTableModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableModule, declarations: [NxComparisonTableComponent,
        NxComparisonTableCell,
        NxComparisonTableDescriptionCell,
        NxComparisonTableIntersectionCell,
        NxToggleSectionDirective,
        NxToggleSectionHeaderComponent,
        NxComparisonTableRowDirective,
        NxComparisonTableSelectButton,
        NxComparisonTableFlexRow,
        NxComparisonTableRowGroupDirective,
        NxComparisonTableDesktopGroup,
        NxComparisonTablePopularCell], imports: [CommonModule, NxIconModule], exports: [NxComparisonTableComponent,
        NxComparisonTableCell,
        NxComparisonTableDescriptionCell,
        NxComparisonTableIntersectionCell,
        NxToggleSectionDirective,
        NxToggleSectionHeaderComponent,
        NxComparisonTableRowDirective,
        NxComparisonTableSelectButton,
        NxComparisonTableFlexRow,
        NxComparisonTableRowGroupDirective,
        NxComparisonTableDesktopGroup,
        NxComparisonTablePopularCell] });
NxComparisonTableModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableModule, imports: [[CommonModule, NxIconModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NxIconModule],
                    declarations: [
                        NxComparisonTableComponent,
                        NxComparisonTableCell,
                        NxComparisonTableDescriptionCell,
                        NxComparisonTableIntersectionCell,
                        NxToggleSectionDirective,
                        NxToggleSectionHeaderComponent,
                        NxComparisonTableRowDirective,
                        NxComparisonTableSelectButton,
                        NxComparisonTableFlexRow,
                        NxComparisonTableRowGroupDirective,
                        NxComparisonTableDesktopGroup,
                        NxComparisonTablePopularCell,
                    ],
                    exports: [
                        NxComparisonTableComponent,
                        NxComparisonTableCell,
                        NxComparisonTableDescriptionCell,
                        NxComparisonTableIntersectionCell,
                        NxToggleSectionDirective,
                        NxToggleSectionHeaderComponent,
                        NxComparisonTableRowDirective,
                        NxComparisonTableSelectButton,
                        NxComparisonTableFlexRow,
                        NxComparisonTableRowGroupDirective,
                        NxComparisonTableDesktopGroup,
                        NxComparisonTablePopularCell,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { COMPARISON_TABLE_DEFAULT_OPTIONS, NxComparisonTableBase, NxComparisonTableCell, NxComparisonTableComponent, NxComparisonTableDescriptionCell, NxComparisonTableDesktopGroup, NxComparisonTableFlexRow, NxComparisonTableIntersectionCell, NxComparisonTableModule, NxComparisonTablePopularCell, NxComparisonTableRowBase, NxComparisonTableRowDirective, NxComparisonTableRowGroupDirective, NxComparisonTableSelectButton, NxTableContentElement, NxToggleSectionDirective, NxToggleSectionHeaderComponent };
//# sourceMappingURL=aposin-ng-aquila-comparison-table.mjs.map
