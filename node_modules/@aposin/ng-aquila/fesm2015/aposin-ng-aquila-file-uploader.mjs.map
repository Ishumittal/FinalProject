{"version":3,"file":"aposin-ng-aquila-file-uploader.mjs","sources":["../../../projects/ng-aquila/src/file-uploader/file-uploader.ts","../../../projects/ng-aquila/src/file-uploader/file-uploader.model.ts","../../../projects/ng-aquila/src/file-uploader/file-uploader.validations.ts","../../../projects/ng-aquila/src/file-uploader/file-uploader-button.directive.ts","../../../projects/ng-aquila/src/file-uploader/file-uploader-drop-zone.component.ts","../../../projects/ng-aquila/src/file-uploader/file-uploader-drop-zone.component.html","../../../projects/ng-aquila/src/file-uploader/file-uploader-hint.directive.ts","../../../projects/ng-aquila/src/file-uploader/file-uploader-intl.ts","../../../projects/ng-aquila/src/file-uploader/item/file-uploader-name.component.ts","../../../projects/ng-aquila/src/file-uploader/item/file-uploader-size.component.ts","../../../projects/ng-aquila/src/file-uploader/item/file-uploader-status.component.ts","../../../projects/ng-aquila/src/file-uploader/item/file-uploader-delete.component.ts","../../../projects/ng-aquila/src/file-uploader/file-uploader.component.ts","../../../projects/ng-aquila/src/file-uploader/file-uploader.component.html","../../../projects/ng-aquila/src/file-uploader/file-uploader-trigger.directive.ts","../../../projects/ng-aquila/src/file-uploader/file-uploader.module.ts","../../../projects/ng-aquila/src/file-uploader/aposin-ng-aquila-file-uploader.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { forkJoin, Observable, of, Subject } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { FileItem } from './file-uploader.model';\n\nexport interface NxFileUploadConfig {\n    /** Sets the url for uploading requests. */\n    requestUrl: string;\n    /** Sets the options for http upload requests. HttpParams */\n    options?: object;\n    /** Whether the files should be uploaded separately. Default: false. */\n    uploadSeparately?: boolean;\n}\n\nexport class NxFileUploadSuccess {\n    constructor(\n        /** The files that were successfully uploaded. */\n        public files: FileItem[],\n        /** The results of the request(s). */\n        public requests: object[],\n    ) {}\n}\n\nexport class NxFileUploadError {\n    constructor(\n        /** The files that had an error while uploading. */\n        public files: FileItem[],\n        /** The returned errors of the request(s). */\n        public requests: object[],\n    ) {}\n}\n\nexport interface NxFileUploadResult {\n    /** Whether all files were successfully uploaded. */\n    allSucessful?: boolean;\n    /** All successfully uploaded results. */\n    success?: NxFileUploadSuccess;\n    /** All results with errors. */\n    error?: NxFileUploadError;\n}\n\nexport class NxFileUploader {\n    private _config: NxFileUploadConfig;\n    private _httpClient: HttpClient;\n\n    /** Stream that emits the result of an upload request. */\n    readonly response: Subject<NxFileUploadResult> = new Subject<NxFileUploadResult>();\n\n    /** Sets the config options for http requests for uploading the files. */\n    set config(options: NxFileUploadConfig) {\n        if (this._config !== options) {\n            this._config = options;\n        }\n    }\n    get config(): NxFileUploadConfig {\n        return this._config;\n    }\n\n    constructor(config: NxFileUploadConfig, http: HttpClient) {\n        this._config = config;\n        this._httpClient = http;\n    }\n\n    /** Uploads the files to the url specified in config. */\n    uploadFiles(files: FileItem[]) {\n        if (this.config['uploadSeparately']) {\n            this._uploadFilesSeparately(files);\n        } else {\n            this._uploadFilesCollectively(files);\n        }\n    }\n\n    /** Uploads all files with a POST request to the url specified in config. */\n    private _uploadFilesCollectively(files: FileItem[]) {\n        // get a list of all files; if there is no one: return\n        if (!files || files.length === 0) {\n            return;\n        }\n\n        const formData = new FormData();\n\n        // save value here in case that it changes while request is running\n        const valuesToUpload = files.filter(file => !file.isUploaded);\n        valuesToUpload.forEach((file: FileItem) => {\n            file.setUploadingState();\n            formData.append('uploads[]', file.file as Blob, file.name);\n        });\n\n        this._httpClient.post(this.config['requestUrl'], formData, this.config['options']).subscribe(\n            data => {\n                valuesToUpload.forEach((file: FileItem) => file.setUploadedState());\n                this.response.next({ allSucessful: true, success: new NxFileUploadSuccess(valuesToUpload, [data]) });\n            },\n            error => {\n                valuesToUpload.forEach((file: FileItem) => file.setErrorState());\n                this.response.next({ error: new NxFileUploadError(valuesToUpload, [error]) });\n            },\n        );\n    }\n\n    /**\n     * Uploads all files with a POST request to the url specified in config.\n     *\n     * Each file is uploaded with an individual request.\n     */\n    private _uploadFilesSeparately(files: FileItem[]) {\n        // get a list of all files; if there is no one: return\n        if (!files) {\n            return;\n        }\n\n        const responses: Observable<NxFileUploadResult>[] = [];\n\n        const filesToUpload = files.filter(file => !file.isUploaded);\n\n        filesToUpload.forEach((file: FileItem) => {\n            responses.push(this._uploadFile(file).pipe(catchError(error => of(error))));\n        });\n\n        forkJoin(responses).subscribe(results => {\n            const mergedResults = results.reduce((acc, result: NxFileUploadResult) => {\n                if (result.success) {\n                    if (!acc.success) {\n                        acc.success = new NxFileUploadSuccess([], []);\n                    }\n                    acc.success.files.push(...result.success.files);\n                    acc.success.requests.push(...result.success.requests);\n                } else if (result.error) {\n                    if (!acc.error) {\n                        acc.error = new NxFileUploadError([], []);\n                    }\n                    acc.error.files.push(...result.error.files);\n                    acc.error.requests.push(...result.error.requests);\n                }\n\n                return acc;\n            }, {});\n\n            if (!mergedResults.error) {\n                mergedResults.allSucessful = true;\n            }\n\n            this.response.next(mergedResults);\n        });\n    }\n\n    /** Uploads one file with a POST request to the url specified in config. */\n    private _uploadFile(file: FileItem): Subject<NxFileUploadResult> {\n        const fileReturnVal: Subject<NxFileUploadResult> = new Subject<NxFileUploadResult>();\n\n        const formData = new FormData();\n        if (!file.isUploaded) {\n            file.setUploadingState();\n            formData.append('uploads[]', file.file as Blob, file.name);\n        }\n\n        this._httpClient.post(this.config['requestUrl'], formData, this.config['options']).subscribe(\n            data => {\n                file.setUploadedState();\n                fileReturnVal.next({ success: new NxFileUploadSuccess([file], [data]) });\n                fileReturnVal.complete();\n            },\n            error => {\n                file.setErrorState();\n                fileReturnVal.next({ error: new NxFileUploadError([file], [error]) });\n                fileReturnVal.complete();\n            },\n        );\n\n        return fileReturnVal;\n    }\n}\n","import { EventEmitter } from '@angular/core';\n\n/**\n * Class used to keep track of the current states of the file\n */\n\nexport class FileItem {\n    /** The actual file data. */\n    file: File | null;\n\n    /** Sets the name of the file. */\n    name: string;\n\n    private _size: number;\n    private _type: string;\n\n    /** Whether the file is being uploaded at the moment. */\n    isUploading = false;\n\n    /** Whether the file was successfully uploaded. */\n    isUploaded = false;\n\n    /** Whether an error occured when uploading the file. */\n    isError = false;\n\n    /** Sets the index of the file. */\n    index = 0;\n\n    /**\n     * emits the FileItem on changed\n     */\n    onChange: EventEmitter<FileItem> = new EventEmitter<FileItem>();\n\n    constructor(file: File, index = 0) {\n        this.file = file;\n        this.name = file.name;\n        this._size = file.size;\n        this._type = file.type;\n        this.index = index;\n    }\n\n    /** Returns the file size in bytes */\n    get size(): number {\n        return this._size;\n    }\n\n    /** Returns the file type */\n    get type(): string {\n        return this._type;\n    }\n\n    /**\n     * sets the file to a uploaded state\n     */\n    setUploadedState() {\n        this.isUploaded = true;\n        this.isUploading = false;\n        this.isError = false;\n        this.onChange.emit(this);\n    }\n\n    /**\n     * sets the file to a 'upload-in-progress' state\n     */\n    setUploadingState() {\n        this.isUploaded = false;\n        this.isUploading = true;\n        this.isError = false;\n        this.onChange.emit(this);\n    }\n\n    /**\n     * sets the file to an error state\n     */\n    setErrorState() {\n        this.isUploaded = false;\n        this.isUploading = false;\n        this.isError = true;\n        this.onChange.emit(this);\n    }\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\n\nimport { FileItem } from './file-uploader.model';\n\n/**\n * Verifies the file type against the accepted types\n */\nexport function isFileTypeValid(file: File, accept: string): boolean {\n    if (!accept || !file.type) {\n        return true;\n    }\n\n    return (\n        accept\n            .replace(/\\s/g, '')\n            .split(',')\n            .filter(acc => {\n                const testExp = new RegExp(acc);\n                return testExp.test(file.type) || testExp.test(file.name);\n            }).length > 0\n    );\n}\n\n/**\n * Provides a set of file uploader validators that can be used by form controls.\n *\n * Currently `maxFileSize` and `fileType` are available.\n * @dynamic\n */\nexport class NxFileUploaderValidators {\n    /** The form control validator for the max file size. */\n    static maxFileSize<D>(max: number | undefined, file: File): ValidatorFn {\n        return (control: AbstractControl): ValidationErrors | null => {\n            if (!max || max > file.size) {\n                return null;\n            }\n            return { NxFileUploadMaxFileSize: { max, fileName: file.name, actual: file.size } };\n        };\n    }\n\n    /** The form control validator for the accepted file type. */\n    static fileType<D>(file: File, accept: string | undefined): ValidatorFn {\n        return (control: AbstractControl): ValidationErrors | null => {\n            if (isFileTypeValid(file, accept as string)) {\n                return null;\n            }\n            return { NxFileUploadFileTypeNotAccepted: { fileName: file.name } };\n        };\n    }\n\n    /** The form control validator for the max file number that is accepted. */\n    static maxFileNumber<D>(files: FileItem[], max: number | undefined): ValidatorFn {\n        return (control: AbstractControl): ValidationErrors | null => {\n            if (!files || !files.length || !max || files.length <= max) {\n                return null;\n            }\n            return { NxFileUploadMaxFileNumber: { max, actual: files.length } };\n        };\n    }\n}\n","import { ChangeDetectorRef, Directive, HostListener, Input, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n// This Directive solely purpose is to mark given ng-content and project it into the required destination.\n@Directive({\n    selector: '[nxFileUploadButton]',\n    host: {\n        '[attr.aria-describedby]': '_ariaDescribedby || null',\n        '[attr.disabled]': 'disabled || null',\n        '[class.nx-file-upload-button]': 'true',\n    },\n})\nexport class NxFileUploaderButtonDirective implements OnDestroy {\n    _clicked = new Subject();\n    _ariaDescribedby: string | undefined;\n    private _disabled = false;\n\n    constructor(private _cdr: ChangeDetectorRef) {}\n\n    /** Whether the file uploader is disabled */\n    @Input()\n    set disabled(value: boolean) {\n        this._disabled = value;\n        this._cdr.markForCheck();\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    /** @docs-private */\n    setDescribedByIds(ids: string[]): void {\n        this._ariaDescribedby = ids.join(' ');\n    }\n\n    /** @docs-private */\n    @HostListener('click') onClick() {\n        this._clicked.next();\n    }\n\n    ngOnDestroy(): void {\n        this._clicked.complete();\n    }\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, HostListener, Input, Output } from '@angular/core';\n\nfunction exists<T>(item: T | null | undefined): item is T {\n    return item != null;\n}\n\n@Component({\n    selector: 'nx-file-uploader-drop-zone',\n    templateUrl: './file-uploader-drop-zone.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styleUrls: ['./file-uploader-drop-zone.component.scss'],\n    host: {\n        '[class.is-active]': 'active',\n        '[class.is-disabled]': 'disabled',\n    },\n})\nexport class NxFileUploaderDropZoneComponent {\n    /** An event emitted when files were dropped. */\n    @Output() fileDropped: EventEmitter<File[]> = new EventEmitter<File[]>();\n\n    // flag when the drop zone is hovered\n    private _active = false;\n    private _disabled = false;\n\n    constructor(private _cdr: ChangeDetectorRef) {}\n\n    /** Whether the file uploader is disabled. */\n    @Input()\n    set disabled(value: boolean) {\n        this._disabled = value;\n        this._cdr.markForCheck();\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    /** @docs-private */\n    @HostListener('drop', ['$event'])\n    onDrop(event: DragEvent): void {\n        event.preventDefault();\n\n        if (this.disabled) {\n            if (!event.dataTransfer) {\n                return;\n            }\n            event.dataTransfer.dropEffect = 'no-drop' as any; // TODO wrog type: why do we do this? can we skip this?\n        } else {\n            if (!event.dataTransfer) {\n                this.fileDropped.emit([]); // TODO shall we still emit if no data was transfered?\n                return;\n            }\n            const { dataTransfer } = event;\n\n            if (dataTransfer.items) {\n                const files: File[] = Array.from(dataTransfer.items)\n                    .map(item => item.getAsFile())\n                    .filter(exists);\n                dataTransfer.items.clear();\n                this.fileDropped.emit(files);\n            } else {\n                const files: File[] = Array.from(dataTransfer.files);\n                dataTransfer.clearData();\n                this.fileDropped.emit(files);\n            }\n\n            this._active = false;\n        }\n    }\n\n    /** @docs-private */\n    @HostListener('dragover', ['$event'])\n    onDragOver(event: DragEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n\n        if (this.disabled) {\n            event.dataTransfer!.dropEffect = 'none';\n        } else {\n            event.dataTransfer!.dropEffect = 'copy';\n            this._active = true;\n            this._cdr.markForCheck();\n        }\n    }\n\n    /** @docs-private */\n    @HostListener('dragleave', ['$event'])\n    onDragLeave(event: DragEvent) {\n        this._active = false;\n        event.dataTransfer!.dropEffect = 'none';\n        this._cdr.markForCheck();\n    }\n\n    /** @docs-private */\n    @HostListener('dragend', ['$event'])\n    onDragEnd(event: DragEvent) {\n        event.dataTransfer!.dropEffect = 'none';\n    }\n\n    /** @docs-private */\n    @HostListener('dragstart', ['$event'])\n    onDragStart(event: DragEvent) {\n        if (this.disabled) {\n            event.dataTransfer!.dropEffect = 'none';\n        } else {\n            event.dataTransfer!.dropEffect = 'copy';\n        }\n    }\n\n    /** @docs-private */\n    get active(): boolean {\n        return this._active;\n    }\n}\n","<ng-content></ng-content>\n","import { Directive, Input } from '@angular/core';\n\nlet nextId = 0;\n// This Directive solely purpose is to mark given ng-content and project it into the required destination.\n@Directive({\n    selector: '[nxFileUploadHint]',\n    host: {\n        '[attr.id]': 'id',\n        '[class.nx-file-upload-hint]': 'true',\n    },\n})\nexport class NxFileUploaderHintDirective {\n    /** Sets the id of the file upload hint. */\n    @Input() id = `nx-formfield-hint-${nextId++}`;\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n/** File uploader data that requires internationalization. */\n@Injectable({ providedIn: 'root' })\nexport class NxFileUploaderIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    readonly changes: Subject<void> = new Subject<void>();\n\n    /** A label for the uploading state used in the queue. */\n    uploadingLabel = 'uploading';\n    /** Aria-label for the delete icon. */\n    deleteLabel = 'Delete';\n    /** Aria-label for the 'successfully-uploaded' icon. */\n    uploadedStateLabel = 'uploaded';\n}\n","import { Component, Input } from '@angular/core';\n\n/** Shows the file name. */\n@Component({\n    selector: 'nx-file-upload-name',\n    styleUrls: ['./file-uploader-name.component.scss'],\n    template: `{{ name }}`,\n})\nexport class NxFileUploaderItemName {\n    /** The filename.*/\n    @Input()\n    name!: string;\n}\n","import { Component, Input } from '@angular/core';\n\n/** Shows a file size in Megabyte (MB) or an alternative label while the file is uploading. */\n@Component({\n    selector: 'nx-file-upload-size',\n    styleUrls: ['./file-uploader-size.component.scss'],\n    template: `\n        <span *ngIf=\"isUploading; else uploaded\">{{ uploadingLabel }}</span>\n        <ng-template #uploaded>\n            <span>{{ size / 1024 / 1024 | number: '.2' }} MB</span>\n        </ng-template>\n    `,\n})\nexport class NxFileUploaderItemSize {\n    /** The size of the file in bytes.*/\n    @Input()\n    size!: number;\n\n    /** Whether the file is uploading at the moment. Default: false.*/\n    @Input()\n    isUploading!: boolean;\n\n    /** The label that is shown while uploading the file.*/\n    @Input()\n    uploadingLabel!: string;\n}\n","import { Component, Input } from '@angular/core';\n\n/** Shows the current uploading status of a file. */\n@Component({\n    selector: 'nx-file-upload-status',\n    styleUrls: ['./file-uploader-status.component.scss'],\n    template: `\n        <nx-spinner *ngIf=\"isUploading\" nxSize=\"medium\"></nx-spinner>\n        <nx-icon name=\"check-circle\" *ngIf=\"isUploaded\" size=\"s\" [attr.aria-label]=\"uploadedLabel || null\"> </nx-icon>\n    `,\n})\nexport class NxFileUploaderItemStatus {\n    /** Whether the file is uploading at the moment. If this is true, a spinner is shown. Default: false.*/\n    @Input()\n    isUploading!: boolean;\n\n    /** Whether the file was uploaded. If this is true, a `check-circle` icon is shown. Default: false.*/\n    @Input()\n    isUploaded!: boolean;\n\n    /** The label that is used once the file has been uploaded (used by screen readers).*/\n    @Input()\n    uploadedLabel!: string;\n}\n","import { Component, Input } from '@angular/core';\n\n/** Shows a delete button. */\n@Component({\n    selector: 'nx-file-upload-delete',\n    template: `\n        <button nxIconButton=\"tertiary small-medium\" [attr.aria-label]=\"deleteLabel || null\" type=\"button\" [attr.disabled]=\"isUploading || null\">\n            <nx-icon name=\"trash-o\" [attr.aria-hidden]=\"true\"></nx-icon>\n        </button>\n    `,\n    styleUrls: ['file-uploader-delete.component.scss'],\n})\nexport class NxFileUploaderItemDelete {\n    /** Whether the file is uploading at the moment. If true, the button is disabled. Default: false.*/\n    @Input()\n    isUploading!: boolean;\n\n    /** The label that is used for the delete button (used by screen readers). */\n    @Input()\n    deleteLabel!: string;\n}\n","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { BooleanInput, coerceBooleanProperty, coerceNumberProperty, NumberInput } from '@angular/cdk/coercion';\nimport { DOWN_ARROW, UP_ARROW } from '@angular/cdk/keycodes';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Self,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, FormGroupDirective, NgControl, NgForm, ValidatorFn } from '@angular/forms';\nimport { NxErrorComponent, NxLabelComponent } from '@aposin/ng-aquila/base';\nimport { ErrorStateMatcher } from '@aposin/ng-aquila/utils';\nimport { Subject, Subscription } from 'rxjs';\nimport { startWith, takeUntil } from 'rxjs/operators';\n\nimport { NxFileUploader } from './file-uploader';\nimport { FileItem } from './file-uploader.model';\nimport { isFileTypeValid, NxFileUploaderValidators } from './file-uploader.validations';\nimport { NxFileUploaderButtonDirective } from './file-uploader-button.directive';\nimport { NxFileUploaderDropZoneComponent } from './file-uploader-drop-zone.component';\nimport { NxFileUploaderHintDirective } from './file-uploader-hint.directive';\nimport { NxFileUploaderIntl } from './file-uploader-intl';\n\nlet nextId = 0;\n\n@Component({\n    selector: 'nx-file-uploader',\n    templateUrl: './file-uploader.component.html',\n    exportAs: 'NxFileUploaderComponent',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styleUrls: ['./file-uploader.component.scss'],\n    host: {\n        '[attr.aria-invalid]': 'errorState',\n        '[class.has-error]': 'errorState',\n    },\n})\nexport class NxFileUploaderComponent implements ControlValueAccessor, AfterContentInit, OnChanges, OnDestroy, DoCheck, OnInit, AfterViewInit {\n    /** @docs-private */\n    @ContentChild(NxFileUploaderButtonDirective, { static: false }) button?: NxFileUploaderButtonDirective;\n\n    /** @docs-private */\n    @ContentChild(NxFileUploaderDropZoneComponent, { static: true }) _dropZone!: NxFileUploaderDropZoneComponent;\n\n    /** @docs-private */\n    @ViewChild('nativeInputFile', { static: false }) nativeInputFile!: ElementRef;\n\n    /** @docs-private */\n    @ContentChild(NxLabelComponent, { static: false }) _label?: NxLabelComponent;\n\n    /** @docs-private */\n    @ContentChildren(NxFileUploaderHintDirective) _hintChildren!: QueryList<NxFileUploaderHintDirective>;\n\n    /** @docs-private */\n    @ContentChildren(NxErrorComponent) _errorList!: QueryList<NxErrorComponent>;\n\n    @ViewChildren('fileRowElement') _fileRowElements!: QueryList<ElementRef>;\n\n    /** Preserves the current value of the _fileRowElements ViewChildren in case _fileRowElements changes. */\n    private _fileRowElementsPrevious!: QueryList<ElementRef>;\n\n    private _filesSubscriptions: Subscription[] = [];\n\n    /** An event emitted when queue is changed.\n     *\n     * Emits the changed array of FileItems.\n     * @docs-private */\n    @Output() valueChange = new EventEmitter<FileItem[]>();\n\n    /** An event emitted when a file is deleted from the queue\n     *\n     * Emits the deleted FileItem.\n     */\n    @Output() fileDeleted = new EventEmitter<FileItem>();\n\n    /**\n     * An event emitted when one or more files were added to the file input.\n     *\n     * Emits the selected FileItem | FileItem[]\n     */\n    @Output() filesSelected = new EventEmitter<FileItem[]>();\n\n    private _id = `nx-file-uploader-${nextId++}`;\n    private _name!: string;\n    private _value!: FileItem[] | null;\n    private _maxFileSize = 0;\n    private _required = false;\n    private _disabled = false;\n    private _multiple = false;\n    private _accept!: string;\n    private _controlValidators: ValidatorFn | null = null;\n    private _uploader!: NxFileUploader;\n    private _maxFileNumber: number | null = null;\n    _inputId = `${this.id}-input`;\n    _labelId = `${this.id}-label`;\n    _itemTemplate!: TemplateRef<any>;\n    _templateContext;\n\n    /** @docs-private */\n    errorState = false;\n\n    /** @docs-private */\n    stateChanges = new Subject<void>();\n\n    /** @docs-private */\n    validatorFnArray: any[] = [];\n\n    /** Sets the id of the file uploader. */\n    @Input()\n    set id(value: string) {\n        this._id = value;\n        this._cdr.markForCheck();\n    }\n    get id(): string {\n        return this._id;\n    }\n\n    /** Whether the file uploader is required. */\n    @Input()\n    set required(value: BooleanInput) {\n        this._required = coerceBooleanProperty(value);\n    }\n    get required(): boolean {\n        return this._required;\n    }\n\n    /** The value of the file upload. */\n    @Input()\n    set value(value: FileItem[] | undefined) {\n        this.writeValue(value as FileItem[]);\n    }\n    get value(): FileItem[] | undefined {\n        return this._value as FileItem[];\n    }\n\n    /** Name that is used for accessibility. */\n    @Input()\n    set name(value: string) {\n        this._name = value;\n    }\n    get name(): string {\n        return this._name;\n    }\n\n    /** Whether the file uploader is disabled. */\n    @Input()\n    set disabled(value: BooleanInput) {\n        this._disabled = coerceBooleanProperty(value);\n        if (this.button) {\n            this.button.disabled = this._disabled;\n        }\n\n        if (this._dropZone) {\n            this._dropZone.disabled = this._disabled;\n        }\n\n        this._cdr.markForCheck();\n    }\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    /** Whether the file uploader accepts multiple files to be added. */\n    @Input()\n    set multiple(value: BooleanInput) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    /** The accepted file types */\n    @Input()\n    set accept(value: string) {\n        this._accept = value;\n    }\n    get accept(): string {\n        return this._accept;\n    }\n\n    /** The max file size in bytes used for validation */\n    @Input()\n    set maxFileSize(value: NumberInput) {\n        this._maxFileSize = coerceNumberProperty(value);\n    }\n    get maxFileSize(): number {\n        return this._maxFileSize;\n    }\n\n    /** Sets the file uploader for the component. */\n    @Input()\n    set uploader(newUploader: NxFileUploader) {\n        if (this._uploader !== newUploader) {\n            this._uploader = newUploader;\n        }\n    }\n    get uploader(): NxFileUploader {\n        return this._uploader;\n    }\n\n    /** The max number of files that is accepted. */\n    @Input()\n    set maxFileNumber(value: NumberInput) {\n        this._maxFileNumber = coerceNumberProperty(value);\n    }\n    get maxFileNumber(): number {\n        return this._maxFileNumber as number;\n    }\n\n    /** Sets the template for the file items. */\n    @Input()\n    set itemTemplate(template: TemplateRef<any>) {\n        if (this._itemTemplate !== template) {\n            this._itemTemplate = template;\n        }\n    }\n    get itemTemplate(): TemplateRef<any> {\n        return this._itemTemplate;\n    }\n\n    private readonly _destroyed = new Subject<void>();\n\n    constructor(\n        private _cdr: ChangeDetectorRef,\n        private _errorStateMatcher: ErrorStateMatcher,\n        public _intl: NxFileUploaderIntl,\n        @Optional() private _parentForm: NgForm | null,\n        @Optional() private _parentFormGroup: FormGroupDirective | null,\n        /** @docs-private */ @Optional() @Self() public ngControl: NgControl | null,\n        private _focusMonitor: FocusMonitor,\n    ) {\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this._templateContext = this;\n    }\n\n    ngOnInit(): void {\n        if (this.ngControl?.control) {\n            // we need to save the control validators.\n            this._controlValidators = this.ngControl.control.validator;\n        }\n\n        this._intl.changes.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this._cdr.markForCheck();\n            this.stateChanges.next();\n        });\n\n        this._resetValidators();\n    }\n\n    ngAfterViewInit() {\n        this._fileRowElements.forEach(row => this._focusMonitor.monitor(row));\n        this._fileRowElementsPrevious = this._fileRowElements;\n        this._fileRowElements.changes.pipe(takeUntil(this._destroyed)).subscribe(rowElements => {\n            this._fileRowElementsPrevious.forEach(row => this._focusMonitor.stopMonitoring(row));\n            this._fileRowElementsPrevious = rowElements;\n            rowElements.forEach((row: ElementRef) => this._focusMonitor.monitor(row));\n        });\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.stateChanges.complete();\n        this._filesSubscriptions.forEach((subscription: Subscription) => subscription.unsubscribe());\n        this._fileRowElements.forEach(row => this._focusMonitor.stopMonitoring(row));\n    }\n\n    /** @docs-private */\n    updateErrorState() {\n        const oldState = this.errorState;\n        const parent = this._parentFormGroup || this._parentForm;\n        const control = this.ngControl ? (this.ngControl.control as FormControl) : null;\n        const newState = this._errorStateMatcher.isErrorState(control, parent);\n\n        if (newState !== oldState) {\n            this.errorState = newState;\n            this.stateChanges.next();\n        }\n    }\n\n    /** @docs-private */\n    onChangeCallback = (_: any) => {};\n\n    /** @docs-private */\n    onTouchedCallback = () => {};\n\n    registerOnChange(callback: any): void {\n        this.onChangeCallback = callback;\n    }\n\n    registerOnTouched(callback: any): void {\n        this.onTouchedCallback = callback;\n    }\n\n    writeValue(value: FileItem[]) {\n        if (this._value !== value) {\n            if (value) {\n                if (this._filesSubscriptions) {\n                    this._filesSubscriptions.forEach((fileSubscription: Subscription) => fileSubscription.unsubscribe());\n                    this._filesSubscriptions = [];\n                }\n            }\n\n            this._resetValidators();\n            this._value = value;\n            this._subscribeToFileChanges();\n        }\n    }\n\n    _resetValidators(clear = false) {\n        if (this.ngControl?.control) {\n            if (clear) {\n                this.ngControl.control.clearValidators();\n            }\n\n            const validators = this._controlValidators\n                ? [this._controlValidators, NxFileUploaderValidators.maxFileNumber(this.value as FileItem[], this.maxFileNumber), ...this.validatorFnArray]\n                : [NxFileUploaderValidators.maxFileNumber(this.value as FileItem[], this.maxFileNumber), ...this.validatorFnArray];\n\n            this.ngControl.control.setValidators(validators);\n            this.ngControl.control.updateValueAndValidity();\n        }\n    }\n\n    ngAfterContentInit() {\n        if (!this.button) {\n            return;\n        }\n        this.button._clicked.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this.nativeInputFile.nativeElement.click();\n        });\n\n        this.button.disabled = this.disabled;\n\n        if (this._dropZone) {\n            this._dropZone.fileDropped.pipe(takeUntil(this._destroyed)).subscribe(files => {\n                this._addFilesToQueue(files);\n            });\n            this._dropZone.disabled = this.disabled;\n        }\n\n        if (this._label) {\n            this._label.for = this._inputId;\n            this._label.id = this._labelId;\n        }\n\n        this.stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this._syncDescribedByIds();\n            this._cdr.markForCheck();\n        });\n\n        // Re-validate when the number of hints changes.\n        this._hintChildren.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n            this._syncDescribedByIds();\n            this._cdr.markForCheck();\n        });\n\n        // Re-validate when the number of hints changes.\n        this._errorList.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n            this._syncDescribedByIds();\n            this._cdr.markForCheck();\n        });\n    }\n\n    _addFilesToQueue(files: File[]) {\n        if (!this.multiple) {\n            this.value = [];\n        }\n\n        this._setFileListFromValue(files);\n        this._resetValidators(true);\n\n        this.onChangeCallback(this.value);\n        this.onTouchedCallback();\n        this.valueChange.emit(this.value);\n        this.filesSelected.emit(this.value);\n    }\n\n    _setFileListFromValue(files: File[]) {\n        // we need to set max file size errors to false\n        this.validatorFnArray = [];\n        if (files === null) {\n            this.value = undefined;\n        } else {\n            files.forEach((file: File) => {\n                if (this.isValidOnSelection(file)) {\n                    const tmp = new FileItem(file);\n                    if (this.value) {\n                        this.value.push(tmp);\n                    } else {\n                        this.value = [tmp];\n                    }\n                    this._cdr.markForCheck();\n                }\n            });\n            this._subscribeToFileChanges();\n        }\n    }\n\n    /** Removes a file from the value list of the file upload input. */\n    removeFile(file: any) {\n        this.value = this.value!.filter(item => file !== item);\n\n        if (this._filesSubscriptions) {\n            this._filesSubscriptions.forEach((fileSubscription: Subscription) => fileSubscription.unsubscribe());\n            this._filesSubscriptions = [];\n        }\n\n        this._subscribeToFileChanges();\n\n        this.validatorFnArray = []; // bugfix: kick invalid type error on file remove\n        this._resetValidators(true);\n        this._cdr.markForCheck();\n\n        this.valueChange.emit(this.value);\n        this.fileDeleted.emit(file);\n        this.onTouchedCallback();\n        this.onChangeCallback(this.value);\n\n        // resets the value of the file input, so that if a file is deleted and added again. otherwise there is no change detected\n        this.nativeInputFile.nativeElement.value = '';\n    }\n\n    /** Uploads the files via the defined uploader. */\n    uploadFiles() {\n        if (!this.uploader) {\n            console.warn('No uploader found. Please define a NxFileUpload to use the uploading mechanism.');\n            return;\n        }\n\n        if (this.uploader) {\n            this.uploader.uploadFiles(this.value as FileItem[]);\n        }\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n\n    private isValidOnSelection(file: File) {\n        let isValid = false;\n\n        this.validatorFnArray.push(NxFileUploaderValidators.maxFileSize(this.maxFileSize, file));\n        this.validatorFnArray.push(NxFileUploaderValidators.fileType(file, this.accept));\n\n        if ((!this.maxFileSize || file.size <= this.maxFileSize) && isFileTypeValid(file, this.accept)) {\n            isValid = true;\n        }\n\n        return isValid;\n    }\n\n    /**\n     * @docs-private\n     * The label for the uploading state used in the queue.\n     */\n    get uploadingLabel(): string {\n        return this._intl.uploadingLabel;\n    }\n\n    /**\n     * @docs-private\n     * The label for the uploading state used in the queue.\n     */\n    get deleteLabel(): string {\n        return this._intl.deleteLabel;\n    }\n\n    /**\n     * @docs-private\n     * The label for the uploading state used in the queue.\n     */\n    get uploadedLabel(): string {\n        return this._intl.uploadedStateLabel;\n    }\n\n    /**\n     * Sets the list of element IDs that describe the child control. This allows the trigger element (button) to update\n     * its `aria-describedby` attribute accordingly.\n     */\n    private _syncDescribedByIds() {\n        let ids: string[] = [];\n        ids = this._hintChildren.map(hint => hint.id);\n        ids = this._label ? [this._label.id, ...ids] : ids;\n        ids = [...this._errorList.map(error => error.id), ...ids];\n        this.button?.setDescribedByIds(ids);\n    }\n\n    _handleKeydownListRow(event: KeyboardEvent) {\n        if (event.keyCode === DOWN_ARROW) {\n            const nextFileItemRow = (event.target as HTMLElement).nextSibling as HTMLElement;\n            if (nextFileItemRow?.classList?.contains('nx-file-uploader--file-row')) {\n                event.preventDefault();\n                nextFileItemRow.focus();\n            }\n        } else if (event.keyCode === UP_ARROW) {\n            const previousFileItemRow = (event.target as HTMLElement).previousSibling as HTMLElement;\n            if (previousFileItemRow?.classList?.contains('nx-file-uploader--file-row')) {\n                event.preventDefault();\n                previousFileItemRow.focus();\n            }\n        }\n    }\n\n    /**\n     * Triggered when the input[type=file] is changed\n     */\n    _onFileChange(event: any) {\n        if (this.disabled) {\n            return;\n        }\n\n        const target = event.target as HTMLInputElement;\n        const files: File[] = Array.from(target.files ?? []);\n\n        this._addFilesToQueue(files);\n        this.stateChanges.next();\n        this._cdr.markForCheck();\n        this.nativeInputFile.nativeElement.value = '';\n    }\n\n    /** Listens to changes in each file. */\n    _subscribeToFileChanges() {\n        if (this.value?.length) {\n            let subscription;\n            this.value.map(file => {\n                subscription = file.onChange.subscribe(() => {\n                    this._cdr.markForCheck();\n                });\n                this._filesSubscriptions.push(subscription);\n            });\n        }\n    }\n}\n","<ng-content select=\"nx-label\"></ng-content>\n<ng-content select=\"[nxFileUploadHint]\"></ng-content>\n<ng-content select=\"nx-file-uploader-drop-zone\"></ng-content>\n<ng-content select=\"[nxFileUploadButton]\"></ng-content>\n<input\n    #nativeInputFile\n    type=\"file\"\n    [attr.multiple]=\"multiple || null\"\n    [attr.disabled]=\"disabled || null\"\n    [attr.accept]=\"accept\"\n    (change)=\"_onFileChange($event)\"\n    [id]=\"_inputId\"\n/>\n<ng-container *ngIf=\"value\">\n    <div class=\"nx-file-uploader--file-list nx-margin-bottom-m\" role=\"list\" [attr.aria-labelledby]=\"_labelId\">\n        <div\n            #fileRowElement\n            class=\"nx-file-uploader--file-row\"\n            [class.nx-file-uploader--file-state-uploading]=\"file.isUploading\"\n            [class.nx-file-uploader--default-template]=\"!_itemTemplate\"\n            *ngFor=\"let file of value\"\n            role=\"listitem\"\n            (keydown)=\"_handleKeydownListRow($event)\"\n        >\n            <ng-container\n                *ngTemplateOutlet=\"_itemTemplate ? _itemTemplate : defaultFileRow; context: { templateContext: _templateContext, file: file }\"\n            ></ng-container>\n        </div>\n    </div>\n</ng-container>\n\n<ng-content select=\"nx-error\" *ngIf=\"errorState\"></ng-content>\n\n<ng-template #defaultFileRow let-templateContext=\"templateContext\" let-file=\"file\">\n    <nx-file-upload-name [name]=\"file?.name\"></nx-file-upload-name>\n\n    <nx-file-upload-size [size]=\"file?.size\" [isUploading]=\"file.isUploading\" [uploadingLabel]=\"templateContext.uploadingLabel\"></nx-file-upload-size>\n\n    <div class=\"nx-file-uploader--file-row-actions\">\n        <nx-file-upload-status\n            [isUploading]=\"file.isUploading\"\n            [isUploaded]=\"file.isUploaded\"\n            [uploadedLabel]=\"templateContext.uploadedLabel\"\n        ></nx-file-upload-status>\n\n        <nx-file-upload-delete [deleteLabel]=\"templateContext.deleteLabel\" [isUploading]=\"file.isUploading\" (click)=\"removeFile(file)\"></nx-file-upload-delete>\n    </div>\n</ng-template>\n","import { Directive, HostListener, Input } from '@angular/core';\n\nimport { NxFileUploaderComponent } from './file-uploader.component';\n\n// This Directive solely purpose is to mark given ng-content and project it into the required destination.\n@Directive({\n    selector: '[nxFileUploadTriggerFor]',\n    exportAs: 'nxFileUploadTrigger',\n})\nexport class NxFileUploaderTriggerDirective {\n    _fileUpload!: NxFileUploaderComponent;\n\n    /** References the file upload component instance that the trigger is associated with. */\n    @Input('nxFileUploadTriggerFor')\n    set fileUpload(value: NxFileUploaderComponent) {\n        if (this._fileUpload !== value) {\n            this._fileUpload = value;\n        }\n    }\n    get fileUpload(): NxFileUploaderComponent {\n        return this._fileUpload;\n    }\n\n    @HostListener('click')\n    _onClick() {\n        this._fileUpload.uploadFiles();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxErrorModule, NxLabelModule } from '@aposin/ng-aquila/base';\nimport { NxButtonModule } from '@aposin/ng-aquila/button';\nimport { NxIconModule } from '@aposin/ng-aquila/icon';\nimport { NxSpinnerModule } from '@aposin/ng-aquila/spinner';\n\nimport { NxFileUploaderComponent } from './file-uploader.component';\nimport { NxFileUploaderButtonDirective } from './file-uploader-button.directive';\nimport { NxFileUploaderDropZoneComponent } from './file-uploader-drop-zone.component';\nimport { NxFileUploaderHintDirective } from './file-uploader-hint.directive';\nimport { NxFileUploaderIntl } from './file-uploader-intl';\nimport { NxFileUploaderTriggerDirective } from './file-uploader-trigger.directive';\nimport { NxFileUploaderItemDelete } from './item/file-uploader-delete.component';\nimport { NxFileUploaderItemName } from './item/file-uploader-name.component';\nimport { NxFileUploaderItemSize } from './item/file-uploader-size.component';\nimport { NxFileUploaderItemStatus } from './item/file-uploader-status.component';\n\n@NgModule({\n    imports: [CommonModule, NxIconModule, NxButtonModule, NxSpinnerModule],\n    declarations: [\n        NxFileUploaderComponent,\n        NxFileUploaderButtonDirective,\n        NxFileUploaderHintDirective,\n        NxFileUploaderDropZoneComponent,\n        NxFileUploaderTriggerDirective,\n        NxFileUploaderItemName,\n        NxFileUploaderItemSize,\n        NxFileUploaderItemStatus,\n        NxFileUploaderItemDelete,\n    ],\n    exports: [\n        NxFileUploaderComponent,\n        NxFileUploaderButtonDirective,\n        NxFileUploaderHintDirective,\n        NxFileUploaderDropZoneComponent,\n        NxErrorModule,\n        NxLabelModule,\n        NxFileUploaderTriggerDirective,\n        NxFileUploaderItemName,\n        NxFileUploaderItemSize,\n        NxFileUploaderItemStatus,\n        NxFileUploaderItemDelete,\n    ],\n    providers: [NxFileUploaderIntl],\n})\nexport class NxFileUploaderModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["nextId","i1","i3","i2.NxFileUploaderIntl","i5.NxFileUploaderItemName","i6.NxFileUploaderItemSize","i7.NxFileUploaderItemStatus","i8.NxFileUploaderItemDelete"],"mappings":"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"}