import { coerceBooleanProperty } from '@angular/cdk/coercion';
import * as i0 from '@angular/core';
import { Injectable, InjectionToken, Component, ChangeDetectionStrategy, Optional, Inject, Input, NgModule } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i1 from '@aposin/ng-aquila/icon';
import { NxIconModule } from '@aposin/ng-aquila/icon';
import * as i2 from '@aposin/ng-aquila/message';
import { NxMessageModule } from '@aposin/ng-aquila/message';
import * as i3 from '@angular/common';
import { CommonModule } from '@angular/common';

let nextId$1 = 0;
/**
 * Represents the default options for the error notification that can be configured
 * using the `ERROR_DEFAULT_OPTIONS` injection token.
 */
class ErrorDefaultOptions {
}
ErrorDefaultOptions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: ErrorDefaultOptions, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
ErrorDefaultOptions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: ErrorDefaultOptions });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: ErrorDefaultOptions, decorators: [{
            type: Injectable
        }] });
const ERROR_DEFAULT_OPTIONS = new InjectionToken('ERROR_DEFAULT_OPTIONS');
class NxErrorComponent {
    constructor(_cdr, _defaultOptions) {
        var _a, _b;
        this._cdr = _cdr;
        this._defaultOptions = _defaultOptions;
        this._showIcon = true;
        this._id = `nx-error-${nextId$1++}`;
        this._destroyed = new Subject();
        (_b = (_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.changes) === null || _b === void 0 ? void 0 : _b.pipe(takeUntil(this._destroyed)).subscribe(() => {
            this._cdr.markForCheck();
        });
    }
    /** Whether an icon should be displayed. Only has an effect for type 'text' */
    set showIcon(value) {
        this._showIcon = coerceBooleanProperty(value);
        this._cdr.markForCheck();
    }
    get showIcon() {
        return this._showIcon;
    }
    /**
     * Id of the nx-error.
     *
     * If not set, the selectable card gets an incremented value by default.
     */
    set id(value) {
        if (value && value !== this._id) {
            this._id = value;
            this._cdr.markForCheck();
        }
    }
    get id() {
        return this._id;
    }
    /**
     * Whether the error should have message or text styling.
     *
     * Default is 'message'.
     */
    set appearance(value) {
        if (value !== this.appearance) {
            this._appearance = value;
            this._cdr.markForCheck();
        }
    }
    get appearance() {
        var _a;
        return this._appearance || ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.appearance) || 'message';
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
}
NxErrorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxErrorComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: ERROR_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NxErrorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxErrorComponent, selector: "nx-error", inputs: { showIcon: "showIcon", id: "id", appearance: "appearance" }, host: { properties: { "attr.role": "\"alert\"", "attr.id": "id", "class.nx-error--message": "appearance == \"message\"" } }, ngImport: i0, template: "<!-- b2b (expert) error notification -->\n<ng-container *ngIf=\"appearance === 'text'\">\n    <nx-icon *ngIf=\"showIcon\" class=\"nx-error__icon\" [name]=\"'exclamation-triangle'\"> </nx-icon>\n    <div class=\"nx-error__content-wrapper\">\n        <div class=\"nx-error__content\">\n            <ng-container [ngTemplateOutlet]=\"errorContent\"></ng-container>\n        </div>\n    </div>\n</ng-container>\n\n<!-- b2c error notification -->\n<nx-message *ngIf=\"appearance === 'message'\" nxContext=\"error\">\n    <ng-container [ngTemplateOutlet]=\"errorContent\"></ng-container>\n</nx-message>\n\n<ng-template #errorContent>\n    <ng-content></ng-content>\n</ng-template>\n", styles: [":host{font-size:var(--base-error-simple-font-size);line-height:var(--base-error-simple-line-height);font-weight:var(--base-error-simple-font-weight);letter-spacing:var(--base-error-simple-letter-spacing);color:var(--base-error-color);width:100%;display:flex;text-align:left}:host .nx-error__icon{font-size:var(--base-error-simple-icon-size);line-height:var(--base-error-simple-line-height);margin-right:8px}@media screen and (-ms-high-contrast: active){:host .nx-error__icon{color:windowText}}:host .nx-error__content-wrapper{max-width:100%}[dir=rtl] :host{text-align:right}[dir=rtl] :host .nx-error__icon{margin-right:0;margin-right:initial;margin-left:8px}\n"], components: [{ type: i1.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }, { type: i2.NxMessageComponent, selector: "nx-message", inputs: ["nxContext", "closable", "closeButtonLabel"], outputs: ["close"], exportAs: ["nxMessage"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxErrorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-error', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[attr.role]': '"alert"',
                        '[attr.id]': 'id',
                        '[class.nx-error--message]': 'appearance == "message"',
                    }, template: "<!-- b2b (expert) error notification -->\n<ng-container *ngIf=\"appearance === 'text'\">\n    <nx-icon *ngIf=\"showIcon\" class=\"nx-error__icon\" [name]=\"'exclamation-triangle'\"> </nx-icon>\n    <div class=\"nx-error__content-wrapper\">\n        <div class=\"nx-error__content\">\n            <ng-container [ngTemplateOutlet]=\"errorContent\"></ng-container>\n        </div>\n    </div>\n</ng-container>\n\n<!-- b2c error notification -->\n<nx-message *ngIf=\"appearance === 'message'\" nxContext=\"error\">\n    <ng-container [ngTemplateOutlet]=\"errorContent\"></ng-container>\n</nx-message>\n\n<ng-template #errorContent>\n    <ng-content></ng-content>\n</ng-template>\n", styles: [":host{font-size:var(--base-error-simple-font-size);line-height:var(--base-error-simple-line-height);font-weight:var(--base-error-simple-font-weight);letter-spacing:var(--base-error-simple-letter-spacing);color:var(--base-error-color);width:100%;display:flex;text-align:left}:host .nx-error__icon{font-size:var(--base-error-simple-icon-size);line-height:var(--base-error-simple-line-height);margin-right:8px}@media screen and (-ms-high-contrast: active){:host .nx-error__icon{color:windowText}}:host .nx-error__content-wrapper{max-width:100%}[dir=rtl] :host{text-align:right}[dir=rtl] :host .nx-error__icon{margin-right:0;margin-right:initial;margin-left:8px}\n"] }]
        }], ctorParameters: function () {
        return [{ type: i0.ChangeDetectorRef }, { type: ErrorDefaultOptions, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [ERROR_DEFAULT_OPTIONS]
                    }] }];
    }, propDecorators: { showIcon: [{
                type: Input
            }], id: [{
                type: Input
            }], appearance: [{
                type: Input
            }] } });

class NxErrorModule {
}
NxErrorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxErrorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NxErrorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxErrorModule, declarations: [NxErrorComponent], imports: [CommonModule, NxIconModule, NxMessageModule], exports: [NxErrorComponent] });
NxErrorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxErrorModule, imports: [[CommonModule, NxIconModule, NxMessageModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxErrorModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NxIconModule, NxMessageModule],
                    declarations: [NxErrorComponent],
                    exports: [NxErrorComponent],
                }]
        }] });

let nextId = 0;
const DEFAULT_SIZE = 'large';
const LABEL_DEFAULT_OPTIONS = new InjectionToken('LABEL_DEFAULT_OPTIONS');
class NxLabelComponent {
    constructor(_defaultOptions, _cdr) {
        this._defaultOptions = _defaultOptions;
        this._cdr = _cdr;
        this._stateChanges = new Subject();
        this._disabled = false;
        this._negative = false;
        this._for = null;
        this._id = `nx-label-${nextId++}`;
    }
    /** Sets the label to disabled */
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        this._stateChanges.next();
    }
    get disabled() {
        return this._disabled;
    }
    /** Sets the label to disabled */
    set negative(value) {
        this._negative = coerceBooleanProperty(value);
        this._stateChanges.next();
    }
    get negative() {
        return this._negative;
    }
    /** Sets the Id of the label */
    set id(value) {
        this._id = value;
    }
    get id() {
        return this._id;
    }
    /**
     * **Expert option**
     * Sets the appearance of the label */
    set size(value) {
        this._size = value;
        this._stateChanges.next();
    }
    get size() {
        var _a;
        return this._size || ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.size) || DEFAULT_SIZE;
    }
    /**
     * Sets the html `for` attribute on the label.
     */
    set for(value) {
        this._for = value;
        this._cdr.markForCheck();
        this._stateChanges.next();
    }
    get for() {
        return this._for;
    }
}
NxLabelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxLabelComponent, deps: [{ token: LABEL_DEFAULT_OPTIONS, optional: true }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NxLabelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxLabelComponent, selector: "nx-label", inputs: { disabled: "disabled", negative: "negative", id: "id", size: "size", for: "for" }, host: { properties: { "attr.disabled": "disabled", "class.nx-label--negative": "negative", "class.nx-label--large": "size === \"large\"", "class.nx-label--small": "size === \"small\"" } }, ngImport: i0, template: "<label class=\"nx-label__content\" [for]=\"for\" [id]=\"id\">\n    <ng-content></ng-content>\n</label>\n", styles: [":host{display:block;color:var(--text-01)}:host.nx-label--small{font-size:var(--base-label-small-font-size);line-height:var(--base-label-small-line-height);font-weight:var(--base-label-small-font-weight);letter-spacing:var(--base-label-small-letter-spacing)}:host.nx-label--large{font-size:var(--base-label-large-font-size);line-height:var(--base-label-large-line-height);font-weight:var(--base-label-large-font-weight);letter-spacing:var(--base-label-large-letter-spacing)}:host[disabled=true] label{cursor:not-allowed}:host.nx-label--negative{color:var(--negative)}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxLabelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-label', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[attr.disabled]': 'disabled',
                        '[class.nx-label--negative]': 'negative',
                        '[class.nx-label--large]': 'size === "large"',
                        '[class.nx-label--small]': 'size === "small"',
                    }, template: "<label class=\"nx-label__content\" [for]=\"for\" [id]=\"id\">\n    <ng-content></ng-content>\n</label>\n", styles: [":host{display:block;color:var(--text-01)}:host.nx-label--small{font-size:var(--base-label-small-font-size);line-height:var(--base-label-small-line-height);font-weight:var(--base-label-small-font-weight);letter-spacing:var(--base-label-small-letter-spacing)}:host.nx-label--large{font-size:var(--base-label-large-font-size);line-height:var(--base-label-large-line-height);font-weight:var(--base-label-large-font-weight);letter-spacing:var(--base-label-large-letter-spacing)}:host[disabled=true] label{cursor:not-allowed}:host.nx-label--negative{color:var(--negative)}\n"] }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [LABEL_DEFAULT_OPTIONS]
                    }] }, { type: i0.ChangeDetectorRef }];
    }, propDecorators: { disabled: [{
                type: Input
            }], negative: [{
                type: Input
            }], id: [{
                type: Input
            }], size: [{
                type: Input
            }], for: [{
                type: Input
            }] } });

class NxLabelModule {
}
NxLabelModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxLabelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NxLabelModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxLabelModule, declarations: [NxLabelComponent], imports: [CommonModule], exports: [NxLabelComponent] });
NxLabelModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxLabelModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxLabelModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [NxLabelComponent],
                    exports: [NxLabelComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ERROR_DEFAULT_OPTIONS, ErrorDefaultOptions, LABEL_DEFAULT_OPTIONS, NxErrorComponent, NxErrorModule, NxLabelComponent, NxLabelModule };
//# sourceMappingURL=aposin-ng-aquila-base.mjs.map
