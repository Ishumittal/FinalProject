import { coerceBooleanProperty } from '@angular/cdk/coercion';
import * as i0 from '@angular/core';
import { Directive, Input, ViewChild, QueryList, Component, ChangeDetectionStrategy, Optional, Self, ContentChildren, forwardRef, Inject, HostListener, NgModule } from '@angular/core';
import * as i2 from '@aposin/ng-aquila/utils';
import { removeClasses, mapClassNames } from '@aposin/ng-aquila/utils';
import { Subject, merge } from 'rxjs';
import { startWith, switchMap, takeUntil } from 'rxjs/operators';
import * as i1 from '@angular/forms';
import { FormsModule } from '@angular/forms';
import * as i3 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i3$1 from '@aposin/ng-aquila/icon';
import { NxIconModule } from '@aposin/ng-aquila/icon';
import * as i1$1 from '@angular/cdk/collections';
import * as i2$1 from '@angular/cdk/a11y';

let nextId$1 = 0;
/** @docs-private */
class NxRadioToggleButtonBaseComponent {
    constructor(/** @docs-private */ renderer) {
        this.renderer = renderer;
        /** @docs-private */
        this.toggleButtonId = 'nx-radio-toggle-button-' + nextId$1++;
    }
    /** @docs-private */
    triggerInputClick(event) {
        event.stopPropagation();
        this.toggleInput.nativeElement.click();
    }
    /** @docs-private */
    setFirstButton() {
        this.renderer.addClass(this.labelContainer.nativeElement, 'nx-radio-toggle__label-container--first');
    }
    /** @docs-private */
    setLastButton() {
        this.renderer.addClass(this.labelContainer.nativeElement, 'nx-radio-toggle__label-container--last');
    }
    /** @docs-private */
    resetClasses() {
        removeClasses(this.renderer, this.labelContainer, 'nx-radio-toggle__label-container--first nx-radio-toggle__label-container--last');
    }
}
NxRadioToggleButtonBaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxRadioToggleButtonBaseComponent, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
NxRadioToggleButtonBaseComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxRadioToggleButtonBaseComponent, inputs: { value: ["nxValue", "value"] }, viewQueries: [{ propertyName: "labelContainer", first: true, predicate: ["toggleButtonLabelContainer"], descendants: true, static: true }, { propertyName: "toggleInput", first: true, predicate: ["toggleInput"], descendants: true, static: true }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxRadioToggleButtonBaseComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { value: [{
                type: Input,
                args: ['nxValue']
            }], labelContainer: [{
                type: ViewChild,
                args: ['toggleButtonLabelContainer', { static: true }]
            }], toggleInput: [{
                type: ViewChild,
                args: ['toggleInput', { static: true }]
            }] } });

let nextId = 0;
const MAPPING = {
    negative: 'nx-radio-toggle--negative',
    small: 'nx-radio-toggle--small',
};
const RESET_VALUES = [null, undefined, ''];
class NxRadioToggleComponent {
    constructor(_cdr, 
    /** @docs-private */ ngControl, _errorStateMatcher, _parentForm, _parentFormGroup) {
        this._cdr = _cdr;
        this.ngControl = ngControl;
        this._errorStateMatcher = _errorStateMatcher;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this._toggleId = (nextId++).toString();
        this._disabled = false;
        /** @docs-private */
        this.errorState = false;
        // emits to signal children to run change detection
        this._disableChange = new Subject();
        /** @docs-private */
        this.additionalClasses = '';
        /** @docs-private */
        this.toggleButtons = new QueryList();
        this._destroyed = new Subject();
        this.onTouchedCallback = () => { };
        this.onChangeCallback = (option) => { };
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
    }
    /** Sets the component to the disabled state.*/
    set disabled(value) {
        const coerced = coerceBooleanProperty(value);
        if (this._disabled !== coerced) {
            this._disabled = coerced;
            this._disableChange.next();
        }
    }
    get disabled() {
        return this._disabled;
    }
    /** Sets the name used for accessibility. */
    set name(value) {
        if (this._name !== value) {
            this._name = value;
            this._cdr.markForCheck();
        }
    }
    get name() {
        return this._name;
    }
    ngAfterContentInit() {
        this.toggleButtons.changes
            .pipe(startWith(this.toggleButtons), switchMap(_ => merge(...this.toggleButtons.map((button) => button.onChecked))), takeUntil(this._destroyed))
            .subscribe(change => {
            this._selection = change.value;
            this.change(this._selection);
        });
        this.toggleButtons.changes
            .pipe(startWith(this.toggleButtons), takeUntil(this._destroyed))
            .subscribe((toggles) => {
            toggles.forEach(toggle => {
                toggle.resetClasses();
                if (toggle.value === this.selection) {
                    // We need to defer the selection for the edge case that the button with the value of this.selection
                    // didn't exist yet but was added afterwards to prevent changed after checked errors
                    setTimeout(() => toggle.select());
                }
            });
            if (toggles.length > 0) {
                toggles.first.setFirstButton();
                toggles.last.setLastButton();
            }
        });
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this._disableChange.complete();
    }
    ngDoCheck() {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this.updateErrorState();
        }
    }
    registerOnChange(onChangeCallback) {
        this.onChangeCallback = onChangeCallback;
    }
    registerOnTouched(onTouchedCallback) {
        this.onTouchedCallback = onTouchedCallback;
    }
    /** Preselects the respective options. */
    writeValue(value) {
        this._selection = value;
        const correspondingButton = this.toggleButtons.find((button) => button.value === this._selection);
        if (correspondingButton) {
            correspondingButton.select();
            return;
        }
        if (RESET_VALUES.includes(value)) {
            this.toggleButtons.map((button) => button.deselect());
        }
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /** @docs-private */
    get id() {
        return `nx-radio-toggle-${this._toggleId}`;
    }
    /** Sets the modifiers for the component. */
    set style(value) {
        this.additionalClasses = mapClassNames(value, [], MAPPING);
    }
    /**
     * @docs-private
     */
    get selection() {
        return this._selection;
    }
    /** @docs-private */
    change(value) {
        this.onChangeCallback(value);
        if (this.onTouchedCallback) {
            this.onTouchedCallback();
        }
    }
    /** @docs-private */
    updateErrorState() {
        const oldState = this.errorState;
        const parent = this._parentFormGroup || this._parentForm;
        const control = this.ngControl ? this.ngControl.control : null;
        const newState = this._errorStateMatcher.isErrorState(control, parent);
        if (newState !== oldState) {
            this.errorState = newState;
        }
    }
}
NxRadioToggleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxRadioToggleComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.NgControl, optional: true, self: true }, { token: i2.ErrorStateMatcher }, { token: i1.NgForm, optional: true }, { token: i1.FormGroupDirective, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NxRadioToggleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxRadioToggleComponent, selector: "nx-radio-toggle", inputs: { disabled: ["nxDisabled", "disabled"], name: ["nxName", "name"], writeValue: ["nxSelection", "writeValue"], style: ["nxStyle", "style"] }, queries: [{ propertyName: "toggleButtons", predicate: NxRadioToggleButtonBaseComponent }], ngImport: i0, template: "<div class=\"nx-radio-toggle\" [ngClass]=\"additionalClasses\" role=\"radiogroup\" [attr.aria-label]=\"name\">\n    <ng-content></ng-content>\n</div>\n", styles: [":host{display:block}.nx-radio-toggle{display:flex;height:100%}@media (max-width: 703px){.nx-radio-toggle{flex-direction:column;text-align:center;width:100%;justify-content:center;align-items:center}}\n"], directives: [{ type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxRadioToggleComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-radio-toggle', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"nx-radio-toggle\" [ngClass]=\"additionalClasses\" role=\"radiogroup\" [attr.aria-label]=\"name\">\n    <ng-content></ng-content>\n</div>\n", styles: [":host{display:block}.nx-radio-toggle{display:flex;height:100%}@media (max-width: 703px){.nx-radio-toggle{flex-direction:column;text-align:center;width:100%;justify-content:center;align-items:center}}\n"] }]
        }], ctorParameters: function () {
        return [{ type: i0.ChangeDetectorRef }, { type: i1.NgControl, decorators: [{
                        type: Optional
                    }, {
                        type: Self
                    }] }, { type: i2.ErrorStateMatcher }, { type: i1.NgForm, decorators: [{
                        type: Optional
                    }] }, { type: i1.FormGroupDirective, decorators: [{
                        type: Optional
                    }] }];
    }, propDecorators: { disabled: [{
                type: Input,
                args: ['nxDisabled']
            }], name: [{
                type: Input,
                args: ['nxName']
            }], toggleButtons: [{
                type: ContentChildren,
                args: [NxRadioToggleButtonBaseComponent]
            }], writeValue: [{
                type: Input,
                args: ['nxSelection']
            }], style: [{
                type: Input,
                args: ['nxStyle']
            }] } });

/** @docs-private */
class NxRadioToggleButtonChange {
    constructor(source, value) {
        this.source = source;
        this.value = value;
    }
}
class NxRadioToggleButtonComponent extends NxRadioToggleButtonBaseComponent {
    constructor(radioToggle, 
    /** @docs-private */ renderer, _cdr, _toggleDispatcher, _focusMonitor) {
        super(renderer);
        this.radioToggle = radioToggle;
        this._cdr = _cdr;
        this._toggleDispatcher = _toggleDispatcher;
        this._focusMonitor = _focusMonitor;
        /** @docs-private */
        // emits when the button is checked to notify the group
        this.onChecked = new Subject();
        this._disabled = false;
        this._selected = false;
        this._destroyed = new Subject();
        /** Unregister function for _expansionDispatcher. */
        this._removeUniqueSelectionListener = () => { };
        this._removeUniqueSelectionListener = this._toggleDispatcher.listen((id, radioToggleId) => {
            if (this.radioToggle && this.radioToggle.id === radioToggleId && this.id !== id) {
                this._selected = false;
                // need to let change detector know in case that the select() function was called on another button
                this._cdr.markForCheck();
            }
        });
        this.radioToggle._disableChange.pipe(takeUntil(this._destroyed)).subscribe(() => {
            this._cdr.markForCheck();
        });
    }
    /** @docs-private */
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        this._cdr.markForCheck();
    }
    get disabled() {
        var _a;
        return this._disabled || ((_a = this.radioToggle) === null || _a === void 0 ? void 0 : _a.disabled);
    }
    /** Sets the checked state and notify siblings and the parent group about the change */
    // Only use this if you want the onChecked event to be fired, this will inform the parent about the change!
    // To select a button without firing the event use the select() function
    set selected(value) {
        if (this._selected !== value) {
            this._selected = value;
            if (this._selected) {
                this._notifySiblings();
                this._emitCheckedEvent();
            }
            this._cdr.markForCheck();
        }
    }
    get selected() {
        return this._selected;
    }
    ngAfterViewInit() {
        this._focusMonitor.monitor(this.toggleInput);
    }
    ngOnDestroy() {
        this._removeUniqueSelectionListener();
        this._destroyed.next();
        this._destroyed.complete();
        this._focusMonitor.stopMonitoring(this.toggleInput);
    }
    /** @docs-private */
    get toggleId() {
        return this.radioToggle.id;
    }
    /** @docs-private */
    get id() {
        return this.toggleButtonId;
    }
    _notifySiblings() {
        const toggleId = this.radioToggle ? this.radioToggle.id : this.id;
        this._toggleDispatcher.notify(this.id, toggleId);
    }
    _emitCheckedEvent() {
        this.onChecked.next(new NxRadioToggleButtonChange(this, this.value));
    }
    // Does NOT emit the onChecked event. Useful when you need to set initial
    // state. Used by the parent to set checked states on initialization and during
    // writeValue() changes.
    /** @docs-private */
    select() {
        if (!this._selected) {
            this._selected = true;
            this._notifySiblings();
        }
        this._cdr.markForCheck();
    }
    /** @docs-private */
    deselect() {
        if (this._selected) {
            this._selected = false;
        }
        this._cdr.markForCheck();
    }
    /** @docs-private */
    onKeyupSpace() {
        this._selected = false;
        this._notifySiblings();
    }
    /** @docs-private */
    _controlInvalid() {
        var _a;
        return !!((_a = this.radioToggle) === null || _a === void 0 ? void 0 : _a.errorState);
    }
}
NxRadioToggleButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxRadioToggleButtonComponent, deps: [{ token: forwardRef(() => NxRadioToggleComponent) }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }, { token: i1$1.UniqueSelectionDispatcher }, { token: i2$1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });
NxRadioToggleButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxRadioToggleButtonComponent, selector: "nx-radio-toggle-button", inputs: { disabled: ["nxDisabled", "disabled"], selected: ["nxSelected", "selected"] }, host: { listeners: { "keyup.space": "onKeyupSpace()" }, properties: { "class.has-error": "_controlInvalid() || null", "attr.aria-invalid": "_controlInvalid() || null" } }, providers: [
        {
            provide: NxRadioToggleButtonBaseComponent,
            useExisting: forwardRef(() => NxRadioToggleButtonComponent),
        },
    ], usesInheritance: true, ngImport: i0, template: "<input\n    [attr.id]=\"toggleButtonId\"\n    #toggleInput\n    [attr.name]=\"toggleId\"\n    [checked]=\"selected\"\n    class=\"nx-radio-toggle__input\"\n    type=\"radio\"\n    (click)=\"selected = true\"\n    [disabled]=\"disabled\"\n/>\n<div (click)=\"triggerInputClick($event)\" #toggleButtonLabelContainer class=\"nx-radio-toggle__label-container\">\n    <label [attr.for]=\"toggleButtonId\" class=\"nx-radio-toggle__label\">\n        <nx-icon class=\"nx-toggle-button__mobile-check\" name=\"check\" aria-hidden=\"true\"></nx-icon>\n        <ng-content></ng-content>\n    </label>\n</div>\n", styles: [":host{display:flex;position:relative;flex-direction:row}@media (max-width: 703px){:host{width:100%}}:host.has-error .nx-radio-toggle__input:checked+.nx-radio-toggle__label-container{border-color:var(--danger);background-color:var(--danger)}:host.has-error .nx-radio-toggle__label-container{border-color:var(--danger);color:var(--danger)}:host.has-error:hover .nx-radio-toggle__label-container{color:var(--toggle-button-hover-text-color)}.nx-radio-toggle__input{opacity:0;position:absolute}.nx-radio-toggle__input:active+.nx-radio-toggle__label-container{background-color:var(--toggle-button-active-background-color);border-color:var(--toggle-button-active-border-color);color:var(--toggle-button-active-text-color)}.nx-radio-toggle__input:checked:disabled+.nx-radio-toggle__label-container{background-color:var(--toggle-button-disabled-selected-background-color);border-color:var(--toggle-button-disabled-selected-border-color);color:var(--toggle-button-disabled-selected-text-color)}.nx-radio-toggle__input:disabled+.nx-radio-toggle__label-container{background-color:var(--toggle-button-disabled-background-color);border-color:var(--toggle-button-disabled-border-color);color:var(--toggle-button-disabled-text-color);cursor:not-allowed}.nx-radio-toggle__input:disabled+.nx-radio-toggle__label-container .nx-radio-toggle__label{cursor:not-allowed}.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container{background-color:var(--toggle-button-selected-background-color);border-color:var(--toggle-button-selected-border-color);color:var(--toggle-button-selected-text-color);cursor:default}@media (max-width: 703px){.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container .nx-toggle-button__mobile-check{display:inline-block}}.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container .nx-radio-toggle__label{cursor:default}.nx-toggle-button__mobile-check{display:none;font-size:24px;margin-right:8px;height:24px}:host-context([dir=rtl]) .nx-toggle-button__mobile-check{margin-right:0;margin-right:initial;margin-left:8px}:host-context(.nx-radio-toggle--small) .nx-radio-toggle__label-container{font-size:var(--toggle-button-small-font-size);line-height:var(--toggle-button-small-line-height);font-weight:var(--toggle-button-small-font-weight);letter-spacing:var(--toggle-button-small-letter-spacing);min-height:16px;padding:6px;text-transform:none}@media (max-width: 703px){:host-context(.nx-radio-toggle--small) .nx-radio-toggle__label-container{font-size:var(--toggle-button-large-font-size);line-height:var(--toggle-button-large-line-height);font-weight:var(--toggle-button-large-font-weight);letter-spacing:var(--toggle-button-large-letter-spacing);padding:11px 31px}}.nx-radio-toggle{-webkit-user-select:none;user-select:none;cursor:pointer}.nx-radio-toggle__label-container.nx-radio-toggle__label-container--first{border-radius:4px 0 0 4px;border-width:2px 0 2px 2px}@media (max-width: 703px){.nx-radio-toggle__label-container.nx-radio-toggle__label-container--first{border-width:2px;border-bottom-width:1px;border-radius:4px 4px 0 0}}:host-context([dir=rtl]) .nx-radio-toggle__label-container.nx-radio-toggle__label-container--first{border-radius:0 4px 4px 0;border-width:2px 2px 2px 0}@media (max-width: 703px){:host-context([dir=rtl]) .nx-radio-toggle__label-container.nx-radio-toggle__label-container--first{border-width:2px;border-bottom-width:1px;border-radius:4px 4px 0 0}}.nx-radio-toggle__label-container.nx-radio-toggle__label-container--last{border-radius:0 4px 4px 0;border-width:2px}@media (max-width: 703px){.nx-radio-toggle__label-container.nx-radio-toggle__label-container--last{border-width:2px;border-top-width:1px;border-radius:0 0 4px 4px}.nx-radio-toggle__label-container.nx-radio-toggle__label-container--last.nx-radio-toggle__label-container--first{border-radius:4px;border-width:2px}}:host-context([dir=rtl]) .nx-radio-toggle__label-container.nx-radio-toggle__label-container--last{border-radius:4px 0 0 4px;border-width:2px}@media (max-width: 703px){:host-context([dir=rtl]) .nx-radio-toggle__label-container.nx-radio-toggle__label-container--last{border-width:2px;border-top-width:1px;border-radius:0 0 4px 4px}}.nx-radio-toggle__label-container{font-size:var(--toggle-button-large-font-size);line-height:var(--toggle-button-large-line-height);font-weight:var(--toggle-button-large-font-weight);letter-spacing:var(--toggle-button-large-letter-spacing);padding:10px 30px;color:var(--toggle-button-unselected-text-color);background-color:var(--toggle-button-unselected-background-color);border-color:var(--toggle-button-unselected-border-color);border-style:solid;border-radius:0;border-width:2px 0 2px 2px;cursor:pointer;flex-grow:1;text-align:center;text-transform:var(--button-text-transform);transition:background-color .2s ease,border-color .2s ease,color .2s ease;display:flex;align-items:center;height:100%;min-height:24px}@media (max-width: 703px){.nx-radio-toggle__label-container{border-width:1px 2px;justify-content:center;padding:11px 31px}}:host-context([dir=rtl]) .nx-radio-toggle__label-container{border-width:2px 2px 2px 0}@media (max-width: 703px){:host-context([dir=rtl]) .nx-radio-toggle__label-container{border-width:1px 2px}}.nx-radio-toggle__label-container:hover{background-color:var(--toggle-button-hover-background-color);border-color:var(--toggle-button-hover-border-color);color:var(--toggle-button-hover-text-color)}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:focus+.nx-radio-toggle__label-container{background-color:var(--negative-01);border-color:var(--negative-01);color:var(--negative-accent)}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:active+.nx-radio-toggle__label-container{background-color:var(--negative-02);border-color:var(--negative-02);color:var(--negative-accent)}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:disabled:checked+.nx-radio-toggle__label-container{background-color:var(--negative-dimmed);border-color:transparent;color:var(--negative-background-dimmed)}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:disabled+.nx-radio-toggle__label-container{background-color:transparent;border-color:var(--negative-dimmed);color:var(--negative-dimmed)}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:checked+.nx-radio-toggle__label-container{background-color:var(--negative);border-color:var(--negative);color:var(--negative-accent)}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__label-container{border-color:var(--negative);color:var(--negative)}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__label-container:hover{background-color:var(--negative-01);border-color:var(--negative-01);color:var(--negative-accent)}.nx-radio-toggle__label{display:flex;align-items:center;cursor:pointer}.nx-radio-toggle__input.cdk-keyboard-focused+.nx-radio-toggle__label-container{box-shadow:var(--focus-box-shadow);z-index:1}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-radio-toggle__input.cdk-keyboard-focused+.nx-radio-toggle__label-container{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}@media screen and (-ms-high-contrast: active){:host{forced-color-adjust:none}.nx-radio-toggle__label-container{background-color:buttonFace!important;border-color:buttonText!important;color:buttonText!important}.nx-radio-toggle__label-container .nx-radio-toggle__label{-ms-high-contrast-adjust:none}.nx-radio-toggle__input:disabled+.nx-radio-toggle__label-container{background-color:buttonFace!important;border-color:GrayText!important;color:GrayText!important}.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container{background-color:highlight!important;border-color:buttonText!important;color:highlightText!important}.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container .nx-radio-toggle__label{color:highlightText!important}}\n"], components: [{ type: i3$1.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxRadioToggleButtonComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-radio-toggle-button', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        {
                            provide: NxRadioToggleButtonBaseComponent,
                            useExisting: forwardRef(() => NxRadioToggleButtonComponent),
                        },
                    ], host: {
                        '[class.has-error]': '_controlInvalid() || null',
                        '[attr.aria-invalid]': '_controlInvalid() || null',
                    }, template: "<input\n    [attr.id]=\"toggleButtonId\"\n    #toggleInput\n    [attr.name]=\"toggleId\"\n    [checked]=\"selected\"\n    class=\"nx-radio-toggle__input\"\n    type=\"radio\"\n    (click)=\"selected = true\"\n    [disabled]=\"disabled\"\n/>\n<div (click)=\"triggerInputClick($event)\" #toggleButtonLabelContainer class=\"nx-radio-toggle__label-container\">\n    <label [attr.for]=\"toggleButtonId\" class=\"nx-radio-toggle__label\">\n        <nx-icon class=\"nx-toggle-button__mobile-check\" name=\"check\" aria-hidden=\"true\"></nx-icon>\n        <ng-content></ng-content>\n    </label>\n</div>\n", styles: [":host{display:flex;position:relative;flex-direction:row}@media (max-width: 703px){:host{width:100%}}:host.has-error .nx-radio-toggle__input:checked+.nx-radio-toggle__label-container{border-color:var(--danger);background-color:var(--danger)}:host.has-error .nx-radio-toggle__label-container{border-color:var(--danger);color:var(--danger)}:host.has-error:hover .nx-radio-toggle__label-container{color:var(--toggle-button-hover-text-color)}.nx-radio-toggle__input{opacity:0;position:absolute}.nx-radio-toggle__input:active+.nx-radio-toggle__label-container{background-color:var(--toggle-button-active-background-color);border-color:var(--toggle-button-active-border-color);color:var(--toggle-button-active-text-color)}.nx-radio-toggle__input:checked:disabled+.nx-radio-toggle__label-container{background-color:var(--toggle-button-disabled-selected-background-color);border-color:var(--toggle-button-disabled-selected-border-color);color:var(--toggle-button-disabled-selected-text-color)}.nx-radio-toggle__input:disabled+.nx-radio-toggle__label-container{background-color:var(--toggle-button-disabled-background-color);border-color:var(--toggle-button-disabled-border-color);color:var(--toggle-button-disabled-text-color);cursor:not-allowed}.nx-radio-toggle__input:disabled+.nx-radio-toggle__label-container .nx-radio-toggle__label{cursor:not-allowed}.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container{background-color:var(--toggle-button-selected-background-color);border-color:var(--toggle-button-selected-border-color);color:var(--toggle-button-selected-text-color);cursor:default}@media (max-width: 703px){.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container .nx-toggle-button__mobile-check{display:inline-block}}.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container .nx-radio-toggle__label{cursor:default}.nx-toggle-button__mobile-check{display:none;font-size:24px;margin-right:8px;height:24px}:host-context([dir=rtl]) .nx-toggle-button__mobile-check{margin-right:0;margin-right:initial;margin-left:8px}:host-context(.nx-radio-toggle--small) .nx-radio-toggle__label-container{font-size:var(--toggle-button-small-font-size);line-height:var(--toggle-button-small-line-height);font-weight:var(--toggle-button-small-font-weight);letter-spacing:var(--toggle-button-small-letter-spacing);min-height:16px;padding:6px;text-transform:none}@media (max-width: 703px){:host-context(.nx-radio-toggle--small) .nx-radio-toggle__label-container{font-size:var(--toggle-button-large-font-size);line-height:var(--toggle-button-large-line-height);font-weight:var(--toggle-button-large-font-weight);letter-spacing:var(--toggle-button-large-letter-spacing);padding:11px 31px}}.nx-radio-toggle{-webkit-user-select:none;user-select:none;cursor:pointer}.nx-radio-toggle__label-container.nx-radio-toggle__label-container--first{border-radius:4px 0 0 4px;border-width:2px 0 2px 2px}@media (max-width: 703px){.nx-radio-toggle__label-container.nx-radio-toggle__label-container--first{border-width:2px;border-bottom-width:1px;border-radius:4px 4px 0 0}}:host-context([dir=rtl]) .nx-radio-toggle__label-container.nx-radio-toggle__label-container--first{border-radius:0 4px 4px 0;border-width:2px 2px 2px 0}@media (max-width: 703px){:host-context([dir=rtl]) .nx-radio-toggle__label-container.nx-radio-toggle__label-container--first{border-width:2px;border-bottom-width:1px;border-radius:4px 4px 0 0}}.nx-radio-toggle__label-container.nx-radio-toggle__label-container--last{border-radius:0 4px 4px 0;border-width:2px}@media (max-width: 703px){.nx-radio-toggle__label-container.nx-radio-toggle__label-container--last{border-width:2px;border-top-width:1px;border-radius:0 0 4px 4px}.nx-radio-toggle__label-container.nx-radio-toggle__label-container--last.nx-radio-toggle__label-container--first{border-radius:4px;border-width:2px}}:host-context([dir=rtl]) .nx-radio-toggle__label-container.nx-radio-toggle__label-container--last{border-radius:4px 0 0 4px;border-width:2px}@media (max-width: 703px){:host-context([dir=rtl]) .nx-radio-toggle__label-container.nx-radio-toggle__label-container--last{border-width:2px;border-top-width:1px;border-radius:0 0 4px 4px}}.nx-radio-toggle__label-container{font-size:var(--toggle-button-large-font-size);line-height:var(--toggle-button-large-line-height);font-weight:var(--toggle-button-large-font-weight);letter-spacing:var(--toggle-button-large-letter-spacing);padding:10px 30px;color:var(--toggle-button-unselected-text-color);background-color:var(--toggle-button-unselected-background-color);border-color:var(--toggle-button-unselected-border-color);border-style:solid;border-radius:0;border-width:2px 0 2px 2px;cursor:pointer;flex-grow:1;text-align:center;text-transform:var(--button-text-transform);transition:background-color .2s ease,border-color .2s ease,color .2s ease;display:flex;align-items:center;height:100%;min-height:24px}@media (max-width: 703px){.nx-radio-toggle__label-container{border-width:1px 2px;justify-content:center;padding:11px 31px}}:host-context([dir=rtl]) .nx-radio-toggle__label-container{border-width:2px 2px 2px 0}@media (max-width: 703px){:host-context([dir=rtl]) .nx-radio-toggle__label-container{border-width:1px 2px}}.nx-radio-toggle__label-container:hover{background-color:var(--toggle-button-hover-background-color);border-color:var(--toggle-button-hover-border-color);color:var(--toggle-button-hover-text-color)}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:focus+.nx-radio-toggle__label-container{background-color:var(--negative-01);border-color:var(--negative-01);color:var(--negative-accent)}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:active+.nx-radio-toggle__label-container{background-color:var(--negative-02);border-color:var(--negative-02);color:var(--negative-accent)}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:disabled:checked+.nx-radio-toggle__label-container{background-color:var(--negative-dimmed);border-color:transparent;color:var(--negative-background-dimmed)}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:disabled+.nx-radio-toggle__label-container{background-color:transparent;border-color:var(--negative-dimmed);color:var(--negative-dimmed)}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:checked+.nx-radio-toggle__label-container{background-color:var(--negative);border-color:var(--negative);color:var(--negative-accent)}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__label-container{border-color:var(--negative);color:var(--negative)}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__label-container:hover{background-color:var(--negative-01);border-color:var(--negative-01);color:var(--negative-accent)}.nx-radio-toggle__label{display:flex;align-items:center;cursor:pointer}.nx-radio-toggle__input.cdk-keyboard-focused+.nx-radio-toggle__label-container{box-shadow:var(--focus-box-shadow);z-index:1}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-radio-toggle__input.cdk-keyboard-focused+.nx-radio-toggle__label-container{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}@media screen and (-ms-high-contrast: active){:host{forced-color-adjust:none}.nx-radio-toggle__label-container{background-color:buttonFace!important;border-color:buttonText!important;color:buttonText!important}.nx-radio-toggle__label-container .nx-radio-toggle__label{-ms-high-contrast-adjust:none}.nx-radio-toggle__input:disabled+.nx-radio-toggle__label-container{background-color:buttonFace!important;border-color:GrayText!important;color:GrayText!important}.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container{background-color:highlight!important;border-color:buttonText!important;color:highlightText!important}.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container .nx-radio-toggle__label{color:highlightText!important}}\n"] }]
        }], ctorParameters: function () {
        return [{ type: NxRadioToggleComponent, decorators: [{
                        type: Inject,
                        args: [forwardRef(() => NxRadioToggleComponent)]
                    }] }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: i1$1.UniqueSelectionDispatcher }, { type: i2$1.FocusMonitor }];
    }, propDecorators: { disabled: [{
                type: Input,
                args: ['nxDisabled']
            }], selected: [{
                type: Input,
                args: ['nxSelected']
            }], onKeyupSpace: [{
                type: HostListener,
                args: ['keyup.space']
            }] } });

class NxRadioToggleModule {
}
NxRadioToggleModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxRadioToggleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NxRadioToggleModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxRadioToggleModule, declarations: [NxRadioToggleComponent, NxRadioToggleButtonComponent], imports: [CommonModule, FormsModule, NxIconModule], exports: [NxRadioToggleComponent, NxRadioToggleButtonComponent] });
NxRadioToggleModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxRadioToggleModule, imports: [[CommonModule, FormsModule, NxIconModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxRadioToggleModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NxRadioToggleComponent, NxRadioToggleButtonComponent],
                    exports: [NxRadioToggleComponent, NxRadioToggleButtonComponent],
                    imports: [CommonModule, FormsModule, NxIconModule],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { NxRadioToggleButtonBaseComponent, NxRadioToggleButtonChange, NxRadioToggleButtonComponent, NxRadioToggleComponent, NxRadioToggleModule, RESET_VALUES };
//# sourceMappingURL=aposin-ng-aquila-radio-toggle.mjs.map
