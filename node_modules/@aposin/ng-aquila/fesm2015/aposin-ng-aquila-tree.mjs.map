{"version":3,"file":"aposin-ng-aquila-tree.mjs","sources":["../../../projects/ng-aquila/src/tree/action-item.directive.ts","../../../projects/ng-aquila/src/tree/data-source/flat-data-source.ts","../../../projects/ng-aquila/src/tree/data-source/flat-tree-control.ts","../../../projects/ng-aquila/src/tree/node.ts","../../../projects/ng-aquila/src/tree/node.html","../../../projects/ng-aquila/src/tree/outlet.ts","../../../projects/ng-aquila/src/tree/padding.ts","../../../projects/ng-aquila/src/tree/toggle.ts","../../../projects/ng-aquila/src/tree/tree.component.ts","../../../projects/ng-aquila/src/tree/tree.module.ts","../../../projects/ng-aquila/src/tree/aposin-ng-aquila-tree.ts"],"sourcesContent":["import { Directive, ElementRef } from '@angular/core';\n\n@Directive({ selector: '[nxTreeNodeActionItem]', host: { '[attr.tabindex]': '-1' } })\nexport class NxTreeNodeActionItem {\n    constructor(private _elementRef: ElementRef<HTMLElement>) {}\n\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n}\n","import { CollectionViewer, DataSource } from '@angular/cdk/collections';\nimport { FlatTreeControl, TreeControl } from '@angular/cdk/tree';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\nimport { NxFlatTreeNode, NxTreeNode } from './tree-node';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T extends NxTreeNode` to flattened nodes of type `F extends NxFlatTreeNode`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F extends NxFlatTreeNode` with additional information.\n */\nclass NxTreeFlattener<T extends NxTreeNode, F extends NxFlatTreeNode> {\n    transformFunction(node: NxTreeNode, level: number): F {\n        const { children, ...rest } = node;\n        return {\n            ...rest,\n            level,\n            expandable: Array.isArray(children) && children.length > 0,\n        } as F;\n    }\n\n    getLevel(node: F): number {\n        return node.level;\n    }\n\n    isExpandable(node: F): boolean {\n        return node.expandable;\n    }\n\n    getChildren(node: T): Observable<T[]> | T[] {\n        return node.children as T[];\n    }\n\n    _flattenNode(node: T, level: number, resultNodes: F[], parentMap: boolean[]): F[] {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n\n        if (this.isExpandable(flatNode)) {\n            const childrenNodes = this.getChildren(node);\n            if (Array.isArray(childrenNodes)) {\n                this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n            } else {\n                childrenNodes.pipe(take(1)).subscribe(children => {\n                    this._flattenChildren(children, level, resultNodes, parentMap);\n                });\n            }\n        }\n        return resultNodes;\n    }\n\n    _flattenChildren(children: T[], level: number, resultNodes: F[], parentMap: boolean[]): void {\n        children.forEach((child, index) => {\n            const childParentMap: boolean[] = parentMap.slice();\n            childParentMap.push(index !== children.length - 1);\n            this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n    }\n\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData: T[]): F[] {\n        const resultNodes: F[] = [];\n        structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n        return resultNodes;\n    }\n\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n        const results: F[] = [];\n        const currentExpand: boolean[] = [];\n        currentExpand[0] = true;\n\n        nodes.forEach(node => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n            if (expand) {\n                results.push(node);\n            }\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n        return results;\n    }\n}\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `NxTree`.\n * The nested tree nodes of type `T extends NxTreeNode` are flattened through `NxTreeFlattener`, and converted\n * to type `F extends NxFlatTreeNode` for `NxTree` to consume.\n */\nexport class NxTreeFlatDataSource<T extends NxTreeNode, F extends NxFlatTreeNode> extends DataSource<F> {\n    _treeFlattener: NxTreeFlattener<T, F>;\n\n    _flattenedData = new BehaviorSubject<F[]>([]);\n\n    _expandedData = new BehaviorSubject<F[]>([]);\n\n    _data = new BehaviorSubject<T[]>([]);\n\n    get data() {\n        return this._data.value;\n    }\n    set data(value: T[]) {\n        this._data.next(value);\n        this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n        this.treeControl.dataNodes = this._flattenedData.value;\n    }\n\n    constructor(private treeControl: FlatTreeControl<F>, initialData: T[] = []) {\n        super();\n        this._treeFlattener = new NxTreeFlattener();\n        this.data = initialData;\n    }\n\n    connect(collectionViewer: CollectionViewer): Observable<F[]> {\n        const changes = [collectionViewer.viewChange, this.treeControl.expansionModel.changed, this._flattenedData];\n        return merge(...changes).pipe(\n            map(() => {\n                this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n                return this._expandedData.value;\n            }),\n        );\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n","import { FlatTreeControl } from '@angular/cdk/tree';\n\nimport { NxFlatTreeNode } from './tree-node';\n\n/** Flat tree control.\n  Able to expand/collapse a subtree recursively for flattened tree.\n*/\nexport class NxFlatTreeControl<F extends NxFlatTreeNode> extends FlatTreeControl<F> {\n    constructor() {\n        super(\n            node => node.level,\n            node => node.expandable,\n        );\n    }\n}\n","import { FocusableOption, FocusMonitor } from '@angular/cdk/a11y';\nimport { CdkTree, CdkTreeNode, CdkTreeNodeDef } from '@angular/cdk/tree';\nimport { Component, ContentChild, Directive, ElementRef, Input, OnDestroy } from '@angular/core';\n\nimport { NxTreeNodeActionItem } from './action-item.directive';\nimport { NxTreeComponent } from './tree.component';\n\n/**\n * Wrapper for the CdkTree node with custom design styles.\n */\n@Component({\n    selector: 'nx-tree-node',\n    exportAs: 'nxTreeNode',\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        '[attr.role]': 'role',\n        class: 'nx-tree__node',\n        '[class.is-expanded]': 'isExpanded',\n        '[attr.tabindex]': '-1',\n    },\n    providers: [{ provide: CdkTreeNode, useExisting: NxTreeNodeComponent }],\n    templateUrl: './node.html',\n})\nexport class NxTreeNodeComponent<T> extends CdkTreeNode<T> implements OnDestroy {\n    constructor(protected _elementRef: ElementRef<HTMLElement>, protected _tree: CdkTree<T>, protected _focusMonitor: FocusMonitor) {\n        super(_elementRef, _tree);\n        this._focusMonitor.monitor(this._elementRef.nativeElement);\n    }\n\n    @ContentChild(NxTreeNodeActionItem) actionItem!: FocusableOption;\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n        super.ngOnDestroy();\n    }\n\n    /** Update the focused data in tree keyboard interaction */\n    _focus(): void {\n        (this._tree as NxTreeComponent<T>).updateFocusedData(this._data);\n    }\n\n    focus(): void {\n        if (this.actionItem) {\n            this.actionItem.focus?.();\n        } else {\n            this._elementRef.nativeElement.focus();\n        }\n    }\n}\n\n/**\n * Wrapper for the CdkTree node definition with custom design styles.\n */\n@Directive({\n    selector: '[nxTreeNodeDef]',\n    inputs: ['when: nxTreeNodeDefWhen'],\n    providers: [{ provide: CdkTreeNodeDef, useExisting: NxTreeNodeDefDirective }],\n})\nexport class NxTreeNodeDefDirective<T> extends CdkTreeNodeDef<T> {\n    @Input('nxTreeNode') data!: T;\n}\n","<div class=\"nx-tree__node-box\">\n    <ng-content></ng-content>\n</div>\n","import { CdkTreeNodeOutlet } from '@angular/cdk/tree';\nimport { Directive, ViewContainerRef } from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[nxTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n    selector: '[nxTreeNodeOutlet]',\n})\nexport class NxTreeNodeOutletDirective implements CdkTreeNodeOutlet {\n    constructor(public viewContainer: ViewContainerRef) {}\n}\n","import { Directionality } from '@angular/cdk/bidi';\nimport { coerceNumberProperty, NumberInput } from '@angular/cdk/coercion';\nimport { CdkTree, CdkTreeNode } from '@angular/cdk/tree';\nimport { Directive, ElementRef, Input, OnDestroy, Optional, Renderer2 } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([%A-Za-z]+)$/;\n\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\n@Directive({\n    selector: '[nxTreeNodePadding]',\n    host: {\n        '[class.nx-tree-node--with-padding]': 'true',\n    },\n})\nexport class NxTreeNodePaddingDirective<T> implements OnDestroy {\n    /** Current padding value applied to the element. Used to avoid unnecessarily hitting the DOM. */\n    private _currentPadding!: string | null;\n\n    /** CSS units used for the indentation value. */\n    indentUnits = 'px';\n\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    @Input('nxTreeNodePadding')\n    get level(): number {\n        return this._level;\n    }\n    set level(value: NumberInput) {\n        this._level = coerceNumberProperty(value);\n        this._setPadding();\n    }\n    _level!: number;\n\n    /** The offset is added once on top of each indent. Default number is 0. */\n    @Input('nxTreeNodePaddingOffset')\n    get offset(): number {\n        return this._offset;\n    }\n    set offset(value: NumberInput) {\n        this._offset = coerceNumberProperty(value);\n        this._setPadding();\n    }\n    _offset = 0;\n\n    /**\n     * The indent for each level. Can be a number or a CSS string.\n     * Default number 24px from material design menu sub-menu spec.\n     */\n    @Input('nxTreeNodePaddingIndent')\n    get indent(): number {\n        return this._indent;\n    }\n    set indent(indent: NumberInput) {\n        let value = indent;\n        let units = 'px';\n\n        if (typeof indent === 'string') {\n            const parts = indent.split(cssUnitPattern);\n            value = parts[0];\n            units = parts[1] || units;\n        }\n\n        this.indentUnits = units;\n        this._indent = coerceNumberProperty(value);\n        this._setPadding();\n    }\n    _indent = 24;\n\n    private readonly _destroyed = new Subject<void>();\n\n    constructor(\n        private _treeNode: CdkTreeNode<T>,\n        private _tree: CdkTree<T>,\n        private _renderer: Renderer2,\n        private _element: ElementRef<HTMLElement>,\n        @Optional() private _dir: Directionality | null,\n    ) {\n        this._setPadding();\n        if (this._dir) {\n            this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding(true));\n        }\n\n        // In Ivy the indentation binding might be set before the tree node's data has been added,\n        // which means that we'll miss the first render. We have to subscribe to changes in the\n        // data to ensure that everything is up to date.\n        _treeNode._dataChanges.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding());\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n\n    /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n    _paddingIndent(): string | null {\n        const nodeLevel = this._treeNode.data && this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._treeNode.data) : null;\n        const level = this._level || nodeLevel;\n        return level ? `${level * this._indent + this._offset}${this.indentUnits}` : null;\n    }\n\n    _setPadding(forceChange = false) {\n        const padding = this._paddingIndent();\n\n        if (padding !== this._currentPadding || forceChange) {\n            const element = this._element.nativeElement;\n            const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n            const resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\n            this._renderer.setStyle(element, paddingProp, padding);\n            this._renderer.setStyle(element, resetProp, null);\n            this._currentPadding = padding;\n        }\n    }\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { CdkTreeNodeToggle } from '@angular/cdk/tree';\nimport { Directive, Input } from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with custom design styles.\n */\n@Directive({\n    selector: '[nxTreeNodeToggle]',\n    providers: [{ provide: CdkTreeNodeToggle, useExisting: NxTreeNodeToggleDirective }],\n})\nexport class NxTreeNodeToggleDirective<T> extends CdkTreeNodeToggle<T> {\n    @Input('nxTreeNodeToggleRecursive')\n    set recursive(value: boolean) {\n        this._recursive = coerceBooleanProperty(value);\n    }\n    get recursive(): boolean {\n        return this._recursive;\n    }\n}\n","import { FocusableOption, FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOWN_ARROW, END, HOME, LEFT_ARROW, NUMPAD_MULTIPLY, RIGHT_ARROW, UP_ARROW } from '@angular/cdk/keycodes';\nimport { CdkTree, CdkTreeNode } from '@angular/cdk/tree';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    Input,\n    IterableChangeRecord,\n    IterableDiffer,\n    IterableDiffers,\n    OnDestroy,\n    OnInit,\n    Optional,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { NxTreeNodeOutletDirective } from './outlet';\n\n/**\n * Wrapper for the CdkTree with custom design styles and keyboard nav mechanics.\n */\n@Component({\n    selector: 'nx-tree',\n    exportAs: 'nxTree',\n    template: `<ng-container nxTreeNodeOutlet></ng-container>`,\n    host: {\n        // The 'cdk-tree' class needs to be included here because classes set in the host in the\n        // parent class are not inherited with View Engine. The 'cdk-tree' class in CdkTreeNode has\n        // to be set in the host because:\n        // if it is set as a @HostBinding it is not set by the time the tree nodes try to read the\n        // class from it.\n        // the ElementRef is not available in the constructor so the class can't be applied directly\n        // without a breaking constructor change.\n        class: 'nx-tree cdk-tree',\n        role: 'application',\n        '[attr.tabindex]': '_tabIndex',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': 'focus()',\n    },\n    styleUrls: ['tree.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: CdkTree, useExisting: NxTreeComponent }],\n})\nexport class NxTreeComponent<T> extends CdkTree<T> implements OnDestroy, OnInit {\n    // Outlets within the tree's template where the dataNodes will be inserted.\n    @ViewChild(NxTreeNodeOutletDirective, { static: true }) _nodeOutlet!: NxTreeNodeOutletDirective;\n\n    /** The node map map data nodes to CdkTreeNodes */\n    protected nodeMap: Map<T, FocusableOption> = new Map<T, FocusableOption>();\n\n    /** A map from parent node to a list of children. */\n    protected childrenMap: Map<T | undefined, T[]> = new Map<T | undefined, T[]>();\n\n    /** A map from node data to its parent node data. */\n    protected parentMap: Map<T, T> = new Map<T, T>();\n\n    /** Current focused node data. */\n    protected _focusedData!: T;\n\n    /** Tab index for the tree. */\n    _tabIndex = 0;\n\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use _tabIndex\n     */\n    _userTabIndex: number | null = null;\n\n    @Input()\n    set tabIndex(value: number) {\n        this._userTabIndex = value;\n    }\n\n    /** Subject that emits when the component has been destroyed. */\n    private _wrapperOnDestroy = new Subject<void>();\n\n    constructor(\n        private _wrapperDiffers: IterableDiffers,\n        private _cdr: ChangeDetectorRef,\n        @Optional() private dir: Directionality | null,\n        protected _elementRef: ElementRef,\n        protected _focusMonitor: FocusMonitor,\n    ) {\n        super(_wrapperDiffers, _cdr);\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this._monitorTreeFocus();\n    }\n\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._wrapperOnDestroy.next();\n        this._wrapperOnDestroy.complete();\n    }\n\n    /** Get current focused data */\n    get focusedData() {\n        return this._focusedData;\n    }\n\n    /** Add tree node to data list based on owner of parent view container. */\n    insertToA11yNodeTracking(index: number, data: T, node: FocusableOption, parentData?: T) {\n        this.nodeMap.set(data, node);\n        if (parentData) {\n            this.parentMap.set(data, parentData);\n        }\n        this._getChildrenList(parentData).splice(index, 0, data);\n    }\n\n    /** Remove a node data from node list based on the owner of view container. */\n    removeFromA11yNodeTracking(index: number, parentData?: T) {\n        const nodeList = this._getChildrenList(parentData);\n        const removed = nodeList.splice(index, 1)[0];\n        if (removed && removed === this._focusedData) {\n            this._changeFocusedData(this._getNextVisibleNode());\n        }\n        this.nodeMap.delete(removed);\n        this.parentMap.delete(removed);\n        this.childrenMap.delete(removed);\n    }\n\n    /** Update node's index information based on the owner of view container. */\n    moveInA11yNodeTracking(previousIndex: number, currentIndex: number, parentData?: T) {\n        const nodeList = this._getChildrenList(parentData);\n        const target = nodeList.splice(previousIndex, 1);\n        nodeList.splice(currentIndex, 0, target[0]);\n    }\n\n    /** When a tree node is focused, update the current focused data. */\n    updateFocusedData(newFocusedData: T) {\n        this._focusedData = newFocusedData;\n    }\n\n    /** Focus first node when the tree is focused */\n    focus() {\n        this._focusedData ? this._changeFocusedData(this._focusedData) : this.focusFirstVisibleNode();\n    }\n\n    /** Change focus to first visible node in the tree. */\n    focusFirstVisibleNode() {\n        this._changeFocusedData(this._getFirstVisibleNode());\n    }\n\n    /** Change focus to last visible node in the tree. */\n    focusLastVisibleNode() {\n        this._changeFocusedData(this._getLastVisibleNode());\n    }\n\n    /** Change focus to previous visible node. */\n    focusPreviousVisibleNode() {\n        if (!this._focusedData) {\n            return this.focusLastVisibleNode();\n        }\n        this._changeFocusedData(this._getPreviousVisibleNode());\n    }\n\n    /** Change focus to next visible node. */\n    focusNextVisibleNode() {\n        if (!this._focusedData) {\n            return this.focusFirstVisibleNode();\n        }\n        this._changeFocusedData(this._getNextVisibleNode());\n    }\n\n    /** Collapse the current node if it's expanded. Otherwise move to parent. */\n    collapseCurrentFocusedNode() {\n        if (this._focusedData && this.treeControl) {\n            if (this.treeControl.isExpanded(this._focusedData)) {\n                this.treeControl.collapse(this._focusedData);\n            } else {\n                this._changeFocusedData(this._getParentNode());\n            }\n        }\n    }\n\n    /** Expand the current node if it's not expanded. Otherwise move to its first child. */\n    expandCurrentFocusedNode() {\n        if (this._focusedData && this.treeControl) {\n            if (this.treeControl.isExpanded(this._focusedData)) {\n                this._changeFocusedData(this._getNextVisibleNode());\n            } else {\n                this.treeControl.expand(this._focusedData);\n            }\n        }\n    }\n\n    /** Expand all the nodes in the tree */\n    expandAllNodes() {\n        if (this.treeControl) {\n            this.treeControl.expandAll();\n        }\n    }\n\n    /** Expand the current node if it's not expanded. Otherwise move to its first child. */\n    toggleCurrentFocusedNode() {\n        if (this._focusedData && this.treeControl) {\n            this.treeControl.toggle(this._focusedData);\n        }\n    }\n\n    _isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _handleKeydown(event: KeyboardEvent) {\n        switch (event.keyCode) {\n            case HOME:\n                this.focusFirstVisibleNode();\n                event.preventDefault();\n                break;\n            case END:\n                this.focusLastVisibleNode();\n                event.preventDefault();\n                break;\n            case UP_ARROW:\n                this.focusPreviousVisibleNode();\n                event.preventDefault();\n                break;\n            case DOWN_ARROW:\n                this.focusNextVisibleNode();\n                event.preventDefault();\n                break;\n            case LEFT_ARROW:\n                this._isRtl() ? this.expandCurrentFocusedNode() : this.collapseCurrentFocusedNode();\n                event.preventDefault();\n                break;\n            case RIGHT_ARROW:\n                this._isRtl() ? this.collapseCurrentFocusedNode() : this.expandCurrentFocusedNode();\n                event.preventDefault();\n                break;\n            case NUMPAD_MULTIPLY:\n                this.expandAllNodes();\n                event.preventDefault();\n                break;\n            default:\n        }\n    }\n\n    /** Focus the tree node component with new focused data. */\n    _changeFocusedData(newFocused: T | undefined) {\n        if (newFocused) {\n            this._focusedData = newFocused;\n            if (this.nodeMap.has(this._focusedData)) {\n                this.nodeMap.get(this._focusedData)!.focus();\n            }\n        }\n    }\n\n    /** Returns the data of the first visible tree node in the tree. */\n    _getFirstVisibleNode(): T | undefined {\n        const nodeList = this._getChildrenList();\n        return nodeList[0];\n    }\n\n    /** Returns the data of the last visible tree node in the tree. */\n    _getLastVisibleNode(): T | undefined {\n        const nodeList = this._getChildrenList();\n        return this._getLastChild(nodeList[nodeList.length - 1]);\n    }\n\n    /** Returns the previous visible tree node of current focused data. */\n    _getPreviousVisibleNode(): T | undefined {\n        if (!this._focusedData) {\n            return;\n        }\n        const parent = this.parentMap.get(this._focusedData);\n        const nodeList = this.childrenMap.get(parent);\n        const index = nodeList!.indexOf(this._focusedData);\n        if (index === 0) {\n            return parent;\n        } else if (index > 0) {\n            return this._getLastChild(nodeList![index - 1]);\n        }\n        return undefined;\n    }\n\n    /** Returns the next visible tree node data of current focused data. */\n    _getNextVisibleNode(): T | undefined {\n        if (!this._focusedData) {\n            return;\n        }\n        // Always return first child if the node is expanded\n        if (this.childrenMap.has(this._focusedData) && this.treeControl && this.treeControl.isExpanded(this._focusedData)) {\n            const childNodeList = this._getChildrenList(this._focusedData);\n            if (childNodeList.length) {\n                return childNodeList[0];\n            }\n        }\n        // Or return next sibling / parent's next child if any\n        let currentData: T | undefined = this._focusedData;\n        while (currentData) {\n            const parent = this.parentMap.get(currentData);\n            const nodeList = this.childrenMap.get(parent);\n            const index = nodeList!.indexOf(currentData);\n            if (index === nodeList!.length - 1) {\n                currentData = parent;\n            } else if (index > -1) {\n                return nodeList![index + 1];\n            }\n        }\n        return undefined;\n    }\n\n    /** Returns the parent of current focused node. */\n    _getParentNode(): T | undefined {\n        if (this.parentMap.has(this._focusedData)) {\n            // For nested tree\n            this._changeFocusedData(this.parentMap.get(this._focusedData));\n        } else if (this.treeControl.getLevel) {\n            // For flat tree\n            const nodeList = this._getChildrenList();\n            const index = nodeList.indexOf(this._focusedData);\n            const level = this.treeControl.getLevel(this._focusedData) - 1;\n            if (index <= 0) {\n                return;\n            }\n            for (let i = index - 1; i >= 0; i--) {\n                if (this.treeControl.getLevel(nodeList[i]) === level) {\n                    return nodeList[i];\n                }\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Returns the data of list of children in the current `parentData` node's view container.\n     * If there's no parent, return the tree nodes in the tree's view container.\n     */\n    _getChildrenList(parentData?: T): T[] {\n        if (!this.childrenMap.has(parentData)) {\n            this.childrenMap.set(parentData, []);\n        }\n        return this.childrenMap.get(parentData)!;\n    }\n\n    /**\n     * Returns the data of last visible elements in the sub-tree rooted at `targetNode`.\n     */\n    _getLastChild(targetNode: T) {\n        let currentData = targetNode;\n        while (currentData && this.childrenMap.has(currentData) && this.treeControl && this.treeControl.isExpanded(currentData)) {\n            const childNodeList = this._getChildrenList(currentData);\n            if (childNodeList.length) {\n                currentData = childNodeList[childNodeList.length - 1];\n            } else {\n                break;\n            }\n        }\n        return currentData;\n    }\n\n    /**\n     * Extended CdkTree method to track new nodes for a11y.\n     */\n    insertNode(nodeData: T, index: number, viewContainer?: ViewContainerRef, parentData?: T) {\n        super.insertNode(nodeData, index, viewContainer, parentData);\n\n        if (CdkTreeNode.mostRecentTreeNode) {\n            this.insertToA11yNodeTracking(index, nodeData, CdkTreeNode.mostRecentTreeNode as CdkTreeNode<T>, parentData);\n            CdkTreeNode.mostRecentTreeNode.focus();\n        }\n    }\n\n    /**\n     * ⚠️  Here we override the method from cdk tree ⚠️\n     * Adds some extra method calls to update the a11y node tracking.\n     */\n    renderNodeChanges(\n        data: T[],\n        dataDiffer: IterableDiffer<T> = this['_dataDiffer'],\n        viewContainer: ViewContainerRef = this._nodeOutlet.viewContainer,\n        parentData?: T,\n    ) {\n        super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n\n        const changes = dataDiffer.diff(data);\n\n        if (!changes) {\n            return;\n        }\n\n        changes.forEachOperation((item: IterableChangeRecord<T>, adjustedPreviousIndex: number | null, currentIndex: number | null) => {\n            if (currentIndex == null) {\n                this.removeFromA11yNodeTracking(adjustedPreviousIndex as number, parentData);\n            } else if (item.previousIndex !== null) {\n                this.moveInA11yNodeTracking(adjustedPreviousIndex as number, currentIndex, parentData);\n            }\n        });\n    }\n\n    /**\n     * Monitor focus of the tree. When the tree is focused, change the tab index to -1 so TAB\n     * can move the focus out of the tree. When the tree is blurred, change back the tab index.\n     */\n    _monitorTreeFocus() {\n        this._focusMonitor\n            .monitor(this._elementRef.nativeElement, true)\n            .pipe(takeUntil(this._wrapperOnDestroy))\n            .subscribe(origin => {\n                const newTabIndex = origin ? -1 : this._userTabIndex || 0;\n                if (this._tabIndex !== newTabIndex) {\n                    this._tabIndex = newTabIndex;\n                    this._cdr.markForCheck();\n                }\n            });\n    }\n}\n","import { CdkTreeModule } from '@angular/cdk/tree';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NxTreeNodeActionItem } from './action-item.directive';\nimport { NxTreeNodeComponent, NxTreeNodeDefDirective } from './node';\nimport { NxTreeNodeOutletDirective } from './outlet';\nimport { NxTreeNodePaddingDirective } from './padding';\nimport { NxTreeNodeToggleDirective } from './toggle';\nimport { NxTreeComponent } from './tree.component';\n\n@NgModule({\n    imports: [CdkTreeModule, CommonModule],\n    declarations: [\n        NxTreeComponent,\n        NxTreeNodeComponent,\n        NxTreeNodeDefDirective,\n        NxTreeNodePaddingDirective,\n        NxTreeNodeToggleDirective,\n        NxTreeNodeOutletDirective,\n        NxTreeNodeActionItem,\n    ],\n    exports: [\n        NxTreeComponent,\n        NxTreeNodeComponent,\n        NxTreeNodeDefDirective,\n        NxTreeNodePaddingDirective,\n        NxTreeNodeToggleDirective,\n        NxTreeNodeOutletDirective,\n        NxTreeNodeActionItem,\n    ],\n})\nexport class NxTreeModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i2","i1","i3.NxTreeNodeOutletDirective"],"mappings":"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"}