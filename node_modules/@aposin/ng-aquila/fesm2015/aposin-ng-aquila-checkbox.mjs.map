{"version":3,"file":"aposin-ng-aquila-checkbox.mjs","sources":["../../../projects/ng-aquila/src/checkbox/checkbox.component.ts","../../../projects/ng-aquila/src/checkbox/checkbox-group.component.html","../../../projects/ng-aquila/src/checkbox/checkbox.component.html","../../../projects/ng-aquila/src/checkbox/checkbox.module.ts","../../../projects/ng-aquila/src/checkbox/aposin-ng-aquila-checkbox.ts"],"sourcesContent":["import { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\nimport { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Self,\n    ViewChild,\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { NxLabelComponent } from '@aposin/ng-aquila/base';\nimport { ErrorStateMatcher } from '@aposin/ng-aquila/utils';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nlet nextId = 0;\n\nexport class NxCheckboxChangeEvent {\n    constructor(\n        /** The checked value of the checkbox. */\n        public checked: boolean,\n        /** The value of the checkbox. */\n        public value: string,\n        /** The component instance of the checkbox which emitted the change event. */\n        public checkbox: NxCheckboxComponent,\n    ) {}\n}\n\nexport class NxCheckboxGroupChangeEvent {\n    constructor(\n        /** The value of the checkbox group. An array containing all checked checkbox values. */\n        public value: string[],\n        /** The component instance of the checkbox group. */\n        public checkboxGroup: NxCheckboxGroupComponent,\n    ) {}\n}\n\n/** Size of the label. */\nexport type NxCheckboxLabelSize = 'small' | 'large';\n\n@Component({\n    selector: 'nx-checkbox-group',\n    templateUrl: 'checkbox-group.component.html',\n    styleUrls: ['checkbox-group.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[class.nx-checkbox-group]': 'true',\n        '[class.nx-checkbox-group--negative]': 'negative',\n        '[attr.id]': 'id',\n        '[attr.required]': 'required',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.aria-labelledby]': 'this._label?.id  || null',\n        '[attr.role]': '\"group\"',\n    },\n})\nexport class NxCheckboxGroupComponent implements ControlValueAccessor, AfterContentInit, OnDestroy, DoCheck {\n    @ContentChildren(forwardRef(() => NxCheckboxComponent), { descendants: true }) _checkboxes!: QueryList<NxCheckboxComponent>;\n\n    @ContentChild(forwardRef(() => NxLabelComponent))\n    _label!: NxLabelComponent;\n\n    readonly _stateChanges = new Subject<void>();\n    errorState = false;\n    @Output() selectionChange: EventEmitter<NxCheckboxGroupChangeEvent> = new EventEmitter<NxCheckboxGroupChangeEvent>();\n\n    private _id = `nx-checkbox-group-${nextId++}`;\n    /** Sets the Id of the checkbox group. */\n    @Input()\n    set id(value: string) {\n        if (this._id !== value) {\n            this._id = value;\n            this._cdr.markForCheck();\n        }\n    }\n\n    get id(): string {\n        return this._id;\n    }\n\n    private _name = '';\n    /** Sets the name of the checkboxes inside the nx-checkbox-group. */\n    @Input()\n    set name(value: string) {\n        this._name = value;\n        this._cdr.markForCheck();\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    private _disabled = false;\n\n    /** Disables all checkboxes inside the nx-checkbox-group. */\n    @Input()\n    set disabled(value: BooleanInput) {\n        this._disabled = coerceBooleanProperty(value);\n        if (this._label) {\n            this._label.disabled = this._disabled;\n        }\n        this._stateChanges.next();\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    private _negative = false;\n    /** Set the negative styles for all the checkboxes inside the nx-checkbox-group */\n    @Input()\n    set negative(value: BooleanInput) {\n        this._negative = coerceBooleanProperty(value);\n        this._cdr.markForCheck();\n        this._stateChanges.next();\n    }\n\n    get negative(): boolean {\n        return this._negative;\n    }\n\n    private _labelSize: NxCheckboxLabelSize | undefined;\n    /** Sets the label size of the checkboxes inside the group */\n    @Input()\n    set labelSize(value: NxCheckboxLabelSize) {\n        this._labelSize = value;\n        this._stateChanges.next();\n    }\n\n    get labelSize(): NxCheckboxLabelSize {\n        return this._labelSize as NxCheckboxLabelSize;\n    }\n\n    /** Whether the nx-checkbox-group are required. */\n    @Input()\n    get required(): boolean {\n        return !!this._required;\n    }\n\n    set required(value: BooleanInput) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    private _required: boolean | undefined;\n\n    private _value: any[] | undefined;\n\n    private readonly _destroyed = new Subject<void>();\n\n    constructor(\n        private _cdr: ChangeDetectorRef,\n        private _errorStateMatcher: ErrorStateMatcher,\n        @Optional() private _parentForm: NgForm | null,\n        @Optional() private _parentFormGroup: FormGroupDirective | null,\n        @Optional() @Self() public ngControl: NgControl | null,\n    ) {\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n    }\n\n    ngAfterContentInit() {\n        setTimeout(() => {\n            this._updateSelectedCheckboxFromValue(true);\n        });\n\n        this._checkboxes.changes.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this._value = this._checkboxes.filter(checkbox => checkbox.checked).map(cb => cb.value);\n\n            if (this.ngControl) {\n                this.ngControl.control!.setValue(this._value);\n            }\n            this._updateSelectedCheckboxFromValue();\n        });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._stateChanges.complete();\n    }\n\n    writeValue(value: any): void {\n        if (this._value !== value) {\n            this._value = value;\n            this._updateSelectedCheckboxFromValue();\n        }\n    }\n\n    registerOnChange(fn: (value: any) => void) {\n        this._onChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this._onTouched = fn;\n    }\n\n    setDisabledState?(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    private _onChange: (value: any) => void = () => {};\n\n    private _onTouched: () => any = () => {};\n\n    private _updateSelectedCheckboxFromValue(initialisation = false): void {\n        // prevent reset of class values with empty array during initialisation\n        const isValueSet = initialisation ? !!this._value && this._value.length : !!this._value;\n        if (this._checkboxes?.length && isValueSet) {\n            this._checkboxes.map(checkbox => {\n                checkbox.checked = this._value!.includes(checkbox.value);\n            });\n        }\n    }\n\n    /** @docs-private */\n    change(value: unknown) {\n        const checkedCheckboxValues = this._checkboxes.filter(checkbox => checkbox.checked).map(checkbox => checkbox.value);\n        this._onChange(checkedCheckboxValues);\n\n        if (this._onTouched) {\n            this._onTouched();\n        }\n\n        this.selectionChange.emit(new NxCheckboxGroupChangeEvent(checkedCheckboxValues, this));\n    }\n\n    /** Checkbox instances in the checkbox group. */\n    get checkboxes(): NxCheckboxComponent[] {\n        return this._checkboxes.toArray();\n    }\n\n    /** @docs-private */\n    updateErrorState() {\n        const oldState = this.errorState;\n        const parent = this._parentFormGroup || this._parentForm;\n        const control = this.ngControl ? (this.ngControl.control as FormControl) : null;\n        const newState = this._errorStateMatcher.isErrorState(control, parent);\n\n        if (newState !== oldState) {\n            this.errorState = newState;\n            this._cdr.markForCheck();\n        }\n    }\n}\n\n@Component({\n    selector: 'nx-checkbox',\n    templateUrl: 'checkbox.component.html',\n    styleUrls: ['checkbox.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[class.nx-checkbox]': 'true',\n        '[class.disabled]': 'disabled',\n        '[class.nx-checkbox--label-large]': 'labelSize === \"large\"',\n        '[class.nx-checkbox--label-small]': 'labelSize === \"small\"',\n        '[class.nx-checkbox--negative]': 'negative',\n        '[class.has-error]': '_controlInvalid() || null',\n        '[attr.required]': 'required',\n        '[attr.aria-invalid]': '_controlInvalid() || null',\n    },\n})\nexport class NxCheckboxComponent implements ControlValueAccessor, OnDestroy, OnInit, AfterViewInit {\n    private _id: string = (nextId++).toString();\n    private _disabled = false;\n    private _negative = false;\n    private _labelSize: NxCheckboxLabelSize = 'small';\n    private _checked = false;\n    private _name: string | null = null;\n\n    /** @docs-private */\n    @ViewChild('checkboxLabelWrapper', { static: true }) _checkboxLabelWrapper!: ElementRef;\n\n    @ViewChild('input') _nativeInput!: ElementRef<HTMLElement>;\n\n    /**\n     * Id of the checkbox.\n     *\n     * If not set, the checkbox gets an incremented value by default.\n     */\n    @Input()\n    set id(value: string) {\n        if (value !== this._id) {\n            this._id = value;\n            this._cdr.markForCheck();\n        }\n    }\n\n    get id(): string {\n        return `nx-checkbox-${this._id}`;\n    }\n\n    /** Name of the checkbox. */\n    @Input()\n    set name(name: string) {\n        this._name = name;\n    }\n\n    get name(): string {\n        return (this.checkboxGroup?.name || this._name) as string;\n    }\n\n    /** Whether the checkbox is disabled. */\n    @Input()\n    set disabled(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._cdr.markForCheck();\n        }\n    }\n\n    get disabled(): boolean {\n        return this.checkboxGroup?.disabled || this._disabled;\n    }\n\n    /**\n     * Sets the label size of the checkbox. Default value: small\n     */\n    @Input()\n    set labelSize(value: NxCheckboxLabelSize) {\n        this._labelSize = value;\n        this._cdr.markForCheck();\n    }\n\n    get labelSize(): NxCheckboxLabelSize {\n        return this.checkboxGroup?.labelSize || this._labelSize;\n    }\n\n    /**\n     * Whether the checkbox has negative styling.\n     */\n    @Input()\n    set negative(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._negative) {\n            this._negative = newValue;\n            this._cdr.markForCheck();\n        }\n    }\n\n    get negative(): boolean {\n        return this.checkboxGroup?.negative || this._negative;\n    }\n\n    /** Whether the checkbox is checked. */\n    @Input()\n    set checked(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._checked) {\n            if (this._indeterminate) {\n                this._setIndeterminate(false);\n            }\n            this._setChecked(newValue);\n        }\n    }\n\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    private _indeterminate = false;\n\n    /** Whether the checkbox is indeterminated. */\n    @Input()\n    set indeterminate(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n        if (this._indeterminate !== newValue) {\n            if (this._checked) {\n                this._setChecked(false);\n            }\n            this._setIndeterminate(newValue);\n        }\n        this._cdr.markForCheck();\n    }\n\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return !!this._required;\n    }\n\n    set required(value: BooleanInput) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    private _required: boolean | undefined;\n\n    /** Sets the value of the checkbox. Default value is the checked status. */\n    @Input()\n    get value(): string {\n        return this._value ? this._value : this.checked.toString();\n    }\n\n    set value(value: string) {\n        this._value = value;\n        this._cdr.markForCheck();\n    }\n\n    private _value = '';\n\n    /** An event emitted when the indeterminate value has changed */\n    @Output()\n    indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n\n    /** An event emitted when the checked value has changed.\n     *\n     * Emits the boolean checked value of the changed checkbox.\n     */\n    @Output()\n    checkedChange = new EventEmitter<boolean>(false);\n\n    /** An event emitted when the checked value has changed.\n     *\n     * Emits a NxCheckboxChangeEvent.\n     */\n    @Output()\n    checkboxChange: EventEmitter<NxCheckboxChangeEvent> = new EventEmitter<NxCheckboxChangeEvent>();\n\n    /** @docs-private */\n    get labelHasContent(): boolean {\n        return !!this._checkboxLabelWrapper.nativeElement.innerHTML.trim();\n    }\n\n    private readonly _destroyed = new Subject<void>();\n\n    /** @docs-private\n     * Callback for when the content of the label has changed.\n     */\n    labelContentChanged() {\n        this._cdr.detectChanges();\n    }\n\n    constructor(\n        private _cdr: ChangeDetectorRef,\n        private _errorStateMatcher: ErrorStateMatcher,\n        @Optional() public checkboxGroup: NxCheckboxGroupComponent | null,\n        @Optional() @Self() public ngControl: NgControl | null,\n        @Optional() private _parentForm: NgForm | null,\n        @Optional() private _parentFormGroup: FormGroupDirective | null,\n        private _focusMonitor: FocusMonitor,\n    ) {\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n    }\n\n    /** @docs-private */\n    _controlInvalid(): boolean {\n        const parent = this._parentFormGroup || this._parentForm;\n        let control: FormControl | NgControl | null = null; // TODO this doesn't seem correct\n\n        if (this.checkboxGroup?.ngControl) {\n            control = this.checkboxGroup.ngControl;\n        } else {\n            control = this.ngControl ? (this.ngControl.control as FormControl) : null;\n        }\n\n        return this._errorStateMatcher.isErrorState(control as FormControl, parent);\n    }\n\n    ngOnInit() {\n        if (this.checkboxGroup) {\n            this.name = this.checkboxGroup.name;\n            // when relevant properties of the parent like name and disabled change\n            // we need to let change detection know that the template needs an update\n            this.checkboxGroup._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                this._cdr.markForCheck();\n            });\n        }\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._nativeInput);\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._focusMonitor.stopMonitoring(this._nativeInput);\n    }\n\n    private _setIndeterminate(value: boolean) {\n        this._indeterminate = value;\n        this.indeterminateChange.emit(this._indeterminate);\n        this._cdr.markForCheck();\n    }\n\n    private _setChecked(value: boolean) {\n        this._checked = value;\n        this._cdr.markForCheck();\n    }\n\n    /** Toggles the checked state of the checkbox. */\n    toggle() {\n        this.checked = !this.checked;\n        this.onChangeCallback(this.checked);\n        if (this.checkboxGroup !== null) {\n            this.checkboxGroup.change(this);\n        }\n    }\n\n    writeValue(value: any): void {\n        if (value === null) {\n            value = false;\n        }\n        if (value !== this.checked) {\n            this.checked = value;\n        }\n    }\n\n    private onChangeCallback = (_: any) => {};\n\n    registerOnChange(onChange: any): void {\n        this.onChangeCallback = onChange;\n    }\n\n    private onTouchedCallback = () => {};\n\n    registerOnTouched(onTouched: any): void {\n        this.onTouchedCallback = onTouched;\n    }\n\n    setDisabledState?(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /** Focuses the checkbox element. */\n    focus(focusOrigin?: FocusOrigin) {\n        this._focusMonitor.focusVia(this._nativeInput, focusOrigin as FocusOrigin);\n    }\n\n    /** @docs-private */\n    touch() {\n        this.onTouchedCallback();\n    }\n\n    /** @docs-private */\n    _onInputClick(event: Event): void {\n        // stop the propagation of the native click on the checkbox input so that a click is not triggered twice\n        event.stopPropagation();\n        if (!this.disabled) {\n            this.toggle();\n            this.checkedChange.emit(this._checked);\n            this.checkboxChange.emit(this._createChangeEvent(this._checked));\n        }\n    }\n\n    /** @docs-private */\n    private _createChangeEvent(checkedValue: boolean): NxCheckboxChangeEvent {\n        const event = new NxCheckboxChangeEvent(checkedValue, this.value, this);\n        event.checked = checkedValue;\n        event.value = this.value;\n        event.checkbox = this;\n        return event;\n    }\n}\n","<div>\n    <div class=\"nx-checkbox-group__label\">\n        <ng-content select=\"nx-label\"></ng-content>\n    </div>\n    <div *ngIf=\"errorState\" class=\"nx-checkbox-group__errors\">\n        <ng-content select=\"nx-error\"></ng-content>\n    </div>\n    <div class=\"nx-checkbox-group__controls\">\n        <ng-content></ng-content>\n    </div>\n</div>\n","<input\n    #input\n    type=\"checkbox\"\n    [id]=\"id\"\n    [name]=\"name\"\n    [checked]=\"checked\"\n    [indeterminate]=\"indeterminate\"\n    [disabled]=\"disabled\"\n    (blur)=\"touch()\"\n    [attr.aria-labelledby]=\"id + '-label'\"\n    (click)=\"_onInputClick($event)\"\n    class=\"nx-checkbox__input\"\n    [value]=\"value\"\n/>\n\n<label [id]=\"id + '-label'\" [attr.for]=\"id\" class=\"nx-checkbox__label\" [class.has-label]=\"labelHasContent\">\n    <span class=\"nx-checkbox__control\">\n        <nx-icon *ngIf=\"checked\" name=\"check\" aria-hidden=\"true\"></nx-icon>\n        <div *ngIf=\"indeterminate\" class=\"nx-checkbox__indeterminate-indicator\"></div>\n    </span>\n    <div class=\"nx-checkbox__label-text\" #checkboxLabelWrapper (cdkObserveContent)=\"labelContentChanged()\">\n        <ng-content></ng-content>\n    </div>\n</label>\n","import { ObserversModule } from '@angular/cdk/observers';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxErrorModule, NxLabelModule } from '@aposin/ng-aquila/base';\nimport { NxIconModule } from '@aposin/ng-aquila/icon';\n\nimport { NxCheckboxComponent, NxCheckboxGroupComponent } from './checkbox.component';\n\n@NgModule({\n    declarations: [NxCheckboxComponent, NxCheckboxGroupComponent],\n    exports: [NxCheckboxComponent, NxCheckboxGroupComponent, NxLabelModule, NxErrorModule],\n    imports: [CommonModule, NxIconModule, ObserversModule],\n})\nexport class NxCheckboxModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}