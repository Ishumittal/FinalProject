import * as i0 from '@angular/core';
import { Component, ChangeDetectionStrategy, ViewChild, Input, HostListener, NgModule } from '@angular/core';
import * as i1 from '@aposin/ng-aquila/copytext';
import { NxCopytextModule } from '@aposin/ng-aquila/copytext';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';

class NxSwipebarComponent {
    constructor(zone) {
        this.zone = zone;
        this._barLength = 0;
        this._position = 0;
        this._startX = 0;
        this._mousedown = false;
        this._showBar = false;
        /**
         * The label for this swipebar. Default: ''
         */
        this.label = '';
        this._onMousedown = this._onMousedown.bind(this);
        this._onMousemove = this._onMousemove.bind(this);
        this._onMouseup = this._onMouseup.bind(this);
        this._onScroll = this._onScroll.bind(this);
    }
    ngAfterViewInit() {
        this._onResize();
        // Run outside zone to not trigger change detection when scrolling.
        this.zone.runOutsideAngular(() => {
            this._scrollable.nativeElement.addEventListener('scroll', this._onScroll);
            this._indicator.nativeElement.addEventListener('mousedown', this._onMousedown);
        });
    }
    _onResize() {
        if (!this._scrollable) {
            return;
        }
        const { scrollWidth, offsetWidth } = this._scrollable.nativeElement;
        this._showBar = scrollWidth > offsetWidth;
        this._barLength = Math.max(80, (offsetWidth / scrollWidth) * offsetWidth);
        this._updateIndicator();
    }
    _onScroll($event) {
        if (this._mousedown) {
            return;
        }
        const target = $event.target;
        const { scrollWidth, clientWidth } = this._scrollable.nativeElement;
        this._position = Math.floor((target.scrollLeft / (scrollWidth - clientWidth)) * (target.offsetWidth - this._barLength));
        this._updateIndicator();
    }
    _onMousedown($event) {
        this._startX = $event.clientX;
        this._mousedown = true;
        document.addEventListener('mousemove', this._onMousemove);
        document.addEventListener('mouseup', this._onMouseup);
    }
    _onMousemove($event) {
        const { offsetWidth } = this._scrollable.nativeElement;
        this._position = Math.max(0, Math.min(offsetWidth - this._barLength, this._position + $event.clientX - this._startX));
        this._startX = $event.clientX;
        this._updateScrollablePosition();
        this._updateIndicator();
    }
    _onMouseup() {
        document.removeEventListener('mousemove', this._onMousemove);
        document.removeEventListener('mouseup', this._onMouseup);
        this._mousedown = false;
    }
    _updateScrollablePosition() {
        requestAnimationFrame(() => {
            const { scrollWidth, clientWidth, offsetWidth } = this._scrollable.nativeElement;
            this._scrollable.nativeElement.scrollLeft = (this._position / (offsetWidth - this._barLength)) * (scrollWidth - clientWidth);
        });
    }
    _updateIndicator() {
        requestAnimationFrame(() => {
            this._element.nativeElement.style.display = this._showBar ? 'block' : 'none';
            this._indicator.nativeElement.style.transform = `translateX(${this._position}px)`;
            this._indicator.nativeElement.style.width = `${this._barLength}px`;
        });
    }
}
NxSwipebarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSwipebarComponent, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
NxSwipebarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxSwipebarComponent, selector: "nx-swipebar", inputs: { label: "label" }, host: { listeners: { "window:resize": "_onResize()" } }, viewQueries: [{ propertyName: "_element", first: true, predicate: ["element"], descendants: true }, { propertyName: "_scrollable", first: true, predicate: ["scrollable"], descendants: true }, { propertyName: "_indicator", first: true, predicate: ["indicator"], descendants: true }], ngImport: i0, template: "<div aria-hidden=\"true\" #element>\n    <div class=\"label\" nxCopytext *ngIf=\"label\">{{ label }}</div>\n    <div class=\"bar\">\n        <div class=\"indicator\" #indicator></div>\n    </div>\n</div>\n<div class=\"scrollable\" #scrollable>\n    <ng-content></ng-content>\n</div>\n", styles: [":host{display:block}.label{margin-bottom:12px}.scrollable{overflow:auto;padding:var(--swipebar-padding);scrollbar-width:none}.scrollable::-webkit-scrollbar{display:none}.bar{background:var(--swipebar-background-color)}.indicator{position:relative;height:8px;background:var(--swipebar-color);cursor:grab;transform:translate(0)}.indicator:active{cursor:grabbing}.indicator:before{content:\"\";position:absolute;display:block;top:-8px;bottom:-8px;left:0;right:0}\n"], components: [{ type: i1.NxCopytextComponent, selector: "[nxCopytext]", inputs: ["nxCopytext"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSwipebarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-swipebar', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div aria-hidden=\"true\" #element>\n    <div class=\"label\" nxCopytext *ngIf=\"label\">{{ label }}</div>\n    <div class=\"bar\">\n        <div class=\"indicator\" #indicator></div>\n    </div>\n</div>\n<div class=\"scrollable\" #scrollable>\n    <ng-content></ng-content>\n</div>\n", styles: [":host{display:block}.label{margin-bottom:12px}.scrollable{overflow:auto;padding:var(--swipebar-padding);scrollbar-width:none}.scrollable::-webkit-scrollbar{display:none}.bar{background:var(--swipebar-background-color)}.indicator{position:relative;height:8px;background:var(--swipebar-color);cursor:grab;transform:translate(0)}.indicator:active{cursor:grabbing}.indicator:before{content:\"\";position:absolute;display:block;top:-8px;bottom:-8px;left:0;right:0}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }]; }, propDecorators: { _element: [{
                type: ViewChild,
                args: ['element']
            }], _scrollable: [{
                type: ViewChild,
                args: ['scrollable']
            }], _indicator: [{
                type: ViewChild,
                args: ['indicator']
            }], label: [{
                type: Input
            }], _onResize: [{
                type: HostListener,
                args: ['window:resize']
            }] } });

class NxSwipebarModule {
}
NxSwipebarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSwipebarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NxSwipebarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSwipebarModule, declarations: [NxSwipebarComponent], imports: [CommonModule, NxCopytextModule], exports: [NxSwipebarComponent] });
NxSwipebarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSwipebarModule, imports: [[CommonModule, NxCopytextModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSwipebarModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NxSwipebarComponent],
                    exports: [NxSwipebarComponent],
                    imports: [CommonModule, NxCopytextModule],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { NxSwipebarComponent, NxSwipebarModule };
//# sourceMappingURL=aposin-ng-aquila-swipebar.mjs.map
