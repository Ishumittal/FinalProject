import * as i0 from '@angular/core';
import { Directive, Input, InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Inject, ContentChild, ContentChildren, ViewChild, NgModule } from '@angular/core';
import { getClassNameList } from '@aposin/ng-aquila/utils';
import { Subject, merge } from 'rxjs';
import { startWith, takeUntil } from 'rxjs/operators';
import * as i1 from '@angular/common';
import { CommonModule } from '@angular/common';
import { NxErrorModule, NxLabelModule } from '@aposin/ng-aquila/base';

let uniqueId$3 = 0;
// This Directive solely purpose is to mark given ng-content and project it into the required destination.
class NxFormfieldAppendixDirective {
    constructor() {
        /** Sets the id of the formfield appendix. */
        this.id = `nx-formfield-appendix-${uniqueId$3++}`;
    }
}
NxFormfieldAppendixDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFormfieldAppendixDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NxFormfieldAppendixDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxFormfieldAppendixDirective, selector: "[nxFormfieldAppendix]", inputs: { id: "id" }, host: { properties: { "attr.id": "id" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFormfieldAppendixDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[nxFormfieldAppendix]',
                    host: {
                        '[attr.id]': 'id',
                    },
                }]
        }], propDecorators: { id: [{
                type: Input
            }] } });

let uniqueId$2 = 0;
class NxFormfieldErrorDirective {
    constructor() {
        // create a unique id to be used by aria-described-by
        /** Sets the id of the formfield error. */
        this.id = `nx-formfield-error-${uniqueId$2++}`;
    }
}
NxFormfieldErrorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFormfieldErrorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NxFormfieldErrorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxFormfieldErrorDirective, selector: "[nxFormfieldError], [nxError]", inputs: { id: "id" }, host: { attributes: { "role": "alert" }, properties: { "attr.id": "id" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFormfieldErrorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[nxFormfieldError], [nxError]',
                    host: {
                        role: 'alert',
                        '[attr.id]': 'id',
                    },
                }]
        }], propDecorators: { id: [{
                type: Input
            }] } });

/** @docs-private */
class NxFormfieldControl {
}
NxFormfieldControl.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFormfieldControl, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NxFormfieldControl.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxFormfieldControl, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFormfieldControl, decorators: [{
            type: Directive
        }] });

let uniqueId$1 = 0;
// This Directive solely purpose is to mark given ng-content and project it into the required destination.
class NxFormfieldHintDirective {
    constructor() {
        /** Sets the id of the formfield hint. */
        this.id = `nx-formfield-hint-${uniqueId$1++}`;
    }
}
NxFormfieldHintDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFormfieldHintDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NxFormfieldHintDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxFormfieldHintDirective, selector: "[nxFormfieldHint]", inputs: { id: "id" }, host: { properties: { "attr.id": "id", "class.nx-formfield-hint": "true" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFormfieldHintDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[nxFormfieldHint]',
                    host: {
                        '[attr.id]': 'id',
                        '[class.nx-formfield-hint]': 'true',
                    },
                }]
        }], propDecorators: { id: [{
                type: Input
            }] } });

/** A directive for passing more complex custom label content. */
class NxFormfieldLabelDirective {
    constructor(el) {
        this.el = el;
    }
}
NxFormfieldLabelDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFormfieldLabelDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
NxFormfieldLabelDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxFormfieldLabelDirective, selector: "nx-formfield-label", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFormfieldLabelDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'nx-formfield-label',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });

let uniqueId = 0;
// This Directive solely purpose is to mark given ng-content and project it into the required destination.
class NxFormfieldNoteDirective {
    constructor() {
        /** Sets the id of the formfield note. */
        this.id = `nx-formfield-note-${uniqueId++}`;
    }
}
NxFormfieldNoteDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFormfieldNoteDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NxFormfieldNoteDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxFormfieldNoteDirective, selector: "[nxFormfieldNote]", inputs: { id: "id" }, host: { properties: { "attr.id": "id" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFormfieldNoteDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[nxFormfieldNote]',
                    host: {
                        '[attr.id]': 'id',
                    },
                }]
        }], propDecorators: { id: [{
                type: Input
            }] } });

// This Directive solely purpose is to mark given ng-content and project it into the required destination.
class NxFormfieldPrefixDirective {
}
NxFormfieldPrefixDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFormfieldPrefixDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NxFormfieldPrefixDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxFormfieldPrefixDirective, selector: "[nxFormfieldPrefix]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFormfieldPrefixDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[nxFormfieldPrefix]',
                }]
        }] });

// This Directive solely purpose is to mark given ng-content and project it into the required destination.
class NxFormfieldSuffixDirective {
}
NxFormfieldSuffixDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFormfieldSuffixDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NxFormfieldSuffixDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxFormfieldSuffixDirective, selector: "[nxFormfieldSuffix]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFormfieldSuffixDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[nxFormfieldSuffix]',
                }]
        }] });

const NX_STYLES = {
    negative: 'nx-formfield--negative',
};
let nextUniqueId = 0;
const FORMFIELD_DEFAULT_OPTIONS = new InjectionToken('FORMFIELD_DEFAULT_OPTIONS');
class NxFormfieldComponent {
    constructor(
    /** @docs-private */ elementRef, renderer, _cdr, _defaultOptions) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this._cdr = _cdr;
        this._defaultOptions = _defaultOptions;
        this._styles = '';
        /** Html id of the formfield label */
        this.labelId = `nx-formfield-label-${nextUniqueId++}`;
        this._destroyed = new Subject();
    }
    /**
     * Whether the label should float once the input is focused or filled (auto, default)
     * or force it to always float with a value of always to simulate a more static form.
     */
    get floatLabel() {
        var _a;
        return this._floatLabel || ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.nxFloatLabel) || 'auto';
    }
    set floatLabel(value) {
        if (value !== this._floatLabel) {
            this._floatLabel = value || 'auto';
            this._cdr.markForCheck();
        }
    }
    /**
     * Sets the styling of the formfield.
     * If 'negative', a negative set of stylings is used.
     */
    set styles(value) {
        if (this._styles === value) {
            return;
        }
        const classNames = getClassNameList(value, NX_STYLES);
        classNames.forEach(classStr => {
            this.renderer.addClass(this.elementRef.nativeElement, classStr);
        });
        this._styles = value;
    }
    /**
     * **Expert option**
     *
     * Sets the appearance of the formfield.
     */
    set appearance(value) {
        if (this._appearance !== value) {
            this._appearance = value;
            this._cdr.markForCheck();
        }
    }
    get appearance() {
        var _a;
        return this._appearance || ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.appearance) || 'auto';
    }
    get _shouldAlwaysFloat() {
        return this.floatLabel === 'always';
    }
    /** @docs-private */
    get shouldLabelFloat() {
        return this._control.shouldLabelFloat || this._shouldAlwaysFloat;
    }
    /** @docs-private */
    get control() {
        return this._control;
    }
    ngAfterContentInit() {
        let subscription;
        this._validateControlChild();
        if (this._control.controlType) {
            this.elementRef.nativeElement.classList.add(`nx-formfield--type-${this._control.controlType}`);
        }
        // Subscribe to changes in the child control state in order to update the form field UI.
        this._control.stateChanges.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {
            Promise.resolve().then(() => {
                this._syncDescribedByIds();
                this._cdr.markForCheck();
            });
        });
        merge(this._hintChildren.changes, this._appendixChildren.changes, this._prefixChildren.changes, this._suffixChildren.changes, this._noteChildren.changes)
            .pipe(startWith(null), takeUntil(this._destroyed))
            .subscribe(() => {
            this._cdr.markForCheck();
        });
        // Update the aria-described by when the number of errors changes.
        this._errorChildren.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {
            Promise.resolve().then(() => {
                this._syncDescribedByIds();
                this._cdr.markForCheck();
            });
        });
    }
    ngAfterContentChecked() {
        this._validateControlChild();
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
    /** @docs-private */
    getDisplayedMessage() {
        if (this._control.errorState && this._errorChildren && this._errorChildren.length > 0) {
            return 'error';
        }
        if (this._noteChildren && this._noteChildren.length > 0) {
            return 'note';
        }
        return '';
    }
    _syncDescribedByIds() {
        if (this._control) {
            let ids = [];
            ids = this._hintChildren.map(hint => hint.id);
            if (this.getDisplayedMessage() === 'note') {
                ids = [...this._noteChildren.map(hint => hint.id), ...ids];
            }
            else if (this._errorChildren) {
                ids = [...this._errorChildren.map(error => error.id), ...ids];
            }
            this._control.setDescribedByIds(ids);
        }
    }
    // Fail if the required control is missing.
    _validateControlChild() {
        if (!this._control) {
            throw new Error('Formfield must contain a NxFormfieldControl like input[nxInput] or a custom implementation');
        }
    }
    /** @docs-private */
    getConnectedOverlayOrigin() {
        return this._connectionContainerRef || this.elementRef;
    }
    /** @docs-private */
    _hasLabel() {
        return !!this._labelChild || !!this.label;
    }
    /** @docs-private
     * The placeholder is hidden when
     *  - the control is not empty
     *  - The label is not floated
     * */
    _hideControlPlaceholder() {
        return (!this.shouldLabelFloat && this._hasLabel()) || !this._control.empty;
    }
    _getTitle() {
        var _a, _b;
        if (!this._labelChild) {
            return (_a = this.label) !== null && _a !== void 0 ? _a : '';
        }
        return (_b = this._labelChild.el.nativeElement) === null || _b === void 0 ? void 0 : _b.innerText;
    }
}
NxFormfieldComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFormfieldComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }, { token: FORMFIELD_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NxFormfieldComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxFormfieldComponent, selector: "nx-formfield", inputs: { label: ["nxLabel", "label"], floatLabel: ["nxFloatLabel", "floatLabel"], styles: ["nxStyle", "styles"], appearance: "appearance" }, host: { properties: { "class.nx-formfield": "true", "class.is-disabled": "this._control.disabled", "class.is-readonly": "this._control.readonly", "class.is-filled": "this._control.empty === false", "class.is-focused": "this._control.focused", "class.is-floating": "this.shouldLabelFloat", "class.has-error": "this._control.errorState", "class.has-outline": "this.appearance === \"outline\"", "class.has-hint": "this._hintChildren?.length > 0" } }, queries: [{ propertyName: "_control", first: true, predicate: NxFormfieldControl, descendants: true }, { propertyName: "_labelChild", first: true, predicate: NxFormfieldLabelDirective, descendants: true }, { propertyName: "_hintChildren", predicate: NxFormfieldHintDirective }, { propertyName: "_noteChildren", predicate: NxFormfieldNoteDirective }, { propertyName: "_errorChildren", predicate: NxFormfieldErrorDirective }, { propertyName: "_suffixChildren", predicate: NxFormfieldSuffixDirective }, { propertyName: "_prefixChildren", predicate: NxFormfieldPrefixDirective }, { propertyName: "_appendixChildren", predicate: NxFormfieldAppendixDirective }], viewQueries: [{ propertyName: "_connectionContainerRef", first: true, predicate: ["connectionContainer"], descendants: true, static: true }], ngImport: i0, template: "<!--\nWe are building the following structure.\n\n+-----------------------------+ +-----------+\n| Prefix |   Input   | Suffix | |  Appendix |\n+-----------------------------+ +-----------+\n|-----------------Border--------------------|\n+-------------------------------------------+\n|                 Hints                     |\n+-------------------------------------------+\n|                                           |\n|                Messages                   |\n|                                           |\n+-------------------------------------------+\n\n-->\n\n<div class=\"nx-formfield__wrapper\">\n    <!-- Give a flex context to properly align suffix, input & postfix -->\n    <div class=\"nx-formfield__row\">\n        <div class=\"nx-formfield__flexfield\">\n            <div class=\"nx-formfield__input-container\" #connectionContainer>\n                <div class=\"nx-formfield__prefix\" *ngIf=\"_prefixChildren.length\">\n                    <ng-content select=\"[nxFormfieldPrefix]\"></ng-content>\n                </div>\n\n                <div class=\"nx-formfield__input\" [title]=\"_getTitle()\">\n                    <!-- This handles the floating whole behavior -->\n                    <span class=\"nx-formfield__label-holder\">\n                        <label class=\"nx-formfield__label\" [id]=\"labelId\" [attr.aria-owns]=\"_control.id\" [attr.for]=\"_control.id\">\n                            <ng-container *ngIf=\"!_labelChild\">\n                                {{ label }}\n                            </ng-container>\n                            <ng-content select=\"nx-formfield-label\"></ng-content>\n                        </label>\n                    </span>\n\n                    <ng-content></ng-content>\n                </div>\n\n                <div class=\"nx-formfield__suffix\" *ngIf=\"_suffixChildren.length\">\n                    <ng-content select=\"[nxFormfieldSuffix]\"></ng-content>\n                </div>\n            </div>\n            <!-- Space to render the hints below the textfield -->\n            <div class=\"nx-formfield__hints\" *ngIf=\"_hintChildren.length\">\n                <ng-content select=\"[nxFormfieldHint]\"></ng-content>\n            </div>\n        </div>\n\n        <!-- Appendix is similar to a suffix but visibly outside of the input  -->\n        <div class=\"nx-formfield__appendix\" *ngIf=\"_appendixChildren.length\">\n            <ng-content select=\"[nxFormfieldAppendix]\"></ng-content>\n        </div>\n    </div>\n\n    <!-- In case we got some additional information we render them below the given input -->\n    <ng-container [ngSwitch]=\"getDisplayedMessage()\">\n        <div class=\"nx-formfield__message\" *ngSwitchCase=\"'error'\">\n            <ng-content select=\"[nxFormfieldError]\"></ng-content>\n        </div>\n\n        <div class=\"nx-formfield__message\" *ngSwitchCase=\"'note'\">\n            <ng-content select=\"[nxFormfieldNote]\"></ng-content>\n        </div>\n    </ng-container>\n</div>\n", styles: [".nx-formfield{display:block;color:var(--text-01)}.nx-formfield nx-message{margin-top:12px}.nx-formfield__wrapper{padding-bottom:var(--formfield-bottom-padding);padding-top:var(--formfield-label-height)}.has-hint .nx-formfield__wrapper{padding-bottom:0}.nx-formfield__row{min-height:var(--formfield-control-height);background-color:var(--formfield-background-color);display:flex;align-items:stretch;width:100%}.nx-formfield__row:after{content:\"\";font-size:0;display:block;min-height:inherit}.nx-formfield__flexfield{font-size:var(--formfield-control-font-size);line-height:var(--formfield-control-line-height);font-weight:var(--formfield-control-font-weight);letter-spacing:var(--formfield-control-letter-spacing);align-items:stretch;flex-direction:column;display:inline-flex;width:100%;position:relative;min-width:0;flex:0 1 auto}.nx-formfield__input-container{display:flex;border-bottom:var(--formfield-border-width) solid var(--formfield-border-color);height:var(--formfield-control-height);flex:auto;padding:var(--formfield-input-padding)}.nx-formfield__input{position:relative;flex:auto;min-width:0;display:flex;text-align:left}[dir=rtl] .nx-formfield__input{text-align:right}.nx-formfield__label-holder{position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none}[dir=rtl] .nx-formfield__label-holder{right:0;left:auto}.nx-formfield__label{font-size:var(--formfield-placeholder-label-font-size);line-height:var(--formfield-placeholder-label-line-height);font-weight:var(--formfield-placeholder-label-font-weight);letter-spacing:var(--formfield-placeholder-label-letter-spacing);color:var(--formfield-label-color);display:block;position:absolute;left:0;pointer-events:none;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform-origin:0 0;transition:transform .15s ease-out,font-size .15s ease-out;-webkit-text-size-adjust:100%;-moz-text-size-adjust:100%;text-size-adjust:100%;text-align:left}[dir=rtl] .nx-formfield__label{right:0;left:auto;text-align:right}.nx-formfield__appendix,.nx-formfield__prefix,.nx-formfield__suffix{align-items:center;flex:none;white-space:nowrap;color:var(--formfield-control-color)}.nx-formfield__appendix nx-icon.nx-icon--auto,.nx-formfield__prefix nx-icon.nx-icon--auto,.nx-formfield__suffix nx-icon.nx-icon--auto{font-size:var(--formfield-icon-size)}.nx-formfield__appendix nx-icon,.nx-formfield__prefix nx-icon,.nx-formfield__suffix nx-icon{display:block}.nx-formfield__prefix,.nx-formfield__suffix{display:inline-flex}.nx-formfield__appendix{height:var(--formfield-control-height);margin-left:8px;display:flex;border-bottom-style:solid;border-bottom-color:transparent;border-bottom-width:var(--formfield-border-width);padding:var(--formfield-input-padding)}[dir=rtl] .nx-formfield__appendix{margin-right:8px;margin-left:0;margin-left:initial}.nx-formfield__prefix{margin-right:8px}[dir=rtl] .nx-formfield__prefix{margin-right:0;margin-right:initial;margin-left:8px}.nx-formfield__suffix{margin-left:8px}[dir=rtl] .nx-formfield__suffix{margin-right:8px;margin-left:0;margin-left:initial}.nx-formfield__hints{color:var(--text-01);font-size:var(--formfield-hint-font-size);line-height:var(--formfield-hint-line-height);font-weight:var(--formfield-hint-font-weight);letter-spacing:var(--formfield-hint-letter-spacing);padding-top:8px;text-align:right}[dir=rtl] .nx-formfield__hints{text-align:left}.nx-formfield-hint{display:block;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.nx-formfield__message{margin-top:4px}.nx-formfield:not(.nx-formfield--negative) .nx-formfield__appendix nx-icon{color:var(--formfield-active-color)}.nx-formfield.is-focused .nx-formfield__label{text-overflow:ellipsis}.nx-formfield.is-focused:not(.nx-formfield--negative):not(.has-error){color:var(--formfield-active-color)}.nx-formfield.is-focused:not(.nx-formfield--negative):not(.has-error) .nx-formfield__input-container{border-bottom-color:var(--formfield-active-border-color)}.nx-formfield.is-focused:not(.nx-formfield--negative):not(.has-error).nx-formfield--negative{color:var(--negative)}.nx-formfield:not(.nx-formfield--negative):not(.has-error):not(.is-disabled):not(.is-focused):not(.has-outline) .nx-formfield__row:hover .nx-formfield__input-container{border-bottom-color:var(--formfield-hover-border-color)}.nx-formfield.is-focused:not(.nx-formfield--negative).has-outline .nx-formfield__input-container{border-color:var(--formfield-outline-active-border-color);box-shadow:var(--formfield-outline-focus-box-shadow)}@media screen and (-ms-high-contrast: active){.nx-formfield.is-focused:not(.nx-formfield--negative).has-outline .nx-formfield__input-container{box-shadow:0 0 0 2px highlight;border:1px solid highlight}}.nx-formfield.is-focused:not(.nx-formfield--negative).has-outline.has-error .nx-formfield__input-container{border-bottom-color:var(--danger)}.nx-formfield.has-outline{font-size:var(--formfield-outline-control-font-size);line-height:var(--formfield-outline-control-line-height);font-weight:var(--formfield-outline-control-font-weight);letter-spacing:var(--formfield-outline-control-letter-spacing)}.nx-formfield.has-outline.nx-formfield--type-textarea .nx-formfield__input-container{height:auto}.nx-formfield.has-outline .nx-formfield__wrapper{padding-top:var(--formfield-outline-label-height)}.nx-formfield.has-outline .nx-formfield__row{min-height:var(--formfield-outline-control-height)}.nx-formfield.has-outline .nx-formfield__flexfield{font-size:var(--formfield-outline-control-font-size);line-height:var(--formfield-outline-control-line-height);font-weight:var(--formfield-outline-control-font-weight);letter-spacing:var(--formfield-outline-control-letter-spacing);padding:0}.nx-formfield.has-outline .nx-formfield__input-container{padding:0;border-width:var(--formfield-border-width);border-color:var(--formfield-outline-border-color);background-color:var(--formfield-outline-background-color);border-style:solid;border-radius:4px;height:var(--formfield-outline-control-height)}.nx-formfield.has-outline input,.nx-formfield.has-outline nx-dropdown .nx-dropdown__container,.nx-formfield.has-outline nx-multi-select .value{padding:0 7px}.nx-formfield.has-outline .nx-formfield__suffix{margin-right:7px;margin-left:0}[dir=rtl] .nx-formfield.has-outline .nx-formfield__suffix{margin-right:0;margin-left:7px}.nx-formfield.has-outline .nx-formfield__prefix{margin-left:7px;margin-right:0}[dir=rtl] .nx-formfield.has-outline .nx-formfield__prefix{margin-right:7px;margin-left:0}.nx-formfield.has-outline .nx-formfield__input textarea.nx-input{line-height:24px;padding:7px;min-height:var(--formfield-outline-control-line-height)}.nx-formfield.has-outline .nx-formfield__appendix{height:var(--formfield-outline-control-height);margin-left:8px;display:flex;border-top:var(--formfield-border-width) solid transparent;border-bottom:var(--formfield-border-width) solid transparent;padding:0}[dir=rtl] .nx-formfield.has-outline .nx-formfield__appendix{margin-left:0;margin-left:initial;margin-right:8px}.nx-formfield.has-outline .nx-formfield__hints{text-align:left;font-size:var(--formfield-outline-hint-font-size);line-height:var(--formfield-outline-hint-line-height);font-weight:var(--formfield-outline-hint-font-weight);letter-spacing:var(--formfield-outline-hint-letter-spacing)}[dir=rtl] .nx-formfield.has-outline .nx-formfield__hints{text-align:right}.nx-formfield.has-outline input::placeholder,.nx-formfield.has-outline textarea::placeholder{font-size:var(--formfield-outline-input-native-placeholder-font-size);line-height:var(--formfield-outline-input-native-placeholder-line-height);font-weight:var(--formfield-outline-input-native-placeholder-font-weight);letter-spacing:var(--formfield-outline-input-native-placeholder-letter-spacing);color:var(--formfield-input-native-placeholder-color)}.nx-formfield.has-outline input::placeholder,.nx-formfield.has-outline textarea::placeholder{opacity:1}.nx-formfield.has-outline input::-moz-placeholder{line-height:calc(var(--formfield-outline-control-height) - 2 * var(--formfield-border-width))}.nx-formfield.has-outline.is-readonly:not(.is-disabled) .nx-formfield__input-container{border-color:var(--formfield-readonly-border-color);background-color:var(--formfield-readonly-background-color)}.nx-formfield:not(.has-outline).is-readonly:not(.is-disabled) .nx-formfield__input-container{border-bottom-color:var(--formfield-readonly-border-color)}.nx-formfield.is-floating .nx-formfield__label{transform:translateY(var(--formfield-floating-distance));font-size:var(--formfield-label-font-size);line-height:var(--formfield-label-line-height);font-weight:var(--formfield-label-font-weight);letter-spacing:var(--formfield-label-letter-spacing)}.nx-formfield.is-floating.is-filled .nx-formfield__label{transition:none}.nx-formfield.is-floating.has-outline .nx-formfield__label{padding-top:0;transform:translateY(var(--formfield-outline-floating-distance));font-size:var(--formfield-outline-label-font-size);line-height:var(--formfield-outline-label-line-height);font-weight:var(--formfield-outline-label-font-weight);letter-spacing:var(--formfield-outline-label-letter-spacing)}.nx-formfield.is-floating.has-outline .nx-formfield__prefix~.nx-formfield__input .nx-formfield__label{padding:0}.nx-formfield.is-floating.has-outline .nx-formfield__input-container{position:relative}.nx-formfield.is-floating.has-outline .nx-formfield__input{position:unset}.nx-formfield.has-error:not(.has-outline):not(.is-floating) .nx-formfield__label{font-weight:var(--formfield-error-input-font-weight)}.nx-formfield.has-error:not(.has-outline) .nx-formfield__prefix,.nx-formfield.has-error:not(.has-outline) .nx-formfield__suffix{font-weight:var(--formfield-error-input-font-weight)}.nx-formfield.has-error:not(.has-outline) .nx-formfield__input input.nx-input{font-weight:var(--formfield-error-input-font-weight)}.nx-formfield.has-error:not(.nx-formfield--negative){color:var(--danger)}.nx-formfield.has-error:not(.nx-formfield--negative):not(.has-outline) .nx-formfield__prefix,.nx-formfield.has-error:not(.nx-formfield--negative):not(.has-outline) .nx-formfield__suffix,.nx-formfield.has-error:not(.nx-formfield--negative):not(.has-outline) .nx-formfield__label{color:var(--danger)}.nx-formfield.has-error:not(.nx-formfield--negative) .nx-formfield__input-container{border-bottom-color:var(--danger)}.nx-formfield.has-error:not(.nx-formfield--negative).is-floating .nx-formfield__label{color:var(--formfield-label-color)}.nx-formfield.has-error:not(.nx-formfield--negative).has-outline{color:var(--text-01)}.nx-formfield.has-error:not(.nx-formfield--negative).has-outline .nx-formfield__input-container{border-color:var(--danger)}.nx-formfield.is-disabled{color:var(--formfield-disabled-text-color);-webkit-text-fill-color:var(--formfield-disabled-text-color);cursor:not-allowed}.nx-formfield.is-disabled .nx-formfield__hints{color:inherit}.nx-formfield.is-disabled .nx-formfield__input-container{border-bottom-color:var(--formfield-disabled-border-color)}.nx-formfield.is-disabled.has-outline .nx-formfield__input-container{border-color:var(--formfield-disabled-border-color)}.nx-formfield.is-disabled nx-datepicker-toggle button{color:var(--formfield-disabled-text-color)}.nx-formfield.is-readonly:not(.is-disabled) nx-datepicker-toggle button{color:var(--formfield-disabled-text-color)}.nx-formfield--negative{color:var(--negative)}.nx-formfield--negative .nx-formfield__hints{color:inherit}.nx-formfield--negative .nx-formfield__input-container,.nx-formfield--negative.has-outline .nx-formfield__input-container{border-color:var(--negative)}.nx-formfield--negative .nx-formfield__appendix,.nx-formfield--negative .nx-formfield__prefix,.nx-formfield--negative .nx-formfield__suffix,.nx-formfield--negative .nx-formfield__label{color:var(--negative)}.nx-formfield--type-nx-dropdown .nx-formfield__label,.nx-formfield--type-nx-multi-select .nx-formfield__label{width:calc(100% - var(--formfield-icon-size))}.nx-formfield__input textarea.nx-input{vertical-align:bottom;min-height:var(--formfield-control-line-height);resize:vertical}@media screen and (-ms-high-contrast: active){.nx-formfield__input-container,.nx-formfield.nx-formfield--negative .nx-formfield__input-container,.nx-formfield:not(.nx-formfield--negative):not(.has-error):not(.is-disabled):not(.is-focused):not(.has-outline) .nx-formfield__row:hover .nx-formfield__input-container,.nx-formfield.has-error:not(.nx-formfield--negative) .nx-formfield__input-container{border-bottom-color:buttonText}.nx-formfield.has-outline .nx-formfield__input-container{border-color:buttonText}.nx-formfield.has-outline .nx-formfield__appendix{border-bottom-color:window;border-top-color:window}.nx-formfield.is-disabled{color:GrayText;-webkit-text-fill-color:GrayText}.nx-formfield.is-disabled .nx-formfield__input-container{border-bottom-color:GrayText}.nx-formfield.is-disabled .nx-formfield__hints{color:windowText}.nx-formfield.is-disabled.has-outline .nx-formfield__input-container{border-color:GrayText}.nx-formfield.is-focused:not(.has-outline) .nx-formfield__input-container,.nx-formfield.is-focused:not(.nx-formfield--negative):not(.has-error) .nx-formfield__input-container{border-bottom-color:highlight}.nx-formfield:not(.nx-formfield--negative) .nx-formfield__appendix nx-icon{color:inherit}}.nx-formfield--type-textarea .nx-formfield__flexfield{padding:0}.nx-formfield--type-textarea .nx-formfield__input-container{height:auto}input:-webkit-autofill{-webkit-transition:background-color 5000s ease-in-out 0s;transition:background-color 5000s ease-in-out 0s}input:-webkit-autofill:first-line{font-size:var(--formfield-control-font-size);line-height:var(--formfield-control-line-height);font-weight:var(--formfield-control-font-weight);letter-spacing:var(--formfield-control-letter-spacing);font-family:var(--font-family);color:var(--formfield-control-color)}.nx-formfield.has-outline input:-webkit-autofill:first-line{font-size:var(--formfield-outline-control-font-size);line-height:var(--formfield-outline-control-line-height);font-weight:var(--formfield-outline-control-font-weight);letter-spacing:var(--formfield-outline-control-letter-spacing)}\n", "@keyframes cdk-text-field-autofill-start{}@keyframes cdk-text-field-autofill-end{}.cdk-text-field-autofill-monitored:-webkit-autofill{animation:cdk-text-field-autofill-start 0s 1ms}.cdk-text-field-autofill-monitored:not(:-webkit-autofill){animation:cdk-text-field-autofill-end 0s 1ms}textarea.cdk-textarea-autosize{resize:none;box-sizing:content-box}textarea.cdk-textarea-autosize-measuring{height:auto!important;overflow:hidden!important;padding:2px 0!important;box-sizing:content-box!important}.c-input{text-align:inherit;font-size:inherit;font-weight:inherit;background:0 0;color:inherit;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%}.c-input::-ms-clear{display:none}.c-input::-webkit-search-decoration,.c-input::-webkit-search-cancel-button,.c-input::-webkit-search-results-button,.c-input::-webkit-search-results-decoration{display:none;-webkit-appearance:none}.c-input::placeholder{-webkit-user-select:none;user-select:none;font-size:var(--formfield-input-native-placeholder-font-size);line-height:var(--formfield-input-native-placeholder-line-height);font-weight:var(--formfield-input-native-placeholder-font-weight);letter-spacing:var(--formfield-input-native-placeholder-letter-spacing);color:var(--formfield-input-native-placeholder-color);transition:color ease-in .1s .2s}.c-input::placeholder:-ms-input-placeholder{-ms-user-select:text}.c-input::-moz-placeholder{user-select:none;font-size:var(--formfield-input-native-placeholder-font-size);line-height:var(--formfield-input-native-placeholder-line-height);font-weight:var(--formfield-input-native-placeholder-font-weight);letter-spacing:var(--formfield-input-native-placeholder-letter-spacing);color:var(--formfield-input-native-placeholder-color);-moz-transition:color ease-in .1s .2s;transition:color ease-in .1s .2s}.c-input::-moz-placeholder:-ms-input-placeholder{-ms-user-select:text}.c-input::-webkit-input-placeholder{-webkit-user-select:none;user-select:none;font-size:var(--formfield-input-native-placeholder-font-size);line-height:var(--formfield-input-native-placeholder-line-height);font-weight:var(--formfield-input-native-placeholder-font-weight);letter-spacing:var(--formfield-input-native-placeholder-letter-spacing);color:var(--formfield-input-native-placeholder-color);-webkit-transition:color ease-in .1s .2s;transition:color ease-in .1s .2s}.c-input::-webkit-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.c-input:-ms-input-placeholder{user-select:none;font-size:var(--formfield-input-native-placeholder-font-size);line-height:var(--formfield-input-native-placeholder-line-height);font-weight:var(--formfield-input-native-placeholder-font-weight);letter-spacing:var(--formfield-input-native-placeholder-letter-spacing);color:var(--formfield-input-native-placeholder-color);-ms-transition:color ease-in .1s .2s;transition:color ease-in .1s .2s}.c-input:-ms-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.c-input::-moz-placeholder{line-height:calc(var(--formfield-control-height) - var(--formfield-border-width))}textarea.c-input{height:auto;font-family:inherit}.c-input.is-focused{border:none;outline:none;box-shadow:none}.c-input.is-focused::placeholder{opacity:1;transition:opacity ease-in .2s .15s}.c-input.is-focused::-moz-placeholder{opacity:1;-moz-transition:opacity ease-in .2s .15s;transition:opacity ease-in .2s .15s}.c-input.is-focused::-webkit-input-placeholder{opacity:1;-webkit-transition:opacity ease-in .2s .15s;transition:opacity ease-in .2s .15s}.c-input.is-focused:-ms-input-placeholder{opacity:1;-ms-transition:opacity ease-in .2s .15s;transition:opacity ease-in .2s .15s}.c-input.is-disabled{cursor:not-allowed}textarea.nx-input-element{resize:vertical;overflow:auto}.c-input:invalid,.c-input:required{box-shadow:none}\n"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFormfieldComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-formfield', host: {
                        '[class.nx-formfield]': 'true',
                        '[class.is-disabled]': 'this._control.disabled',
                        '[class.is-readonly]': 'this._control.readonly',
                        '[class.is-filled]': 'this._control.empty === false',
                        '[class.is-focused]': 'this._control.focused',
                        '[class.is-floating]': 'this.shouldLabelFloat',
                        '[class.has-error]': 'this._control.errorState',
                        '[class.has-outline]': 'this.appearance === "outline"',
                        '[class.has-hint]': 'this._hintChildren?.length > 0',
                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: "<!--\nWe are building the following structure.\n\n+-----------------------------+ +-----------+\n| Prefix |   Input   | Suffix | |  Appendix |\n+-----------------------------+ +-----------+\n|-----------------Border--------------------|\n+-------------------------------------------+\n|                 Hints                     |\n+-------------------------------------------+\n|                                           |\n|                Messages                   |\n|                                           |\n+-------------------------------------------+\n\n-->\n\n<div class=\"nx-formfield__wrapper\">\n    <!-- Give a flex context to properly align suffix, input & postfix -->\n    <div class=\"nx-formfield__row\">\n        <div class=\"nx-formfield__flexfield\">\n            <div class=\"nx-formfield__input-container\" #connectionContainer>\n                <div class=\"nx-formfield__prefix\" *ngIf=\"_prefixChildren.length\">\n                    <ng-content select=\"[nxFormfieldPrefix]\"></ng-content>\n                </div>\n\n                <div class=\"nx-formfield__input\" [title]=\"_getTitle()\">\n                    <!-- This handles the floating whole behavior -->\n                    <span class=\"nx-formfield__label-holder\">\n                        <label class=\"nx-formfield__label\" [id]=\"labelId\" [attr.aria-owns]=\"_control.id\" [attr.for]=\"_control.id\">\n                            <ng-container *ngIf=\"!_labelChild\">\n                                {{ label }}\n                            </ng-container>\n                            <ng-content select=\"nx-formfield-label\"></ng-content>\n                        </label>\n                    </span>\n\n                    <ng-content></ng-content>\n                </div>\n\n                <div class=\"nx-formfield__suffix\" *ngIf=\"_suffixChildren.length\">\n                    <ng-content select=\"[nxFormfieldSuffix]\"></ng-content>\n                </div>\n            </div>\n            <!-- Space to render the hints below the textfield -->\n            <div class=\"nx-formfield__hints\" *ngIf=\"_hintChildren.length\">\n                <ng-content select=\"[nxFormfieldHint]\"></ng-content>\n            </div>\n        </div>\n\n        <!-- Appendix is similar to a suffix but visibly outside of the input  -->\n        <div class=\"nx-formfield__appendix\" *ngIf=\"_appendixChildren.length\">\n            <ng-content select=\"[nxFormfieldAppendix]\"></ng-content>\n        </div>\n    </div>\n\n    <!-- In case we got some additional information we render them below the given input -->\n    <ng-container [ngSwitch]=\"getDisplayedMessage()\">\n        <div class=\"nx-formfield__message\" *ngSwitchCase=\"'error'\">\n            <ng-content select=\"[nxFormfieldError]\"></ng-content>\n        </div>\n\n        <div class=\"nx-formfield__message\" *ngSwitchCase=\"'note'\">\n            <ng-content select=\"[nxFormfieldNote]\"></ng-content>\n        </div>\n    </ng-container>\n</div>\n", styles: [".nx-formfield{display:block;color:var(--text-01)}.nx-formfield nx-message{margin-top:12px}.nx-formfield__wrapper{padding-bottom:var(--formfield-bottom-padding);padding-top:var(--formfield-label-height)}.has-hint .nx-formfield__wrapper{padding-bottom:0}.nx-formfield__row{min-height:var(--formfield-control-height);background-color:var(--formfield-background-color);display:flex;align-items:stretch;width:100%}.nx-formfield__row:after{content:\"\";font-size:0;display:block;min-height:inherit}.nx-formfield__flexfield{font-size:var(--formfield-control-font-size);line-height:var(--formfield-control-line-height);font-weight:var(--formfield-control-font-weight);letter-spacing:var(--formfield-control-letter-spacing);align-items:stretch;flex-direction:column;display:inline-flex;width:100%;position:relative;min-width:0;flex:0 1 auto}.nx-formfield__input-container{display:flex;border-bottom:var(--formfield-border-width) solid var(--formfield-border-color);height:var(--formfield-control-height);flex:auto;padding:var(--formfield-input-padding)}.nx-formfield__input{position:relative;flex:auto;min-width:0;display:flex;text-align:left}[dir=rtl] .nx-formfield__input{text-align:right}.nx-formfield__label-holder{position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none}[dir=rtl] .nx-formfield__label-holder{right:0;left:auto}.nx-formfield__label{font-size:var(--formfield-placeholder-label-font-size);line-height:var(--formfield-placeholder-label-line-height);font-weight:var(--formfield-placeholder-label-font-weight);letter-spacing:var(--formfield-placeholder-label-letter-spacing);color:var(--formfield-label-color);display:block;position:absolute;left:0;pointer-events:none;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform-origin:0 0;transition:transform .15s ease-out,font-size .15s ease-out;-webkit-text-size-adjust:100%;-moz-text-size-adjust:100%;text-size-adjust:100%;text-align:left}[dir=rtl] .nx-formfield__label{right:0;left:auto;text-align:right}.nx-formfield__appendix,.nx-formfield__prefix,.nx-formfield__suffix{align-items:center;flex:none;white-space:nowrap;color:var(--formfield-control-color)}.nx-formfield__appendix nx-icon.nx-icon--auto,.nx-formfield__prefix nx-icon.nx-icon--auto,.nx-formfield__suffix nx-icon.nx-icon--auto{font-size:var(--formfield-icon-size)}.nx-formfield__appendix nx-icon,.nx-formfield__prefix nx-icon,.nx-formfield__suffix nx-icon{display:block}.nx-formfield__prefix,.nx-formfield__suffix{display:inline-flex}.nx-formfield__appendix{height:var(--formfield-control-height);margin-left:8px;display:flex;border-bottom-style:solid;border-bottom-color:transparent;border-bottom-width:var(--formfield-border-width);padding:var(--formfield-input-padding)}[dir=rtl] .nx-formfield__appendix{margin-right:8px;margin-left:0;margin-left:initial}.nx-formfield__prefix{margin-right:8px}[dir=rtl] .nx-formfield__prefix{margin-right:0;margin-right:initial;margin-left:8px}.nx-formfield__suffix{margin-left:8px}[dir=rtl] .nx-formfield__suffix{margin-right:8px;margin-left:0;margin-left:initial}.nx-formfield__hints{color:var(--text-01);font-size:var(--formfield-hint-font-size);line-height:var(--formfield-hint-line-height);font-weight:var(--formfield-hint-font-weight);letter-spacing:var(--formfield-hint-letter-spacing);padding-top:8px;text-align:right}[dir=rtl] .nx-formfield__hints{text-align:left}.nx-formfield-hint{display:block;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.nx-formfield__message{margin-top:4px}.nx-formfield:not(.nx-formfield--negative) .nx-formfield__appendix nx-icon{color:var(--formfield-active-color)}.nx-formfield.is-focused .nx-formfield__label{text-overflow:ellipsis}.nx-formfield.is-focused:not(.nx-formfield--negative):not(.has-error){color:var(--formfield-active-color)}.nx-formfield.is-focused:not(.nx-formfield--negative):not(.has-error) .nx-formfield__input-container{border-bottom-color:var(--formfield-active-border-color)}.nx-formfield.is-focused:not(.nx-formfield--negative):not(.has-error).nx-formfield--negative{color:var(--negative)}.nx-formfield:not(.nx-formfield--negative):not(.has-error):not(.is-disabled):not(.is-focused):not(.has-outline) .nx-formfield__row:hover .nx-formfield__input-container{border-bottom-color:var(--formfield-hover-border-color)}.nx-formfield.is-focused:not(.nx-formfield--negative).has-outline .nx-formfield__input-container{border-color:var(--formfield-outline-active-border-color);box-shadow:var(--formfield-outline-focus-box-shadow)}@media screen and (-ms-high-contrast: active){.nx-formfield.is-focused:not(.nx-formfield--negative).has-outline .nx-formfield__input-container{box-shadow:0 0 0 2px highlight;border:1px solid highlight}}.nx-formfield.is-focused:not(.nx-formfield--negative).has-outline.has-error .nx-formfield__input-container{border-bottom-color:var(--danger)}.nx-formfield.has-outline{font-size:var(--formfield-outline-control-font-size);line-height:var(--formfield-outline-control-line-height);font-weight:var(--formfield-outline-control-font-weight);letter-spacing:var(--formfield-outline-control-letter-spacing)}.nx-formfield.has-outline.nx-formfield--type-textarea .nx-formfield__input-container{height:auto}.nx-formfield.has-outline .nx-formfield__wrapper{padding-top:var(--formfield-outline-label-height)}.nx-formfield.has-outline .nx-formfield__row{min-height:var(--formfield-outline-control-height)}.nx-formfield.has-outline .nx-formfield__flexfield{font-size:var(--formfield-outline-control-font-size);line-height:var(--formfield-outline-control-line-height);font-weight:var(--formfield-outline-control-font-weight);letter-spacing:var(--formfield-outline-control-letter-spacing);padding:0}.nx-formfield.has-outline .nx-formfield__input-container{padding:0;border-width:var(--formfield-border-width);border-color:var(--formfield-outline-border-color);background-color:var(--formfield-outline-background-color);border-style:solid;border-radius:4px;height:var(--formfield-outline-control-height)}.nx-formfield.has-outline input,.nx-formfield.has-outline nx-dropdown .nx-dropdown__container,.nx-formfield.has-outline nx-multi-select .value{padding:0 7px}.nx-formfield.has-outline .nx-formfield__suffix{margin-right:7px;margin-left:0}[dir=rtl] .nx-formfield.has-outline .nx-formfield__suffix{margin-right:0;margin-left:7px}.nx-formfield.has-outline .nx-formfield__prefix{margin-left:7px;margin-right:0}[dir=rtl] .nx-formfield.has-outline .nx-formfield__prefix{margin-right:7px;margin-left:0}.nx-formfield.has-outline .nx-formfield__input textarea.nx-input{line-height:24px;padding:7px;min-height:var(--formfield-outline-control-line-height)}.nx-formfield.has-outline .nx-formfield__appendix{height:var(--formfield-outline-control-height);margin-left:8px;display:flex;border-top:var(--formfield-border-width) solid transparent;border-bottom:var(--formfield-border-width) solid transparent;padding:0}[dir=rtl] .nx-formfield.has-outline .nx-formfield__appendix{margin-left:0;margin-left:initial;margin-right:8px}.nx-formfield.has-outline .nx-formfield__hints{text-align:left;font-size:var(--formfield-outline-hint-font-size);line-height:var(--formfield-outline-hint-line-height);font-weight:var(--formfield-outline-hint-font-weight);letter-spacing:var(--formfield-outline-hint-letter-spacing)}[dir=rtl] .nx-formfield.has-outline .nx-formfield__hints{text-align:right}.nx-formfield.has-outline input::placeholder,.nx-formfield.has-outline textarea::placeholder{font-size:var(--formfield-outline-input-native-placeholder-font-size);line-height:var(--formfield-outline-input-native-placeholder-line-height);font-weight:var(--formfield-outline-input-native-placeholder-font-weight);letter-spacing:var(--formfield-outline-input-native-placeholder-letter-spacing);color:var(--formfield-input-native-placeholder-color)}.nx-formfield.has-outline input::placeholder,.nx-formfield.has-outline textarea::placeholder{opacity:1}.nx-formfield.has-outline input::-moz-placeholder{line-height:calc(var(--formfield-outline-control-height) - 2 * var(--formfield-border-width))}.nx-formfield.has-outline.is-readonly:not(.is-disabled) .nx-formfield__input-container{border-color:var(--formfield-readonly-border-color);background-color:var(--formfield-readonly-background-color)}.nx-formfield:not(.has-outline).is-readonly:not(.is-disabled) .nx-formfield__input-container{border-bottom-color:var(--formfield-readonly-border-color)}.nx-formfield.is-floating .nx-formfield__label{transform:translateY(var(--formfield-floating-distance));font-size:var(--formfield-label-font-size);line-height:var(--formfield-label-line-height);font-weight:var(--formfield-label-font-weight);letter-spacing:var(--formfield-label-letter-spacing)}.nx-formfield.is-floating.is-filled .nx-formfield__label{transition:none}.nx-formfield.is-floating.has-outline .nx-formfield__label{padding-top:0;transform:translateY(var(--formfield-outline-floating-distance));font-size:var(--formfield-outline-label-font-size);line-height:var(--formfield-outline-label-line-height);font-weight:var(--formfield-outline-label-font-weight);letter-spacing:var(--formfield-outline-label-letter-spacing)}.nx-formfield.is-floating.has-outline .nx-formfield__prefix~.nx-formfield__input .nx-formfield__label{padding:0}.nx-formfield.is-floating.has-outline .nx-formfield__input-container{position:relative}.nx-formfield.is-floating.has-outline .nx-formfield__input{position:unset}.nx-formfield.has-error:not(.has-outline):not(.is-floating) .nx-formfield__label{font-weight:var(--formfield-error-input-font-weight)}.nx-formfield.has-error:not(.has-outline) .nx-formfield__prefix,.nx-formfield.has-error:not(.has-outline) .nx-formfield__suffix{font-weight:var(--formfield-error-input-font-weight)}.nx-formfield.has-error:not(.has-outline) .nx-formfield__input input.nx-input{font-weight:var(--formfield-error-input-font-weight)}.nx-formfield.has-error:not(.nx-formfield--negative){color:var(--danger)}.nx-formfield.has-error:not(.nx-formfield--negative):not(.has-outline) .nx-formfield__prefix,.nx-formfield.has-error:not(.nx-formfield--negative):not(.has-outline) .nx-formfield__suffix,.nx-formfield.has-error:not(.nx-formfield--negative):not(.has-outline) .nx-formfield__label{color:var(--danger)}.nx-formfield.has-error:not(.nx-formfield--negative) .nx-formfield__input-container{border-bottom-color:var(--danger)}.nx-formfield.has-error:not(.nx-formfield--negative).is-floating .nx-formfield__label{color:var(--formfield-label-color)}.nx-formfield.has-error:not(.nx-formfield--negative).has-outline{color:var(--text-01)}.nx-formfield.has-error:not(.nx-formfield--negative).has-outline .nx-formfield__input-container{border-color:var(--danger)}.nx-formfield.is-disabled{color:var(--formfield-disabled-text-color);-webkit-text-fill-color:var(--formfield-disabled-text-color);cursor:not-allowed}.nx-formfield.is-disabled .nx-formfield__hints{color:inherit}.nx-formfield.is-disabled .nx-formfield__input-container{border-bottom-color:var(--formfield-disabled-border-color)}.nx-formfield.is-disabled.has-outline .nx-formfield__input-container{border-color:var(--formfield-disabled-border-color)}.nx-formfield.is-disabled nx-datepicker-toggle button{color:var(--formfield-disabled-text-color)}.nx-formfield.is-readonly:not(.is-disabled) nx-datepicker-toggle button{color:var(--formfield-disabled-text-color)}.nx-formfield--negative{color:var(--negative)}.nx-formfield--negative .nx-formfield__hints{color:inherit}.nx-formfield--negative .nx-formfield__input-container,.nx-formfield--negative.has-outline .nx-formfield__input-container{border-color:var(--negative)}.nx-formfield--negative .nx-formfield__appendix,.nx-formfield--negative .nx-formfield__prefix,.nx-formfield--negative .nx-formfield__suffix,.nx-formfield--negative .nx-formfield__label{color:var(--negative)}.nx-formfield--type-nx-dropdown .nx-formfield__label,.nx-formfield--type-nx-multi-select .nx-formfield__label{width:calc(100% - var(--formfield-icon-size))}.nx-formfield__input textarea.nx-input{vertical-align:bottom;min-height:var(--formfield-control-line-height);resize:vertical}@media screen and (-ms-high-contrast: active){.nx-formfield__input-container,.nx-formfield.nx-formfield--negative .nx-formfield__input-container,.nx-formfield:not(.nx-formfield--negative):not(.has-error):not(.is-disabled):not(.is-focused):not(.has-outline) .nx-formfield__row:hover .nx-formfield__input-container,.nx-formfield.has-error:not(.nx-formfield--negative) .nx-formfield__input-container{border-bottom-color:buttonText}.nx-formfield.has-outline .nx-formfield__input-container{border-color:buttonText}.nx-formfield.has-outline .nx-formfield__appendix{border-bottom-color:window;border-top-color:window}.nx-formfield.is-disabled{color:GrayText;-webkit-text-fill-color:GrayText}.nx-formfield.is-disabled .nx-formfield__input-container{border-bottom-color:GrayText}.nx-formfield.is-disabled .nx-formfield__hints{color:windowText}.nx-formfield.is-disabled.has-outline .nx-formfield__input-container{border-color:GrayText}.nx-formfield.is-focused:not(.has-outline) .nx-formfield__input-container,.nx-formfield.is-focused:not(.nx-formfield--negative):not(.has-error) .nx-formfield__input-container{border-bottom-color:highlight}.nx-formfield:not(.nx-formfield--negative) .nx-formfield__appendix nx-icon{color:inherit}}.nx-formfield--type-textarea .nx-formfield__flexfield{padding:0}.nx-formfield--type-textarea .nx-formfield__input-container{height:auto}input:-webkit-autofill{-webkit-transition:background-color 5000s ease-in-out 0s;transition:background-color 5000s ease-in-out 0s}input:-webkit-autofill:first-line{font-size:var(--formfield-control-font-size);line-height:var(--formfield-control-line-height);font-weight:var(--formfield-control-font-weight);letter-spacing:var(--formfield-control-letter-spacing);font-family:var(--font-family);color:var(--formfield-control-color)}.nx-formfield.has-outline input:-webkit-autofill:first-line{font-size:var(--formfield-outline-control-font-size);line-height:var(--formfield-outline-control-line-height);font-weight:var(--formfield-outline-control-font-weight);letter-spacing:var(--formfield-outline-control-letter-spacing)}\n", "@keyframes cdk-text-field-autofill-start{}@keyframes cdk-text-field-autofill-end{}.cdk-text-field-autofill-monitored:-webkit-autofill{animation:cdk-text-field-autofill-start 0s 1ms}.cdk-text-field-autofill-monitored:not(:-webkit-autofill){animation:cdk-text-field-autofill-end 0s 1ms}textarea.cdk-textarea-autosize{resize:none;box-sizing:content-box}textarea.cdk-textarea-autosize-measuring{height:auto!important;overflow:hidden!important;padding:2px 0!important;box-sizing:content-box!important}.c-input{text-align:inherit;font-size:inherit;font-weight:inherit;background:0 0;color:inherit;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%}.c-input::-ms-clear{display:none}.c-input::-webkit-search-decoration,.c-input::-webkit-search-cancel-button,.c-input::-webkit-search-results-button,.c-input::-webkit-search-results-decoration{display:none;-webkit-appearance:none}.c-input::placeholder{-webkit-user-select:none;user-select:none;font-size:var(--formfield-input-native-placeholder-font-size);line-height:var(--formfield-input-native-placeholder-line-height);font-weight:var(--formfield-input-native-placeholder-font-weight);letter-spacing:var(--formfield-input-native-placeholder-letter-spacing);color:var(--formfield-input-native-placeholder-color);transition:color ease-in .1s .2s}.c-input::placeholder:-ms-input-placeholder{-ms-user-select:text}.c-input::-moz-placeholder{user-select:none;font-size:var(--formfield-input-native-placeholder-font-size);line-height:var(--formfield-input-native-placeholder-line-height);font-weight:var(--formfield-input-native-placeholder-font-weight);letter-spacing:var(--formfield-input-native-placeholder-letter-spacing);color:var(--formfield-input-native-placeholder-color);-moz-transition:color ease-in .1s .2s;transition:color ease-in .1s .2s}.c-input::-moz-placeholder:-ms-input-placeholder{-ms-user-select:text}.c-input::-webkit-input-placeholder{-webkit-user-select:none;user-select:none;font-size:var(--formfield-input-native-placeholder-font-size);line-height:var(--formfield-input-native-placeholder-line-height);font-weight:var(--formfield-input-native-placeholder-font-weight);letter-spacing:var(--formfield-input-native-placeholder-letter-spacing);color:var(--formfield-input-native-placeholder-color);-webkit-transition:color ease-in .1s .2s;transition:color ease-in .1s .2s}.c-input::-webkit-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.c-input:-ms-input-placeholder{user-select:none;font-size:var(--formfield-input-native-placeholder-font-size);line-height:var(--formfield-input-native-placeholder-line-height);font-weight:var(--formfield-input-native-placeholder-font-weight);letter-spacing:var(--formfield-input-native-placeholder-letter-spacing);color:var(--formfield-input-native-placeholder-color);-ms-transition:color ease-in .1s .2s;transition:color ease-in .1s .2s}.c-input:-ms-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.c-input::-moz-placeholder{line-height:calc(var(--formfield-control-height) - var(--formfield-border-width))}textarea.c-input{height:auto;font-family:inherit}.c-input.is-focused{border:none;outline:none;box-shadow:none}.c-input.is-focused::placeholder{opacity:1;transition:opacity ease-in .2s .15s}.c-input.is-focused::-moz-placeholder{opacity:1;-moz-transition:opacity ease-in .2s .15s;transition:opacity ease-in .2s .15s}.c-input.is-focused::-webkit-input-placeholder{opacity:1;-webkit-transition:opacity ease-in .2s .15s;transition:opacity ease-in .2s .15s}.c-input.is-focused:-ms-input-placeholder{opacity:1;-ms-transition:opacity ease-in .2s .15s;transition:opacity ease-in .2s .15s}.c-input.is-disabled{cursor:not-allowed}textarea.nx-input-element{resize:vertical;overflow:auto}.c-input:invalid,.c-input:required{box-shadow:none}\n"] }]
        }], ctorParameters: function () {
        return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [FORMFIELD_DEFAULT_OPTIONS]
                    }] }];
    }, propDecorators: { _control: [{
                type: ContentChild,
                args: [NxFormfieldControl]
            }], label: [{
                type: Input,
                args: ['nxLabel']
            }], _labelChild: [{
                type: ContentChild,
                args: [NxFormfieldLabelDirective]
            }], _hintChildren: [{
                type: ContentChildren,
                args: [NxFormfieldHintDirective]
            }], _noteChildren: [{
                type: ContentChildren,
                args: [NxFormfieldNoteDirective]
            }], _errorChildren: [{
                type: ContentChildren,
                args: [NxFormfieldErrorDirective]
            }], _suffixChildren: [{
                type: ContentChildren,
                args: [NxFormfieldSuffixDirective]
            }], _prefixChildren: [{
                type: ContentChildren,
                args: [NxFormfieldPrefixDirective]
            }], _appendixChildren: [{
                type: ContentChildren,
                args: [NxFormfieldAppendixDirective]
            }], _connectionContainerRef: [{
                type: ViewChild,
                args: ['connectionContainer', { static: true }]
            }], floatLabel: [{
                type: Input,
                args: ['nxFloatLabel']
            }], styles: [{
                type: Input,
                args: ['nxStyle']
            }], appearance: [{
                type: Input
            }] } });

class NxFormfieldModule {
}
NxFormfieldModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFormfieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NxFormfieldModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFormfieldModule, declarations: [NxFormfieldComponent,
        NxFormfieldHintDirective,
        NxFormfieldErrorDirective,
        NxFormfieldNoteDirective,
        NxFormfieldPrefixDirective,
        NxFormfieldSuffixDirective,
        NxFormfieldAppendixDirective,
        NxFormfieldLabelDirective], imports: [CommonModule], exports: [NxFormfieldComponent,
        NxFormfieldHintDirective,
        NxFormfieldErrorDirective,
        NxFormfieldNoteDirective,
        NxFormfieldPrefixDirective,
        NxFormfieldSuffixDirective,
        NxFormfieldAppendixDirective,
        NxFormfieldLabelDirective,
        NxErrorModule,
        NxLabelModule] });
NxFormfieldModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFormfieldModule, imports: [[CommonModule], NxErrorModule,
        NxLabelModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFormfieldModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [
                        NxFormfieldComponent,
                        NxFormfieldHintDirective,
                        NxFormfieldErrorDirective,
                        NxFormfieldNoteDirective,
                        NxFormfieldPrefixDirective,
                        NxFormfieldSuffixDirective,
                        NxFormfieldAppendixDirective,
                        NxFormfieldLabelDirective,
                    ],
                    exports: [
                        NxFormfieldComponent,
                        NxFormfieldHintDirective,
                        NxFormfieldErrorDirective,
                        NxFormfieldNoteDirective,
                        NxFormfieldPrefixDirective,
                        NxFormfieldSuffixDirective,
                        NxFormfieldAppendixDirective,
                        NxFormfieldLabelDirective,
                        NxErrorModule,
                        NxLabelModule,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { FORMFIELD_DEFAULT_OPTIONS, NxFormfieldAppendixDirective, NxFormfieldComponent, NxFormfieldControl, NxFormfieldErrorDirective, NxFormfieldHintDirective, NxFormfieldLabelDirective, NxFormfieldModule, NxFormfieldNoteDirective, NxFormfieldPrefixDirective, NxFormfieldSuffixDirective };
//# sourceMappingURL=aposin-ng-aquila-formfield.mjs.map
