import * as i0 from '@angular/core';
import { Injectable, NgModule } from '@angular/core';
import { LABEL_DEFAULT_OPTIONS, ERROR_DEFAULT_OPTIONS } from '@aposin/ng-aquila/base';
import { SELECTABLE_CARD_DEFAULT_OPTIONS } from '@aposin/ng-aquila/card';
import { CIRCLE_TOGGLE_GROUP_DEFAULT_OPTIONS } from '@aposin/ng-aquila/circle-toggle';
import { DATEPICKER_DEFAULT_OPTIONS, NX_DATEPICKER_SCROLL_STRATEGY } from '@aposin/ng-aquila/datefield';
import { FORMFIELD_DEFAULT_OPTIONS } from '@aposin/ng-aquila/formfield';
import { SMALL_STAGE_DEFAULT_OPTIONS } from '@aposin/ng-aquila/small-stage';
import { TAB_GROUP_DEFAULT_OPTIONS, TAB_NAV_BAR_DEFAULT_OPTIONS } from '@aposin/ng-aquila/tabs';
import { Subject } from 'rxjs';
import { COMPARISON_TABLE_DEFAULT_OPTIONS } from '@aposin/ng-aquila/comparison-table';
import { DATA_DISPLAY_DEFAULT_OPTIONS } from '@aposin/ng-aquila/data-display';
import { Overlay } from '@angular/cdk/overlay';
import { NX_AUTOCOMPLETE_SCROLL_STRATEGY } from '@aposin/ng-aquila/autocomplete';
import { NX_CONTEXT_MENU_SCROLL_STRATEGY } from '@aposin/ng-aquila/context-menu';
import { NX_DROPDOWN_SCROLL_STRATEGY } from '@aposin/ng-aquila/dropdown';
import { NX_MODAL_SCROLL_STRATEGY } from '@aposin/ng-aquila/modal';
import { NX_NOTIFICATION_PANEL_SCROLL_STRATEGY } from '@aposin/ng-aquila/notification-panel';
import { NX_OVERLAY_SCROLL_STRATEGY } from '@aposin/ng-aquila/overlay';
import { NX_POPOVER_SCROLL_STRATEGY } from '@aposin/ng-aquila/popover';
import { NX_TOOLTIP_SCROLL_STRATEGY } from '@aposin/ng-aquila/tooltip';

const datepickerOptions = { changes: new Subject() };
const errorOptions = { changes: new Subject() };
const formfieldOptions = {};
const labelOptions = {};
const tabGroupOptions$1 = {};
const tabNavBarOptions$1 = {};
const selectableCardOptions$1 = {};
const smallStageOptions$1 = {};
const circleToggleGroupOptions$1 = {};
const dataDisplayOptions$1 = {};
/**
 * Service for switching values of the defaultOptions injection tokens at runtime.
 * WARNING: This service should not be used in actual applications!
 * It is only meant to showcase different options for documentation purposes.
 */
class NxConfigurationService {
    clearOptions() {
        delete datepickerOptions.toggleIconTabindex;
        datepickerOptions.changes.next();
        delete errorOptions.appearance;
        errorOptions.changes.next();
        delete formfieldOptions.appearance;
        delete formfieldOptions.nxFloatLabel;
        delete labelOptions.size;
        delete tabGroupOptions$1.appearance;
        delete tabNavBarOptions$1.appearance;
        delete selectableCardOptions$1.appearance;
        delete smallStageOptions$1.appearance;
        delete circleToggleGroupOptions$1.appearance;
        delete dataDisplayOptions$1.size;
    }
    switchToExpert() {
        datepickerOptions.toggleIconTabindex = -1;
        datepickerOptions.changes.next();
        errorOptions.appearance = 'text';
        errorOptions.changes.next();
        formfieldOptions.appearance = 'outline';
        formfieldOptions.nxFloatLabel = 'always';
        labelOptions.size = 'small';
        tabGroupOptions$1.appearance = 'expert';
        tabNavBarOptions$1.appearance = 'expert';
        selectableCardOptions$1.appearance = 'expert';
        smallStageOptions$1.appearance = 'expert';
        circleToggleGroupOptions$1.appearance = 'expert';
        dataDisplayOptions$1.size = 'medium';
    }
    switchToRetail() {
        datepickerOptions.toggleIconTabindex = 0;
        datepickerOptions.changes.next();
        errorOptions.appearance = 'message';
        errorOptions.changes.next();
        formfieldOptions.appearance = 'auto';
        formfieldOptions.nxFloatLabel = 'auto';
        labelOptions.size = 'large';
        tabGroupOptions$1.appearance = 'default';
        tabNavBarOptions$1.appearance = 'default';
        selectableCardOptions$1.appearance = 'default';
        smallStageOptions$1.appearance = 'default';
        circleToggleGroupOptions$1.appearance = 'default';
        dataDisplayOptions$1.size = 'large';
    }
}
NxConfigurationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxConfigurationService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NxConfigurationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxConfigurationService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxConfigurationService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });

class NxConfigurationModule {
}
NxConfigurationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxConfigurationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NxConfigurationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxConfigurationModule });
NxConfigurationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxConfigurationModule, providers: [
        { provide: FORMFIELD_DEFAULT_OPTIONS, useValue: formfieldOptions },
        { provide: LABEL_DEFAULT_OPTIONS, useValue: labelOptions },
        { provide: DATEPICKER_DEFAULT_OPTIONS, useValue: datepickerOptions },
        { provide: ERROR_DEFAULT_OPTIONS, useValue: errorOptions },
        { provide: TAB_GROUP_DEFAULT_OPTIONS, useValue: tabGroupOptions$1 },
        { provide: TAB_NAV_BAR_DEFAULT_OPTIONS, useValue: tabNavBarOptions$1 },
        { provide: SELECTABLE_CARD_DEFAULT_OPTIONS, useValue: selectableCardOptions$1 },
        { provide: SMALL_STAGE_DEFAULT_OPTIONS, useValue: smallStageOptions$1 },
        { provide: CIRCLE_TOGGLE_GROUP_DEFAULT_OPTIONS, useValue: circleToggleGroupOptions$1 },
    ] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxConfigurationModule, decorators: [{
            type: NgModule,
            args: [{
                    providers: [
                        { provide: FORMFIELD_DEFAULT_OPTIONS, useValue: formfieldOptions },
                        { provide: LABEL_DEFAULT_OPTIONS, useValue: labelOptions },
                        { provide: DATEPICKER_DEFAULT_OPTIONS, useValue: datepickerOptions },
                        { provide: ERROR_DEFAULT_OPTIONS, useValue: errorOptions },
                        { provide: TAB_GROUP_DEFAULT_OPTIONS, useValue: tabGroupOptions$1 },
                        { provide: TAB_NAV_BAR_DEFAULT_OPTIONS, useValue: tabNavBarOptions$1 },
                        { provide: SELECTABLE_CARD_DEFAULT_OPTIONS, useValue: selectableCardOptions$1 },
                        { provide: SMALL_STAGE_DEFAULT_OPTIONS, useValue: smallStageOptions$1 },
                        { provide: CIRCLE_TOGGLE_GROUP_DEFAULT_OPTIONS, useValue: circleToggleGroupOptions$1 },
                    ],
                }]
        }] });

const formfieldDirectOptions = {
    nxFloatLabel: 'always',
};
class NxDirectModule {
}
NxDirectModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDirectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NxDirectModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDirectModule });
NxDirectModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDirectModule, providers: [{ provide: FORMFIELD_DEFAULT_OPTIONS, useValue: formfieldDirectOptions }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDirectModule, decorators: [{
            type: NgModule,
            args: [{
                    providers: [{ provide: FORMFIELD_DEFAULT_OPTIONS, useValue: formfieldDirectOptions }],
                }]
        }] });

// expert presets
const comparisonTableExpertOptions = { useFullRowForExpandableArea: true };
const formfieldExpertOptions = {
    appearance: 'outline',
    nxFloatLabel: 'always',
};
const errorExpertOptions = { appearance: 'text' };
const labelExpertOptions = { size: 'small' };
const datepickerExpertOptions = { toggleIconTabindex: -1 };
const tabGroupOptions = { appearance: 'expert' };
const tabNavBarOptions = { appearance: 'expert' };
const selectableCardOptions = { appearance: 'expert' };
const smallStageOptions = { appearance: 'expert' };
const circleToggleGroupOptions = { appearance: 'expert' };
const dataDisplayOptions = { size: 'medium' };
// should not be a singleton since different tokens can be used in separate modules
class NxExpertModule {
}
NxExpertModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxExpertModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NxExpertModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxExpertModule });
NxExpertModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxExpertModule, providers: [
        { provide: COMPARISON_TABLE_DEFAULT_OPTIONS, useValue: comparisonTableExpertOptions },
        { provide: FORMFIELD_DEFAULT_OPTIONS, useValue: formfieldExpertOptions },
        { provide: LABEL_DEFAULT_OPTIONS, useValue: labelExpertOptions },
        { provide: DATEPICKER_DEFAULT_OPTIONS, useValue: datepickerExpertOptions },
        { provide: ERROR_DEFAULT_OPTIONS, useValue: errorExpertOptions },
        { provide: TAB_GROUP_DEFAULT_OPTIONS, useValue: tabGroupOptions },
        { provide: TAB_NAV_BAR_DEFAULT_OPTIONS, useValue: tabNavBarOptions },
        { provide: SELECTABLE_CARD_DEFAULT_OPTIONS, useValue: selectableCardOptions },
        { provide: SMALL_STAGE_DEFAULT_OPTIONS, useValue: smallStageOptions },
        { provide: CIRCLE_TOGGLE_GROUP_DEFAULT_OPTIONS, useValue: circleToggleGroupOptions },
        { provide: DATA_DISPLAY_DEFAULT_OPTIONS, useValue: dataDisplayOptions },
    ] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxExpertModule, decorators: [{
            type: NgModule,
            args: [{
                    providers: [
                        { provide: COMPARISON_TABLE_DEFAULT_OPTIONS, useValue: comparisonTableExpertOptions },
                        { provide: FORMFIELD_DEFAULT_OPTIONS, useValue: formfieldExpertOptions },
                        { provide: LABEL_DEFAULT_OPTIONS, useValue: labelExpertOptions },
                        { provide: DATEPICKER_DEFAULT_OPTIONS, useValue: datepickerExpertOptions },
                        { provide: ERROR_DEFAULT_OPTIONS, useValue: errorExpertOptions },
                        { provide: TAB_GROUP_DEFAULT_OPTIONS, useValue: tabGroupOptions },
                        { provide: TAB_NAV_BAR_DEFAULT_OPTIONS, useValue: tabNavBarOptions },
                        { provide: SELECTABLE_CARD_DEFAULT_OPTIONS, useValue: selectableCardOptions },
                        { provide: SMALL_STAGE_DEFAULT_OPTIONS, useValue: smallStageOptions },
                        { provide: CIRCLE_TOGGLE_GROUP_DEFAULT_OPTIONS, useValue: circleToggleGroupOptions },
                        { provide: DATA_DISPLAY_DEFAULT_OPTIONS, useValue: dataDisplayOptions },
                    ],
                }]
        }] });

/** Return an appropriate scroll strategy factory from the `Overlay` service. */
function getScrollStrategyFactory(preset, overlay, options) {
    switch (preset) {
        case 'reposition':
            return () => overlay.scrollStrategies.reposition({ autoClose: options === null || options === void 0 ? void 0 : options.autoClose, scrollThrottle: options === null || options === void 0 ? void 0 : options.scrollThrottle });
        case 'close':
            return () => overlay.scrollStrategies.close({ threshold: options === null || options === void 0 ? void 0 : options.threshold });
        case 'block':
            return overlay.scrollStrategies.block;
        case 'noop':
            return overlay.scrollStrategies.noop;
        default:
            return overlay.scrollStrategies.reposition;
    }
}
/** Return an array of scroll strategy providers based on the provided default config. */
function getScrollStrategyDefaultProviders(config) {
    return [
        { provide: NX_AUTOCOMPLETE_SCROLL_STRATEGY, useFactory: getFactoryFnByDefaultConfig(config, 'autocomplete'), deps: [Overlay] },
        { provide: NX_CONTEXT_MENU_SCROLL_STRATEGY, useFactory: getFactoryFnByDefaultConfig(config, 'contextMenu'), deps: [Overlay] },
        { provide: NX_DATEPICKER_SCROLL_STRATEGY, useFactory: getFactoryFnByDefaultConfig(config, 'datepicker'), deps: [Overlay] },
        { provide: NX_DROPDOWN_SCROLL_STRATEGY, useFactory: getFactoryFnByDefaultConfig(config, 'dropdown'), deps: [Overlay] },
        { provide: NX_NOTIFICATION_PANEL_SCROLL_STRATEGY, useFactory: getFactoryFnByDefaultConfig(config, 'notificationPanel'), deps: [Overlay] },
        ...getExtraProvidersByDefaultConfig(config),
    ];
}
function getFactoryFnByDefaultConfig(config, componentName) {
    var _a, _b;
    const componentConfig = (_b = (_a = config.overrides) === null || _a === void 0 ? void 0 : _a[componentName]) !== null && _b !== void 0 ? _b : config;
    return (overlay) => getScrollStrategyFactory(componentConfig.scrollStrategy, overlay, componentConfig.scrollStrategyOptions);
}
function getExtraProvidersByDefaultConfig(config) {
    var _a;
    return Object.entries((_a = config.extraComponents) !== null && _a !== void 0 ? _a : {}).map(([componentName, { scrollStrategy, scrollStrategyOptions }]) => ({
        provide: getInjectionToken(componentName),
        useFactory: (overlay) => getScrollStrategyFactory(scrollStrategy, overlay, scrollStrategyOptions),
        deps: [Overlay],
    }));
}
/** Return an array of scroll strategy providers based on the provided factory config. */
function getScrollStrategyFactoryProviders(config) {
    return [
        { provide: NX_AUTOCOMPLETE_SCROLL_STRATEGY, useFactory: getFactoryFnByFactoryConfig(config, 'autocomplete'), deps: [Overlay] },
        { provide: NX_CONTEXT_MENU_SCROLL_STRATEGY, useFactory: getFactoryFnByFactoryConfig(config, 'contextMenu'), deps: [Overlay] },
        { provide: NX_DATEPICKER_SCROLL_STRATEGY, useFactory: getFactoryFnByFactoryConfig(config, 'datepicker'), deps: [Overlay] },
        { provide: NX_DROPDOWN_SCROLL_STRATEGY, useFactory: getFactoryFnByFactoryConfig(config, 'dropdown'), deps: [Overlay] },
        { provide: NX_NOTIFICATION_PANEL_SCROLL_STRATEGY, useFactory: getFactoryFnByFactoryConfig(config, 'notificationPanel'), deps: [Overlay] },
        ...getExtraProvidersByFactoryConfig(config),
    ];
}
function getFactoryFnByFactoryConfig(config, componentName) {
    var _a, _b;
    return ((_b = (_a = config.overrides) === null || _a === void 0 ? void 0 : _a[componentName]) !== null && _b !== void 0 ? _b : config).scrollStrategyFactory;
}
function getExtraProvidersByFactoryConfig(config) {
    var _a;
    return Object.entries((_a = config.extraComponents) !== null && _a !== void 0 ? _a : {}).map(([componentName, { scrollStrategyFactory }]) => ({
        provide: getInjectionToken(componentName),
        useFactory: scrollStrategyFactory,
        deps: [Overlay],
    }));
}
function getInjectionToken(componentName) {
    switch (componentName) {
        case 'dialog':
            return NX_MODAL_SCROLL_STRATEGY;
        case 'overlay':
            return NX_OVERLAY_SCROLL_STRATEGY;
        case 'popover':
            return NX_POPOVER_SCROLL_STRATEGY;
        case 'tooltip':
            return NX_TOOLTIP_SCROLL_STRATEGY;
        default:
            throw new Error(`Injection token for ${componentName} scroll strategy not recognized.`);
    }
}

/**
 * Provide a specific scroll strategy for a select collection of overlay-based components:
 *
 * - autocomplete
 * - context-menu
 * - datepicker
 * - dropdown
 * - notification-panel
 *
 * These components will be affected only if configured separately in the `extraComponents` property:
 *
 * - dialog
 * - overlay
 * - popover
 * - tooltip
 *
 * @example
 * NxScrollStrategyModule.withConfig({
 *   scrollStrategy: 'close',
 *   scrollStrategyOptions: { threshold: 100 },
 * })
 *
 * @example
 * NxScrollStrategyModule.withFactory({
 *   scrollStrategyFactory: overlay => () => overlay.scrollStrategies.close({ threshold: 100 }),
 * })
 */
class NxScrollStrategyModule {
    static withConfig(config) {
        return {
            ngModule: NxScrollStrategyModule,
            providers: getScrollStrategyDefaultProviders(config),
        };
    }
    static withFactory(config) {
        return {
            ngModule: NxScrollStrategyModule,
            providers: getScrollStrategyFactoryProviders(config),
        };
    }
}
NxScrollStrategyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxScrollStrategyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NxScrollStrategyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxScrollStrategyModule });
NxScrollStrategyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxScrollStrategyModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxScrollStrategyModule, decorators: [{
            type: NgModule
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { NxConfigurationModule, NxConfigurationService, NxDirectModule, NxExpertModule, NxScrollStrategyModule, circleToggleGroupOptions$1 as circleToggleGroupOptions, dataDisplayOptions$1 as dataDisplayOptions, datepickerOptions, errorOptions, formfieldOptions, labelOptions, selectableCardOptions$1 as selectableCardOptions, smallStageOptions$1 as smallStageOptions, tabGroupOptions$1 as tabGroupOptions, tabNavBarOptions$1 as tabNavBarOptions };
//# sourceMappingURL=aposin-ng-aquila-config.mjs.map
