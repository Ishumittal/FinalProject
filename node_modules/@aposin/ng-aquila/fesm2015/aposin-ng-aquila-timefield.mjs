import { coerceBooleanProperty } from '@angular/cdk/coercion';
import * as i0 from '@angular/core';
import { Injectable, EventEmitter, Component, ChangeDetectionStrategy, Optional, Self, Output, Input, NgModule } from '@angular/core';
import * as i2 from '@aposin/ng-aquila/utils';
import { pad } from '@aposin/ng-aquila/utils';
import * as i1 from '@angular/forms';
import { FormsModule } from '@angular/forms';
import { Subject } from 'rxjs';
import * as i4 from '@aposin/ng-aquila/radio-button';
import { NxRadioModule } from '@aposin/ng-aquila/radio-button';
import * as i5 from '@angular/common';
import { CommonModule } from '@angular/common';

class NxTimefieldIntl {
    constructor() {
        /**
         * Stream that emits whenever the labels here are changed. Use this to notify
         * components if the labels have changed after initialization.
         */
        this.changes = new Subject();
        /** Label that should replace the 'hours' aria-label of the input field. */
        this.inputFieldHoursAriaLabel = 'hours';
        /** Label that should replace the 'minutes' input field of the aria-label. */
        this.inputFieldMinutesAriaLabel = 'minutes';
    }
}
NxTimefieldIntl.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTimefieldIntl, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NxTimefieldIntl.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTimefieldIntl });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTimefieldIntl, decorators: [{
            type: Injectable
        }] });

let nextId = 0;
class NxTimefieldComponent {
    constructor(_cdr, 
    /** @docs-private */ ngControl, _errorStateMatcher, _parentForm, _parentFormGroup, _intl) {
        this._cdr = _cdr;
        this.ngControl = ngControl;
        this._errorStateMatcher = _errorStateMatcher;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this._intl = _intl;
        /** @docs-private */
        this.errorState = false;
        /** Event that emits the time in 24h ISO format. */
        this.valueChange = new EventEmitter();
        this._idHours = `nx-timefield__hours-${nextId++}`;
        this._idMinutes = `nx-timefield__minutes-${nextId++}`;
        this._idRadioGroup = `nx-timefield__radio-group-${nextId++}`;
        this._maxHours = 23;
        this._minHours = 0;
        this._maxMinutes = 59;
        this._minMinutes = 0;
        this._twelveHourFormat = false;
        this._labelAM = 'AM';
        this._labelPM = 'PM';
        this._placeholderHours = 'hh';
        this._placeholderMinutes = 'mm';
        this._negative = false;
        this._disabled = false;
        this._onTouchedCallback = () => { };
        this._onChangeCallback = () => { };
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
    }
    /** @docs-private */
    get idHours() {
        return this._idHours;
    }
    /** @docs-private */
    get idMinutes() {
        return this._idMinutes;
    }
    /** @docs-private */
    get idRadioGroup() {
        return this._idRadioGroup;
    }
    /** @docs-private */
    get maxHours() {
        return this._maxHours;
    }
    /** @docs-private */
    get minHours() {
        return this._minHours;
    }
    /** @docs-private */
    get maxMinutes() {
        return this._maxMinutes;
    }
    /** @docs-private */
    get minMinutes() {
        return this._minMinutes;
    }
    /** @docs-private */
    set time(value) {
        this._time = value;
        this._onChangeCallback(value);
        this._cdr.markForCheck();
    }
    get time() {
        return this._time;
    }
    /** Whether to show the time in 12-hour format with AM/PM toggle. Default: false. */
    set twelveHourFormat(value) {
        this._twelveHourFormat = coerceBooleanProperty(value);
        if (this._twelveHourFormat) {
            this._maxHours = 12;
            this._minHours = 1;
            this._toggleAMPM = 'AM';
        }
        else {
            this._maxHours = 23;
            this._minHours = 0;
            this._toggleAMPM = null;
        }
        this._cdr.markForCheck();
    }
    get twelveHourFormat() {
        return this._twelveHourFormat;
    }
    /** Sets the label which is displayed on top of timefield. */
    set label(value) {
        if (this._label !== value) {
            this._label = value;
            this._cdr.markForCheck();
        }
    }
    get label() {
        return this._label;
    }
    /** Sets the AM radio button label which is displayed in radio group. */
    set labelAM(value) {
        if (this._labelAM !== value) {
            this._labelAM = value;
            this._cdr.markForCheck();
        }
    }
    get labelAM() {
        return this._labelAM;
    }
    /** Sets the PM radio button label which is displayed in radio group. */
    set labelPM(value) {
        if (this._labelPM !== value) {
            this._labelPM = value;
            this._cdr.markForCheck();
        }
    }
    get labelPM() {
        return this._labelPM;
    }
    /** Sets the placeholder of hours field. Default: 'hh' */
    set placeholderHours(value) {
        if (this._placeholderHours !== value) {
            this._placeholderHours = value;
            this._cdr.markForCheck();
        }
    }
    get placeholderHours() {
        return this._placeholderHours;
    }
    /** Sets the placeholder of minutes field. Default: 'mm' */
    set placeholderMinutes(value) {
        if (this._placeholderMinutes !== value) {
            this._placeholderMinutes = value;
            this._cdr.markForCheck();
        }
    }
    get placeholderMinutes() {
        return this._placeholderMinutes;
    }
    /** Whether the timefield is required. */
    get required() {
        return this._required;
    }
    set required(value) {
        this._required = coerceBooleanProperty(value);
    }
    /** Whether the timefield uses the negative set of styling. */
    set negative(value) {
        const newValue = coerceBooleanProperty(value);
        if (this._negative !== newValue) {
            this._negative = newValue;
            this._cdr.markForCheck();
        }
    }
    get negative() {
        return this._negative;
    }
    /** Whether the timefield is disabled. */
    set disabled(value) {
        const newValue = coerceBooleanProperty(value);
        if (this._disabled !== newValue) {
            this._disabled = newValue;
            this._cdr.markForCheck();
        }
    }
    get disabled() {
        return this._disabled;
    }
    /** @docs-private */
    set hours(value) {
        this._hours = value;
        this._cdr.markForCheck();
    }
    get hours() {
        return this._hours;
    }
    /** @docs-private */
    set minutes(value) {
        this._minutes = value;
        this._cdr.markForCheck();
    }
    get minutes() {
        return this._minutes;
    }
    /** @docs-private */
    get hasFocus() {
        return this._hasFocus ? 'has-focus' : null;
    }
    ngDoCheck() {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this.updateErrorState();
        }
    }
    /** @docs-private */
    updateErrorState() {
        const oldState = this.errorState;
        const parent = this._parentFormGroup || this._parentForm;
        const control = this.ngControl ? this.ngControl.control : null;
        const newState = this._errorStateMatcher.isErrorState(control, parent);
        if (newState !== oldState) {
            this.errorState = newState;
        }
    }
    _convertToISOFormat(hours, minutes) {
        return `${hours}:${minutes}`;
    }
    _updateTime() {
        this._time = null;
        if (this._isValidInput(this.hours) && this._isValidInput(this.minutes)) {
            const hours = Number(this.hours);
            const minutes = Number(this.minutes);
            if (this._isValidTime(hours, 'hours') && this._isValidTime(minutes, 'minutes')) {
                this._time = this._timeInTwentyFourHourFormat(hours, minutes);
            }
        }
        this._onChangeCallback(this._time);
    }
    _onFocus() {
        this._hasFocus = true;
    }
    _getAriaLabel(type) {
        let label;
        switch (type) {
            case 'hours':
                label = this._intl.inputFieldHoursAriaLabel;
                break;
            case 'minutes':
                label = this._intl.inputFieldMinutesAriaLabel;
                break;
        }
        return label;
    }
    _onInput(event, type) {
        this._onTouchedCallback();
        if (type === 'hours') {
            this.hours = event.target.value;
        }
        else if (type === 'minutes') {
            this.minutes = event.target.value;
        }
        this._updateTime();
    }
    _onBlur(type) {
        this._onTouchedCallback();
        this._hasFocus = false;
        // set 0X is the value entered in X
        if (type === 'hours' && Number(this.hours) < 10 && this.hours !== '') {
            this.hours = pad(String(this.hours));
        }
        else if (type === 'minutes' && Number(this.minutes) < 10 && this.minutes !== '') {
            this.minutes = pad(String(this.minutes));
        }
    }
    _timeInTwentyFourHourFormat(hours, minutes) {
        if (this.twelveHourFormat) {
            // 12h to 24h conversion
            if (this._toggleAMPM === 'AM') {
                if (hours === 12) {
                    hours -= 12;
                }
            }
            else if (this._toggleAMPM === 'PM') {
                if (hours >= 1 && hours < 12) {
                    hours += 12;
                }
            }
        }
        return this._convertToISOFormat(pad(String(hours)), pad(String(minutes)));
    }
    _isValidInput(value) {
        const numExp = /^\d{1,2}$/;
        return numExp.test(value);
    }
    _isValidTime(value, type) {
        let valid = false;
        const numVal = Number(value);
        if (type === 'minutes') {
            valid = !!(numVal >= this._minMinutes && numVal <= this._maxMinutes);
        }
        else if (type === 'hours') {
            valid = !!(numVal >= this._minHours && numVal <= this._maxHours);
        }
        return valid;
    }
    _parseAndSetTime(value) {
        const valueInHoursAndMinutes = value.split(':');
        if (valueInHoursAndMinutes &&
            valueInHoursAndMinutes.length === 2 &&
            this._isValidInput(valueInHoursAndMinutes[0]) &&
            this._isValidInput(valueInHoursAndMinutes[1])) {
            let hours = Number(valueInHoursAndMinutes[0]);
            const minutes = Number(valueInHoursAndMinutes[1]);
            if (this.twelveHourFormat) {
                // 24h to 12h conversion
                if (hours === 0) {
                    hours += 12;
                    this._toggleAMPM = 'AM';
                }
                else if (hours > 12 && hours <= 23) {
                    hours -= 12;
                    this._toggleAMPM = 'PM';
                }
                else if (hours === 12) {
                    this._toggleAMPM = 'PM';
                }
            }
            if (this._isValidTime(hours, 'hours') && this._isValidTime(minutes, 'minutes')) {
                this.hours = pad(String(hours));
                this.minutes = pad(String(minutes));
                // model value should always be in 24h format
                return this._timeInTwentyFourHourFormat(hours, minutes);
            }
        }
        return null;
    }
    writeValue(value) {
        this._hours = '';
        this._minutes = '';
        this._time = null;
        if (value) {
            this.time = this._parseAndSetTime(value);
        }
        this.valueChange.emit(this.time);
    }
    registerOnChange(fn) {
        this._onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this._onTouchedCallback = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
}
NxTimefieldComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTimefieldComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.NgControl, optional: true, self: true }, { token: i2.ErrorStateMatcher }, { token: i1.NgForm, optional: true }, { token: i1.FormGroupDirective, optional: true }, { token: NxTimefieldIntl }], target: i0.ɵɵFactoryTarget.Component });
NxTimefieldComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxTimefieldComponent, selector: "nx-timefield", inputs: { twelveHourFormat: "twelveHourFormat", label: "label", labelAM: "labelAM", labelPM: "labelPM", placeholderHours: "placeholderHours", placeholderMinutes: "placeholderMinutes", required: "required", negative: "negative", disabled: "disabled" }, outputs: { valueChange: "valueChange" }, host: { properties: { "class.has-error": "errorState", "class.is-negative": "negative", "class.is-disabled": "disabled" } }, ngImport: i0, template: "<label class=\"nx-timefield__label\" [ngClass]=\"hasFocus || ''\" [attr.for]=\"hours\">{{ label }}</label>\n<div class=\"nx-timefield__wrapper\">\n    <div class=\"nx-timefield-input__fields\" [ngClass]=\"hasFocus || ''\">\n        <input\n            [id]=\"idHours\"\n            #inputHours\n            [value]=\"hours || null\"\n            class=\"nx-timefield-input__field__hours\"\n            type=\"text\"\n            maxlength=\"2\"\n            autocomplete=\"off\"\n            (focusout)=\"_onBlur('hours')\"\n            (input)=\"_onInput($event, 'hours')\"\n            (focus)=\"_onFocus()\"\n            [required]=\"required\"\n            [attr.aria-required]=\"required\"\n            [attr.aria-label]=\"_getAriaLabel('hours')\"\n            [disabled]=\"disabled\"\n            [ngClass]=\"hasFocus || ''\"\n            [placeholder]=\"placeholderHours\"\n        />\n        <span class=\"nx-timefield-hours-separator\" [ngClass]=\"hasFocus || ''\">:</span>\n        <input\n            [id]=\"idMinutes\"\n            required\n            #inputMinutes\n            [value]=\"minutes || null\"\n            class=\"nx-timefield-input__field__minutes\"\n            type=\"text\"\n            maxlength=\"2\"\n            autocomplete=\"off\"\n            (input)=\"_onInput($event, 'minutes')\"\n            (focus)=\"_onFocus()\"\n            (focusout)=\"_onBlur('minutes')\"\n            [required]=\"required\"\n            [attr.aria-required]=\"required\"\n            [attr.aria-label]=\"_getAriaLabel('minutes')\"\n            [disabled]=\"disabled\"\n            [ngClass]=\"hasFocus || ''\"\n            [placeholder]=\"placeholderMinutes\"\n        />\n    </div>\n    <nx-radio-group\n        [name]=\"idRadioGroup\"\n        [(ngModel)]=\"_toggleAMPM\"\n        (ngModelChange)=\"_updateTime()\"\n        *ngIf=\"twelveHourFormat\"\n        (click)=\"_updateTime()\"\n        [disabled]=\"disabled\"\n        [negative]=\"negative\"\n    >\n        <nx-radio labelSize=\"small\" nxValue=\"AM\">{{ labelAM }}</nx-radio>\n        <nx-radio labelSize=\"small\" nxValue=\"PM\">{{ labelPM }}</nx-radio>\n    </nx-radio-group>\n</div>\n", styles: [":host{display:inline-block}:host .nx-timefield__wrapper{display:flex;align-items:center}:host .nx-timefield-input__fields{box-shadow:inset 0 -1px 0 0 var(--timefield-color)}:host .nx-timefield-input__fields:focus{outline:none}:host .nx-timefield-input__fields.has-focus{box-shadow:inset 0 -2px 0 0 var(--timefield-active-color)}:host .nx-timefield__label{font-size:var(--timefield-label-font-size);line-height:var(--timefield-label-line-height);font-weight:var(--timefield-label-font-weight);letter-spacing:var(--timefield-label-letter-spacing)}:host .nx-timefield-input__field__hours,:host .nx-timefield-input__field__minutes,:host .nx-timefield-hours-separator{font-size:var(--timefield-font-size);line-height:var(--timefield-line-height);font-weight:var(--timefield-font-weight);letter-spacing:var(--timefield-letter-spacing);color:var(--timefield-color);margin:0 4px;text-align:center;border:0;outline:0;width:32px;border-radius:0;padding:0;background:transparent;box-sizing:border-box}:host .nx-timefield-input__field__hours:focus,:host .nx-timefield-input__field__minutes:focus,:host .nx-timefield-hours-separator:focus{color:var(--timefield-active-color);outline:none}:host .nx-timefield-input__field__hours.has-focus,:host .nx-timefield-input__field__minutes.has-focus,:host .nx-timefield-hours-separator.has-focus{color:var(--timefield-active-color)}:host .nx-timefield-hours-separator{margin:0}:host nx-radio-group{margin-left:24px}:host nx-radio{display:inline-block;margin-right:24px;padding:0;vertical-align:middle}:host:focus{outline:none}:host.has-error:not(.is-negative) .nx-timefield-input__field__hours,:host.has-error:not(.is-negative) .nx-timefield-input__field__minutes,:host.has-error:not(.is-negative) .nx-timefield-hours-separator{color:var(--danger)}:host.has-error:not(.is-negative) .nx-timefield-input__fields{box-shadow:inset 0 -1px 0 0 var(--danger)}:host.is-disabled{cursor:not-allowed}:host.is-disabled .nx-timefield__label,:host.is-disabled .nx-timefield-input__field__hours,:host.is-disabled .nx-timefield-input__field__minutes,:host.is-disabled .nx-timefield-hours-separator,:host.is-disabled .nx-timefield-input__fields{cursor:not-allowed;color:var(--timefield-disabled-color)}:host.is-disabled .nx-timefield-input__fields{box-shadow:inset 0 -1px 0 0 nx-theme-color(timefield-disabled-color);box-shadow:inset 0 -1px 0 0 var(--timefield-disabled-color)}:host.is-negative .nx-timefield-input__fields{box-shadow:inset 0 -1px 0 0 nx-theme-color(negative);box-shadow:inset 0 -1px 0 0 var(--negative)}:host.is-negative .nx-timefield__label,:host.is-negative .nx-timefield-input__field__hours,:host.is-negative .nx-timefield-input__field__minutes,:host.is-negative .nx-timefield-hours-separator,:host.is-negative .nx-timefield-input__fields{color:var(--negative)}:host.is-disabled.is-negative{cursor:not-allowed}:host.is-disabled.is-negative .nx-timefield__label,:host.is-disabled.is-negative .nx-timefield-input__field__hours,:host.is-disabled.is-negative .nx-timefield-input__field__minutes,:host.is-disabled.is-negative .nx-timefield-hours-separator,:host.is-disabled.is-negative .nx-timefield-input__fields{cursor:not-allowed;color:var(--timefield-disabled-color)}:host.is-disabled.is-negative .nx-timefield-input__fields{box-shadow:inset 0 -1px 0 0 nx-theme-color(timefield-disabled-color);box-shadow:inset 0 -1px 0 0 var(--timefield-disabled-color)}@media screen and (-ms-high-contrast: active){.nx-timefield-input__fields{border-bottom:1px solid buttonText}.nx-timefield-input__fields.has-focus{border-bottom:1px solid highlight}:host.is-disabled .nx-timefield__label,:host.is-disabled .nx-timefield-hours-separator{color:GrayText}:host.is-disabled .nx-timefield-input__fields{border-bottom:1px solid GrayText}}\n"], components: [{ type: i4.NxRadioGroupComponent, selector: "nx-radio-group", inputs: ["id", "nxDisabled", "negative", "required", "name", "nxValue"], outputs: ["nxGroupValueChange"] }, { type: i4.NxRadioComponent, selector: "nx-radio", inputs: ["id", "name", "labelSize", "negative", "nxValue", "nxChecked", "nxDisabled", "required"], outputs: ["nxValueChange"] }], directives: [{ type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTimefieldComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-timefield', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[class.has-error]': 'errorState',
                        '[class.is-negative]': 'negative',
                        '[class.is-disabled]': 'disabled',
                    }, template: "<label class=\"nx-timefield__label\" [ngClass]=\"hasFocus || ''\" [attr.for]=\"hours\">{{ label }}</label>\n<div class=\"nx-timefield__wrapper\">\n    <div class=\"nx-timefield-input__fields\" [ngClass]=\"hasFocus || ''\">\n        <input\n            [id]=\"idHours\"\n            #inputHours\n            [value]=\"hours || null\"\n            class=\"nx-timefield-input__field__hours\"\n            type=\"text\"\n            maxlength=\"2\"\n            autocomplete=\"off\"\n            (focusout)=\"_onBlur('hours')\"\n            (input)=\"_onInput($event, 'hours')\"\n            (focus)=\"_onFocus()\"\n            [required]=\"required\"\n            [attr.aria-required]=\"required\"\n            [attr.aria-label]=\"_getAriaLabel('hours')\"\n            [disabled]=\"disabled\"\n            [ngClass]=\"hasFocus || ''\"\n            [placeholder]=\"placeholderHours\"\n        />\n        <span class=\"nx-timefield-hours-separator\" [ngClass]=\"hasFocus || ''\">:</span>\n        <input\n            [id]=\"idMinutes\"\n            required\n            #inputMinutes\n            [value]=\"minutes || null\"\n            class=\"nx-timefield-input__field__minutes\"\n            type=\"text\"\n            maxlength=\"2\"\n            autocomplete=\"off\"\n            (input)=\"_onInput($event, 'minutes')\"\n            (focus)=\"_onFocus()\"\n            (focusout)=\"_onBlur('minutes')\"\n            [required]=\"required\"\n            [attr.aria-required]=\"required\"\n            [attr.aria-label]=\"_getAriaLabel('minutes')\"\n            [disabled]=\"disabled\"\n            [ngClass]=\"hasFocus || ''\"\n            [placeholder]=\"placeholderMinutes\"\n        />\n    </div>\n    <nx-radio-group\n        [name]=\"idRadioGroup\"\n        [(ngModel)]=\"_toggleAMPM\"\n        (ngModelChange)=\"_updateTime()\"\n        *ngIf=\"twelveHourFormat\"\n        (click)=\"_updateTime()\"\n        [disabled]=\"disabled\"\n        [negative]=\"negative\"\n    >\n        <nx-radio labelSize=\"small\" nxValue=\"AM\">{{ labelAM }}</nx-radio>\n        <nx-radio labelSize=\"small\" nxValue=\"PM\">{{ labelPM }}</nx-radio>\n    </nx-radio-group>\n</div>\n", styles: [":host{display:inline-block}:host .nx-timefield__wrapper{display:flex;align-items:center}:host .nx-timefield-input__fields{box-shadow:inset 0 -1px 0 0 var(--timefield-color)}:host .nx-timefield-input__fields:focus{outline:none}:host .nx-timefield-input__fields.has-focus{box-shadow:inset 0 -2px 0 0 var(--timefield-active-color)}:host .nx-timefield__label{font-size:var(--timefield-label-font-size);line-height:var(--timefield-label-line-height);font-weight:var(--timefield-label-font-weight);letter-spacing:var(--timefield-label-letter-spacing)}:host .nx-timefield-input__field__hours,:host .nx-timefield-input__field__minutes,:host .nx-timefield-hours-separator{font-size:var(--timefield-font-size);line-height:var(--timefield-line-height);font-weight:var(--timefield-font-weight);letter-spacing:var(--timefield-letter-spacing);color:var(--timefield-color);margin:0 4px;text-align:center;border:0;outline:0;width:32px;border-radius:0;padding:0;background:transparent;box-sizing:border-box}:host .nx-timefield-input__field__hours:focus,:host .nx-timefield-input__field__minutes:focus,:host .nx-timefield-hours-separator:focus{color:var(--timefield-active-color);outline:none}:host .nx-timefield-input__field__hours.has-focus,:host .nx-timefield-input__field__minutes.has-focus,:host .nx-timefield-hours-separator.has-focus{color:var(--timefield-active-color)}:host .nx-timefield-hours-separator{margin:0}:host nx-radio-group{margin-left:24px}:host nx-radio{display:inline-block;margin-right:24px;padding:0;vertical-align:middle}:host:focus{outline:none}:host.has-error:not(.is-negative) .nx-timefield-input__field__hours,:host.has-error:not(.is-negative) .nx-timefield-input__field__minutes,:host.has-error:not(.is-negative) .nx-timefield-hours-separator{color:var(--danger)}:host.has-error:not(.is-negative) .nx-timefield-input__fields{box-shadow:inset 0 -1px 0 0 var(--danger)}:host.is-disabled{cursor:not-allowed}:host.is-disabled .nx-timefield__label,:host.is-disabled .nx-timefield-input__field__hours,:host.is-disabled .nx-timefield-input__field__minutes,:host.is-disabled .nx-timefield-hours-separator,:host.is-disabled .nx-timefield-input__fields{cursor:not-allowed;color:var(--timefield-disabled-color)}:host.is-disabled .nx-timefield-input__fields{box-shadow:inset 0 -1px 0 0 nx-theme-color(timefield-disabled-color);box-shadow:inset 0 -1px 0 0 var(--timefield-disabled-color)}:host.is-negative .nx-timefield-input__fields{box-shadow:inset 0 -1px 0 0 nx-theme-color(negative);box-shadow:inset 0 -1px 0 0 var(--negative)}:host.is-negative .nx-timefield__label,:host.is-negative .nx-timefield-input__field__hours,:host.is-negative .nx-timefield-input__field__minutes,:host.is-negative .nx-timefield-hours-separator,:host.is-negative .nx-timefield-input__fields{color:var(--negative)}:host.is-disabled.is-negative{cursor:not-allowed}:host.is-disabled.is-negative .nx-timefield__label,:host.is-disabled.is-negative .nx-timefield-input__field__hours,:host.is-disabled.is-negative .nx-timefield-input__field__minutes,:host.is-disabled.is-negative .nx-timefield-hours-separator,:host.is-disabled.is-negative .nx-timefield-input__fields{cursor:not-allowed;color:var(--timefield-disabled-color)}:host.is-disabled.is-negative .nx-timefield-input__fields{box-shadow:inset 0 -1px 0 0 nx-theme-color(timefield-disabled-color);box-shadow:inset 0 -1px 0 0 var(--timefield-disabled-color)}@media screen and (-ms-high-contrast: active){.nx-timefield-input__fields{border-bottom:1px solid buttonText}.nx-timefield-input__fields.has-focus{border-bottom:1px solid highlight}:host.is-disabled .nx-timefield__label,:host.is-disabled .nx-timefield-hours-separator{color:GrayText}:host.is-disabled .nx-timefield-input__fields{border-bottom:1px solid GrayText}}\n"] }]
        }], ctorParameters: function () {
        return [{ type: i0.ChangeDetectorRef }, { type: i1.NgControl, decorators: [{
                        type: Optional
                    }, {
                        type: Self
                    }] }, { type: i2.ErrorStateMatcher }, { type: i1.NgForm, decorators: [{
                        type: Optional
                    }] }, { type: i1.FormGroupDirective, decorators: [{
                        type: Optional
                    }] }, { type: NxTimefieldIntl }];
    }, propDecorators: { valueChange: [{
                type: Output
            }], twelveHourFormat: [{
                type: Input
            }], label: [{
                type: Input
            }], labelAM: [{
                type: Input
            }], labelPM: [{
                type: Input
            }], placeholderHours: [{
                type: Input
            }], placeholderMinutes: [{
                type: Input
            }], required: [{
                type: Input
            }], negative: [{
                type: Input
            }], disabled: [{
                type: Input
            }] } });

class NxTimefieldModule {
}
NxTimefieldModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTimefieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NxTimefieldModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTimefieldModule, declarations: [NxTimefieldComponent], imports: [CommonModule, FormsModule, NxRadioModule], exports: [NxTimefieldComponent] });
NxTimefieldModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTimefieldModule, providers: [NxTimefieldIntl], imports: [[CommonModule, FormsModule, NxRadioModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTimefieldModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, FormsModule, NxRadioModule],
                    declarations: [NxTimefieldComponent],
                    exports: [NxTimefieldComponent],
                    providers: [NxTimefieldIntl],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { NxTimefieldComponent, NxTimefieldIntl, NxTimefieldModule };
//# sourceMappingURL=aposin-ng-aquila-timefield.mjs.map
