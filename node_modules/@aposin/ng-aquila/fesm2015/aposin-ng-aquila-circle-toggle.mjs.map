{"version":3,"file":"aposin-ng-aquila-circle-toggle.mjs","sources":["../../../projects/ng-aquila/src/circle-toggle/mobile-toggle-button/mobile-toggle-button.component.ts","../../../projects/ng-aquila/src/circle-toggle/mobile-toggle-button/mobile-toggle-button.component.html","../../../projects/ng-aquila/src/circle-toggle/circle-toggle/toggle-button.ts","../../../projects/ng-aquila/src/circle-toggle/circle-toggle-group/circle-toggle-group.component.ts","../../../projects/ng-aquila/src/circle-toggle/icon-toggle-button/icon-toggle-button.component.ts","../../../projects/ng-aquila/src/circle-toggle/icon-toggle-button/icon-toggle-button.component.html","../../../projects/ng-aquila/src/circle-toggle/circle-toggle/circle-toggle.component.ts","../../../projects/ng-aquila/src/circle-toggle/circle-toggle/circle-toggle.component.html","../../../projects/ng-aquila/src/circle-toggle/circle-toggle.module.ts","../../../projects/ng-aquila/src/circle-toggle/aposin-ng-aquila-circle-toggle.ts"],"sourcesContent":["import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input } from '@angular/core';\n\n/** @docs-private */\n@Component({\n    selector: 'nx-mobile-toggle-button',\n    templateUrl: 'mobile-toggle-button.component.html',\n    styleUrls: ['mobile-toggle-button.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[class.is-disabled]': 'disabled',\n        '[class.is-negative]': 'negative',\n        '[class.is-first]': 'isFirst',\n        '[class.is-last]': 'isLast',\n        '[class.is-flipped]': 'checked',\n    },\n})\nexport class NxMobileToggleButtonComponent {\n    @Input()\n    checked = false;\n\n    @Input()\n    negative = false;\n\n    @Input()\n    disabled = false;\n\n    @Input()\n    hint = '';\n\n    @Input()\n    label = '';\n\n    @Input()\n    circleText = '';\n\n    /** @docs-private */\n    isFirst = false;\n\n    /** @docs-private */\n    isLast = false;\n\n    constructor(private _cdr: ChangeDetectorRef) {}\n\n    /** @docs-private */\n    setFirstButton() {\n        this.isFirst = true;\n        this._cdr.markForCheck();\n    }\n\n    /** @docs-private */\n    setLastButton() {\n        this.isLast = true;\n        this._cdr.markForCheck();\n    }\n\n    /** @docs-private */\n    resetClasses() {\n        this.isFirst = false;\n        this.isLast = false;\n        this._cdr.markForCheck();\n    }\n}\n","<nx-icon class=\"nx-toggle-button__mobile-check\" name=\"check\" aria-hidden=\"true\"></nx-icon>\n<!-- If there is no label defined, use the circleText instead -->\n<span class=\"nx-toggle-button__label-text\"><ng-template *ngIf=\"label; then labelContent; else circleTextContent\"></ng-template></span>\n<span *ngIf=\"hint\" class=\"nx-toggle-button__label-hint\">({{ hint }})</span>\n\n<ng-template #labelContent>{{ label }}</ng-template>\n<ng-template #circleTextContent>{{ circleText }}</ng-template>\n","/** @docs-private */\nexport abstract class ToggleButton {\n    abstract id: string;\n    abstract value: string;\n    abstract checked: boolean;\n    abstract name: string;\n    abstract negative: boolean;\n    abstract disabled: boolean;\n    abstract checkedChange: any;\n    abstract selectionChange: any;\n    abstract toggleButton: any;\n    abstract toggle(event: Event): any;\n    abstract setGroupSelection(): any;\n}\n","import { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    DoCheck,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    Self,\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { ErrorStateMatcher } from '@aposin/ng-aquila/utils';\nimport { merge, Subject } from 'rxjs';\nimport { filter, startWith, takeUntil, tap } from 'rxjs/operators';\n\nimport { ToggleButton } from '../circle-toggle/toggle-button';\n\n/**\n * Appearance options for the circle toggle group component.\n */\nexport type NxCircleToggleGroupAppearance = 'default' | 'expert';\n\n/**\n * Represents the default options for the circle toggle group.\n * It can be configured using the `CIRCLE_TOGGLE_GROUP_DEFAULT_OPTIONS` injection token.\n */\nexport interface CircleToggleGroupDefaultOptions {\n    /**\n     * Sets the default appearance. (optional)\n     */\n    appearance?: NxCircleToggleGroupAppearance;\n}\n\nexport const CIRCLE_TOGGLE_GROUP_DEFAULT_OPTIONS = new InjectionToken<CircleToggleGroupDefaultOptions>('CIRCLE_TOGGLE_GROUP_DEFAULT_OPTIONS');\n\nlet nextId = 0;\n\n@Component({\n    selector: 'nx-circle-toggle-group',\n    template: `<ng-content></ng-content>\n        <ng-container *ngIf=\"errorState\">\n            <ng-content select=\"nx-error\"></ng-content>\n        </ng-container> `,\n    styleUrls: ['./circle-toggle-group.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [],\n    host: {\n        '[class.is-responsive]': 'responsive',\n        '[class.is-disabled]': 'disabled',\n        '[attr.aria-disabled]': 'disabled',\n        '[attr.aria-labelledby]': 'name',\n        '[class.has-error]': 'errorState',\n        '[attr.name]': 'name',\n        '[attr.id]': 'id',\n        '[class.nx-circle-toggle-group]': 'true',\n        role: 'radiogroup',\n    },\n})\nexport class NxCircleToggleGroupComponent implements ControlValueAccessor, AfterViewInit, OnDestroy, DoCheck {\n    /**\n     * Id of the circle toggle group.\n     *\n     * If not set, the circle toggle group gets an incremented value by default.\n     */\n    set id(value: string) {\n        this._id = value;\n        this._cdr.markForCheck();\n    }\n    get id(): string {\n        return this._id;\n    }\n\n    /** Name that is used for accessibility. */\n    @Input()\n    set name(value: string) {\n        this._name = value;\n        this.updateToggleButtonsNames();\n        this._cdr.markForCheck();\n    }\n    get name(): string {\n        return this._name;\n    }\n\n    /** Whether the circle toggle group is disabled. */\n    @Input()\n    set disabled(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this._cdr.markForCheck();\n        }\n        if (this.buttons) {\n            this.buttons.forEach(button => (button.disabled = newValue));\n        }\n    }\n    get disabled(): boolean {\n        return this._disabled;\n    }\n    /** Whether the circle toggle group uses the negative styling. */\n    @Input()\n    set negative(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n        if (this.negative !== newValue) {\n            this._negative = newValue;\n        }\n        if (this.buttons) {\n            this.buttons.forEach(button => (button.negative = newValue));\n        }\n    }\n    get negative(): boolean {\n        return this._negative;\n    }\n    /** The value of the selected circle toggle in the circle toggle group. */\n    @Input()\n    set value(value: string) {\n        this.writeValue(value);\n    }\n\n    get value(): string {\n        return this._value;\n    }\n    /** Whether the circle toggle group has a responsive behavior. */\n    @Input()\n    set responsive(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this.responsive) {\n            this._responsive = newValue;\n            this._cdr.markForCheck();\n        }\n    }\n\n    get responsive(): boolean {\n        if (this._isExpert) {\n            return false;\n        }\n        return this._responsive;\n    }\n\n    @HostBinding('class.is-expert')\n    get _isExpert(): boolean {\n        return this.appearance === 'expert';\n    }\n\n    errorState = false;\n\n    constructor(\n        private _cdr: ChangeDetectorRef,\n        private _errorStateMatcher: ErrorStateMatcher,\n        @Optional() @Inject(CIRCLE_TOGGLE_GROUP_DEFAULT_OPTIONS) private _defaultOptions: CircleToggleGroupDefaultOptions | null,\n        @Optional() @Self() public ngControl: NgControl | null,\n        @Optional() private _parentForm: NgForm | null,\n        @Optional() private _parentFormGroup: FormGroupDirective | null,\n    ) {\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n    }\n\n    /** @docs-private */\n    get selectedButton(): ToggleButton | null {\n        return this.buttons ? this.buttons.find(button => button.checked) || null : null;\n    }\n\n    /** @docs-private */\n    get buttons() {\n        return this._buttons;\n    }\n\n    @ContentChildren(ToggleButton, { descendants: true }) private _buttons!: QueryList<ToggleButton>;\n\n    private _id = `nx-circle-toggle-group-${nextId++}`;\n\n    /** An event emitted when the selection changes. Outputs the value of the currently selected button. */\n    @Output()\n    valueChange: EventEmitter<any> = new EventEmitter();\n\n    private _name = `toggle-group-${nextId++}`;\n\n    private _disabled = false;\n\n    _negative = false;\n\n    private _value!: string;\n\n    private _responsive = true;\n\n    private _appearance: NxCircleToggleGroupAppearance | undefined;\n\n    /**\n     * **Expert option**\n     *\n     * Sets the appearance of the circle toggle group. Default: 'default'\n     */\n    @Input()\n    set appearance(value: NxCircleToggleGroupAppearance) {\n        if (this._appearance !== value) {\n            this._appearance = value;\n            this._cdr.markForCheck();\n        }\n    }\n\n    get appearance(): NxCircleToggleGroupAppearance {\n        return this._appearance || this._defaultOptions?.appearance || 'default';\n    }\n\n    private readonly _destroyed = new Subject<void>();\n\n    private onChangeCallback = (value: string) => {};\n    private onTouchedCallback = () => {};\n\n    writeValue(value: any) {\n        Promise.resolve().then(() => {\n            if (this.value !== value) {\n                this._value = value;\n                this.notifySelectedChild(value);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n\n    ngAfterViewInit() {\n        this.subscribeToSelectionChanges();\n\n        // react if a content child is deleted, added etc.\n        this.buttons.changes\n            .pipe(\n                startWith(this.buttons),\n                filter(toggles => toggles.length > 0),\n                tap(async toggles =>\n                    Promise.resolve().then(() => {\n                        toggles.forEach((toggle: any) => toggle.toggleButton.resetClasses());\n                        this.buttons.first.toggleButton.setFirstButton();\n                        this.buttons.last.toggleButton.setLastButton();\n                    }),\n                ),\n                takeUntil(this._destroyed),\n            )\n            .subscribe(() => this.subscribeToSelectionChanges());\n    }\n\n    /** @docs-private */\n    subscribeToSelectionChanges() {\n        merge(...this.buttons.map(button => button.selectionChange))\n            .pipe(takeUntil(this.buttons.changes), takeUntil(this._destroyed))\n            .subscribe((change: any) => {\n                this.onChangeCallback(change.value);\n                this.valueChange.emit(change.value);\n            });\n    }\n\n    /**\n     * @docs-private\n     * inform the selected button if the group selection is set programattically at the beginning\n     */\n    notifySelectedChild(newValue: string) {\n        if (this.buttons) {\n            const selected = this.buttons.find(button => button.value === newValue);\n            if (selected) {\n                selected.setGroupSelection();\n            }\n        }\n    }\n\n    /** @docs-private */\n    updateToggleButtonsNames(): void {\n        if (this.buttons) {\n            this.buttons.forEach(button => (button.name = this.name));\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState?(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribed to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this._updateErrorState();\n        }\n    }\n\n    _updateErrorState() {\n        const oldState = this.errorState;\n        const parent = this._parentFormGroup || this._parentForm;\n        const control = this.ngControl ? (this.ngControl.control as FormControl) : null;\n        const newState = this._errorStateMatcher.isErrorState(control, parent);\n\n        if (newState !== oldState) {\n            this.errorState = newState;\n            this._cdr.markForCheck();\n        }\n    }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n/** @docs-private */\n@Component({\n    selector: 'nx-icon-toggle-button',\n    templateUrl: 'icon-toggle-button.component.html',\n    styleUrls: ['icon-toggle-button.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[class.nx-circle-button]': 'true',\n        '[class.is-flipped]': 'checked',\n        '[class.has-checkmark]': '!inGroup',\n        '[class.is-disabled]': 'disabled',\n        '[class.is-negative]': 'negative',\n        '[class.is-touched]': 'touched',\n    },\n})\nexport class NxIconToggleButtonComponent {\n    @Input()\n    inGroup = true;\n\n    @Input()\n    hint = '';\n\n    @Input()\n    label = '';\n\n    @Input()\n    checked = false;\n\n    @Input()\n    icon = '';\n\n    @Input('svg')\n    svgUrl = '';\n\n    @Input()\n    disabled = false;\n\n    @Input()\n    negative = false;\n\n    @Input()\n    touched = false;\n\n    @Input()\n    circleText = '';\n}\n","<div class=\"nx-toggle-circle__icon-wrapper\">\n    <ng-container *ngIf=\"!inGroup\">\n        <span class=\"nx-toggle-circle__check-icon\">\n            <nx-icon name=\"check\"></nx-icon>\n        </span>\n        <div class=\"nx-toggle-circle__check-focus\"></div>\n    </ng-container>\n    <span class=\"nx-toggle-circle__icon\">\n        <nx-icon size=\"m\" *ngIf=\"icon\" [name]=\"icon\"></nx-icon>\n        <img *ngIf=\"svgUrl\" class=\"nx-toggle-circle__icon-image\" [src]=\"svgUrl\" />\n        <span *ngIf=\"circleText\" class=\"nx-toggle-circle__content-text\">{{ circleText }}</span>\n    </span>\n</div>\n<span *ngIf=\"label\" [class.is-label-bold]=\"hint\" class=\"nx-toggle-circle__label-text\">{{ label }}</span>\n<span *ngIf=\"hint\" class=\"nx-toggle-circle__label-hint\">{{ hint }}</span>\n","import { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\nimport { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostListener,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    Self,\n    ViewChild,\n} from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\n\nimport { NxCircleToggleGroupComponent } from '../circle-toggle-group/circle-toggle-group.component';\nimport { NxMobileToggleButtonComponent } from '../mobile-toggle-button/mobile-toggle-button.component';\nimport { ToggleButton } from './toggle-button';\n\nexport class ToggleChangeEvent {\n    /** A toggle button */\n    button: ToggleButton;\n\n    /** The value of the toggle button that is sent with the event. */\n    value: string;\n\n    constructor(button: ToggleButton, value: string) {\n        this.button = button;\n        this.value = value;\n    }\n}\n\nlet nextId = 0;\n\n@Component({\n    selector: 'nx-circle-toggle',\n    templateUrl: 'circle-toggle.component.html',\n    styleUrls: ['circle-toggle.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        {\n            provide: ToggleButton,\n            useExisting: forwardRef(() => NxCircleToggleComponent),\n        },\n    ],\n    host: {\n        '[class.nx-toggle-circle]': 'true',\n        '[class.in-group]': 'inGroup',\n        '[class.is-disabled]': 'disabled',\n        '[class.is-responsive]': 'responsive',\n        '[class.has-error]': 'errorState',\n    },\n})\nexport class NxCircleToggleComponent extends ToggleButton implements OnInit, OnDestroy, AfterViewInit, ControlValueAccessor, DoCheck {\n    private _id = `toggle-button-${nextId++}`;\n\n    @ViewChild('input') _nativeInput!: ElementRef<HTMLElement>;\n\n    /** @docs-private */\n    inGroup = false;\n\n    errorState = false;\n\n    /**\n     * Id of the circle toggle.\n     *\n     * If not set, the circle toggle gets an incremented value by default.\n     */\n    set id(value: string) {\n        this._id = value;\n        this._cdr.markForCheck();\n    }\n    get id(): string {\n        return this._id;\n    }\n\n    private _name: string | null = null;\n\n    /** Name that is used for accessibility. */\n    @Input()\n    set name(value: string) {\n        this._name = value;\n        this._cdr.markForCheck();\n    }\n    get name(): string {\n        return this._name as string;\n    }\n\n    /**\n     * An event that is emitted when the checked state fo the circle toggle changes.\n     */\n    @Output()\n    checkedChange = new EventEmitter<boolean>();\n\n    /**\n     * An event that is emitted when the checked state of the circle toggle changes.\n     * The event object contains the circle toggle itself and its value (see ToggleChangeEvent).\n     */\n    @Output()\n    selectionChange = new EventEmitter<ToggleChangeEvent>();\n\n    _checked = false;\n    /** Whether the circle toggle is checked. */\n    @Input()\n    set checked(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n        if (this.checked !== newValue) {\n            this._checked = newValue;\n            this._cdr.markForCheck();\n        }\n    }\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    private _value: string | null = null;\n\n    /** The value that is used in the model. */\n    @Input()\n    set value(newValue: string) {\n        this._value = newValue;\n        this._cdr.markForCheck();\n    }\n    get value(): string {\n        return this._value as string;\n    }\n\n    private _iconName: string | null = null;\n    /** Id of the icon that should be displayed. */\n    @Input('icon')\n    set iconName(name: string) {\n        this._iconName = name;\n        this._cdr.markForCheck();\n    }\n    get iconName(): string {\n        return this._iconName as string;\n    }\n\n    private _svg: string | null = null;\n\n    /** SVG that is displayed if the circle toggle is unchecked. */\n    @Input()\n    set svg(src: string) {\n        this._svg = src;\n        this._cdr.markForCheck();\n    }\n    get svg(): string {\n        return this._svg as string;\n    }\n\n    private _svgChecked: string | null = null;\n\n    /** SVG that is displayed if the circle toggle is checked. */\n    @Input()\n    set svgChecked(src: string) {\n        this._svgChecked = src;\n        this._cdr.markForCheck();\n    }\n    get svgChecked(): string {\n        return this._svgChecked as string;\n    }\n\n    private _circleText: string | null = null;\n\n    /** A text that is displayed inside the circle toggle. */\n    @Input()\n    set circleText(value: string) {\n        if (value !== this._circleText) {\n            this._circleText = value;\n            this._cdr.markForCheck();\n        }\n    }\n    get circleText(): string {\n        return this._circleText as string;\n    }\n\n    private _label: string | null = null;\n\n    /** Label displayed below the circle. */\n    @Input()\n    set label(value: string) {\n        this._label = value;\n        this._cdr.markForCheck();\n    }\n    get label(): string {\n        return this._label as string;\n    }\n\n    private _hint: string | null = null;\n\n    /** Additional hint displayed below the label. */\n    @Input()\n    set hint(value: string) {\n        this._hint = value;\n        this._cdr.markForCheck();\n    }\n    get hint(): string {\n        return this._hint as string;\n    }\n\n    private _negative: boolean | undefined;\n\n    /** Whether the circle toggle uses the negative set of styling. */\n    @Input()\n    set negative(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n        if (this.negative !== newValue) {\n            this._negative = newValue;\n            this._cdr.markForCheck();\n        }\n    }\n\n    get negative(): boolean {\n        return !!this._negative;\n    }\n\n    private _responsive: boolean | undefined;\n\n    /** Whether the circle toggle has a responsive behavior. */\n    @Input()\n    set responsive(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n        if (this.responsive !== newValue) {\n            this._responsive = newValue;\n            this._cdr.markForCheck();\n        }\n    }\n\n    get responsive(): boolean {\n        return !!this._responsive;\n    }\n\n    private _disabled: boolean | undefined;\n\n    /** Whether the circle toggle is disabled. */\n    @Input()\n    set disabled(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n        if (this.disabled !== newValue) {\n            this._disabled = newValue;\n            this._cdr.markForCheck();\n        }\n    }\n\n    get disabled(): boolean {\n        return !!this._disabled;\n    }\n\n    /** @docs-private */\n    @ViewChild(NxMobileToggleButtonComponent, { static: true })\n    toggleButton!: NxMobileToggleButtonComponent;\n\n    private _hover = false;\n\n    /** touched is set to true on touch devices. */\n    _touched = false;\n\n    /** @docs-private */\n    @HostListener('mouseenter') onMouseEnter() {\n        if (!this._touched) {\n            this._hover = true;\n        }\n    }\n\n    /** @docs-private */\n    @HostListener('mouseleave') onMouseLeave() {\n        if (!this._touched) {\n            this._hover = false;\n        }\n    }\n\n    /** @docs-private */\n    @HostListener('touchstart') onTouchStart() {\n        this._touched = true;\n    }\n\n    _removeUniqueSelectionListener: () => void = () => {};\n\n    private onChangeCallback = (checked: boolean) => {};\n    private onTouchedCallback = () => {};\n\n    constructor(\n        /** @docs-private */ @Optional() public toggleGroup: NxCircleToggleGroupComponent | null,\n        private _checkedDispatcher: UniqueSelectionDispatcher,\n        private _cdr: ChangeDetectorRef,\n        private _focusMonitor: FocusMonitor,\n        @Optional() @Self() public ngControl: NgControl | null,\n    ) {\n        super();\n\n        if (this.toggleGroup) {\n            this.name = this.toggleGroup.name;\n        }\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n    }\n\n    ngOnInit() {\n        if (this.toggleGroup) {\n            this.attachListenerForGroup();\n        }\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.errorState = !this.ngControl.valid;\n        }\n    }\n\n    ngAfterViewInit() {\n        Promise.resolve().then(() => {\n            if (this.toggleGroup) {\n                this.inGroup = true;\n                this.negative = this.toggleGroup.negative;\n                this.disabled = this.toggleGroup.disabled;\n                this.responsive = this.toggleGroup.responsive;\n                this.id = this.toggleGroup.id + `-button-${nextId++}`;\n            }\n        });\n\n        this._focusMonitor.monitor(this._nativeInput);\n    }\n\n    ngOnDestroy() {\n        // function returned by the listener\n        this._removeUniqueSelectionListener();\n        this._focusMonitor.stopMonitoring(this._nativeInput);\n    }\n\n    /** @docs-private */\n    attachListenerForGroup() {\n        this._removeUniqueSelectionListener = this._checkedDispatcher.listen((groupId: string, buttonId: string) => {\n            if (this.id !== buttonId && groupId === this.toggleGroup?.id) {\n                this.checked = false;\n            }\n        });\n    }\n\n    writeValue(newValue: boolean): void {\n        this.checked = newValue;\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState?(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /** Focuses the radio button element. */\n    focus(focusOrigin?: FocusOrigin) {\n        this._focusMonitor.focusVia(this._nativeInput, focusOrigin as FocusOrigin);\n    }\n\n    /** @docs-private */\n    toggle(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        // TODO simplify if statement\n        if (!((this.toggleGroup && this.checked) || this.disabled)) {\n            this.checked = !this.checked;\n            this.onChangeCallback(this.checked);\n            this.checkedChange.emit(this.checked);\n            this.selectionChange.emit(new ToggleChangeEvent(this, this.value));\n            if (this.toggleGroup) {\n                this._checkedDispatcher.notify(this.toggleGroup.id, this.id);\n            }\n        }\n    }\n\n    /**\n     * @docs-private\n     *\n     * method called by the group if the internal value of the group is changed programatically,\n     * does not trigger change emission\n     */\n    setGroupSelection() {\n        if (!this.toggleGroup) {\n            return;\n        }\n        // propagate changes only if the value in the group is different than the button checked value\n        if (!this.checked) {\n            this.checked = !this.checked;\n            this.onChangeCallback(this.checked);\n            this._checkedDispatcher.notify(this.toggleGroup.id, this.id);\n        }\n    }\n\n    /** @docs-private */\n    get svgButton(): boolean {\n        return !!this.svg && !!this.svgChecked;\n    }\n\n    /** @docs-private */\n    get svgUrl(): string {\n        let useFilledSvg = this.checked || (!this.disabled && this._hover);\n        if (this.negative) {\n            useFilledSvg = !useFilledSvg;\n        }\n        return useFilledSvg ? this.svgChecked : this.svg;\n    }\n\n    /** @docs-private */\n    get type() {\n        return this.toggleGroup ? 'radio' : 'checkbox';\n    }\n\n    /** @docs-private */\n    handleEnterKey(event: Event) {\n        if (!this.toggleGroup) {\n            this.toggle(event);\n        }\n    }\n}\n","<input\n    #input\n    [id]=\"id + '-input'\"\n    class=\"nx-circle-toggle__input\"\n    [attr.aria-labelledby]=\"id + '-label'\"\n    [type]=\"type\"\n    [attr.name]=\"name\"\n    [checked]=\"checked\"\n    [disabled]=\"disabled\"\n    [attr.aria-checked]=\"checked\"\n    (keydown.enter)=\"handleEnterKey($event)\"\n    (click)=\"toggle($event)\"\n/>\n<label class=\"nx-circle-toggle__label\" [for]=\"id + '-input'\" [id]=\"id + '-label'\">\n    <nx-icon-toggle-button\n        [label]=\"label\"\n        [hint]=\"hint\"\n        [checked]=\"checked\"\n        [icon]=\"iconName\"\n        [negative]=\"negative\"\n        [svg]=\"svgUrl\"\n        [disabled]=\"disabled\"\n        [inGroup]=\"inGroup\"\n        [touched]=\"_touched\"\n        [circleText]=\"circleText\"\n    >\n    </nx-icon-toggle-button>\n    <!-- The mobile toggle button is needed for the responsive mobile version of the component.\n    The display swtich is handled in the css. -->\n    <nx-mobile-toggle-button [label]=\"label\" [hint]=\"hint\" [checked]=\"checked\" [negative]=\"negative\" [disabled]=\"disabled\" [circleText]=\"circleText\">\n    </nx-mobile-toggle-button>\n    <ng-content select=\"nx-error\" *ngIf=\"errorState\"></ng-content>\n</label>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxIconModule } from '@aposin/ng-aquila/icon';\n\nimport { NxCircleToggleComponent } from './circle-toggle/circle-toggle.component';\nimport { NxCircleToggleGroupComponent } from './circle-toggle-group/circle-toggle-group.component';\nimport { NxIconToggleButtonComponent } from './icon-toggle-button/icon-toggle-button.component';\nimport { NxMobileToggleButtonComponent } from './mobile-toggle-button/mobile-toggle-button.component';\n\n@NgModule({\n    declarations: [NxCircleToggleGroupComponent, NxCircleToggleComponent, NxIconToggleButtonComponent, NxMobileToggleButtonComponent],\n    exports: [NxCircleToggleGroupComponent, NxIconToggleButtonComponent, NxCircleToggleComponent, NxMobileToggleButtonComponent],\n    imports: [CommonModule, NxIconModule],\n})\nexport class NxCircleToggleModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["nextId","i2","i3","i1.NxCircleToggleGroupComponent","i4","i5.NxIconToggleButtonComponent","i6.NxMobileToggleButtonComponent","i7"],"mappings":"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"}