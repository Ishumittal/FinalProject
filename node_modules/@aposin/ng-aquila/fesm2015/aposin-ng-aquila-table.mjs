import * as i0 from '@angular/core';
import { Component, ChangeDetectionStrategy, Input, Directive, ContentChildren, ViewChild, EventEmitter, Output, Injectable, Optional, NgModule } from '@angular/core';
import { BehaviorSubject, Subject, combineLatest, Subscription } from 'rxjs';
import { startWith, flatMap, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { trigger, state, style, transition, animate } from '@angular/animations';
import * as i1 from '@angular/cdk/a11y';
import * as i2 from '@aposin/ng-aquila/icon';
import { NxIconModule } from '@aposin/ng-aquila/icon';
import { ENTER, SPACE } from '@angular/cdk/keycodes';
import { CommonModule } from '@angular/common';
import { NxCopytextModule } from '@aposin/ng-aquila/copytext';
import { NxSwipebarModule } from '@aposin/ng-aquila/swipebar';

/**
 * This is an expandable table row.
 * It can collapse its height to hide the content.
 * Requires the table cells to have the `[nxExpandableTableCell]` component.
 */
class NxExpandableTableRowComponent {
    constructor(_cdr) {
        this._cdr = _cdr;
        this.expanded = new BehaviorSubject(false);
    }
    /* Whether the row is expanded. */
    set isExpanded(value) {
        this._isExpanded = coerceBooleanProperty(value);
        this.expanded.next(this._isExpanded);
        this._cdr.markForCheck();
    }
    get isExpanded() {
        return this._isExpanded;
    }
    /**
     * Toggles the expansion of this row.
     */
    toggle() {
        if (this.expanded.value) {
            this.close();
        }
        else {
            this.expand();
        }
    }
    /**
     * Expands this row.
     */
    expand() {
        if (!this.expanded.value) {
            this.expanded.next(true);
            this._cdr.markForCheck();
        }
    }
    /**
     * Closes this row.
     */
    close() {
        if (this.expanded.value) {
            this.expanded.next(false);
            this._cdr.markForCheck();
        }
    }
}
NxExpandableTableRowComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxExpandableTableRowComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NxExpandableTableRowComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxExpandableTableRowComponent, selector: "tr[nxExpandableTableRow]", inputs: { isExpanded: "isExpanded" }, host: { classAttribute: "nx-expandable-table-row" }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxExpandableTableRowComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tr[nxExpandableTableRow]',
                    host: {
                        class: 'nx-expandable-table-row',
                    },
                    template: `<ng-content></ng-content>`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { isExpanded: [{
                type: Input
            }] } });

/**
 * The nxExpandableTable adds row expansion functionality to the nxTable.
 * It provides the logic to expand/collapse all expandable rows simultanously.
 */
class NxExpandableTableDirective {
    constructor() {
        this.expanded = new BehaviorSubject(false);
        this._destroyed = new Subject();
    }
    ngAfterViewInit() {
        this.rows.changes
            .pipe(startWith(this.rows), flatMap((rows) => combineLatest(rows.map(row => row.expanded))), map((values) => values.reduce((a, x) => a && x, true)), distinctUntilChanged(), takeUntil(this._destroyed))
            .subscribe(rowsOpen => {
            this.expanded.next(rowsOpen);
        });
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
    /**
     * Toggles the expandable rows. If all rows are open it will close them, otherwise it will open them.
     */
    toggle() {
        if (this.expanded.value) {
            this.close();
        }
        else {
            this.expand();
        }
    }
    /**
     * Expands all expandable rows.
     */
    expand() {
        this.rows.forEach(row => row.expanded.next(true));
    }
    /**
     * Closes all expandable rows.
     */
    close() {
        this.rows.forEach(row => row.expanded.next(false));
    }
}
NxExpandableTableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxExpandableTableDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NxExpandableTableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxExpandableTableDirective, selector: "table[nxExpandableTable]", queries: [{ propertyName: "rows", predicate: NxExpandableTableRowComponent, descendants: true }], exportAs: ["nxExpandableTable"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxExpandableTableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'table[nxExpandableTable]',
                    exportAs: 'nxExpandableTable',
                }]
        }], propDecorators: { rows: [{
                type: ContentChildren,
                args: [NxExpandableTableRowComponent, { descendants: true }]
            }] } });

/**
 * This is an expandable table cell.
 * Only works in conjunction with the `[nxExpandableTableRow]` component.
 */
class NxExpandableTableCellComponent {
    constructor(_row, _cdr) {
        this._cdr = _cdr;
        this._open = false;
        this._destroyed = new Subject();
        _row.expanded.pipe(takeUntil(this._destroyed)).subscribe(open => {
            this._open = open;
            this._cdr.markForCheck();
        });
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
}
NxExpandableTableCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxExpandableTableCellComponent, deps: [{ token: NxExpandableTableRowComponent }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NxExpandableTableCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxExpandableTableCellComponent, selector: "td[nxExpandableTableCell]", host: { classAttribute: "nx-expandable-table-cell" }, ngImport: i0, template: "<div [@openClose]=\"_open ? 'open' : 'closed'\" class=\"nx-expandable-table-cell__content\">\n    <div class=\"nx-expandable-table-cell__wrapper\">\n        <ng-content></ng-content>\n    </div>\n</div>\n", animations: [
        trigger('openClose', [
            state('open', style({
                height: '*',
                visibility: 'visible',
            })),
            state('closed, void', style({
                height: '0',
                visibility: 'hidden', // visibility and height to toggle instead of display: none to prevent cell width jumping
            })),
            transition('closed <=> open, void => closed', [animate('225ms cubic-bezier(0.4,0.0,0.2,1)')]),
        ]),
    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxExpandableTableCellComponent, decorators: [{
            type: Component,
            args: [{ selector: 'td[nxExpandableTableCell]', host: {
                        class: 'nx-expandable-table-cell',
                    }, animations: [
                        trigger('openClose', [
                            state('open', style({
                                height: '*',
                                visibility: 'visible',
                            })),
                            state('closed, void', style({
                                height: '0',
                                visibility: 'hidden', // visibility and height to toggle instead of display: none to prevent cell width jumping
                            })),
                            transition('closed <=> open, void => closed', [animate('225ms cubic-bezier(0.4,0.0,0.2,1)')]),
                        ]),
                    ], changeDetection: ChangeDetectionStrategy.OnPush, template: "<div [@openClose]=\"_open ? 'open' : 'closed'\" class=\"nx-expandable-table-cell__content\">\n    <div class=\"nx-expandable-table-cell__wrapper\">\n        <ng-content></ng-content>\n    </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: NxExpandableTableRowComponent }, { type: i0.ChangeDetectorRef }]; } });

/**
 * This toggle button can be clicked and toggles expandable elements.
 * e.g. it can toggle a expandable table row or anything else that implements the `NxExpandable` interface.
 */
class NxToggleButtonComponent {
    constructor(_cdr, _focusMonitor) {
        this._cdr = _cdr;
        this._focusMonitor = _focusMonitor;
        this._expanded = false;
        this._ariaLabel = '';
        this._subscription = Subscription.EMPTY;
    }
    /**
     * This is the expandable target that will be toggled when the user clicks the button.
     */
    set target(value) {
        var _a;
        this._target = value;
        (_a = this._subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        if (this._target) {
            this._subscription = this._target.expanded.subscribe(expanded => {
                this._expanded = expanded;
                this._cdr.markForCheck();
            });
        }
    }
    set ariaLabel(value) {
        this._ariaLabel = value;
        this._cdr.markForCheck();
    }
    ngAfterViewInit() {
        this._focusMonitor.monitor(this._buttonElement);
    }
    _onClick() {
        if (this._target) {
            this._target.toggle();
        }
    }
    ngOnDestroy() {
        var _a;
        (_a = this._subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        this._focusMonitor.stopMonitoring(this._buttonElement);
    }
}
NxToggleButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxToggleButtonComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });
NxToggleButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxToggleButtonComponent, selector: "nx-toggle-button", inputs: { target: "target", ariaLabel: "ariaLabel" }, viewQueries: [{ propertyName: "_buttonElement", first: true, predicate: ["button"], descendants: true }], ngImport: i0, template: "<button #button (click)=\"_onClick()\" class=\"nx-toggle-button\" [attr.aria-label]=\"_ariaLabel\" [attr.aria-expanded]=\"_expanded\" [class.is-expanded]=\"_expanded\">\n    <nx-icon name=\"chevron-down\" aria-hidden=\"true\" size=\"s\" class=\"nx-toggle-button__icon\"></nx-icon>\n</button>\n", styles: [":host{display:block}.nx-toggle-button{display:block;cursor:pointer;-webkit-appearance:none;appearance:none;border:none;outline:none;background:none;padding:0;line-height:24px;height:24px}.nx-toggle-button .nx-toggle-button__icon{transform:rotate(0);transition:transform .2s ease;color:var(--expandable-table-arrow-icon-color)}.nx-toggle-button.is-expanded .nx-toggle-button__icon{transform:rotate(-180deg)}.nx-toggle-button::-moz-focus-inner{border:0}.nx-toggle-button.cdk-keyboard-focused{border-radius:4px;box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-toggle-button.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}\n"], components: [{ type: i2.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxToggleButtonComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-toggle-button', changeDetection: ChangeDetectionStrategy.OnPush, template: "<button #button (click)=\"_onClick()\" class=\"nx-toggle-button\" [attr.aria-label]=\"_ariaLabel\" [attr.aria-expanded]=\"_expanded\" [class.is-expanded]=\"_expanded\">\n    <nx-icon name=\"chevron-down\" aria-hidden=\"true\" size=\"s\" class=\"nx-toggle-button__icon\"></nx-icon>\n</button>\n", styles: [":host{display:block}.nx-toggle-button{display:block;cursor:pointer;-webkit-appearance:none;appearance:none;border:none;outline:none;background:none;padding:0;line-height:24px;height:24px}.nx-toggle-button .nx-toggle-button__icon{transform:rotate(0);transition:transform .2s ease;color:var(--expandable-table-arrow-icon-color)}.nx-toggle-button.is-expanded .nx-toggle-button__icon{transform:rotate(-180deg)}.nx-toggle-button::-moz-focus-inner{border:0}.nx-toggle-button.cdk-keyboard-focused{border-radius:4px;box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-toggle-button.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.FocusMonitor }]; }, propDecorators: { _buttonElement: [{
                type: ViewChild,
                args: ['button']
            }], target: [{
                type: Input
            }], ariaLabel: [{
                type: Input
            }] } });

/**
 * This is a table header cell.
 */
class NxHeaderCellDirective {
}
NxHeaderCellDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxHeaderCellDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NxHeaderCellDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxHeaderCellDirective, selector: "[nxHeaderCell]", host: { properties: { "class.nx-header-cell": "true" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxHeaderCellDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[nxHeaderCell]',
                    host: {
                        '[class.nx-header-cell]': 'true',
                    },
                }]
        }] });

class SortEvent {
    constructor(active, direction) {
        this.active = active;
        this.direction = direction;
    }
}
class NxSortDirective {
    constructor() {
        this._stateChanges = new Subject();
        this._direction = 'asc';
        /**
         * @docs-private
         * An event emitted when the active value has changed.
         */
        this.activeChange = new EventEmitter();
        /**
         * @docs-private
         * An event emitted when the direction value has changed.
         */
        this.directionChange = new EventEmitter();
        /** An event emitted when either the active sort or sort direction changes. */
        this.sortChange = new EventEmitter();
    }
    /** Sets the key of the most recently sorted column. */
    set active(value) {
        if (this._active !== value) {
            this._active = value;
            this.sortChange.emit(new SortEvent(this.active, this.direction));
            this._stateChanges.next();
        }
    }
    get active() {
        return this._active;
    }
    /** Sets the direction of the currently active sorted column. Default: 'asc'. */
    set direction(value) {
        if (this._direction !== value) {
            this._direction = value;
            this.sortChange.emit(new SortEvent(this.active, this.direction));
            this._stateChanges.next();
        }
    }
    get direction() {
        return this._direction;
    }
    ngOnDestroy() {
        this._stateChanges.complete();
    }
    /**
     * Sets the active sort key and determines the new sort direction.
     * Afterwards the output event `sortChange` is called.
     *
     * If `sortable` is not the key of the active sort header, the initial direction to sort is 'asc'.
     * Otherwise the direction of the sorted column changes.
     */
    sort(sortable) {
        if (this._active !== sortable) {
            this._active = sortable;
            this.activeChange.emit(this.active);
            this._direction = 'asc';
            this.directionChange.emit(this.direction);
        }
        else if (this._direction === 'asc') {
            this._direction = 'desc';
            this.directionChange.emit(this.direction);
        }
        else {
            this._direction = 'asc';
            this.directionChange.emit(this.direction);
        }
        this.sortChange.emit(new SortEvent(this.active, this.direction));
        this._stateChanges.next();
    }
}
NxSortDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSortDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NxSortDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxSortDirective, selector: "table[nxSort]", inputs: { active: "active", direction: "direction" }, outputs: { activeChange: "activeChange", directionChange: "directionChange", sortChange: "sortChange" }, exportAs: ["NxSortDirective"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSortDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'table[nxSort]',
                    exportAs: 'NxSortDirective',
                }]
        }], propDecorators: { active: [{
                type: Input
            }], direction: [{
                type: Input
            }], activeChange: [{
                type: Output
            }], directionChange: [{
                type: Output
            }], sortChange: [{
                type: Output
            }] } });

class NxSortHeaderIntl {
    constructor() {
        /**
         * Stream that emits whenever the labels here are changed. Use this to notify
         * components if the labels have changed after initialization.
         */
        this.changes = new Subject();
        /** The aria label for a header that can be clicked to sort ascending. */
        this.sortAscendingAriaLabel = 'click to sort ascending';
        /** The aria label for a header that can be clicked to sort descending. */
        this.sortDescendingAriaLabel = 'click to sort descending';
        /** The aria label for a column that is sorted ascending. */
        this.sortedAscendingAriaLabel = 'sorted ascending by';
        /** The aria label for a column that is sorted descending. */
        this.sortedDescendingAriaLabel = 'sorted descending by';
    }
}
NxSortHeaderIntl.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSortHeaderIntl, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NxSortHeaderIntl.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSortHeaderIntl });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSortHeaderIntl, decorators: [{
            type: Injectable
        }] });

class NxSortHeaderComponent {
    constructor(_sort, _intl, _cdr, _focusMonitor) {
        this._intl = _intl;
        this._cdr = _cdr;
        this._focusMonitor = _focusMonitor;
        this._destroyed = new Subject();
        if (!_sort) {
            throw new Error(`NxTable: Using the 'nxSortHeaderCell' component requires the 'nxSort' directive on containing table.`);
        }
        this._sort = _sort;
        this._intl.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._cdr.markForCheck());
    }
    /** Sets the key of this sort header. */
    set key(value) {
        if (this._key !== value) {
            this._key = value;
        }
    }
    get key() {
        return this._key;
    }
    ngOnInit() {
        this._sort._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {
            this._cdr.markForCheck();
        });
    }
    ngAfterViewInit() {
        this._focusMonitor.monitor(this._focusContainer);
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this._focusMonitor.stopMonitoring(this._focusContainer);
    }
    _handleClick() {
        this._sort.sort(this._key);
    }
    _onKeydown($event) {
        if ($event && ($event.keyCode === ENTER || $event.keyCode === SPACE)) {
            this._sort.sort(this._key);
            // prevent page from scrolling down
            if ($event.keyCode === SPACE) {
                $event.preventDefault();
            }
        }
    }
    _isSortedAscending() {
        return this._sort.active === this._key && this._sort.direction === 'asc';
    }
    _isSortedDescending() {
        return this._sort.active === this._key && this._sort.direction === 'desc';
    }
    _getAriaLabel() {
        if (this._sort.active === this._key) {
            if (this._sort.direction === 'asc') {
                return `${this._intl.sortedAscendingAriaLabel}`;
            }
            return `${this._intl.sortedDescendingAriaLabel}`;
        }
        return '';
    }
    _getTitle() {
        if (this._sort.active === this._key && this._sort.direction === 'asc') {
            return `${this._intl.sortDescendingAriaLabel}`;
        }
        return `${this._intl.sortAscendingAriaLabel}`;
    }
}
NxSortHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSortHeaderComponent, deps: [{ token: NxSortDirective, optional: true }, { token: NxSortHeaderIntl }, { token: i0.ChangeDetectorRef }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });
NxSortHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxSortHeaderComponent, selector: "th[nxSortHeaderCell]", inputs: { key: ["nxSortHeaderCell", "key"] }, host: { listeners: { "click": "_handleClick()", "keydown": "_onKeydown($event)" } }, viewQueries: [{ propertyName: "_focusContainer", first: true, predicate: ["focusContainer"], descendants: true }], exportAs: ["nxSortHeaderComponent"], ngImport: i0, template: "<div #focusContainer class=\"nx-sort-header__focus-container\" role=\"button\" tabindex=\"0\" [title]=\"_getTitle()\" aria-live=\"polite\">\n    <div class=\"nx-sort-header__icons-container\" [attr.aria-label]=\"_getAriaLabel()\">\n        <nx-icon name=\"chevron-up-small\" class=\"nx-sort-header__icon-up\" [class.nx-sort-header__hidden-icon]=\"_isSortedDescending()\"> </nx-icon>\n        <nx-icon name=\"chevron-down-small\" class=\"nx-sort-header__icon-down\" [class.nx-sort-header__hidden-icon]=\"_isSortedAscending()\"> </nx-icon>\n    </div>\n\n    <ng-content></ng-content>\n</div>\n", styles: [":host{cursor:pointer}.nx-sort-header__icons-container{display:inline-block;margin-right:16px;vertical-align:bottom;width:9px;position:relative}:host-context([dir=rtl]) .nx-sort-header__icons-container{margin-right:0;margin-right:initial;margin-left:16px}.nx-sort-header__icons-container nx-icon{font-size:20px;position:absolute;font-weight:600;width:9px}.nx-sort-header__icons-container .nx-sort-header__icon-up{top:-4px}.nx-sort-header__icons-container .nx-sort-header__icon-down{top:5px}.nx-sort-header__icons-container .nx-sort-header__hidden-icon{visibility:hidden}.nx-sort-header__focus-container{display:flex}.nx-sort-header__focus-container:focus{outline:0}.nx-sort-header__focus-container:focus.cdk-keyboard-focused{box-shadow:var(--focus-box-shadow);border-radius:4px}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-sort-header__focus-container:focus.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}@media screen and (-ms-high-contrast: active){.nx-sort-header__focus-container{color:buttonText}}\n"], components: [{ type: i2.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSortHeaderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'th[nxSortHeaderCell]', exportAs: 'nxSortHeaderComponent', host: {
                        '(click)': '_handleClick()',
                        '(keydown)': '_onKeydown($event)',
                    }, changeDetection: ChangeDetectionStrategy.OnPush, template: "<div #focusContainer class=\"nx-sort-header__focus-container\" role=\"button\" tabindex=\"0\" [title]=\"_getTitle()\" aria-live=\"polite\">\n    <div class=\"nx-sort-header__icons-container\" [attr.aria-label]=\"_getAriaLabel()\">\n        <nx-icon name=\"chevron-up-small\" class=\"nx-sort-header__icon-up\" [class.nx-sort-header__hidden-icon]=\"_isSortedDescending()\"> </nx-icon>\n        <nx-icon name=\"chevron-down-small\" class=\"nx-sort-header__icon-down\" [class.nx-sort-header__hidden-icon]=\"_isSortedAscending()\"> </nx-icon>\n    </div>\n\n    <ng-content></ng-content>\n</div>\n", styles: [":host{cursor:pointer}.nx-sort-header__icons-container{display:inline-block;margin-right:16px;vertical-align:bottom;width:9px;position:relative}:host-context([dir=rtl]) .nx-sort-header__icons-container{margin-right:0;margin-right:initial;margin-left:16px}.nx-sort-header__icons-container nx-icon{font-size:20px;position:absolute;font-weight:600;width:9px}.nx-sort-header__icons-container .nx-sort-header__icon-up{top:-4px}.nx-sort-header__icons-container .nx-sort-header__icon-down{top:5px}.nx-sort-header__icons-container .nx-sort-header__hidden-icon{visibility:hidden}.nx-sort-header__focus-container{display:flex}.nx-sort-header__focus-container:focus{outline:0}.nx-sort-header__focus-container:focus.cdk-keyboard-focused{box-shadow:var(--focus-box-shadow);border-radius:4px}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-sort-header__focus-container:focus.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}@media screen and (-ms-high-contrast: active){.nx-sort-header__focus-container{color:buttonText}}\n"] }]
        }], ctorParameters: function () {
        return [{ type: NxSortDirective, decorators: [{
                        type: Optional
                    }] }, { type: NxSortHeaderIntl }, { type: i0.ChangeDetectorRef }, { type: i1.FocusMonitor }];
    }, propDecorators: { _focusContainer: [{
                type: ViewChild,
                args: ['focusContainer']
            }], key: [{
                type: Input,
                args: ['nxSortHeaderCell']
            }] } });

/**
 * This is a table.
 * The table supports a `zebra` and a `condensed` mode.
 */
class NxTableComponent {
    constructor(_cdr, _expandableTableDirective) {
        this._cdr = _cdr;
        this._expandableTableDirective = _expandableTableDirective;
    }
    /** Change the table mode to condensed  */
    set condensed(value) {
        const newValue = coerceBooleanProperty(value);
        if (value !== this._condensed) {
            this._condensed = newValue;
            this._cdr.markForCheck();
        }
    }
    get condensed() {
        return this._condensed;
    }
    /** Change the table mode to zebra  */
    set zebra(value) {
        const newValue = coerceBooleanProperty(value);
        if (value !== this._zebra) {
            this._zebra = newValue;
            this._cdr.markForCheck();
        }
    }
    get zebra() {
        return this._expandableTableDirective ? false : this._zebra;
    }
    /**
     * Makes first or last column "sticky".
     *
     * Values: first | last | both
     */
    set sticky(value) {
        this._sticky = value;
        this._cdr.markForCheck();
    }
    get sticky() {
        return this._sticky;
    }
}
NxTableComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTableComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: NxExpandableTableDirective, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NxTableComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxTableComponent, selector: "table[nxTable]", inputs: { sticky: "sticky", condensed: "condensed", zebra: "zebra" }, host: { properties: { "class.nx-table--condensed": "condensed", "class.nx-table--zebra": "zebra", "class.nx-table--sticky-first": "sticky === \"first\" || sticky === \"both\"", "class.nx-table--sticky-last": "sticky === \"last\" || sticky === \"both\"" }, classAttribute: "nx-table" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [":host{border-spacing:0;border-bottom:2px solid var(--table-border-bottom-color);width:100%}@media screen and (-ms-high-contrast: active){:host{border-bottom-color:CanvasText}}::ng-deep .nx-header-cell{font-size:var(--table-header-cell-font-size);line-height:var(--table-header-cell-line-height);font-weight:var(--table-header-cell-font-weight);letter-spacing:var(--table-header-cell-letter-spacing);color:var(--table-header-cell-color);background:var(--table-header-cell-background-color);border-top:1px solid var(--table-header-border-top-color);border-bottom:2px solid var(--table-header-border-bottom-color);padding:15px 16px 14px;text-align:left;white-space:nowrap;vertical-align:top}::ng-deep .nx-header-cell:first-child{padding-left:8px}::ng-deep .nx-header-cell:last-child{padding-right:8px}:host-context([dir=rtl]) ::ng-deep .nx-header-cell{text-align:right}:host-context([dir=rtl]) ::ng-deep .nx-header-cell:first-child{padding-right:8px;padding-left:16px}:host-context([dir=rtl]) ::ng-deep .nx-header-cell:last-child{padding-right:16px;padding-left:8px}::ng-deep .nx-table-row{background:var(--table-row-background-color)}::ng-deep .nx-table-cell{font-size:var(--table-cell-font-size);line-height:var(--table-cell-line-height);font-weight:var(--table-cell-font-weight);letter-spacing:var(--table-cell-letter-spacing);color:var(--table-cell-color);padding:16px 16px 15px;border-top:1px solid var(--table-cell-border-top-color)}::ng-deep .nx-table-cell:first-child{padding-left:8px}::ng-deep .nx-table-cell:last-child{padding-right:8px}:host-context([dir=rtl]) ::ng-deep .nx-table-cell:first-child{padding-right:8px;padding-left:16px}:host-context([dir=rtl]) ::ng-deep .nx-table-cell:last-child{padding-right:16px;padding-left:8px}:host(.nx-table--condensed) ::ng-deep .nx-table-cell{padding-bottom:7px;padding-top:8px}:host(.nx-table--zebra) ::ng-deep .nx-table-cell{border-top:1px solid var(--zebra-table-cell-border-top-color)}:host(.nx-table--zebra) ::ng-deep .nx-table-cell--expandable{border-top:0}:host(.nx-table--condensed) ::ng-deep .nx-table-cell--expandable{padding-bottom:0;padding-top:0}:host(.nx-table--condensed) ::ng-deep .nx-table-cell--expandable .nx-table-cell__wrapper{padding-bottom:7px;padding-top:8px}::ng-deep .nx-expandable-table-cell{font-size:var(--table-cell-font-size);line-height:var(--table-cell-line-height);font-weight:var(--table-cell-font-weight);letter-spacing:var(--table-cell-letter-spacing);color:var(--table-cell-color)}::ng-deep .nx-expandable-table-cell__content{overflow:hidden}::ng-deep .nx-expandable-table-cell__wrapper{padding:16px}::ng-deep .nx-expandable-table-cell:first-child .nx-cell__wrapper{padding-left:8px}:host-context([dir=rtl]) ::ng-deep .nx-expandable-table-cell:first-child .nx-cell__wrapper{padding-right:8px;padding-left:0;padding-left:initial}::ng-deep .nx-expandable-table-cell:last-child .nx-cell__wrapper{padding-right:8px}:host-context([dir=rtl]) ::ng-deep .nx-expandable-table-cell:last-child .nx-cell__wrapper{padding-right:0;padding-right:initial;padding-left:8px}:host(.nx-table--condensed) ::ng-deep .nx-expandable-table-cell .nx-expandable-table-cell__wrapper{padding-bottom:7px;padding-top:8px}:host(.nx-table--zebra) ::ng-deep tbody .nx-expandable-table-row:nth-child(4n){background:var(--zebra-table-even-row-background-color)}:host(.nx-table--zebra) ::ng-deep tbody .nx-expandable-table-row:nth-child(4n)+.nx-table-row:not(.is-selected){background:var(--zebra-table-odd-row-background-color)}:host(.nx-table--zebra) ::ng-deep tbody .nx-expandable-table-row:nth-child(4n+2){background:var(--zebra-table-odd-row-background-color)}:host(.nx-table--zebra) ::ng-deep tbody .nx-expandable-table-row:nth-child(4n+2)+.nx-table-row:not(.is-selected){background:var(--zebra-table-even-row-background-color)}:host(.nx-table--zebra) ::ng-deep tbody .nx-table-row:nth-child(2n){background:var(--zebra-table-even-row-background-color)}:host(.nx-table--zebra) ::ng-deep tbody .nx-table-row.nx-table-row--selectable:not(.is-selected):hover{background:var(--zebra-table-row-hover-background-color)}:host(.nx-table--zebra) ::ng-deep tbody .nx-table-row.nx-table-row--selectable:not(.is-selected):active{background:var(--zebra-table-row-active-background-color)}:host(.nx-table--zebra) ::ng-deep tbody .nx-table-row.nx-table-row--selectable.is-selected:hover{background:var(--selectable-table-row-selected-hover-background-color)}::ng-deep .nx-table-row:first-child .nx-table-cell{border-top:0}::ng-deep .nx-table-row.nx-table-row--selectable{cursor:pointer}::ng-deep .nx-table-row.nx-table-row--selectable::-moz-focus-inner{border:0}::ng-deep .nx-table-row.nx-table-row--selectable:focus{outline:none}::ng-deep .nx-table-row.nx-table-row--selectable:not(.is-selected):hover{background:var(--selectable-table-row-hover-background-color)}::ng-deep .nx-table-row.nx-table-row--selectable:not(.is-selected):active{background:var(--selectable-table-row-active-background-color)}::ng-deep .nx-table-row.nx-table-row--selectable.is-selected:hover{background:var(--selectable-table-row-selected-hover-background-color)}::ng-deep .nx-table-row.is-selected,:host(.nx-table--zebra) ::ng-deep .nx-table-row.is-selected{background:var(--zebra-table-row-selected-background-color)}::ng-deep .nx-table-row.is-selected+.nx-expandable-table-row,:host(.nx-table--zebra) ::ng-deep .nx-table-row.is-selected+.nx-expandable-table-row{background:var(--zebra-table-row-selected-background-color)}::ng-deep .nx-table-row.is-selected>.nx-table-cell,::ng-deep .nx-table-row.is-selected+.nx-table-row>.nx-table-cell,::ng-deep .nx-table-row.is-selected+.nx-expandable-table-row+.nx-table-row>.nx-table-cell,:host(.nx-table--zebra) ::ng-deep .nx-table-row.is-selected>.nx-table-cell,:host(.nx-table--zebra) ::ng-deep .nx-table-row.is-selected+.nx-table-row>.nx-table-cell,:host(.nx-table--zebra) ::ng-deep .nx-table-row.is-selected+.nx-expandable-table-row+.nx-table-row>.nx-table-cell{border-color:var(--selectable-table-row-selected-border-color)}::ng-deep .nx-header-cell nx-checkbox,::ng-deep .nx-table-cell nx-checkbox,::ng-deep .nx-exandable-table-cell nx-checkbox{margin:0}::ng-deep .nx-header-cell nx-checkbox .nx-checkbox__label,::ng-deep .nx-table-cell nx-checkbox .nx-checkbox__label,::ng-deep .nx-exandable-table-cell nx-checkbox .nx-checkbox__label{padding:0}::ng-deep .nx-header-cell nx-taglist,::ng-deep .nx-table-cell nx-taglist,::ng-deep .nx-exandable-table-cell nx-taglist{margin:0}::ng-deep .nx-header-cell nx-taglist .nx-taglist__list-item,::ng-deep .nx-table-cell nx-taglist .nx-taglist__list-item,::ng-deep .nx-exandable-table-cell nx-taglist .nx-taglist__list-item{margin-bottom:0}::ng-deep .nx-header-cell .nx-button,::ng-deep .nx-table-cell .nx-button,::ng-deep .nx-exandable-table-cell .nx-button{margin:0}::ng-deep .nx-header-cell nx-formfield .nx-formfield__wrapper,::ng-deep .nx-table-cell nx-formfield .nx-formfield__wrapper,::ng-deep .nx-exandable-table-cell nx-formfield .nx-formfield__wrapper{padding:0}::ng-deep .nx-header-cell nx-formfield.has-outline .nx-formfield__wrapper,::ng-deep .nx-table-cell nx-formfield.has-outline .nx-formfield__wrapper,::ng-deep .nx-exandable-table-cell nx-formfield.has-outline .nx-formfield__wrapper{padding-top:0}::ng-deep .nx-header-cell .nx-list,::ng-deep .nx-table-cell .nx-list,::ng-deep .nx-exandable-table-cell .nx-list{margin:0}::ng-deep .nx-header-cell .nx-list li:last-child,::ng-deep .nx-table-cell .nx-list li:last-child,::ng-deep .nx-exandable-table-cell .nx-list li:last-child{margin-bottom:0}::ng-deep .nx-header-cell nx-link a,::ng-deep .nx-table-cell nx-link a,::ng-deep .nx-exandable-table-cell nx-link a{display:inline-flex}@media (min-width: 704px){:host(.nx-table--sticky-first) ::ng-deep .nx-header-cell:first-child,:host(.nx-table--sticky-last) ::ng-deep .nx-header-cell:last-child,:host(.nx-table--sticky-first) ::ng-deep .nx-table-cell:first-child,:host(.nx-table--sticky-last) ::ng-deep .nx-table-cell:last-child{position:-webkit-sticky;position:sticky;left:0;z-index:1;background-color:var(--table-sticky-column-background-color)}:host(.nx-table--sticky-first) ::ng-deep .nx-header-cell:first-child:before,:host(.nx-table--sticky-last) ::ng-deep .nx-header-cell:last-child:before,:host(.nx-table--sticky-first) ::ng-deep .nx-table-cell:first-child:before,:host(.nx-table--sticky-last) ::ng-deep .nx-table-cell:last-child:before{box-shadow:4px 0 4px -4px var(--shadow-small-color) inset;right:-4px;width:4px;top:-1px;bottom:-1px;position:absolute;content:\" \"}:host(.nx-table--sticky-last) ::ng-deep .nx-header-cell:last-child,:host(.nx-table--sticky-last) ::ng-deep .nx-table-cell:last-child{right:0}:host(.nx-table--sticky-last) ::ng-deep .nx-header-cell:last-child:before,:host(.nx-table--sticky-last) ::ng-deep .nx-table-cell:last-child:before{left:-4px;box-shadow:-4px 0 4px -4px var(--shadow-small-color) inset}}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTableComponent, decorators: [{
            type: Component,
            args: [{ selector: 'table[nxTable]', template: '<ng-content></ng-content>', inputs: ['sticky'], host: {
                        class: 'nx-table',
                        '[class.nx-table--condensed]': 'condensed',
                        '[class.nx-table--zebra]': 'zebra',
                        '[class.nx-table--sticky-first]': 'sticky === "first" || sticky === "both"',
                        '[class.nx-table--sticky-last]': 'sticky === "last" || sticky === "both"',
                    }, changeDetection: ChangeDetectionStrategy.OnPush, styles: [":host{border-spacing:0;border-bottom:2px solid var(--table-border-bottom-color);width:100%}@media screen and (-ms-high-contrast: active){:host{border-bottom-color:CanvasText}}::ng-deep .nx-header-cell{font-size:var(--table-header-cell-font-size);line-height:var(--table-header-cell-line-height);font-weight:var(--table-header-cell-font-weight);letter-spacing:var(--table-header-cell-letter-spacing);color:var(--table-header-cell-color);background:var(--table-header-cell-background-color);border-top:1px solid var(--table-header-border-top-color);border-bottom:2px solid var(--table-header-border-bottom-color);padding:15px 16px 14px;text-align:left;white-space:nowrap;vertical-align:top}::ng-deep .nx-header-cell:first-child{padding-left:8px}::ng-deep .nx-header-cell:last-child{padding-right:8px}:host-context([dir=rtl]) ::ng-deep .nx-header-cell{text-align:right}:host-context([dir=rtl]) ::ng-deep .nx-header-cell:first-child{padding-right:8px;padding-left:16px}:host-context([dir=rtl]) ::ng-deep .nx-header-cell:last-child{padding-right:16px;padding-left:8px}::ng-deep .nx-table-row{background:var(--table-row-background-color)}::ng-deep .nx-table-cell{font-size:var(--table-cell-font-size);line-height:var(--table-cell-line-height);font-weight:var(--table-cell-font-weight);letter-spacing:var(--table-cell-letter-spacing);color:var(--table-cell-color);padding:16px 16px 15px;border-top:1px solid var(--table-cell-border-top-color)}::ng-deep .nx-table-cell:first-child{padding-left:8px}::ng-deep .nx-table-cell:last-child{padding-right:8px}:host-context([dir=rtl]) ::ng-deep .nx-table-cell:first-child{padding-right:8px;padding-left:16px}:host-context([dir=rtl]) ::ng-deep .nx-table-cell:last-child{padding-right:16px;padding-left:8px}:host(.nx-table--condensed) ::ng-deep .nx-table-cell{padding-bottom:7px;padding-top:8px}:host(.nx-table--zebra) ::ng-deep .nx-table-cell{border-top:1px solid var(--zebra-table-cell-border-top-color)}:host(.nx-table--zebra) ::ng-deep .nx-table-cell--expandable{border-top:0}:host(.nx-table--condensed) ::ng-deep .nx-table-cell--expandable{padding-bottom:0;padding-top:0}:host(.nx-table--condensed) ::ng-deep .nx-table-cell--expandable .nx-table-cell__wrapper{padding-bottom:7px;padding-top:8px}::ng-deep .nx-expandable-table-cell{font-size:var(--table-cell-font-size);line-height:var(--table-cell-line-height);font-weight:var(--table-cell-font-weight);letter-spacing:var(--table-cell-letter-spacing);color:var(--table-cell-color)}::ng-deep .nx-expandable-table-cell__content{overflow:hidden}::ng-deep .nx-expandable-table-cell__wrapper{padding:16px}::ng-deep .nx-expandable-table-cell:first-child .nx-cell__wrapper{padding-left:8px}:host-context([dir=rtl]) ::ng-deep .nx-expandable-table-cell:first-child .nx-cell__wrapper{padding-right:8px;padding-left:0;padding-left:initial}::ng-deep .nx-expandable-table-cell:last-child .nx-cell__wrapper{padding-right:8px}:host-context([dir=rtl]) ::ng-deep .nx-expandable-table-cell:last-child .nx-cell__wrapper{padding-right:0;padding-right:initial;padding-left:8px}:host(.nx-table--condensed) ::ng-deep .nx-expandable-table-cell .nx-expandable-table-cell__wrapper{padding-bottom:7px;padding-top:8px}:host(.nx-table--zebra) ::ng-deep tbody .nx-expandable-table-row:nth-child(4n){background:var(--zebra-table-even-row-background-color)}:host(.nx-table--zebra) ::ng-deep tbody .nx-expandable-table-row:nth-child(4n)+.nx-table-row:not(.is-selected){background:var(--zebra-table-odd-row-background-color)}:host(.nx-table--zebra) ::ng-deep tbody .nx-expandable-table-row:nth-child(4n+2){background:var(--zebra-table-odd-row-background-color)}:host(.nx-table--zebra) ::ng-deep tbody .nx-expandable-table-row:nth-child(4n+2)+.nx-table-row:not(.is-selected){background:var(--zebra-table-even-row-background-color)}:host(.nx-table--zebra) ::ng-deep tbody .nx-table-row:nth-child(2n){background:var(--zebra-table-even-row-background-color)}:host(.nx-table--zebra) ::ng-deep tbody .nx-table-row.nx-table-row--selectable:not(.is-selected):hover{background:var(--zebra-table-row-hover-background-color)}:host(.nx-table--zebra) ::ng-deep tbody .nx-table-row.nx-table-row--selectable:not(.is-selected):active{background:var(--zebra-table-row-active-background-color)}:host(.nx-table--zebra) ::ng-deep tbody .nx-table-row.nx-table-row--selectable.is-selected:hover{background:var(--selectable-table-row-selected-hover-background-color)}::ng-deep .nx-table-row:first-child .nx-table-cell{border-top:0}::ng-deep .nx-table-row.nx-table-row--selectable{cursor:pointer}::ng-deep .nx-table-row.nx-table-row--selectable::-moz-focus-inner{border:0}::ng-deep .nx-table-row.nx-table-row--selectable:focus{outline:none}::ng-deep .nx-table-row.nx-table-row--selectable:not(.is-selected):hover{background:var(--selectable-table-row-hover-background-color)}::ng-deep .nx-table-row.nx-table-row--selectable:not(.is-selected):active{background:var(--selectable-table-row-active-background-color)}::ng-deep .nx-table-row.nx-table-row--selectable.is-selected:hover{background:var(--selectable-table-row-selected-hover-background-color)}::ng-deep .nx-table-row.is-selected,:host(.nx-table--zebra) ::ng-deep .nx-table-row.is-selected{background:var(--zebra-table-row-selected-background-color)}::ng-deep .nx-table-row.is-selected+.nx-expandable-table-row,:host(.nx-table--zebra) ::ng-deep .nx-table-row.is-selected+.nx-expandable-table-row{background:var(--zebra-table-row-selected-background-color)}::ng-deep .nx-table-row.is-selected>.nx-table-cell,::ng-deep .nx-table-row.is-selected+.nx-table-row>.nx-table-cell,::ng-deep .nx-table-row.is-selected+.nx-expandable-table-row+.nx-table-row>.nx-table-cell,:host(.nx-table--zebra) ::ng-deep .nx-table-row.is-selected>.nx-table-cell,:host(.nx-table--zebra) ::ng-deep .nx-table-row.is-selected+.nx-table-row>.nx-table-cell,:host(.nx-table--zebra) ::ng-deep .nx-table-row.is-selected+.nx-expandable-table-row+.nx-table-row>.nx-table-cell{border-color:var(--selectable-table-row-selected-border-color)}::ng-deep .nx-header-cell nx-checkbox,::ng-deep .nx-table-cell nx-checkbox,::ng-deep .nx-exandable-table-cell nx-checkbox{margin:0}::ng-deep .nx-header-cell nx-checkbox .nx-checkbox__label,::ng-deep .nx-table-cell nx-checkbox .nx-checkbox__label,::ng-deep .nx-exandable-table-cell nx-checkbox .nx-checkbox__label{padding:0}::ng-deep .nx-header-cell nx-taglist,::ng-deep .nx-table-cell nx-taglist,::ng-deep .nx-exandable-table-cell nx-taglist{margin:0}::ng-deep .nx-header-cell nx-taglist .nx-taglist__list-item,::ng-deep .nx-table-cell nx-taglist .nx-taglist__list-item,::ng-deep .nx-exandable-table-cell nx-taglist .nx-taglist__list-item{margin-bottom:0}::ng-deep .nx-header-cell .nx-button,::ng-deep .nx-table-cell .nx-button,::ng-deep .nx-exandable-table-cell .nx-button{margin:0}::ng-deep .nx-header-cell nx-formfield .nx-formfield__wrapper,::ng-deep .nx-table-cell nx-formfield .nx-formfield__wrapper,::ng-deep .nx-exandable-table-cell nx-formfield .nx-formfield__wrapper{padding:0}::ng-deep .nx-header-cell nx-formfield.has-outline .nx-formfield__wrapper,::ng-deep .nx-table-cell nx-formfield.has-outline .nx-formfield__wrapper,::ng-deep .nx-exandable-table-cell nx-formfield.has-outline .nx-formfield__wrapper{padding-top:0}::ng-deep .nx-header-cell .nx-list,::ng-deep .nx-table-cell .nx-list,::ng-deep .nx-exandable-table-cell .nx-list{margin:0}::ng-deep .nx-header-cell .nx-list li:last-child,::ng-deep .nx-table-cell .nx-list li:last-child,::ng-deep .nx-exandable-table-cell .nx-list li:last-child{margin-bottom:0}::ng-deep .nx-header-cell nx-link a,::ng-deep .nx-table-cell nx-link a,::ng-deep .nx-exandable-table-cell nx-link a{display:inline-flex}@media (min-width: 704px){:host(.nx-table--sticky-first) ::ng-deep .nx-header-cell:first-child,:host(.nx-table--sticky-last) ::ng-deep .nx-header-cell:last-child,:host(.nx-table--sticky-first) ::ng-deep .nx-table-cell:first-child,:host(.nx-table--sticky-last) ::ng-deep .nx-table-cell:last-child{position:-webkit-sticky;position:sticky;left:0;z-index:1;background-color:var(--table-sticky-column-background-color)}:host(.nx-table--sticky-first) ::ng-deep .nx-header-cell:first-child:before,:host(.nx-table--sticky-last) ::ng-deep .nx-header-cell:last-child:before,:host(.nx-table--sticky-first) ::ng-deep .nx-table-cell:first-child:before,:host(.nx-table--sticky-last) ::ng-deep .nx-table-cell:last-child:before{box-shadow:4px 0 4px -4px var(--shadow-small-color) inset;right:-4px;width:4px;top:-1px;bottom:-1px;position:absolute;content:\" \"}:host(.nx-table--sticky-last) ::ng-deep .nx-header-cell:last-child,:host(.nx-table--sticky-last) ::ng-deep .nx-table-cell:last-child{right:0}:host(.nx-table--sticky-last) ::ng-deep .nx-header-cell:last-child:before,:host(.nx-table--sticky-last) ::ng-deep .nx-table-cell:last-child:before{left:-4px;box-shadow:-4px 0 4px -4px var(--shadow-small-color) inset}}\n"] }]
        }], ctorParameters: function () {
        return [{ type: i0.ChangeDetectorRef }, { type: NxExpandableTableDirective, decorators: [{
                        type: Optional
                    }] }];
    }, propDecorators: { condensed: [{
                type: Input
            }], zebra: [{
                type: Input
            }], sticky: [{
                type: Input
            }] } });

/**
 * This is a table cell.
 */
class NxTableCellComponent {
}
NxTableCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTableCellComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
NxTableCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxTableCellComponent, selector: "td[nxTableCell], td[nxCell]", host: { properties: { "class.nx-table-cell": "true" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTableCellComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'td[nxTableCell], td[nxCell]',
                    template: '<ng-content></ng-content>',
                    host: {
                        '[class.nx-table-cell]': 'true',
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }] });

/**
 * This is a table row.
 */
class NxTableRowComponent {
    constructor(_cdr, _elementRef) {
        this._cdr = _cdr;
        this._elementRef = _elementRef;
        this._selectable = false;
        this._selected = false;
        this.select = new EventEmitter();
    }
    /** Whether this table row is selectable */
    set selectable(value) {
        this._selectable = coerceBooleanProperty(value);
        this._cdr.markForCheck();
    }
    get selectable() {
        return this._selectable;
    }
    /** Whether this table row is selected */
    set selected(value) {
        this._selected = coerceBooleanProperty(value);
        this._cdr.markForCheck();
    }
    get selected() {
        return this._selected;
    }
    _onSelect($event) {
        if (!this._selectable || this.isSelectionPrevented($event)) {
            return;
        }
        if ($event.keyCode === SPACE) {
            $event.preventDefault();
        }
        this.select.emit();
    }
    /**
     * Checks if the event would trigger an action or if default action is prevented.
     * Returns `true` if a button, link, input or label are clicked.
     */
    isSelectionPrevented($event) {
        if ($event.defaultPrevented) {
            return true;
        }
        let parent = $event.target;
        while (parent && parent !== this._elementRef.nativeElement) {
            if (['A', 'INPUT', 'BUTTON', 'TEXTAREA'].includes(parent.tagName)) {
                return true;
            }
            else if (parent.tagName === 'LABEL' && parent.getAttribute('for')) {
                return true;
            }
            parent = parent.parentElement;
        }
        return false;
    }
}
NxTableRowComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTableRowComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
NxTableRowComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxTableRowComponent, selector: "tr[nxTableRow]", inputs: { selectable: "selectable", selected: "selected" }, outputs: { select: "select" }, host: { listeners: { "click": "_onSelect($event)", "keydown.space": "_onSelect($event)" }, properties: { "class.is-selected": "selected", "class.nx-table-row--selectable": "selectable", "attr.aria-selected": "selected" }, classAttribute: "nx-table-row" }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTableRowComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tr[nxTableRow]',
                    host: {
                        class: 'nx-table-row',
                        '[class.is-selected]': 'selected',
                        '[class.nx-table-row--selectable]': 'selectable',
                        '[attr.aria-selected]': 'selected',
                        '(click)': '_onSelect($event)',
                        '(keydown.space)': '_onSelect($event)',
                    },
                    template: `<ng-content></ng-content>`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }]; }, propDecorators: { selectable: [{
                type: Input
            }], selected: [{
                type: Input
            }], select: [{
                type: Output
            }] } });

const EXPORTED_DECLARED_ELEMENTS = [
    NxHeaderCellDirective,
    NxTableComponent,
    NxTableCellComponent,
    NxTableComponent,
    NxTableRowComponent,
    NxToggleButtonComponent,
    NxExpandableTableDirective,
    NxExpandableTableRowComponent,
    NxExpandableTableCellComponent,
    NxSortHeaderComponent,
    NxSortDirective,
];
class NxTableModule {
}
NxTableModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NxTableModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTableModule, declarations: [NxHeaderCellDirective,
        NxTableComponent,
        NxTableCellComponent,
        NxTableComponent,
        NxTableRowComponent,
        NxToggleButtonComponent,
        NxExpandableTableDirective,
        NxExpandableTableRowComponent,
        NxExpandableTableCellComponent,
        NxSortHeaderComponent,
        NxSortDirective], imports: [CommonModule, NxIconModule, NxCopytextModule, NxSwipebarModule], exports: [NxHeaderCellDirective,
        NxTableComponent,
        NxTableCellComponent,
        NxTableComponent,
        NxTableRowComponent,
        NxToggleButtonComponent,
        NxExpandableTableDirective,
        NxExpandableTableRowComponent,
        NxExpandableTableCellComponent,
        NxSortHeaderComponent,
        NxSortDirective, NxSwipebarModule] });
NxTableModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTableModule, providers: [NxSortHeaderIntl], imports: [[CommonModule, NxIconModule, NxCopytextModule, NxSwipebarModule], NxSwipebarModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTableModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: EXPORTED_DECLARED_ELEMENTS,
                    exports: [...EXPORTED_DECLARED_ELEMENTS, NxSwipebarModule],
                    imports: [CommonModule, NxIconModule, NxCopytextModule, NxSwipebarModule],
                    providers: [NxSortHeaderIntl],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { NxExpandableTableCellComponent, NxExpandableTableDirective, NxExpandableTableRowComponent, NxHeaderCellDirective, NxSortDirective, NxSortHeaderComponent, NxSortHeaderIntl, NxTableCellComponent, NxTableComponent, NxTableModule, NxTableRowComponent, NxToggleButtonComponent, SortEvent };
//# sourceMappingURL=aposin-ng-aquila-table.mjs.map
