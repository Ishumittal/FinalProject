{"version":3,"file":"aposin-ng-aquila-modal.mjs","sources":["../../../projects/ng-aquila/src/modal/dialog/modal-config.ts","../../../projects/ng-aquila/src/modal/dialog/modal-animations.ts","../../../projects/ng-aquila/src/modal/dialog/modal-container.component.ts","../../../projects/ng-aquila/src/modal/dialog/modal-container.component.html","../../../projects/ng-aquila/src/modal/dialog/modal-ref.ts","../../../projects/ng-aquila/src/modal/dialog/dialog.service.ts","../../../projects/ng-aquila/src/modal/dialog/modal-close.directive.ts","../../../projects/ng-aquila/src/modal/animations.ts","../../../projects/ng-aquila/src/modal/modal.service.ts","../../../projects/ng-aquila/src/modal/modal.component.ts","../../../projects/ng-aquila/src/modal/modal.component.html","../../../projects/ng-aquila/src/modal/modal-open-on-click.directive.ts","../../../projects/ng-aquila/src/modal/modal.module.ts","../../../projects/ng-aquila/src/modal/aposin-ng-aquila-modal.ts"],"sourcesContent":["import { Direction } from '@angular/cdk/bidi';\nimport { ScrollStrategy } from '@angular/cdk/overlay';\nimport { ComponentFactoryResolver, ViewContainerRef } from '@angular/core';\n\n/** Valid ARIA roles for a modal element. */\nexport type NxModalRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a modal's position. */\nexport interface NxDialogPosition {\n    /** Override for the modal's top position. */\n    top?: string;\n\n    /** Override for the modal's bottom position. */\n    bottom?: string;\n\n    /** Override for the modal's left position. */\n    left?: string;\n\n    /** Override for the modal's right position. */\n    right?: string;\n}\n\n/**\n * Configuration for opening a modal  with the NxDialogService.\n */\nexport class NxModalConfig<D = any> {\n    /**\n     * Where the attached component should live in Angular's *logical* component tree.\n     * This affects what is available for injection and the change detection order for the\n     * component instantiated inside of the modal. This does not affect where the modal\n     * content will be rendered.\n     */\n    viewContainerRef?: ViewContainerRef;\n\n    /** ID for the modal. If omitted, a unique one will be generated. */\n    id?: string;\n\n    /** The ARIA role of the modal element. */\n    role?: NxModalRole = 'dialog';\n\n    /** Custom class for the overlay pane. */\n    panelClass?: string | string[] = '';\n\n    /** Whether the modal has a backdrop. */\n    hasBackdrop?: boolean = true;\n\n    /** Custom class for the backdrop. */\n    backdropClass?: string = '';\n\n    /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n    disableClose?: boolean = false;\n\n    /** Width of the modal. */\n    width?: string = '736px';\n\n    /** Height of the modal. */\n    height?: string = '';\n\n    /** Min-width of the modal. If a number is provided, assumes pixel units. */\n    minWidth?: number | string;\n\n    /** Min-height of the modal. If a number is provided, assumes pixel units. */\n    minHeight?: number | string;\n\n    /** Max-width of the modal. If a number is provided, assumes pixel units. Defaults to 100vw. */\n    maxWidth?: number | string = '736px';\n\n    /** Max-height of the modal. If a number is provided, assumes pixel units. */\n    maxHeight?: number | string;\n\n    /** Position overrides. */\n    position?: NxDialogPosition;\n\n    /** Data being injected into the child component. */\n    data?: D | null = null;\n\n    /** ID of the element that describes the modal. */\n    ariaDescribedBy?: string | null = null;\n\n    /** ID of the element that labels the modal. */\n    ariaLabelledBy?: string | null = null;\n\n    /** Aria label to assign to the modal element. */\n    ariaLabel?: string | null = null;\n\n    /** Whether the modal should focus the first focusable element on open. */\n    autoFocus?: boolean = true;\n\n    /**\n     * Whether the modal should restore focus to the\n     * previously-focused element, after it's closed.\n     */\n    restoreFocus?: boolean = true;\n\n    /** Scroll strategy to be used for the modal. */\n    scrollStrategy?: ScrollStrategy;\n\n    /**\n     * Whether the modal should close when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n    closeOnNavigation?: boolean = true;\n\n    /** Alternate `ComponentFactoryResolver` to use when resolving the associated component. */\n    componentFactoryResolver?: ComponentFactoryResolver;\n\n    /** Whether a close button with icon should be displayed in the top right corner of the modal.\n     *\n     * Default value is `false`.\n     */\n    showCloseIcon?: boolean = false;\n\n    /** Sets the 'aria-label' of the modal close button needed for accessibility.\n     *\n     * Default value is `'Close dialog'`.\n     */\n    closeIconButtonLabel?: string = 'Close dialog';\n\n    /** Sets locale direction for the modal\n     *\n     * Default value is `'ltr'`\n     */\n    direction?: Direction = 'ltr';\n}\n","import { animate, AnimationTriggerMetadata, state, style, transition, trigger } from '@angular/animations';\n\n/**\n * Animations used by the NxModalContainer.\n * @docs-private\n */\nexport const NxModalAnimations: {\n    readonly modalContainer: AnimationTriggerMetadata;\n} = {\n    /** Animation that is applied on the modal container by defalt. */\n    modalContainer: trigger('modalContainer', [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the modal content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        state('void, exit', style({ opacity: 0, transform: 'scale(1.3)' })),\n        state('enter', style({ transform: 'none' })),\n        transition('* => enter', animate('200ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'scale(1)', opacity: 1 }))),\n        transition('* => void, * => exit', animate('200ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0, transform: 'scale(1.3)' }))),\n    ]),\n};\n","import { AnimationEvent } from '@angular/animations';\nimport { FocusMonitor, FocusTrap, FocusTrapFactory } from '@angular/cdk/a11y';\nimport { _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, DomPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ComponentRef,\n    ElementRef,\n    EmbeddedViewRef,\n    EventEmitter,\n    Inject,\n    OnDestroy,\n    Optional,\n    ViewChild,\n} from '@angular/core';\n\nimport { NxModalAnimations } from './modal-animations';\nimport { NxModalConfig } from './modal-config';\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwNxDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach modal content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided modal content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n    selector: 'nx-modal-container',\n    templateUrl: 'modal-container.component.html',\n    styleUrls: ['modal-container.component.scss'],\n    // Using OnPush for modals caused some G3 sync issues. Disabled until we can track them down.\n    changeDetection: ChangeDetectionStrategy.Default,\n    animations: [NxModalAnimations.modalContainer],\n    host: {\n        class: 'nx-modal__container',\n        tabindex: '-1',\n        'aria-modal': 'true',\n        '[attr.id]': '_id',\n        '[attr.role]': '_config.role',\n        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n        '[attr.aria-label]': '_config.ariaLabel',\n        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n        '[@modalContainer]': '_state',\n        '(@modalContainer.start)': '_onAnimationStart($event)',\n        '(@modalContainer.done)': '_onAnimationDone($event)',\n    },\n})\nexport class NxModalContainer extends BasePortalOutlet implements AfterViewInit, OnDestroy {\n    /** The portal outlet inside of this container into which the modal content will be loaded. */\n    @ViewChild(CdkPortalOutlet, { static: true }) _portalOutlet!: CdkPortalOutlet;\n\n    @ViewChild('closeButton') _closeButton!: ElementRef;\n\n    /** The class that traps and manages focus within the modal. */\n    private _focusTrap!: FocusTrap;\n\n    /** Element that was focused before the modal was opened. Save this to restore upon close. */\n    private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n    /** State of the modal animation. */\n    _state: 'void' | 'enter' | 'exit' = 'enter';\n\n    /** Emits when an animation state changes. */\n    _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n    /** Emits when the close button (X) is clicked. */\n    _closeButtonClicked = new EventEmitter<any>();\n\n    /** ID of the element that should be considered as the modal's label. */\n    _ariaLabelledBy: string | null;\n\n    /** ID for the container DOM element. */\n    _id!: string;\n\n    constructor(\n        private _elementRef: ElementRef,\n        private _focusTrapFactory: FocusTrapFactory,\n        private _cdr: ChangeDetectorRef,\n        @Optional() @Inject(DOCUMENT) private _document: Document | null,\n        /** The modal configuration. */\n        public _config: NxModalConfig,\n        private _focusMonitor: FocusMonitor,\n    ) {\n        super();\n        this._ariaLabelledBy = _config.ariaLabelledBy || null;\n    }\n\n    ngAfterViewInit() {\n        if (this._config.showCloseIcon) {\n            this._focusMonitor.monitor(this._closeButton);\n        }\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._closeButton);\n    }\n\n    /**\n     * Attach a ComponentPortal as content to this modal container.\n     * @param portal Portal to be attached as the modal content.\n     */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n        if (this._portalOutlet.hasAttached()) {\n            throwNxDialogContentAlreadyAttachedError();\n        }\n\n        this._savePreviouslyFocusedElement();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n\n    /**\n     * Attach a TemplatePortal as content to this modal container.\n     * @param portal Portal to be attached as the modal content.\n     */\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n        if (this._portalOutlet.hasAttached()) {\n            throwNxDialogContentAlreadyAttachedError();\n        }\n\n        this._savePreviouslyFocusedElement();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n\n    /**\n     * Attaches a DOM portal to the modal container.\n     * @param portal Portal to be attached.\n     * @deprecated To be turned into a method when changed in the CDK.\n     */\n    attachDomPortal = (portal: DomPortal) => {\n        if (this._portalOutlet.hasAttached()) {\n            throwNxDialogContentAlreadyAttachedError();\n        }\n\n        this._savePreviouslyFocusedElement();\n        return this._portalOutlet.attachDomPortal(portal);\n    };\n\n    /** Moves the focus inside the focus trap. */\n    private _trapFocus() {\n        const element = this._elementRef.nativeElement;\n\n        if (!this._focusTrap) {\n            this._focusTrap = this._focusTrapFactory.create(element);\n        }\n\n        // If we were to attempt to focus immediately, then the content of the modal would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty.\n        if (this._config.autoFocus) {\n            this._focusTrap.focusInitialElementWhenReady();\n        } else {\n            const activeElement = this._document?.activeElement;\n\n            // Otherwise ensure that focus is on the modal container. It's possible that a different\n            // component tried to move focus while the open animation was running. See:\n            // https://github.com/angular/components/issues/16215. Note that we only want to do this\n            // if the focus isn't inside the modal already, because it's possible that the consumer\n            // turned off `autoFocus` in order to move focus themselves.\n            if (activeElement !== element && !element.contains(activeElement)) {\n                element.focus();\n            }\n        }\n    }\n\n    /** Restores focus to the element that was focused before the modal opened. */\n    private _restoreFocus() {\n        const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n            const activeElement = _getFocusedElementPierceShadowDom();\n            const element = this._elementRef.nativeElement;\n\n            // Make sure that focus is still inside the modal or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement || activeElement === this._document?.body || activeElement === element || element.contains(activeElement)) {\n                this._focusMonitor.focusVia(toFocus as HTMLElement, 'keyboard');\n            }\n        }\n\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n\n    /** Saves a reference to the element that was focused before the modal was opened. */\n    private _savePreviouslyFocusedElement() {\n        if (!this._document) {\n            return;\n        }\n        this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n\n        // Note that there is no focus method when rendering on the server.\n        if (this._elementRef.nativeElement.focus) {\n            // Move focus onto the modal immediately in order to prevent the user from accidentally\n            // opening multiple modals at the same time. Needs to be async, because the element\n            // may not be focusable immediately.\n            Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n        }\n    }\n\n    /** Callback, invoked whenever an animation on the host completes. */\n    _onAnimationDone(event: AnimationEvent) {\n        if (event.toState === 'enter') {\n            this._trapFocus();\n        } else if (event.toState === 'exit') {\n            this._restoreFocus();\n        }\n\n        this._animationStateChanged.emit(event);\n    }\n\n    /** Callback, invoked when an animation on the host starts. */\n    _onAnimationStart(event: AnimationEvent) {\n        this._animationStateChanged.emit(event);\n    }\n\n    /** Starts the modal exit animation. */\n    _startExitAnimation(): void {\n        this._state = 'exit';\n\n        // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n        this._cdr.markForCheck();\n    }\n\n    _closeButtonClick() {\n        this._closeButtonClicked.emit();\n    }\n}\n","<button\n    #closeButton\n    *ngIf=\"_config.showCloseIcon\"\n    [attr.aria-label]=\"_config.closeIconButtonLabel\"\n    (click)=\"_closeButtonClick()\"\n    class=\"nx-modal__close\"\n    type=\"button\"\n>\n    <nx-icon name=\"close\"></nx-icon>\n</button>\n<ng-template cdkPortalOutlet></ng-template>\n","import { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { GlobalPositionStrategy, OverlayRef } from '@angular/cdk/overlay';\nimport { Observable, Subject } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { NxDialogPosition } from './modal-config';\nimport { NxModalContainer } from './modal-container.component';\n\n// Id counter\nlet nexId = 0;\n\n/** Possible states of the lifecycle of a modal. */\nexport const enum NxModalState {\n    OPEN,\n    CLOSING,\n    CLOSED,\n}\n\n/**\n * Reference to a modal opened via the NxDialogService.\n */\nexport class NxModalRef<T, R = any> {\n    /** The instance of component opened into the modal. */\n    componentInstance!: T;\n\n    /** Whether the user is allowed to close the modal. */\n    disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n    /** Subject for notifying the user that the modal has finished opening. */\n    private readonly _afterOpened = new Subject<void>();\n\n    /** Subject for notifying the user that the modal has finished closing. */\n    private readonly _afterClosed = new Subject<R | undefined>();\n\n    /** Subject for notifying the user that the modal has started closing. */\n    private readonly _beforeClosed = new Subject<R | undefined>();\n\n    /** Result to be passed to afterClosed. */\n    private _result: R | undefined;\n\n    /** Handle to the timeout that's running as a fallback in case the exit animation doesn't fire. */\n    private _closeFallbackTimeout: any;\n\n    /** Current state of the modal. */\n    private _state = NxModalState.OPEN;\n\n    constructor(private _overlayRef: OverlayRef, public _containerInstance: NxModalContainer, readonly id: string = `nx-modal-${nexId++}`) {\n        // Pass the id along to the container.\n        _containerInstance._id = id;\n\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged\n            .pipe(\n                filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n                take(1),\n            )\n            .subscribe(() => {\n                this._afterOpened.next();\n                this._afterOpened.complete();\n            });\n\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged\n            .pipe(\n                filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n                take(1),\n            )\n            .subscribe(() => {\n                clearTimeout(this._closeFallbackTimeout);\n                this._overlayRef.dispose();\n            });\n\n        _containerInstance._closeButtonClicked.subscribe(() => {\n            this.close();\n        });\n\n        _overlayRef.detachments().subscribe(() => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._afterClosed.next(this._result);\n            this._afterClosed.complete();\n            this.componentInstance = null!;\n            this._overlayRef.dispose();\n        });\n\n        _overlayRef\n            .keydownEvents()\n            .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)))\n            .subscribe(event => {\n                event.preventDefault();\n                this.close();\n            });\n    }\n\n    /**\n     * Close the modal.\n     * @param modalResult Optional result to return to the modal opener.\n     */\n    close(modalResult?: R): void {\n        this._result = modalResult;\n\n        // Transition the backdrop in parallel to the modal.\n        this._containerInstance._animationStateChanged\n            .pipe(\n                filter(event => event.phaseName === 'start'),\n                take(1),\n            )\n            .subscribe(event => {\n                this._beforeClosed.next(modalResult);\n                this._beforeClosed.complete();\n                this._state = NxModalState.CLOSED;\n                this._overlayRef.detachBackdrop();\n\n                // The logic that disposes of the overlay depends on the exit animation completing, however\n                // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n                // timeout which will clean everything up if the animation hasn't fired within the specified\n                // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n                // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n                this._closeFallbackTimeout = setTimeout(() => {\n                    this._overlayRef.dispose();\n                }, event.totalTime + 100);\n            });\n\n        this._containerInstance._startExitAnimation();\n        this._state = NxModalState.CLOSING;\n    }\n\n    /**\n     * Gets an observable that is notified when the modal is finished opening.\n     */\n    afterOpened(): Observable<void> {\n        return this._afterOpened.asObservable();\n    }\n\n    /**\n     * Gets an observable that is notified when the modal is finished closing.\n     */\n    afterClosed(): Observable<R | undefined> {\n        return this._afterClosed.asObservable();\n    }\n\n    /**\n     * Gets an observable that is notified when the modal has started closing.\n     */\n    beforeClosed(): Observable<R | undefined> {\n        return this._beforeClosed.asObservable();\n    }\n\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick(): Observable<MouseEvent> {\n        return this._overlayRef.backdropClick();\n    }\n\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents(): Observable<KeyboardEvent> {\n        return this._overlayRef.keydownEvents();\n    }\n\n    /**\n     * Updates the modal's position.\n     * @param position New modal position.\n     */\n    updatePosition(position?: NxDialogPosition): this {\n        const strategy = this._getPositionStrategy();\n\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        } else {\n            strategy.centerHorizontally();\n        }\n\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        } else {\n            strategy.centerVertically();\n        }\n\n        this._overlayRef.updatePosition();\n\n        return this;\n    }\n\n    /**\n     * Updates the modal's width and height.\n     * @param width New width of the modal.\n     * @param height New height of the modal.\n     */\n    updateSize(width = '', height = ''): this {\n        this._getPositionStrategy().width(width).height(height);\n        this._overlayRef.updatePosition();\n        return this;\n    }\n\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes: string | string[]): this {\n        this._overlayRef.addPanelClass(classes);\n        return this;\n    }\n\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes: string | string[]): this {\n        this._overlayRef.removePanelClass(classes);\n        return this;\n    }\n\n    /** Gets the current state of the modal's lifecycle. */\n    getState(): NxModalState {\n        return this._state;\n    }\n\n    /** Fetches the position strategy object from the overlay ref. */\n    private _getPositionStrategy(): GlobalPositionStrategy {\n        return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n    }\n}\n","import { Overlay, OverlayConfig, OverlayContainer, OverlayRef, ScrollStrategy } from '@angular/cdk/overlay';\nimport { ComponentPortal, ComponentType, TemplatePortal } from '@angular/cdk/portal';\nimport { Inject, Injectable, InjectionToken, Injector, OnDestroy, Optional, SkipSelf, StaticProvider, TemplateRef } from '@angular/core';\nimport { defer, Observable, Subject } from 'rxjs';\nimport { startWith, takeUntil } from 'rxjs/operators';\n\nimport { NxModalConfig } from './modal-config';\nimport { NxModalContainer } from './modal-container.component';\nimport { NxModalRef } from './modal-ref';\n\n/** Injection token that can be used to access the data that was passed in to a modal. */\nexport const NX_MODAL_DATA = new InjectionToken<any>('NxModalData');\n\n/** Injection token that can be used to specify default modal options. */\nexport const NX_MODAL_DEFAULT_OPTIONS = new InjectionToken<NxModalConfig>('nx-modal-default-options');\n\n/** Injection token that determines the scroll handling while a modal is open. */\nexport const NX_MODAL_SCROLL_STRATEGY = new InjectionToken<() => ScrollStrategy>('nx-modal-scroll-strategy');\n\n/** @docs-private */\nexport function NX_MODAL_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => ScrollStrategy {\n    return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const NX_MODAL_SCROLL_STRATEGY_PROVIDER = {\n    provide: NX_MODAL_SCROLL_STRATEGY,\n    useFactory: NX_MODAL_SCROLL_STRATEGY_PROVIDER_FACTORY,\n    deps: [Overlay],\n};\n\n/**\n * Service to open Material Design modal modals.\n */\n@Injectable()\nexport class NxDialogService implements OnDestroy {\n    private _openModalsAtThisLevel: NxModalRef<any>[] = [];\n    private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n    private readonly _afterOpenedAtThisLevel = new Subject<NxModalRef<any>>();\n    private _ariaHiddenElements = new Map<Element, string | null>();\n\n    /** Keeps track of the currently-open modals. */\n    get openModals(): NxModalRef<any>[] {\n        return this._parentDialogService ? this._parentDialogService.openModals : this._openModalsAtThisLevel;\n    }\n\n    /** Stream that emits when a modal has been opened. */\n    get afterOpened(): Subject<NxModalRef<any>> {\n        return this._parentDialogService ? this._parentDialogService.afterOpened : this._afterOpenedAtThisLevel;\n    }\n\n    get _afterAllClosed(): Subject<void> {\n        const parent = this._parentDialogService;\n        return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n    }\n\n    /**\n     * Stream that emits when all open modal have finished closing.\n     * Will emit on subscribe if there are no open modals to begin with.\n     */\n    readonly afterAllClosed: Observable<void> = defer(() =>\n        this.openModals.length ? this._afterAllClosed : this._afterAllClosed.pipe(startWith(undefined)),\n    ) as Observable<any>;\n\n    private readonly _destroyed = new Subject<void>();\n\n    /** Strategy factory that will be used to handle scrolling while the modal panel is open. */\n    private _scrollStrategyFactory = this._defaultScrollStrategyFactory;\n\n    constructor(\n        private _overlay: Overlay,\n        private _injector: Injector,\n        @Optional() @Inject(NX_MODAL_DEFAULT_OPTIONS) private _defaultOptions: NxModalConfig | null,\n        @Optional() @SkipSelf() private _parentDialogService: NxDialogService | null,\n        private _overlayContainer: OverlayContainer,\n        @Inject(NX_MODAL_SCROLL_STRATEGY) private _defaultScrollStrategyFactory: () => ScrollStrategy,\n    ) {}\n\n    /**\n     * Opens a modal modal containing the given component.\n     * @param componentOrTemplateRef Type of the component to load into the dialog,\n     *     or a TemplateRef to instantiate as the modal content.\n     * @param config Extra configuration options.\n     * @returns Reference to the newly-opened modal.\n     */\n    open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>, config?: NxModalConfig<D>): NxModalRef<T, R> {\n        config = _applyConfigDefaults(config, this._defaultOptions || new NxModalConfig());\n\n        if (config.id && this.getModalById(config.id)) {\n            throw Error(`Modal with id \"${config.id}\" exists already. The modal id must be unique.`);\n        }\n\n        const overlayRef = this._createOverlay(config);\n        const modalContainer = this._attachModalContainer(overlayRef, config);\n        const modalRef = this._attachModalContent<T, R>(componentOrTemplateRef, modalContainer, overlayRef, config);\n\n        // If this is the first modal that we're opening, hide all the non-overlay content.\n        if (!this.openModals.length) {\n            this._hideNonModalContentFromAssistiveTechnology();\n        }\n\n        this.openModals.push(modalRef);\n        modalRef.afterClosed().subscribe(() => this._removeOpenModal(modalRef));\n        this.afterOpened.next(modalRef);\n\n        return modalRef;\n    }\n\n    /**\n     * Closes all of the currently-open modals.\n     */\n    closeAll(): void {\n        this._closeModals(this.openModals);\n    }\n\n    /**\n     * Finds an open modal by its id.\n     * @param id ID to use when looking up the modal.\n     */\n    getModalById(id: string): NxModalRef<any> | undefined {\n        return this.openModals.find(modal => modal.id === id);\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n\n        // Only close the modals at this level on destroy\n        // since the parent service may still be active.\n        this._closeModals(this._openModalsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n\n    /**\n     * Creates the overlay into which the modal will be loaded.\n     * @param config The modal configuration.\n     * @returns A promise resolving to the OverlayRef for the created overlay.\n     */\n    private _createOverlay(config: NxModalConfig): OverlayRef {\n        const overlayConfig = this._getOverlayConfig(config);\n        return this._overlay.create(overlayConfig);\n    }\n\n    /**\n     * Creates an overlay config from a modal config.\n     * @param modalConfig The modal configuration.\n     * @returns The overlay configuration.\n     */\n    private _getOverlayConfig(modalConfig: NxModalConfig): OverlayConfig {\n        const state = new OverlayConfig({\n            positionStrategy: this._overlay.position().global(),\n            scrollStrategy: modalConfig.scrollStrategy || this._scrollStrategyFactory(),\n            panelClass: modalConfig.panelClass,\n            hasBackdrop: modalConfig.hasBackdrop,\n            minWidth: modalConfig.minWidth,\n            minHeight: modalConfig.minHeight,\n            maxWidth: modalConfig.maxWidth,\n            maxHeight: modalConfig.maxHeight,\n            disposeOnNavigation: modalConfig.closeOnNavigation,\n            direction: modalConfig.direction,\n        });\n\n        if (modalConfig.backdropClass) {\n            state.backdropClass = modalConfig.backdropClass;\n        }\n\n        return state;\n    }\n\n    /**\n     * Attaches an NxModalContainer to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The modal configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    private _attachModalContainer(overlay: OverlayRef, config: NxModalConfig): NxModalContainer {\n        const userInjector = config?.viewContainerRef?.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: NxModalConfig, useValue: config }],\n        });\n\n        const containerPortal = new ComponentPortal(NxModalContainer, config.viewContainerRef, injector, config.componentFactoryResolver);\n        const containerRef = overlay.attach<NxModalContainer>(containerPortal);\n\n        return containerRef.instance;\n    }\n\n    /**\n     * Attaches the user-provided component to the already-created NxModalContainer.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param modalContainer Reference to the wrapping NxModalContainer.\n     * @param overlayRef Reference to the overlay in which the modal resides.\n     * @param config The modal configuration.\n     * @returns A promise resolving to the NxModalRef that should be returned to the user.\n     */\n    private _attachModalContent<T, R>(\n        componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n        modalContainer: NxModalContainer,\n        overlayRef: OverlayRef,\n        config: NxModalConfig,\n    ): NxModalRef<T, R> {\n        // Create a reference to the modal we're creating in order to give the user a handle\n        // to modify and close it.\n        const modalRef = new NxModalRef<T, R>(overlayRef, modalContainer, config.id);\n\n        // When the modal backdrop is clicked, we want to close it.\n        if (config.hasBackdrop) {\n            overlayRef\n                .backdropClick()\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(() => {\n                    if (!modalRef.disableClose) {\n                        modalRef.close();\n                    }\n                });\n        }\n\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            modalContainer.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, { $implicit: config.data, modalRef } as any));\n        } else {\n            const injector = this._createInjector<T>(config, modalRef, modalContainer);\n            const contentRef = modalContainer.attachComponentPortal<T>(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n            modalRef.componentInstance = contentRef.instance;\n        }\n\n        modalRef.updateSize(config.width, config.height).updatePosition(config.position);\n\n        return modalRef;\n    }\n\n    /**\n     * Creates a custom injector to be used inside the modal. This allows a component loaded inside\n     * of a modal to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the modal.\n     * @param modalRef Reference to the modal.\n     * @param container Modal container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the modal.\n     */\n    private _createInjector<T>(config: NxModalConfig, modalRef: NxModalRef<T>, modalContainer: NxModalContainer): Injector {\n        const userInjector = config?.viewContainerRef?.injector;\n\n        // The NxModalContainer is injected in the portal as the NxModalContainer and the dialog's\n        // content are created out of the same ViewContainerRef and as such, are siblings for injector\n        // purposes. To allow the hierarchy that is expected, the NxModalContainer is explicitly\n        // added to the injection tokens.\n        const providers: StaticProvider[] = [\n            { provide: NxModalContainer, useValue: modalContainer },\n            { provide: NX_MODAL_DATA, useValue: config.data },\n            { provide: NxModalRef, useValue: modalRef },\n        ];\n\n        return Injector.create({ parent: userInjector || this._injector, providers });\n    }\n\n    /**\n     * Removes a modal from the array of open modals.\n     * @param modalRef Modal to be removed.\n     */\n    private _removeOpenModal(modalRef: NxModalRef<any>) {\n        const index = this.openModals.indexOf(modalRef);\n\n        if (index > -1) {\n            this.openModals.splice(index, 1);\n\n            // If all the modals were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openModals.length) {\n                this._ariaHiddenElements.forEach((previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    } else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                });\n\n                this._ariaHiddenElements.clear();\n                this._afterAllClosed.next();\n            }\n        }\n    }\n\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     */\n    private _hideNonModalContentFromAssistiveTechnology() {\n        const overlayContainer = this._overlayContainer.getContainerElement();\n\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            const siblings = overlayContainer.parentElement.children;\n\n            for (let i = siblings.length - 1; i > -1; i--) {\n                const sibling = siblings[i];\n\n                if (sibling !== overlayContainer && sibling.nodeName !== 'SCRIPT' && sibling.nodeName !== 'STYLE' && !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n\n    /** Closes all of the modals in an array. */\n    private _closeModals(modals: NxModalRef<any>[]) {\n        let i = modals.length;\n\n        while (i--) {\n            // The `_openModals` property isn't updated after close until the rxjs subscription\n            // runs on the next microtask, in addition to modifying the array as we're going\n            // through it. We loop through all of them and call close without assuming that\n            // they'll be removed from the list instantaneously.\n            modals[i].close();\n        }\n    }\n}\n\n/**\n * Applies default options to the modal config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(config?: NxModalConfig, defaultOptions?: NxModalConfig): NxModalConfig {\n    return { ...defaultOptions, ...config };\n}\n","import { Directive, ElementRef, Input, OnChanges, OnInit, Optional, SimpleChanges } from '@angular/core';\n\nimport { NxDialogService } from './dialog.service';\nimport { NxModalRef } from './modal-ref';\n\n/**\n * Button that will close the current modal.\n */\n@Directive({\n    selector: '[nxModalClose]',\n    host: {\n        '(click)': 'modalRef.close(modalResult)',\n        '[attr.aria-label]': 'ariaLabel || null',\n        '[attr.type]': 'type',\n    },\n})\nexport class NxModalCloseDirective implements OnInit, OnChanges {\n    /** Screenreader label for the button. */\n    @Input('aria-label') ariaLabel!: string;\n\n    /** Default to \"button\" to prevents accidental form submits. */\n    @Input() type: 'submit' | 'button' | 'reset' = 'button';\n\n    /** Dialog close input. */\n    @Input('nxModalClose') modalResult: any;\n\n    constructor(@Optional() public modalRef: NxModalRef<any> | null, private _elementRef: ElementRef<HTMLElement>, private _dialogService: NxDialogService) {}\n\n    ngOnInit() {\n        if (!this.modalRef) {\n            // When this directive is included in a modal via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the modal container won't\n            // be resolved at constructor time.\n            this.modalRef = getClosestDialog(this._elementRef, this._dialogService.openModals)!;\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const proxiedChange = changes['modalResult'];\n\n        if (proxiedChange) {\n            this.modalResult = proxiedChange.currentValue;\n        }\n    }\n}\n\n/**\n * Finds the closest NxModalRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a modal.\n * @param openDialogs References to the currently-open modals.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: NxModalRef<any>[]) {\n    let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n    while (parent && !parent.classList.contains('nx-modal__container')) {\n        parent = parent.parentElement;\n    }\n\n    return parent ? openDialogs.find(modal => modal.id === parent!.id) : null;\n}\n","import { animate, animation, AnimationReferenceMetadata, style } from '@angular/animations';\n\nexport const fadeIn: AnimationReferenceMetadata = animation([style({ opacity: 0 }), animate('300ms', style({ opacity: 1 }))]);\n\nexport const fadeOut: AnimationReferenceMetadata = animation(animate('300ms', style({ opacity: 0 })));\n\nexport const scaleUp: AnimationReferenceMetadata = animation([\n    style({ transform: 'scale(1)', opacity: 1 }),\n    animate('250ms', style({ transform: 'scale(1.3)', opacity: 0 })),\n]);\n\nexport const scaleDown: AnimationReferenceMetadata = animation([\n    style({ transform: 'scale(1.3)', opacity: 0 }),\n    animate('250ms', style({ transform: 'scale(1)', opacity: 1 })),\n]);\n","import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\n/** @docs-private */\n@Injectable()\nexport class NxModalService {\n    private subject = new Subject();\n    close$: Observable<any> = this.subject.asObservable();\n\n    close() {\n        this.subject.next();\n    }\n}\n","import { animateChild, query, transition, trigger, useAnimation } from '@angular/animations';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    TemplateRef,\n    ViewChild,\n} from '@angular/core';\nimport { EventManager } from '@angular/platform-browser';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { fadeIn, fadeOut, scaleDown, scaleUp } from './animations';\nimport { NxModalService } from './modal.service';\n\n/** Container for the action buttons in a modal. Has a fixed position at the bottom of the modal on scroll. */\n@Directive({\n    selector: '[nxModalActions]',\n    host: {\n        '[class.nx-modal__actions]': 'true',\n    },\n})\nexport class NxModalActionsDirective {}\n\n/** Scrollable container for the content of a modal. */\n@Directive({\n    selector: '[nxModalContent]',\n    host: {\n        '[class.nx-modal__content]': 'true',\n    },\n})\nexport class NxModalContentDirective {}\n\n@Component({\n    selector: 'nx-modal',\n    templateUrl: 'modal.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styleUrls: ['./modal.component.scss'],\n    animations: [\n        trigger('fadeInOut', [\n            transition(':enter', [useAnimation(fadeIn), query('@scaleUpDown', [animateChild()])]),\n            transition(':leave', [query('@scaleUpDown', [animateChild()]), useAnimation(fadeOut)]),\n        ]),\n        trigger('scaleUpDown', [transition(':enter', useAnimation(scaleDown)), transition(':leave', useAnimation(scaleUp))]),\n    ],\n    host: {\n        '[@fadeInOut]': '',\n        '[class.nx-modal--fixed-width]': 'size === \"fixed\"',\n    },\n})\nexport class NxModalComponent implements OnInit, AfterViewInit, OnDestroy {\n    private _closeButtonLabel = 'Close dialog';\n\n    @ViewChild('closeButton') _closeButton!: ElementRef;\n\n    /** Sets the 'aria-label' of the modal close button needed for accessibility.\n     *\n     * Default value is 'Close dialog'.\n     */\n    @Input()\n    set closeButtonLabel(value: string) {\n        if (value !== this._closeButtonLabel) {\n            this._closeButtonLabel = value;\n            this._cdr.markForCheck();\n        }\n    }\n    get closeButtonLabel(): string {\n        return this._closeButtonLabel;\n    }\n\n    /**\n     * A template reference variable pointing to the template\n     * which contains the content of the modal view.\n     */\n    @Input('nxBody') body!: TemplateRef<any>;\n\n    /**\n     * Whether the modal view should close when the user hits the escape key.\n     * Default is true.\n     */\n    @Input('nxHideOnEsc') hideOnEsc = true;\n\n    /**\n     * Whether the modal view should close when the user clicks on the backdrop.\n     * Default is true.\n     */\n    @Input('nxHideOnClickOutside') hideOnClickOutside = true;\n\n    /**\n     * Whether the modal view should have a close icon in the upper right corner.\n     * Default is true.\n     */\n    @Input('nxShowCloseIcon') showCloseIcon = true;\n\n    /**\n     * Controls the width of the dialog.\n     * On `auto` the width is controlled by the content width,\n     * on `fixed` the dialog gets a fixed width of 736px if the viewport is big enough. */\n    @Input('nxSize') size: 'fixed' | 'auto' = 'auto';\n\n    /**\n     * An event emitted when the user clicks on the backdrop or uses the built-in close button.\n     * This event can be applied in conjunction with the custom open state handling\n     * of a modal to close it when requested by the user.\n     */\n    @Output('nxClose') closeEvent = new EventEmitter<void>();\n\n    private readonly _destroyed = new Subject<void>();\n\n    private removeEventListener!: () => void;\n\n    constructor(\n        private modalService: NxModalService,\n        private eventManager: EventManager,\n        private _cdr: ChangeDetectorRef,\n        private _focusMonitor: FocusMonitor,\n    ) {}\n\n    ngOnInit() {\n        this.modalService.close$.pipe(takeUntil(this._destroyed)).subscribe(() => this.closeEvent.emit());\n\n        this.removeEventListener = this.eventManager.addGlobalEventListener('window', 'keyup.esc', () => {\n            if (this.hideOnEsc) {\n                this.modalService.close();\n            }\n        }) as () => void;\n    }\n\n    ngAfterViewInit() {\n        if (this.showCloseIcon) {\n            this._focusMonitor.monitor(this._closeButton);\n        }\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.removeEventListener();\n        this._focusMonitor.stopMonitoring(this._closeButton);\n    }\n\n    /** @docs-private */\n    clickOutsideModal() {\n        if (this.hideOnClickOutside) {\n            this.modalService.close();\n        }\n    }\n\n    /** @docs-private */\n    closeButtonClick() {\n        this.modalService.close();\n    }\n\n    /** @docs-private */\n    cancelClick(evt: MouseEvent) {\n        evt.stopPropagation();\n    }\n}\n","<div class=\"nx-modal\" role=\"dialog\" cdkTrapFocus cdkTrapFocusAutoCapture cdkFocusInitial>\n    <div class=\"nx-modal__backdrop\" (click)=\"clickOutsideModal()\">\n        <div class=\"nx-modal__position\">\n            <div class=\"nx-modal__container\" (click)=\"cancelClick($event)\" [@scaleUpDown]>\n                <button\n                    #closeButton\n                    (click)=\"closeButtonClick()\"\n                    *ngIf=\"showCloseIcon\"\n                    [attr.aria-label]=\"closeButtonLabel\"\n                    class=\"nx-modal__close\"\n                    type=\"button\"\n                >\n                    <nx-icon name=\"close\"></nx-icon>\n                </button>\n\n                <div class=\"nx-modal__content-wrapper\" cdkScrollable>\n                    <ng-container *ngIf=\"body; else projectContent\">\n                        <ng-container *ngTemplateOutlet=\"body\"></ng-container>\n                    </ng-container>\n\n                    <ng-template #projectContent>\n                        <ng-content></ng-content>\n                    </ng-template>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n","import { Directive, Input, OnDestroy, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { NxButtonBase } from '@aposin/ng-aquila/button';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { NxModalService } from './modal.service';\n\n@Directive({ selector: '[nxOpenModalOnClick]' })\nexport class NxOpenModalOnClickDirective implements OnInit, OnDestroy {\n    /** @docs-private */\n    elements!: any[];\n\n    private readonly _destroyed = new Subject<void>();\n\n    constructor(private templateRef: TemplateRef<any>, private viewContainer: ViewContainerRef, private modalService: NxModalService) {}\n\n    ngOnInit() {\n        this.modalService.close$.pipe(takeUntil(this._destroyed)).subscribe(() => this.viewContainer.clear());\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n\n        this.elements.forEach(el => {\n            if (el.removeEventListener) {\n                el.removeEventListener('click', this.clickHandler);\n            }\n        });\n    }\n\n    /** @docs-private */\n    clickHandler = (event: Event) => {\n        this.viewContainer.clear();\n        // instantiate the template onto which this directive is applied\n        const viewRef = this.viewContainer.createEmbeddedView(this.templateRef);\n        // we need to mark the viewRef explicitly if the modal is used inside another\n        // component that is using onPush change detection\n        viewRef.markForCheck();\n        event.preventDefault();\n        event.stopPropagation();\n    };\n\n    /**\n     * One or multiple template reference variables pointing to elements\n     * which should trigger opening the modal on click.\n     *\n     * Value: A single template reference variable or an array of template reference variables.\n     */\n    @Input()\n    set nxOpenModalOnClick(elements: NxButtonBase | NxButtonBase[]) {\n        // also support the case where only one element is passed, check for the length property to be sure elements is an array\n        if (Array.isArray(elements)) {\n            this.elements = elements;\n        } else {\n            this.elements = [elements];\n        }\n        // add a click event listener to any element passed as property to this directive\n        this.elements.forEach(el => {\n            if (el.addEventListener) {\n                el.addEventListener('click', this.clickHandler);\n                // workaround until refactoring: if the reference is a component\n                // reference the component has to implement a getter to its own elementRef\n            } else if (el.elementRef) {\n                el.elementRef.nativeElement.addEventListener('click', this.clickHandler);\n            } else {\n                console.warn(`nxOpenModalOnClick: Given Element doesn't appear to be an ElementRef.`, el);\n            }\n        });\n    }\n}\n","import { A11yModule } from '@angular/cdk/a11y';\n/* new modal implementation */\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { NxIconModule } from '@aposin/ng-aquila/icon';\n\nimport { NX_MODAL_SCROLL_STRATEGY_PROVIDER, NxDialogService } from './dialog/dialog.service';\nimport { NxModalCloseDirective } from './dialog/modal-close.directive';\nimport { NxModalContainer } from './dialog/modal-container.component';\nimport { NxModalActionsDirective, NxModalComponent, NxModalContentDirective } from './modal.component';\nimport { NxModalService } from './modal.service';\nimport { NxOpenModalOnClickDirective } from './modal-open-on-click.directive';\n\n@NgModule({\n    imports: [A11yModule, OverlayModule, PortalModule, CommonModule, NxIconModule],\n    declarations: [\n        NxModalComponent,\n        NxOpenModalOnClickDirective,\n        NxModalActionsDirective,\n        NxModalContentDirective,\n        /* new modal implementation */\n        NxModalContainer,\n        NxModalCloseDirective,\n    ],\n    exports: [\n        NxModalComponent,\n        NxOpenModalOnClickDirective,\n        NxModalActionsDirective,\n        NxModalContentDirective,\n        /* new modal implementation */\n        NxModalContainer,\n        NxModalCloseDirective,\n    ],\n    providers: [NxDialogService, NX_MODAL_SCROLL_STRATEGY_PROVIDER],\n})\nexport class NxModalModule {\n    // define the modal service on root level as an application wide singleton,\n    // assuming that we only display one modal at a time, which seems quite reasonable\n    // this is static and named \"forRoot\" by convention\n    static forRoot(): ModuleWithProviders<NxModalModule> {\n        return {\n            ngModule: NxModalModule,\n            providers: [NxModalService],\n        };\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i2.NxModalConfig","i1","i1.NxModalRef","i2.NxDialogService","i1.NxModalService","i3","i4"],"mappings":"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"}