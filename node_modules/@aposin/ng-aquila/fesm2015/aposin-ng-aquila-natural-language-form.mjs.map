{"version":3,"file":"aposin-ng-aquila-natural-language-form.mjs","sources":["../../../projects/ng-aquila/src/natural-language-form/word.component.ts","../../../projects/ng-aquila/src/natural-language-form/word.component.html","../../../projects/ng-aquila/src/natural-language-form/natural-language-form.component.ts","../../../projects/ng-aquila/src/natural-language-form/natural-language-form.component.html","../../../projects/ng-aquila/src/natural-language-form/natural-language-form.module.ts","../../../projects/ng-aquila/src/natural-language-form/aposin-ng-aquila-natural-language-form.ts"],"sourcesContent":["import { ConnectionPositionPair, FlexibleConnectedPositionStrategy, Overlay, OverlayConfig, OverlayPositionBuilder, OverlayRef } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EmbeddedViewRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    QueryList,\n    Renderer2,\n    ViewChild,\n    ViewContainerRef,\n} from '@angular/core';\nimport { NxDropdownComponent } from '@aposin/ng-aquila/dropdown';\nimport { NxFormfieldControl, NxFormfieldErrorDirective } from '@aposin/ng-aquila/formfield';\nimport { NxPopoverComponent } from '@aposin/ng-aquila/popover';\nimport { getFontShorthand } from '@aposin/ng-aquila/utils';\nimport { Subject } from 'rxjs';\nimport { startWith, takeUntil } from 'rxjs/operators';\n\n/** Type to determine the minimal width of a word. */\nexport type SIZES = 'regular' | 'short' | 'long';\n\n@Component({\n    selector: 'nx-word',\n    templateUrl: 'word.component.html',\n    styleUrls: ['word.component.scss'],\n    host: {\n        '[class.size-short]': 'size == \"short\"',\n        '[class.size-regular]': 'size == \"regular\"',\n        '[class.size-long]': 'size == \"long\"',\n        '[class.has-error]': '_hasErrors',\n        '[class.is-focused]': 'isFocused',\n        '[class.is-filled]': 'isFilled',\n        '[class.has-dropdown]': 'hasDropdown',\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxWordComponent implements AfterContentInit, OnDestroy, OnInit {\n    private measureCanvas!: HTMLCanvasElement;\n\n    /** @docs-private */\n    inputChanges = new Subject<any>();\n\n    _hasErrors = false;\n    private _overlayRef!: OverlayRef;\n    private _embeddedViewRef!: EmbeddedViewRef<any>;\n    private _overlayState!: OverlayConfig;\n\n    @ContentChild(NxFormfieldControl) _control!: NxFormfieldControl<any>;\n    @ContentChildren(NxFormfieldErrorDirective) _errorChildren!: QueryList<NxFormfieldErrorDirective>;\n    @ViewChild('popover', { static: true }) _popover!: NxPopoverComponent;\n    @ContentChild(NxDropdownComponent) _dropdown!: NxDropdownComponent;\n\n    /** @docs-private */\n    @HostBinding('style.width.px')\n    currentTextWidth = 0;\n\n    // this will apply different min-widths to our component through our styles\n    /** Provide a hint for a minimal width. The actual size will be determined for inputs for each change. */\n    @Input('nxSize') size: SIZES = 'regular';\n\n    /**\n     * A word doesn't have a set place to show labels.\n     * In order to be accessible, you have to provide a label with this property.\n     * It will be attached to the given input through `aria-label`.\n     */\n    @Input('nxLabel') label = '';\n\n    private readonly _destroyed = new Subject<void>();\n\n    constructor(\n        /** @docs-private */ public elementRef: ElementRef,\n        private _cdr: ChangeDetectorRef,\n        private _renderer: Renderer2,\n        private _overlay: Overlay,\n        private _viewContainerRef: ViewContainerRef,\n        private _overlayPositionBuilder: OverlayPositionBuilder,\n    ) {}\n\n    ngOnInit() {\n        this.setupErrorPopover();\n    }\n\n    ngAfterContentInit() {\n        this._validateControlChild();\n        this._control.stateChanges.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n            this._hasErrors = this._control.errorState;\n            this.updateErrorPopoverState();\n            this._cdr.markForCheck();\n        });\n\n        // if we have a ngcontrol available stick to its valueChanges subject\n        if (this._control.ngControl) {\n            this._control.ngControl.valueChanges!.pipe(takeUntil(this._destroyed)).subscribe(value => {\n                this.updateCurrentTextWidth();\n                this.inputChanges.next();\n            });\n            // in any other case it is a bre input and input changes are signaled through simple state changes\n        } else {\n            this._control.stateChanges.pipe(takeUntil(this._destroyed)).subscribe(value => {\n                this.updateCurrentTextWidth();\n                this.inputChanges.next();\n            });\n        }\n\n        this._control.setAriaLabel!(this.label);\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n\n    /**\n    @docs-private\n    Calculate the width of the full text given by the input,\n    that value is bound to this component so it can grow.\n\n    The involved input is known to have a width of 100% an will fit the additional space given\n    which completes the auto growing behavior.\n  */\n    updateCurrentTextWidth() {\n        // provide the canvas only lazy\n        if (!this.measureCanvas) {\n            this.measureCanvas = this._renderer.createElement('canvas');\n        }\n\n        const ctx = this.measureCanvas.getContext('2d');\n        const inputRef = this._control.elementRef;\n        const styles = window.getComputedStyle(inputRef.nativeElement);\n        ctx!.font = getFontShorthand(styles);\n\n        const metrics = ctx!.measureText(this._control.value);\n        // add 1px (cursor width) to prevent jumping of the text on blur.\n        const newWidth = metrics.width + parseInt(styles.paddingRight, 10) + parseInt(styles.paddingLeft, 10) + 1;\n\n        // This should be injected via @Host to get an exact reference to NxNaturalLanguageFormComponent\n        // Works as promised as long as there is not other tag around the word. Not expected but possible.\n        const parent: HTMLElement = this.elementRef.nativeElement.parentElement;\n        const parentMeasurement = parent.getBoundingClientRect();\n\n        // Limit to own given minimal width\n        this.currentTextWidth = Math.max(parseInt(styles.minWidth, 10), newWidth);\n\n        // Limit to container width\n        this.currentTextWidth = Math.min(this.currentTextWidth, parentMeasurement.width);\n\n        if (this._overlayRef.hasAttached()) {\n            this._overlayState.positionStrategy!.apply();\n        }\n    }\n\n    /** @docs-private */\n    repositionError() {\n        if (this._overlayRef.hasAttached()) {\n            this._overlayState.positionStrategy!.apply();\n        }\n    }\n\n    // Fail if the required control is missing.\n    protected _validateControlChild() {\n        if (!this._control) {\n            throw new Error('NxWordComponent requires an NxFormfieldControl compatible input.');\n        }\n    }\n\n    /** @docs-private */\n    getConnectedOverlayOrigin(): ElementRef {\n        return this.elementRef;\n    }\n\n    /** @docs-private */\n    get isFocused(): boolean {\n        return this._control.focused;\n    }\n\n    /** @docs-private */\n    get isFilled(): boolean {\n        return !this._control.empty;\n    }\n\n    /** @docs-private */\n    get hasDropdown(): boolean {\n        return Boolean(this._dropdown);\n    }\n\n    updateErrorPopoverState() {\n        if (this._hasErrors && this._errorChildren.length > 0) {\n            this.showPopover();\n        } else {\n            this.hidePopover();\n        }\n    }\n\n    setupErrorPopover() {\n        const positionStrategy = this._overlayPositionBuilder\n            .flexibleConnectedTo(this.elementRef)\n            .withLockedPosition(true)\n            .withFlexibleDimensions(false)\n            .withPush(true)\n            .withPositions([\n                {\n                    originX: 'center',\n                    originY: 'top',\n                    overlayX: 'center',\n                    overlayY: 'bottom',\n                },\n                {\n                    originX: 'center',\n                    originY: 'bottom',\n                    overlayX: 'center',\n                    overlayY: 'top',\n                },\n            ])\n            .withDefaultOffsetY(-8);\n\n        this._overlayState = new OverlayConfig();\n        this._overlayState.positionStrategy = positionStrategy;\n        this._overlayState.scrollStrategy = this._overlay.scrollStrategies.reposition();\n        this._overlayRef = this._overlay.create(this._overlayState);\n\n        (this._overlayState.positionStrategy as FlexibleConnectedPositionStrategy).positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n            const pair = change.connectionPair;\n            this.positionArrow(pair);\n\n            // These position changes arrive too late,\n            // We have to trigger the change detection manually\n            // as it's detached from any render hierarchy\n            // and only updated by the overlay when attached.\n            if (this._embeddedViewRef && !this._embeddedViewRef.destroyed) {\n                this._embeddedViewRef.detectChanges();\n            }\n        });\n    }\n\n    private positionArrow(pair: ConnectionPositionPair) {\n        const parentElementPositionX = this.elementRef.nativeElement.getBoundingClientRect().left;\n        const parentElementWidth = this.elementRef.nativeElement.getBoundingClientRect().width / 2;\n        const parentElementLeftOffset = this._overlayRef.overlayElement.parentElement!.offsetLeft;\n        const overlayElementLeftOffset = this._overlayRef.overlayElement.offsetLeft;\n\n        // calculation for x position of the parent element. In this case, overlay left offset is the one thing to consider.\n        const targetPosition = parentElementPositionX + parentElementWidth - (parentElementLeftOffset + overlayElementLeftOffset);\n\n        if (pair.originY === 'top' && pair.overlayY === 'bottom') {\n            this._popover.direction = 'top';\n        } else {\n            this._popover.direction = 'bottom';\n        }\n\n        this._popover.arrowStyle = { left: targetPosition + 'px' };\n    }\n\n    showPopover() {\n        if (!this._overlayRef.hasAttached()) {\n            const tooltipPortal = new TemplatePortal(this._popover.templateRef, this._viewContainerRef);\n            this._embeddedViewRef = this._overlayRef.attach(tooltipPortal);\n        }\n    }\n\n    hidePopover() {\n        this._overlayRef.detach();\n    }\n}\n","<div>\n    <!-- We only allow formfield controls here -->\n    <div *ngIf=\"!hasDropdown\" class=\"nx-word__inner-wrapper\">\n        <ng-content select=\"[nxInput]\"></ng-content>\n    </div>\n    <ng-content select=\"nx-dropdown\"></ng-content>\n</div>\n\n<nx-popover #popover>\n    <ng-content select=\"[nxError]\"></ng-content>\n</nx-popover>\n","import { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    HostListener,\n    Input,\n    NgZone,\n    OnDestroy,\n    QueryList,\n} from '@angular/core';\nimport { merge, Observable, Subject } from 'rxjs';\nimport { delay, takeUntil, throttleTime } from 'rxjs/operators';\n\nimport { NxWordComponent } from './word.component';\n\n/** Size of the NLF. */\nexport type NxNaturalLanguageFormSize = 'small' | 'large';\n\nconst DEFAULT_SIZE = 'large';\n\n@Component({\n    selector: 'nx-natural-language-form',\n    templateUrl: 'natural-language-form.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styleUrls: ['natural-language-form.scss'],\n    host: {\n        '[class.is-negative]': 'negative',\n        '[class.nx-natural-language-form--small]': 'size === \"small\"',\n        '[class.nx-natural-language-form--large]': 'size === \"large\"',\n    },\n})\nexport class NxNaturalLanguageFormComponent implements AfterContentInit, OnDestroy {\n    private _negative = false;\n\n    /** @docs-private */\n    resizeEvent$: Subject<void> = new Subject<void>();\n\n    /** @docs-private */\n    resizeObservable!: Observable<void>;\n\n    @ContentChildren(NxWordComponent) _words!: QueryList<NxWordComponent>;\n\n    /** @docs-private */\n    private _size: NxNaturalLanguageFormSize = DEFAULT_SIZE;\n\n    /** Whether the negative set of stylings should be used. */\n    @Input('nxNegative')\n    set negative(value: BooleanInput) {\n        this._negative = coerceBooleanProperty(value);\n    }\n\n    get negative() {\n        return this._negative;\n    }\n\n    /**\n     * Sets the size of the NLF. Default value: large\n     */\n    @Input()\n    set size(value: NxNaturalLanguageFormSize) {\n        this._size = value;\n        this._cdr.markForCheck();\n    }\n    get size(): NxNaturalLanguageFormSize {\n        return this._size;\n    }\n\n    private readonly _destroyed = new Subject<void>();\n\n    constructor(private _cdr: ChangeDetectorRef, private _ngZone: NgZone) {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the call throws `Maximum call stack size exceeded` error.\n        this._ngZone.runOutsideAngular(() => {\n            this._ngZone.onStable.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                // wait until all elements are stable for repositioning popovers\n                this.updatePositionPopovers();\n            });\n        });\n    }\n\n    /** @docs-private */\n    @HostListener('window:orientationchange', ['$event'])\n    @HostListener('window:resize', ['$event'])\n    onResize(event: Event) {\n        this.resizeEvent$.next();\n    }\n\n    ngAfterContentInit() {\n        // Collect all words and listen for changes so we can update any open error popover\n        // which would otherwise get wrongly positioned.\n        const subjects = this._words.map((word: NxWordComponent) => word.inputChanges);\n        const source = merge(...subjects);\n\n        source.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this.updatePositionPopovers();\n        });\n\n        this.resizeObservable = this.resizeEvent$.pipe(throttleTime(500), delay(100));\n        this.resizeObservable.pipe(takeUntil(this._destroyed)).subscribe(() => this.resizeWords());\n    }\n\n    /** @docs-private */\n    resizeWords() {\n        this._words.forEach((word: NxWordComponent) => {\n            word.updateCurrentTextWidth();\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n\n    /** @docs-private */\n    updatePositionPopovers() {\n        if (this._words) {\n            this._words.forEach((word: NxWordComponent) => {\n                word.repositionError();\n            });\n        }\n    }\n}\n","<div class=\"nx-natural-language-form__wrapper\">\n    <ng-content></ng-content>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxInputModule } from '@aposin/ng-aquila/input';\nimport { NxPopoverModule } from '@aposin/ng-aquila/popover';\n\nimport { NxNaturalLanguageFormComponent } from './natural-language-form.component';\nimport { NxWordComponent } from './word.component';\n\n@NgModule({\n    imports: [CommonModule, NxInputModule, NxPopoverModule],\n    declarations: [NxNaturalLanguageFormComponent, NxWordComponent],\n    exports: [NxNaturalLanguageFormComponent, NxWordComponent],\n})\nexport class NxNaturalLanguageFormModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}