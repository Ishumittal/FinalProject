{"version":3,"file":"aposin-ng-aquila-timefield.mjs","sources":["../../../projects/ng-aquila/src/timefield/timefield-intl.ts","../../../projects/ng-aquila/src/timefield/timefield.component.ts","../../../projects/ng-aquila/src/timefield/timefield.component.html","../../../projects/ng-aquila/src/timefield/timefield.module.ts","../../../projects/ng-aquila/src/timefield/aposin-ng-aquila-timefield.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class NxTimefieldIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    readonly changes: Subject<void> = new Subject<void>();\n\n    /** Label that should replace the 'hours' aria-label of the input field. */\n    inputFieldHoursAriaLabel = 'hours';\n\n    /** Label that should replace the 'minutes' input field of the aria-label. */\n    inputFieldMinutesAriaLabel = 'minutes';\n}\n","import { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, DoCheck, EventEmitter, Input, Optional, Output, Self } from '@angular/core';\nimport { ControlValueAccessor, FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { ErrorStateMatcher, pad } from '@aposin/ng-aquila/utils';\n\nimport { NxTimefieldIntl } from './timefield-intl';\n\nlet nextId = 0;\n\n@Component({\n    selector: 'nx-timefield',\n    templateUrl: './timefield.component.html',\n    styleUrls: ['./timefield.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[class.has-error]': 'errorState',\n        '[class.is-negative]': 'negative',\n        '[class.is-disabled]': 'disabled',\n    },\n})\nexport class NxTimefieldComponent implements ControlValueAccessor, DoCheck {\n    /** @docs-private */\n    errorState = false;\n\n    _toggleAMPM!: string | null;\n\n    /** Event that emits the time in 24h ISO format. */\n    @Output() valueChange: EventEmitter<string> = new EventEmitter<string>();\n\n    private _idHours = `nx-timefield__hours-${nextId++}`;\n    /** @docs-private */\n    get idHours(): string {\n        return this._idHours;\n    }\n\n    private _idMinutes = `nx-timefield__minutes-${nextId++}`;\n    /** @docs-private */\n    get idMinutes(): string {\n        return this._idMinutes;\n    }\n\n    private _idRadioGroup = `nx-timefield__radio-group-${nextId++}`;\n    /** @docs-private */\n    get idRadioGroup(): string {\n        return this._idRadioGroup;\n    }\n\n    private _maxHours = 23;\n    /** @docs-private */\n    get maxHours() {\n        return this._maxHours;\n    }\n\n    private _minHours = 0;\n    /** @docs-private */\n    get minHours() {\n        return this._minHours;\n    }\n\n    private _maxMinutes = 59;\n    /** @docs-private */\n    get maxMinutes() {\n        return this._maxMinutes;\n    }\n\n    private _minMinutes = 0;\n    /** @docs-private */\n    get minMinutes() {\n        return this._minMinutes;\n    }\n\n    /* The time in 24h ISO format example: 12:54, 23:59,... */\n    private _time!: string | null;\n    /** @docs-private */\n    set time(value: string) {\n        this._time = value;\n        this._onChangeCallback(value);\n        this._cdr.markForCheck();\n    }\n    get time(): string {\n        return this._time as string;\n    }\n\n    private _twelveHourFormat = false;\n    /** Whether to show the time in 12-hour format with AM/PM toggle. Default: false. */\n    @Input()\n    set twelveHourFormat(value: BooleanInput) {\n        this._twelveHourFormat = coerceBooleanProperty(value);\n        if (this._twelveHourFormat) {\n            this._maxHours = 12;\n            this._minHours = 1;\n            this._toggleAMPM = 'AM';\n        } else {\n            this._maxHours = 23;\n            this._minHours = 0;\n            this._toggleAMPM = null;\n        }\n        this._cdr.markForCheck();\n    }\n    get twelveHourFormat(): boolean {\n        return this._twelveHourFormat;\n    }\n\n    private _label!: string;\n    /** Sets the label which is displayed on top of timefield. */\n    @Input()\n    set label(value: string) {\n        if (this._label !== value) {\n            this._label = value;\n            this._cdr.markForCheck();\n        }\n    }\n    get label(): string {\n        return this._label;\n    }\n\n    private _labelAM = 'AM';\n    /** Sets the AM radio button label which is displayed in radio group. */\n    @Input()\n    set labelAM(value: string) {\n        if (this._labelAM !== value) {\n            this._labelAM = value;\n            this._cdr.markForCheck();\n        }\n    }\n    get labelAM(): string {\n        return this._labelAM;\n    }\n\n    private _labelPM = 'PM';\n    /** Sets the PM radio button label which is displayed in radio group. */\n    @Input()\n    set labelPM(value: string) {\n        if (this._labelPM !== value) {\n            this._labelPM = value;\n            this._cdr.markForCheck();\n        }\n    }\n    get labelPM(): string {\n        return this._labelPM;\n    }\n\n    private _placeholderHours = 'hh';\n    /** Sets the placeholder of hours field. Default: 'hh' */\n    @Input()\n    set placeholderHours(value: string) {\n        if (this._placeholderHours !== value) {\n            this._placeholderHours = value;\n            this._cdr.markForCheck();\n        }\n    }\n    get placeholderHours(): string {\n        return this._placeholderHours;\n    }\n\n    private _placeholderMinutes = 'mm';\n    /** Sets the placeholder of minutes field. Default: 'mm' */\n    @Input()\n    set placeholderMinutes(value: string) {\n        if (this._placeholderMinutes !== value) {\n            this._placeholderMinutes = value;\n            this._cdr.markForCheck();\n        }\n    }\n    get placeholderMinutes(): string {\n        return this._placeholderMinutes;\n    }\n\n    private _required!: boolean;\n    /** Whether the timefield is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n    set required(value: BooleanInput) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    private _negative = false;\n    /** Whether the timefield uses the negative set of styling. */\n    @Input()\n    set negative(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n        if (this._negative !== newValue) {\n            this._negative = newValue;\n            this._cdr.markForCheck();\n        }\n    }\n    get negative() {\n        return this._negative;\n    }\n\n    private _disabled = false;\n\n    /** Whether the timefield is disabled. */\n    @Input()\n    set disabled(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this._cdr.markForCheck();\n        }\n    }\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    private _hours!: string;\n    /** @docs-private */\n    set hours(value: string) {\n        this._hours = value;\n        this._cdr.markForCheck();\n    }\n    get hours(): string {\n        return this._hours;\n    }\n\n    private _minutes!: string;\n    /** @docs-private */\n    set minutes(value: string) {\n        this._minutes = value;\n        this._cdr.markForCheck();\n    }\n    get minutes(): string {\n        return this._minutes;\n    }\n\n    private _hasFocus!: any;\n    /** @docs-private */\n    get hasFocus() {\n        return this._hasFocus ? 'has-focus' : null;\n    }\n\n    constructor(\n        private _cdr: ChangeDetectorRef,\n        /** @docs-private */ @Optional() @Self() public ngControl: NgControl | null,\n        private _errorStateMatcher: ErrorStateMatcher,\n        @Optional() private _parentForm: NgForm | null,\n        @Optional() private _parentFormGroup: FormGroupDirective | null,\n        public _intl: NxTimefieldIntl,\n    ) {\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n\n    /** @docs-private */\n    updateErrorState() {\n        const oldState = this.errorState;\n        const parent = this._parentFormGroup || this._parentForm;\n        const control = this.ngControl ? (this.ngControl.control as FormControl) : null;\n        const newState = this._errorStateMatcher.isErrorState(control, parent);\n        if (newState !== oldState) {\n            this.errorState = newState;\n        }\n    }\n\n    private _convertToISOFormat(hours: string, minutes: string) {\n        return `${hours}:${minutes}`;\n    }\n\n    _updateTime() {\n        this._time = null;\n        if (this._isValidInput(this.hours) && this._isValidInput(this.minutes)) {\n            const hours = Number(this.hours);\n            const minutes = Number(this.minutes);\n            if (this._isValidTime(hours, 'hours') && this._isValidTime(minutes, 'minutes')) {\n                this._time = this._timeInTwentyFourHourFormat(hours, minutes);\n            }\n        }\n        this._onChangeCallback(this._time);\n    }\n\n    _onFocus() {\n        this._hasFocus = true;\n    }\n\n    _getAriaLabel(type: string) {\n        let label!: string;\n        switch (type) {\n            case 'hours':\n                label = this._intl.inputFieldHoursAriaLabel;\n                break;\n            case 'minutes':\n                label = this._intl.inputFieldMinutesAriaLabel;\n                break;\n        }\n        return label;\n    }\n\n    _onInput(event: any, type: string) {\n        this._onTouchedCallback();\n        if (type === 'hours') {\n            this.hours = event.target.value;\n        } else if (type === 'minutes') {\n            this.minutes = event.target.value;\n        }\n        this._updateTime();\n    }\n\n    _onBlur(type: string) {\n        this._onTouchedCallback();\n        this._hasFocus = false;\n        // set 0X is the value entered in X\n        if (type === 'hours' && Number(this.hours) < 10 && this.hours !== '') {\n            this.hours = pad(String(this.hours));\n        } else if (type === 'minutes' && Number(this.minutes) < 10 && this.minutes !== '') {\n            this.minutes = pad(String(this.minutes));\n        }\n    }\n\n    private _timeInTwentyFourHourFormat(hours: number, minutes: number) {\n        if (this.twelveHourFormat) {\n            // 12h to 24h conversion\n            if (this._toggleAMPM === 'AM') {\n                if (hours === 12) {\n                    hours -= 12;\n                }\n            } else if (this._toggleAMPM === 'PM') {\n                if (hours >= 1 && hours < 12) {\n                    hours += 12;\n                }\n            }\n        }\n        return this._convertToISOFormat(pad(String(hours)), pad(String(minutes)));\n    }\n\n    private _isValidInput(value: string) {\n        const numExp = /^\\d{1,2}$/;\n        return numExp.test(value);\n    }\n\n    private _isValidTime(value: number, type: string) {\n        let valid = false;\n        const numVal = Number(value);\n        if (type === 'minutes') {\n            valid = !!(numVal >= this._minMinutes && numVal <= this._maxMinutes);\n        } else if (type === 'hours') {\n            valid = !!(numVal >= this._minHours && numVal <= this._maxHours);\n        }\n        return valid;\n    }\n\n    private _parseAndSetTime(value: string): string | null {\n        const valueInHoursAndMinutes = value.split(':');\n        if (\n            valueInHoursAndMinutes &&\n            valueInHoursAndMinutes.length === 2 &&\n            this._isValidInput(valueInHoursAndMinutes[0]) &&\n            this._isValidInput(valueInHoursAndMinutes[1])\n        ) {\n            let hours = Number(valueInHoursAndMinutes[0]);\n            const minutes = Number(valueInHoursAndMinutes[1]);\n            if (this.twelveHourFormat) {\n                // 24h to 12h conversion\n                if (hours === 0) {\n                    hours += 12;\n                    this._toggleAMPM = 'AM';\n                } else if (hours > 12 && hours <= 23) {\n                    hours -= 12;\n                    this._toggleAMPM = 'PM';\n                } else if (hours === 12) {\n                    this._toggleAMPM = 'PM';\n                }\n            }\n            if (this._isValidTime(hours, 'hours') && this._isValidTime(minutes, 'minutes')) {\n                this.hours = pad(String(hours));\n                this.minutes = pad(String(minutes));\n                // model value should always be in 24h format\n                return this._timeInTwentyFourHourFormat(hours, minutes);\n            }\n        }\n\n        return null;\n    }\n\n    writeValue(value: string) {\n        this._hours = '';\n        this._minutes = '';\n        this._time = null;\n        if (value) {\n            this.time = this._parseAndSetTime(value) as string;\n        }\n        this.valueChange.emit(this.time);\n    }\n\n    private _onTouchedCallback: () => void = () => {};\n    private _onChangeCallback: (_: any) => void = () => {};\n\n    registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n    registerOnTouched(fn: any): void {\n        this._onTouchedCallback = fn;\n    }\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n}\n","<label class=\"nx-timefield__label\" [ngClass]=\"hasFocus || ''\" [attr.for]=\"hours\">{{ label }}</label>\n<div class=\"nx-timefield__wrapper\">\n    <div class=\"nx-timefield-input__fields\" [ngClass]=\"hasFocus || ''\">\n        <input\n            [id]=\"idHours\"\n            #inputHours\n            [value]=\"hours || null\"\n            class=\"nx-timefield-input__field__hours\"\n            type=\"text\"\n            maxlength=\"2\"\n            autocomplete=\"off\"\n            (focusout)=\"_onBlur('hours')\"\n            (input)=\"_onInput($event, 'hours')\"\n            (focus)=\"_onFocus()\"\n            [required]=\"required\"\n            [attr.aria-required]=\"required\"\n            [attr.aria-label]=\"_getAriaLabel('hours')\"\n            [disabled]=\"disabled\"\n            [ngClass]=\"hasFocus || ''\"\n            [placeholder]=\"placeholderHours\"\n        />\n        <span class=\"nx-timefield-hours-separator\" [ngClass]=\"hasFocus || ''\">:</span>\n        <input\n            [id]=\"idMinutes\"\n            required\n            #inputMinutes\n            [value]=\"minutes || null\"\n            class=\"nx-timefield-input__field__minutes\"\n            type=\"text\"\n            maxlength=\"2\"\n            autocomplete=\"off\"\n            (input)=\"_onInput($event, 'minutes')\"\n            (focus)=\"_onFocus()\"\n            (focusout)=\"_onBlur('minutes')\"\n            [required]=\"required\"\n            [attr.aria-required]=\"required\"\n            [attr.aria-label]=\"_getAriaLabel('minutes')\"\n            [disabled]=\"disabled\"\n            [ngClass]=\"hasFocus || ''\"\n            [placeholder]=\"placeholderMinutes\"\n        />\n    </div>\n    <nx-radio-group\n        [name]=\"idRadioGroup\"\n        [(ngModel)]=\"_toggleAMPM\"\n        (ngModelChange)=\"_updateTime()\"\n        *ngIf=\"twelveHourFormat\"\n        (click)=\"_updateTime()\"\n        [disabled]=\"disabled\"\n        [negative]=\"negative\"\n    >\n        <nx-radio labelSize=\"small\" nxValue=\"AM\">{{ labelAM }}</nx-radio>\n        <nx-radio labelSize=\"small\" nxValue=\"PM\">{{ labelPM }}</nx-radio>\n    </nx-radio-group>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NxRadioModule } from '@aposin/ng-aquila/radio-button';\n\nimport { NxTimefieldComponent } from './timefield.component';\nimport { NxTimefieldIntl } from './timefield-intl';\n\n@NgModule({\n    imports: [CommonModule, FormsModule, NxRadioModule],\n    declarations: [NxTimefieldComponent],\n    exports: [NxTimefieldComponent],\n    providers: [NxTimefieldIntl],\n})\nexport class NxTimefieldModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i3.NxTimefieldIntl"],"mappings":"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"}