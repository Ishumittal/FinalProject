import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { DELETE, BACKSPACE, ENTER } from '@angular/cdk/keycodes';
import * as i0 from '@angular/core';
import { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, forwardRef, ElementRef, ViewChildren, NgModule } from '@angular/core';
import * as i1 from '@angular/cdk/a11y';
import * as i2 from '@aposin/ng-aquila/icon';
import { NxIconModule } from '@aposin/ng-aquila/icon';
import * as i2$1 from '@angular/common';
import { CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR } from '@angular/forms';

class NxTagComponent {
    constructor(_cdr, _elementRef, _focusMonitor) {
        this._cdr = _cdr;
        this._elementRef = _elementRef;
        this._focusMonitor = _focusMonitor;
        this._tabindex = -1;
        /** An event is dispatched each time when the tag is clicked. */
        this.clicked = new EventEmitter();
        /** An event is dispatched each time when the tag is removed. */
        this.removed = new EventEmitter();
        this._focusMonitor.monitor(this._elementRef);
    }
    /** Whether the tag is removeable. */
    set removable(value) {
        this._removable = coerceBooleanProperty(value);
        this._cdr.markForCheck();
    }
    get removable() {
        return this._removable;
    }
    /**
     * Sets the tab-index of a tag. Default value: -1.
     *
     * If `nxAllowTagDeletion` of the taglist is set to true, the default value is 0.
     */
    set tabindex(value) {
        this._tabindex = coerceNumberProperty(value);
        this._cdr.markForCheck();
    }
    get tabindex() {
        return this.removable ? 0 : this._tabindex;
    }
    /** Sets the value of the tag. */
    set value(value) {
        if (this._value !== value) {
            this._value = value;
            this._cdr.markForCheck();
        }
    }
    get value() {
        return this._value;
    }
    ngOnDestroy() {
        this._focusMonitor.stopMonitoring(this._elementRef);
    }
    /** @docs-private */
    // Emit the removed event that the parent can remove the value
    removeClickHandler(event) {
        event.stopPropagation();
        this.removed.emit(this.value);
    }
    /** @docs-private */
    removeKeyHandler(event) {
        if (this.removable && (event.keyCode === DELETE || event.keyCode === BACKSPACE)) {
            event.preventDefault();
            event.stopPropagation();
            this.removed.emit(this.value);
        }
        if (event.keyCode === ENTER) {
            this.clicked.emit(this.value);
        }
    }
    /** @docs-private */
    tagClickHandler() {
        this.clicked.emit(this.value);
    }
}
NxTagComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTagComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });
NxTagComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxTagComponent, selector: "nx-tag", inputs: { removable: "removable", tabindex: "tabindex", value: "value" }, outputs: { clicked: "clicked", removed: "removed" }, host: { listeners: { "click": "tagClickHandler()", "keydown": "removeKeyHandler($event)" }, properties: { "attr.tabindex": "tabindex" } }, ngImport: i0, template: "{{ value }}\n<span role=\"link\" aria-label=\"close\" class=\"nx-tag__close\" *ngIf=\"removable\" (click)=\"removeClickHandler($event)\">\n    <nx-icon class=\"nx-tag__close-icon\" name=\"close\"></nx-icon>\n</span>\n", styles: [":host{font-size:var(--taglist-font-size);line-height:var(--taglist-line-height);font-weight:var(--taglist-font-weight);letter-spacing:var(--taglist-letter-spacing);height:auto;max-width:100%;color:var(--taglist-color);background-color:var(--taglist-background-color);padding:6px 14px;display:flex;align-items:center;border:2px solid var(--taglist-border-color);border-radius:4px;-webkit-user-select:none;user-select:none;transition:background-color .2s ease,box-shadow .2s ease;cursor:pointer}:host:hover{border-color:var(--taglist-hover-border-color);color:var(--taglist-hover-color);background-color:var(--taglist-hover-background-color)}:host:focus{outline:2px solid transparent}:host.cdk-keyboard-focused{box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){:host.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}.nx-tag__close-icon{outline:none;display:block;font-size:var(--taglist-close-icon-size)}.nx-tag__close{margin-left:8px}:host-context([dir=rtl]) .nx-tag__close{margin-right:8px;margin-left:0;margin-left:initial}:host-context(.nx-taglist--keyword){padding:14px 22px}@media screen and (-ms-high-contrast: active){:host,:host:hover,:host:focus{color:buttonText;background-color:buttonFace;border-color:buttonText;-ms-high-contrast-adjust:none}}\n"], components: [{ type: i2.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }], directives: [{ type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTagComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-tag', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '(click)': 'tagClickHandler()',
                        '(keydown)': 'removeKeyHandler($event)',
                        '[attr.tabindex]': 'tabindex',
                    }, template: "{{ value }}\n<span role=\"link\" aria-label=\"close\" class=\"nx-tag__close\" *ngIf=\"removable\" (click)=\"removeClickHandler($event)\">\n    <nx-icon class=\"nx-tag__close-icon\" name=\"close\"></nx-icon>\n</span>\n", styles: [":host{font-size:var(--taglist-font-size);line-height:var(--taglist-line-height);font-weight:var(--taglist-font-weight);letter-spacing:var(--taglist-letter-spacing);height:auto;max-width:100%;color:var(--taglist-color);background-color:var(--taglist-background-color);padding:6px 14px;display:flex;align-items:center;border:2px solid var(--taglist-border-color);border-radius:4px;-webkit-user-select:none;user-select:none;transition:background-color .2s ease,box-shadow .2s ease;cursor:pointer}:host:hover{border-color:var(--taglist-hover-border-color);color:var(--taglist-hover-color);background-color:var(--taglist-hover-background-color)}:host:focus{outline:2px solid transparent}:host.cdk-keyboard-focused{box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){:host.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}.nx-tag__close-icon{outline:none;display:block;font-size:var(--taglist-close-icon-size)}.nx-tag__close{margin-left:8px}:host-context([dir=rtl]) .nx-tag__close{margin-right:8px;margin-left:0;margin-left:initial}:host-context(.nx-taglist--keyword){padding:14px 22px}@media screen and (-ms-high-contrast: active){:host,:host:hover,:host:focus{color:buttonText;background-color:buttonFace;border-color:buttonText;-ms-high-contrast-adjust:none}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i1.FocusMonitor }]; }, propDecorators: { removable: [{
                type: Input
            }], tabindex: [{
                type: Input
            }], value: [{
                type: Input
            }], clicked: [{
                type: Output
            }], removed: [{
                type: Output
            }] } });

class NxTaglistComponent {
    constructor(_cdr) {
        this._cdr = _cdr;
        /** An event is dispatched each time when the list of tags changed. */
        this.tagsChange = new EventEmitter();
        /** An event is dispatched each time when a tag is clicked. */
        this.tagClickEvent = new EventEmitter();
        this._tags = [];
        this._tabindex = -1;
        this._allowTagDeletion = true;
        this._isKeywordList = false;
        this._labelProperty = 'nxTaglistLabel';
        this._valueFormatterFn = value => value;
        this._onChange = () => { };
        this._onTouched = () => { };
    }
    /** Sets the list of tags. */
    set tags(value) {
        this._tags = value;
        this._cdr.markForCheck();
    }
    get tags() {
        return this._tags;
    }
    /** Sets the tabindex of the contained tags. Default value: -1. */
    set tabindex(value) {
        this._tabindex = coerceNumberProperty(value);
        this._cdr.markForCheck();
    }
    get tabindex() {
        return this.allowTagDeletion ? 0 : this._tabindex;
    }
    /** Whether the tags can be removed from the list. Default: true. */
    set allowTagDeletion(value) {
        this._allowTagDeletion = coerceBooleanProperty(value);
        this._cdr.markForCheck();
    }
    get allowTagDeletion() {
        return this._allowTagDeletion;
    }
    /** Whether the tags can be styled as keywords. */
    set isKeywordList(value) {
        this._isKeywordList = coerceBooleanProperty(value);
        this._cdr.markForCheck();
    }
    get isKeywordList() {
        return this._isKeywordList;
    }
    /** Sets the label property, in case tags represent objects. */
    set labelProp(value) {
        if (this._labelProperty !== value) {
            this._labelProperty = value;
            this._cdr.markForCheck();
        }
    }
    get labelProp() {
        return this._labelProperty;
    }
    /** Sets the label property to improve accessibility. */
    set labelledby(value) {
        if (this._ariaLabelledBy !== value) {
            this._ariaLabelledBy = value;
            this._cdr.markForCheck();
        }
    }
    get labelledby() {
        return this._ariaLabelledBy;
    }
    /** Sets the customization function for tag value.  */
    set valueFormatter(fn) {
        this._valueFormatterFn = fn;
        this._cdr.markForCheck();
    }
    get valueFormatter() {
        return this._valueFormatterFn;
    }
    /** Allows to delete a tag given index. Takes index of the tag to be deleted as a parameter */
    delete(index, value) {
        if (this.allowTagDeletion) {
            this.tags = [...this.tags.slice(0, index), ...this.tags.slice(index + 1)];
            // focus next element after deletion
            if (this.tagChildren.toArray()[index + 1]) {
                this.tagChildren.toArray()[index + 1].nativeElement.focus();
            }
            this._onChange(this.tags);
            this.tagsChange.emit(this.tags);
        }
    }
    /** Allows to add a tag. Takes tag object as an input */
    addTag(tag) {
        if (!tag) {
            return;
        }
        // make sure tag is either string or has the configured label prop and is not yet in the list
        if ((typeof tag === 'string' && !this.tags.includes(tag)) ||
            (tag[this.labelProp] && this.tags.filter(t => t[this.labelProp] === tag[this.labelProp]).length < 1)) {
            this.tags = [...this.tags, tag];
            this._onChange(this.tags);
            this.tagsChange.emit(this.tags);
        }
    }
    /** Allows to clear the tag list. */
    clearTags() {
        this.tags = [];
        this._onChange(this.tags);
        this.tagsChange.emit(this.tags);
    }
    /** @docs-private */
    writeValue(tags) {
        this.tags = tags;
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /** @docs-private */
    renderTag(tag) {
        const tagStr = typeof tag === 'string' ? tag : tag[this.labelProp];
        return this.valueFormatter(tagStr);
    }
    /** @docs-private */
    tagClick(index, value) {
        this.tagClickEvent.emit(this.tags[index]);
    }
}
NxTaglistComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTaglistComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NxTaglistComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxTaglistComponent, selector: "nx-taglist", inputs: { tags: ["nxTags", "tags"], tabindex: "tabindex", allowTagDeletion: ["nxAllowTagDeletion", "allowTagDeletion"], isKeywordList: ["nxIsKeywordList", "isKeywordList"], labelProp: ["nxLabelProperty", "labelProp"], labelledby: ["aria-labelledby", "labelledby"], valueFormatter: ["nxValueFormatter", "valueFormatter"] }, outputs: { tagsChange: "nxTagsChange", tagClickEvent: "nxTagClick" }, host: { properties: { "class.nx-taglist--keyword": "isKeywordList", "attr.aria-labelledby": "labelledby || null", "attr.tabindex": "-1" } }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => NxTaglistComponent),
            multi: true,
        },
    ], viewQueries: [{ propertyName: "tagChildren", predicate: NxTagComponent, descendants: true, read: ElementRef }], ngImport: i0, template: "<ul class=\"nx-taglist\" *ngIf=\"tags.length > 0\">\n    <li class=\"nx-taglist__list-item\" tabindex=\"-1\" *ngFor=\"let tag of tags; let i = index\">\n        <nx-tag\n            [value]=\"renderTag(tag)\"\n            [removable]=\"allowTagDeletion\"\n            [tabindex]=\"tabindex\"\n            (clicked)=\"tagClick(i, $event)\"\n            (removed)=\"delete(i, $event)\"\n        ></nx-tag>\n    </li>\n</ul>\n<ng-content *ngIf=\"tags.length < 1\"></ng-content>\n", styles: [":host{position:relative;min-height:32px;display:flex;justify-content:space-between}:host:focus{outline:none}.nx-taglist{display:flex;flex-wrap:wrap}.nx-taglist__list-item{list-style:none;margin-right:12px;margin-bottom:12px;flex-wrap:wrap;display:flex}:host-context([dir=rtl]) .nx-taglist__list-item{margin-right:0;margin-right:initial;margin-left:12px}@media (max-width: 703px){.nx-taglist--keyword{justify-content:center}}\n"], components: [{ type: NxTagComponent, selector: "nx-tag", inputs: ["removable", "tabindex", "value"], outputs: ["clicked", "removed"] }], directives: [{ type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTaglistComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-taglist', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => NxTaglistComponent),
                            multi: true,
                        },
                    ], host: {
                        '[class.nx-taglist--keyword]': 'isKeywordList',
                        '[attr.aria-labelledby]': 'labelledby || null',
                        '[attr.tabindex]': '-1',
                    }, template: "<ul class=\"nx-taglist\" *ngIf=\"tags.length > 0\">\n    <li class=\"nx-taglist__list-item\" tabindex=\"-1\" *ngFor=\"let tag of tags; let i = index\">\n        <nx-tag\n            [value]=\"renderTag(tag)\"\n            [removable]=\"allowTagDeletion\"\n            [tabindex]=\"tabindex\"\n            (clicked)=\"tagClick(i, $event)\"\n            (removed)=\"delete(i, $event)\"\n        ></nx-tag>\n    </li>\n</ul>\n<ng-content *ngIf=\"tags.length < 1\"></ng-content>\n", styles: [":host{position:relative;min-height:32px;display:flex;justify-content:space-between}:host:focus{outline:none}.nx-taglist{display:flex;flex-wrap:wrap}.nx-taglist__list-item{list-style:none;margin-right:12px;margin-bottom:12px;flex-wrap:wrap;display:flex}:host-context([dir=rtl]) .nx-taglist__list-item{margin-right:0;margin-right:initial;margin-left:12px}@media (max-width: 703px){.nx-taglist--keyword{justify-content:center}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { tagsChange: [{
                type: Output,
                args: ['nxTagsChange']
            }], tagClickEvent: [{
                type: Output,
                args: ['nxTagClick']
            }], tagChildren: [{
                type: ViewChildren,
                args: [NxTagComponent, { read: ElementRef }]
            }], tags: [{
                type: Input,
                args: ['nxTags']
            }], tabindex: [{
                type: Input
            }], allowTagDeletion: [{
                type: Input,
                args: ['nxAllowTagDeletion']
            }], isKeywordList: [{
                type: Input,
                args: ['nxIsKeywordList']
            }], labelProp: [{
                type: Input,
                args: ['nxLabelProperty']
            }], labelledby: [{
                type: Input,
                args: ['aria-labelledby']
            }], valueFormatter: [{
                type: Input,
                args: ['nxValueFormatter']
            }] } });

class NxTaglistModule {
}
NxTaglistModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTaglistModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NxTaglistModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTaglistModule, declarations: [NxTaglistComponent, NxTagComponent], imports: [CommonModule, NxIconModule], exports: [NxTaglistComponent, NxTagComponent] });
NxTaglistModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTaglistModule, imports: [[CommonModule, NxIconModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTaglistModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NxTaglistComponent, NxTagComponent],
                    exports: [NxTaglistComponent, NxTagComponent],
                    imports: [CommonModule, NxIconModule],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { NxTagComponent, NxTaglistComponent, NxTaglistModule };
//# sourceMappingURL=aposin-ng-aquila-taglist.mjs.map
