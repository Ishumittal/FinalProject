{"version":3,"file":"aposin-ng-aquila-mask.mjs","sources":["../../../projects/ng-aquila/src/mask/mask.directive.ts","../../../projects/ng-aquila/src/mask/iban-mask.directive.ts","../../../projects/ng-aquila/src/mask/mask.module.ts","../../../projects/ng-aquila/src/mask/aposin-ng-aquila-mask.ts"],"sourcesContent":["import { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { BACKSPACE, DELETE } from '@angular/cdk/keycodes';\nimport { Directive, ElementRef, forwardRef, Input } from '@angular/core';\nimport { ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, Validator } from '@angular/forms';\nimport { NX_INPUT_VALUE_ACCESSOR } from '@aposin/ng-aquila/input';\nimport { Subject } from 'rxjs';\n\ntype MASK_TYPE = '0' | 'A' | 'S';\n\nexport const NX_MASK_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NxMaskDirective),\n    multi: true,\n};\n\nexport const NX_MASK_VALIDATORS: any = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => NxMaskDirective),\n    multi: true,\n};\n\n/** Options for input case sensitivity. */\nexport type MaskConversionTypes = 'lower' | 'upper';\n\n/** Interface for saving the cursor information. */\ninterface CursorInfo {\n    selectionStart?: number;\n    selectionEnd?: number;\n    position?: number;\n}\n\n@Directive({\n    selector: 'input[nxMask]',\n    host: {\n        '(input)': '_onInputChange($event)',\n        '(keydown)': '_onKeydown($event)',\n        '(paste)': '_onPaste($event)',\n        '(blur)': '_touch()',\n    },\n    exportAs: 'nxMaskDirective',\n    providers: [NX_MASK_VALUE_ACCESSOR, { provide: NX_INPUT_VALUE_ACCESSOR, useExisting: NxMaskDirective }, NX_MASK_VALIDATORS],\n})\nexport class NxMaskDirective implements ControlValueAccessor, Validator {\n    private _separators = ['/', '(', ')', '.', ':', '-', ' ', '+', ','];\n    private _dropSpecialCharacters = false;\n    private _validateMask = true;\n    private _convertTo?: MaskConversionTypes;\n    private _deactivateMask?: boolean = false;\n    private _mask = '';\n    /**\n     * _cursor is a helper for saving a position or a selectionRange (selectionStart + selectionEnd)\n     * and then apply it later on (in _onInputChange()).\n     *\n     * _cursor.position is used for saving a position that is then applied without any changes.\n     * if the position is saved, selectionStart and selectionEnd will be ignored in _onInputChange().\n     * _cursor.selectionStart and selectionEnd is used for saving the current cursor position,\n     * and a new cursor position is then calculated with this data.\n     */\n    private _cursor!: CursorInfo | null;\n\n    /** helper variable for saving the current value of the input element to compare it then with a new value. */\n    private _inputValue!: string;\n\n    /** helper variable for saving the masked string of a pasted value and then applying it in _onInputChange(). */\n    private _pastedData!: string | null;\n\n    /**\n     * Emits the unmasked value before the value changes.\n     */\n    readonly cvaModelChange = new Subject<string>();\n\n    private _onChangeCallback = (_: any) => {};\n    private _onTouchedCallback = () => {};\n    private _validatorOnChange = () => {};\n\n    private _callOnChangeCallback() {\n        if (this.dropSpecialCharacters) {\n            this._onChangeCallback(this.getUnmaskedValue());\n        } else {\n            this._onChangeCallback(this._elementRef.nativeElement.value);\n        }\n    }\n\n    private _afterInputHook = (event: KeyboardEvent) => {};\n    private _beforePasteHook = (event: ClipboardEvent) => {};\n\n    /**\n     * Registers a function to be executed after the onInput handler.\n     * The registered hook receives a `KeyboardEvent` from the onInput event handler as a parameter.\n     *\n     * **Note:** If you register a `afterInputHook`, you may also register a `beforePasteHook`\n     * to perform similar changes for pasting.\n     */\n    registerAfterInputHook(afterInput: (event: KeyboardEvent) => void): void {\n        this._afterInputHook = afterInput;\n    }\n\n    /**\n     * Registers a function to be executed before the onPaste handler.\n     * The registered hook receives a `ClipboardEvent` from the onPaste event handler as a parameter.\n     */\n    registerBeforePasteHook(beforePaste: (event: ClipboardEvent) => void): void {\n        this._beforePasteHook = beforePaste;\n    }\n\n    /** Whether the mask validation should be deactivated. */\n    @Input()\n    set deactivateMask(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._deactivateMask) {\n            this._deactivateMask = newValue;\n            if (this._deactivateMask) {\n                this.updateValue(this.getUnmaskedValue());\n            } else {\n                this.updateValue(this.getMaskedString(this._elementRef.nativeElement.value));\n            }\n            this._callOnChangeCallback();\n        }\n    }\n    get deactivateMask(): boolean {\n        return this._deactivateMask as boolean;\n    }\n\n    /** Sets the mask. */\n    @Input('nxMask')\n    set mask(value: string) {\n        if (!value) {\n            value = '';\n        }\n        if (value !== this._mask) {\n            this._mask = value;\n            this.updateValue(this.getMaskedString(this._elementRef.nativeElement.value));\n            this._callOnChangeCallback();\n            this._validatorOnChange();\n        }\n    }\n    get mask(): string {\n        return this._mask;\n    }\n\n    /** Sets the case sensitivity of the mask. */\n    @Input('nxConvertTo')\n    set convertTo(value: MaskConversionTypes | null | undefined) {\n        this._convertTo = value!; // TODO properly coerce input value\n        this.updateValue(this.getMaskedString(this._elementRef.nativeElement.value));\n        this._callOnChangeCallback();\n    }\n    get convertTo(): MaskConversionTypes {\n        return this._convertTo as MaskConversionTypes;\n    }\n\n    /**\n     * Sets the keys that are recognized as separators.\n     * Default separators: / ( ) . : - + , and space.\n     */\n    @Input()\n    set separators(values: string[]) {\n        this._separators = values;\n        this.updateValue(this.getMaskedString(this._elementRef.nativeElement.value));\n        this._validatorOnChange();\n        this._callOnChangeCallback();\n    }\n    get separators(): string[] {\n        return this._separators;\n    }\n\n    /** Whether the separators should be dropped in the control value accessor. */\n    @Input()\n    set dropSpecialCharacters(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._dropSpecialCharacters) {\n            this._dropSpecialCharacters = newValue;\n            this.updateValue(this.getMaskedString(this._elementRef.nativeElement.value));\n            this._callOnChangeCallback();\n        }\n    }\n    get dropSpecialCharacters(): boolean {\n        return this._dropSpecialCharacters;\n    }\n\n    /** Whether the mask validation should be applied on the input. Default: true. */\n    @Input()\n    set validateMask(value: BooleanInput) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._validateMask) {\n            this._validateMask = newValue;\n            this._validatorOnChange();\n        }\n    }\n    get validateMask(): boolean {\n        return this._validateMask;\n    }\n\n    constructor(private _elementRef: ElementRef) {}\n\n    /** @docs-private */\n    get elementRefValue(): string {\n        return this._elementRef.nativeElement.value;\n    }\n\n    /** Returns the unmasked value. */\n    getUnmaskedValue(): string {\n        const unmaskedValue = this.separators.reduce((unmasked, separator) => unmasked.split(separator).join(''), this._elementRef.nativeElement.value);\n\n        return unmaskedValue;\n    }\n\n    /**\n     * Sets the mask (for programmatical use).\n     *\n     * No `_onChangeCallback()` will be called!\n     */\n    setMask(value: string) {\n        if (!value) {\n            value = '';\n        }\n        if (value !== this._mask) {\n            this._mask = value;\n            this.updateValue(this.getMaskedString(this._elementRef.nativeElement.value));\n            this._validatorOnChange();\n        }\n    }\n\n    /**\n     * this._cursor can be set to a new value in this function;\n     * in _onInputChange() it is then used to set the cursor position.\n     */\n    _onKeydown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n\n        const input: HTMLInputElement = event.target as HTMLInputElement;\n        const currentValue = this._elementRef.nativeElement.value;\n\n        if (keyCode === BACKSPACE || keyCode === DELETE) {\n            // if backspace pressed, cursor has to move one character to start\n            const backspaceShift = keyCode === BACKSPACE ? 1 : 0;\n            const lastCharacter = currentValue.substring(input.selectionStart! - backspaceShift, input.selectionEnd! - backspaceShift + 1);\n            const selectionAtLastCharacter = input.selectionStart === currentValue.length - 1 + backspaceShift;\n\n            if (input.selectionStart !== input.selectionEnd) {\n                let newPosition: number = input.selectionStart as number;\n                // jump behind separators, but do not shift after the next character (=> don't use _calculateCursorShift())\n                while (this.isSeparator(this.mask[newPosition])) {\n                    newPosition++;\n                }\n                this._cursor = { position: newPosition };\n            } else if (selectionAtLastCharacter) {\n                // if last character is deleted: only delete last character, do not trigger input event again\n                // (here the separator would be added again)\n                this.updateValue(currentValue.substring(0, currentValue.length - 1));\n                this._callOnChangeCallback();\n                event.preventDefault();\n            } else if (this.isSeparator(lastCharacter)) {\n                // do not delete a separator, only set cursor position\n                input.setSelectionRange(input.selectionStart! - backspaceShift, input.selectionEnd! - backspaceShift);\n                event.preventDefault();\n            } else {\n                // for any other character: decrease cursor position by one (backspaceShift).\n                // the input is modified and will be validated in _onInputChange().\n                this._cursor = { position: input.selectionStart! - backspaceShift };\n            }\n        } else {\n            this._cursor = { selectionStart: input.selectionStart as number, selectionEnd: input.selectionEnd as number };\n        }\n    }\n\n    /**\n     * Returns the cursor position after a letter is entered at `selectionStart` position in the mask.\n     * There are two cases to consider ('|' => cursor position where the character is entered, mask: 00:00:00):\n     * - before the separators there is space for entering the letter: '12:3|4:5' => '12:30:|45'\n     * - the letter has to be shifted and is entered after the separators: '12:34|:5' => '12:34:0|5'\n     */\n    private _calculateCursorShift(position: number): number {\n        let shift = 0;\n        // tracks if the entered letter was already placed in the current mask\n        // and therefor was considered in the cursor calculation.\n        let characterWasEntered = false;\n\n        if (!this.isSeparator(this.mask[position + shift])) {\n            shift++;\n            characterWasEntered = true;\n        }\n\n        while (this.isSeparator(this.mask[position + shift])) {\n            shift++;\n        }\n\n        if (!characterWasEntered) {\n            shift++;\n        }\n\n        return shift;\n    }\n\n    private _isStringAllowed(value: string, maskedValue: MASK_TYPE) {\n        if (\n            (maskedValue === '0' && /^\\d$/.test(value)) ||\n            (maskedValue === 'A' && /^[\\dA-Za-z]$/.test(value)) ||\n            (maskedValue === 'S' && /^[A-Za-z]$/.test(value))\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Handles the onInput event.\n     * `_beforeInputHook()` is called before the actual execution.\n     *\n     */\n    _onInputChange(event: KeyboardEvent) {\n        // _inputValue is updated in updateValue(), so I need to pick it up here to compare it to a new value\n        const oldVal = this._inputValue;\n        const input: HTMLInputElement = event.target as HTMLInputElement;\n        let newVal = this.getMaskedString(input.value);\n        if (this._deactivateMask) {\n            newVal = input.value;\n            this.updateValue(newVal);\n            this._callOnChangeCallback();\n            return;\n        }\n        // if _pastedData was set in _onPaste(), use this value\n        if (this._pastedData) {\n            this.updateValue(this._pastedData);\n            input.setSelectionRange(this._cursor!.position as number, this._cursor!.position as number);\n            this._pastedData = null;\n            this._cursor = null;\n            this._callOnChangeCallback();\n            return;\n        }\n\n        // do nothing if mask is already filled up\n        if (\n            oldVal.length === this._mask.length &&\n            newVal.length === this._mask.length &&\n            oldVal !== newVal &&\n            this._cursor &&\n            this._cursor.selectionStart !== undefined &&\n            this._cursor.selectionStart === this._cursor.selectionEnd\n        ) {\n            this._elementRef.nativeElement.value = this.getMaskedString(oldVal);\n            input.setSelectionRange(this._cursor.selectionStart, this._cursor.selectionEnd);\n            this._cursor = null;\n            return;\n        }\n\n        this.updateValue(newVal);\n\n        // set new cursor position\n        if (this._cursor?.position !== undefined) {\n            input.setSelectionRange(this._cursor.position, this._cursor.position);\n            this._cursor = null;\n        } else if (this._cursor?.selectionStart !== undefined) {\n            // only one character can be entered (except pasting, this is calculated in _onPaste())\n            if (oldVal === input.value) {\n                // we always have to set the cursor position here even if nothing changed\n                // because otherwise the cursor would jump to the end of the input.\n                // if the cursor is placed in front of a separator and the user types a non-allowed character,\n                // the cursor is supposed to jump over the separator.\n                let currentPosition = this._cursor.selectionStart;\n                while (this.isSeparator(this.mask[currentPosition])) {\n                    currentPosition++;\n                }\n                input.setSelectionRange(currentPosition, currentPosition);\n                this._cursor = null;\n            } else {\n                const newPosition = this._cursor.selectionStart + this._calculateCursorShift(this._cursor.selectionStart);\n                input.setSelectionRange(newPosition, newPosition);\n                this._cursor = null;\n            }\n        }\n\n        this._afterInputHook(event);\n        this._callOnChangeCallback();\n    }\n\n    /**\n     * this._cursor and this._pastedData can be set to a new value in this function;\n     * _cursor is used to set the cursor position after checking the masked input in _onInputChange().\n     * _pastedData carries the valid part of the pasted value to _inInputChange();\n     *\n     *`_beforePasteHook()` is called before the actual execution.\n     */\n    _onPaste(event: ClipboardEvent) {\n        const input: HTMLInputElement = event.target as HTMLInputElement;\n        const pastedData = (event.clipboardData || (window as any).clipboardData).getData('text');\n\n        // saving these three values as if something is changed in the _beforePasteHook()\n        // which causes the input value to be updated, this values will get lost.\n        const selectionStart: number = input.selectionStart as number;\n        const selectionEnd = input.selectionEnd;\n        const oldValue = input.value;\n\n        this._beforePasteHook(event);\n\n        const maskedString = this.getMaskedString(pastedData, selectionStart);\n\n        // if mask is already filled up (and no characters are selected with the cursor), do nothing\n        if (input.value.length === this._mask.length && maskedString.length > 0 && selectionStart === selectionEnd) {\n            input.setSelectionRange(selectionStart, selectionEnd);\n            this._cursor = null; // was set in _onKeydown(), but will not be used in this case; so reset it\n            event.preventDefault();\n            return;\n        }\n\n        // if length of newValue is >= mask: allow only to enter characters from a pasted value until mask is filled up\n        // example: 12:|34: (\"|\" cursor position, mask: 00:00:00) => when pasting '567', only '56' fits in until input is filled up => 12:56:|34\n        // get the pasted unmasked value from the pasted string (to cut all the invalid characters and separators)\n        const pastedUnmaskedValue = this.separators.reduce((unmasked, separator) => unmasked.split(separator).join(''), maskedString);\n\n        let newValue: string = this.getMaskedString(\n            oldValue.substring(0, selectionStart) + pastedUnmaskedValue + oldValue.substring(selectionEnd as number, oldValue.length),\n        );\n\n        if (newValue.length >= this._mask.length) {\n            let newPosition = selectionStart;\n\n            let i = 1;\n            do {\n                newValue = this.getMaskedString(\n                    oldValue.substring(0, selectionStart) + pastedUnmaskedValue.substring(0, i) + oldValue.substring(selectionEnd as number, oldValue.length),\n                );\n                newPosition += this._calculateCursorShift(newPosition);\n\n                i++;\n            } while (newValue.length < this._mask.length);\n\n            // save value for using it in _onInputChange()\n            this._pastedData = newValue;\n            this._cursor = {\n                position: newPosition,\n            };\n            return;\n        }\n\n        // if pasting is fine: save the cursor position for using them in _onInputChange()\n        this._cursor = {\n            position: selectionStart + maskedString.length,\n        };\n    }\n\n    private updateValue(value: string) {\n        if (!this._deactivateMask) {\n            // Write UpperCase\n            if (this._convertTo === 'upper') {\n                value = value.toUpperCase();\n            } else if (this._convertTo === 'lower') {\n                value = value.toLowerCase();\n            }\n        }\n        this._elementRef.nativeElement.value = value;\n\n        // _inputValue is needed for calculating the cursor shift in onInput()\n        this._inputValue = value;\n    }\n\n    /** @docs-private */\n    getMaskedString(inputValue: string, maskStartIndex = 0): string {\n        let formattedValue = '';\n        let maskIndex = maskStartIndex;\n        let inputIndex = 0;\n\n        // insert if next in mask is separator\n        while (this.isSeparator(this.mask[maskIndex])) {\n            formattedValue += this.mask[maskIndex];\n            maskIndex++;\n        }\n\n        while (inputIndex < inputValue.length) {\n            // test if letters are valid\n            if (this._isStringAllowed(inputValue[inputIndex], this.mask[maskIndex] as MASK_TYPE)) {\n                formattedValue += inputValue[inputIndex];\n                inputIndex++;\n                maskIndex++;\n            } else {\n                inputIndex++;\n            }\n\n            // insert if next in mask is separator\n            while (this.isSeparator(this.mask[maskIndex])) {\n                formattedValue += this.mask[maskIndex];\n                maskIndex++;\n            }\n        }\n\n        return formattedValue;\n    }\n\n    private isSeparator(value: string): boolean {\n        return this._separators.includes(value);\n    }\n\n    // control value accessor\n    writeValue(value: any): void {\n        if (!value) {\n            value = '';\n        }\n\n        this.cvaModelChange.next(value);\n        if (this.deactivateMask) {\n            this.updateValue(value || this.getUnmaskedValue());\n        } else {\n            this.updateValue(this.getMaskedString(value));\n        }\n    }\n\n    registerOnChange(onChange: any): void {\n        this._onChangeCallback = onChange;\n    }\n\n    registerOnTouched(onTouched: any): void {\n        this._onTouchedCallback = onTouched;\n    }\n\n    /** @docs-private */\n    registerOnValidatorChange(fn: () => void): void {\n        this._validatorOnChange = fn;\n    }\n\n    _validateFn() {\n        const inputLength = this._elementRef.nativeElement.value.length;\n        const maskLength = this._mask.length;\n        if (inputLength !== maskLength && !this.deactivateMask) {\n            return { nxMaskLengthError: { length: maskLength, actual: inputLength } };\n        }\n        return null;\n    }\n\n    /** @docs-private */\n    validate() {\n        return this.validateMask ? this._validateFn() : null;\n    }\n\n    _touch() {\n        this._onTouchedCallback();\n    }\n}\n","import { Directive, ElementRef, forwardRef, Inject, OnDestroy, OnInit } from '@angular/core';\nimport { NG_VALIDATORS, Validator } from '@angular/forms';\nimport * as IBAN from 'iban';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { NxMaskDirective } from './mask.directive';\n\nexport const NX_IBAN_MASK_VALIDATORS: any = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => NxIbanMaskDirective),\n    multi: true,\n};\n\n/**\n * To use the `NxIbanMaskDirective`, you have to install the **peer dependency** `iban.js`.\n */\n@Directive({\n    selector: 'input[nxIbanMask]',\n    exportAs: 'nxIbanMaskDirective',\n    providers: [NX_IBAN_MASK_VALIDATORS],\n    host: {\n        '(input)': '_countryCodeValid() && _touch()',\n    },\n})\nexport class NxIbanMaskDirective implements OnInit, OnDestroy, Validator {\n    private _countryCode!: string | null;\n\n    private readonly _destroyed = new Subject<void>();\n\n    constructor(private _elementRef: ElementRef, @Inject(forwardRef(() => NxMaskDirective)) private maskDirective: NxMaskDirective) {\n        this.maskDirective.registerAfterInputHook(this._afterInputHook);\n        this.maskDirective.registerBeforePasteHook(this._beforePasteHook);\n\n        this.maskDirective.cvaModelChange.pipe(takeUntil(this._destroyed)).subscribe((value: string) => {\n            const enteredCountryCode = this.maskDirective.getMaskedString(value).substr(0, 2);\n            this._setCountryCode(enteredCountryCode);\n        });\n    }\n\n    private _afterInputHook = (event: KeyboardEvent) => {\n        const input = event.target as HTMLInputElement;\n        this._setCountryCode(input.value.substr(0, 2));\n    };\n\n    private _beforePasteHook = (event: ClipboardEvent) => {\n        // change the country code here if necessary\n        const input: HTMLInputElement = event.target as HTMLInputElement;\n        const pastedData = (event.clipboardData || (window as any).clipboardData).getData('text');\n\n        const enteredCountryCode = (\n            this.maskDirective.elementRefValue.substr(0, input.selectionStart as number) +\n            this.maskDirective.getMaskedString(pastedData, input.selectionStart as number)\n        ).substr(0, 2);\n\n        this._setCountryCode(enteredCountryCode);\n    };\n\n    private _setCountryCode(code: string): void {\n        code = code.toUpperCase();\n        if (code.length === 2 && this._countryCode !== code) {\n            if (IBAN.countries[code]) {\n                this._countryCode = code;\n                this.maskDirective.setMask(this._getMask(this._countryCode));\n            } else {\n                this._countryCode = null;\n                this.maskDirective.setMask('SS');\n            }\n        }\n    }\n\n    ngOnInit(): void {\n        // set only first two letters as I don't know a country yet\n        this.maskDirective.mask = 'SS';\n        this.maskDirective.convertTo = 'upper';\n    }\n\n    ngOnDestroy(): void {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n\n    private _getMask(countryCode: string) {\n        // the countrySpecs of a country contain: countryCode (\"DE\"), length (22), structure (\"F08F10\")\n        // and an example belonging to each country\n        const countrySpecs = IBAN.countries[countryCode];\n\n        // 'SS' for country code + '00' for IBAN checksum\n        let mask = 'SS00';\n\n        // split up after every third character\n        const characterDefs = countrySpecs.structure.match(/.{1,3}/g);\n\n        characterDefs!.forEach((charDef: any) => {\n            const character = charDef[0];\n            const count = Number(charDef.substring(1, 3));\n\n            switch (character) {\n                // [0-9]\n                case 'F':\n                    mask += '0'.repeat(count);\n                    break;\n                // [0-9A-Za-z]\n                case 'A':\n                    mask += 'A'.repeat(count);\n                    break;\n                // [A-Z]\n                // 'S' in nxMask does accept also [a-z].\n                // There is no option for only accepting capital letters at the moment.\n                case 'U':\n                    mask += 'S'.repeat(count);\n                    break;\n            }\n        });\n\n        // insert whitespaces after every 4 characters\n        mask = mask.match(/.{1,4}/g)!.join(' ');\n\n        return mask;\n    }\n\n    private _validateFn() {\n        if (this._countryCodeValid()) {\n            return { nxIbanInvalidCountryError: 'no valid country code' };\n        }\n        if (!IBAN.isValid(this.maskDirective.getUnmaskedValue())) {\n            return { nxIbanParseError: 'no valid iban' };\n        }\n        return null;\n    }\n\n    /** @docs-private */\n    validate() {\n        return this.maskDirective.validateMask ? this._validateFn() : null;\n    }\n\n    _touch() {\n        this.maskDirective._touch();\n    }\n\n    private _countryCodeValid(): boolean {\n        const enteredCountryCode = this._elementRef.nativeElement.value.substr(0, 2);\n\n        return enteredCountryCode.length === 2 && !IBAN.countries[enteredCountryCode];\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxFormfieldModule } from '@aposin/ng-aquila/formfield';\n\nimport { NxIbanMaskDirective } from './iban-mask.directive';\nimport { NxMaskDirective } from './mask.directive';\n\n@NgModule({\n    imports: [CommonModule, NxFormfieldModule],\n    declarations: [NxMaskDirective, NxIbanMaskDirective],\n    exports: [NxFormfieldModule, NxMaskDirective, NxIbanMaskDirective],\n})\nexport class NxMaskModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}