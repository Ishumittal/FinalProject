import { coerceBooleanProperty } from '@angular/cdk/coercion';
import * as i0 from '@angular/core';
import { Component, Input, Directive, InjectionToken, Optional, Self, Inject, TemplateRef, ViewChild, ContentChildren, NgModule } from '@angular/core';
import { Subject, merge } from 'rxjs';
import * as i1 from '@angular/cdk/a11y';
import { FocusKeyManager } from '@angular/cdk/a11y';
import { RouterModule } from '@angular/router';
import * as i1$1 from '@aposin/ng-aquila/overlay';
import { NxOverlayModule } from '@aposin/ng-aquila/overlay';
import { Overlay } from '@angular/cdk/overlay';
import { take, takeUntil } from 'rxjs/operators';

class NxNotificationPanelItemComponent {
    constructor(_elementRef, _focusMonitor) {
        this._elementRef = _elementRef;
        this._focusMonitor = _focusMonitor;
        this._read = false;
        this._clickable = true;
        this._hasFocus = false;
        this.focused = new Subject();
        this._focusMonitor.monitor(this._elementRef);
    }
    set read(value) {
        this._read = coerceBooleanProperty(value);
    }
    get read() {
        return this._read;
    }
    set clickable(value) {
        this._clickable = coerceBooleanProperty(value);
    }
    get clickable() {
        return this._clickable;
    }
    ngOnDestroy() {
        this._focusMonitor.stopMonitoring(this._elementRef);
    }
    focus(focusOrigin) {
        // the focus key manager calls this method with the focusOrigin
        // property. if it is not set we know the focus comes from another source
        // like the user using TAB to go through the list. Then we want to notify
        // the focus manager about this change of focus.
        if (typeof focusOrigin === 'undefined' && !this._hasFocus) {
            this.focused.next(this);
            this._hasFocus = true;
            this._focusMonitor.focusVia(this._elementRef, 'keyboard');
        }
        if (!this._hasFocus) {
            this._elementRef.nativeElement.focus();
            this._hasFocus = true;
        }
    }
    _blur() {
        this._hasFocus = false;
    }
}
NxNotificationPanelItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNotificationPanelItemComponent, deps: [{ token: i0.ElementRef }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });
NxNotificationPanelItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxNotificationPanelItemComponent, selector: "nx-notification-panel-item, [nxNotificationPanelItem]", inputs: { read: "read", clickable: "clickable" }, host: { attributes: { "tabindex": "0" }, listeners: { "focus": "focus()", "blur": "_blur()" }, properties: { "class.nx-notification-item--read": "read", "class.nx-notification-item--clickable": "clickable" } }, ngImport: i0, template: "<ng-content select=\"nx-notification-item-metadata\"></ng-content>\n\n<ng-content select=\"nx-notification-item-content\"></ng-content>\n<ng-content></ng-content>\n\n<ng-content select=\"nx-notification-item-actions\"></ng-content>\n", styles: [":host{display:flex;flex-direction:column;background-color:var(--notification-panel-item-unread-background-color);padding:16px 24px;margin:0 -24px}:host.nx-notification-item--read{background-color:var(--notification-panel-item-read-background-color)}:host:focus{outline:none}:host.cdk-keyboard-focused{box-shadow:var(--focus-inset-box-shadow)}@media screen and (-ms-high-contrast: active){:host.cdk-keyboard-focused{box-shadow:inset 0 0 0 4px windowText,inset 0 0 0 6px background;border:4px solid CanvasText}}::ng-deep nx-notification-item-metadata{font-size:14px;font-weight:400;line-height:20px;letter-spacing:.2px;margin-bottom:4px;display:flex;align-items:center}::ng-deep nx-notification-item-content{font-size:16px;font-weight:400;line-height:24px}::ng-deep nx-notification-item-actions{font-size:16px;font-weight:400;line-height:24px;display:flex;justify-content:space-between;padding-top:8px}:host(.nx-notification-item--clickable){cursor:pointer}:host(.nx-notification-item--clickable):hover{background-color:var(--notification-panel-item-unread-hover-background-color)}:host(.nx-notification-item--clickable):active{background-color:var(--notification-panel-item-unread-active-background-color)}:host(.nx-notification-item--clickable).nx-notification-item--read:hover{background-color:var(--notification-panel-item-read-hover-background-color)}:host(.nx-notification-item--clickable).nx-notification-item--read:active{background-color:var(-notification-panel-item-read-active-background-color)}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNotificationPanelItemComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-notification-panel-item, [nxNotificationPanelItem]', host: {
                        '[class.nx-notification-item--read]': 'read',
                        '[class.nx-notification-item--clickable]': 'clickable',
                        tabindex: '0',
                        '(focus)': 'focus()',
                        '(blur)': '_blur()',
                    }, template: "<ng-content select=\"nx-notification-item-metadata\"></ng-content>\n\n<ng-content select=\"nx-notification-item-content\"></ng-content>\n<ng-content></ng-content>\n\n<ng-content select=\"nx-notification-item-actions\"></ng-content>\n", styles: [":host{display:flex;flex-direction:column;background-color:var(--notification-panel-item-unread-background-color);padding:16px 24px;margin:0 -24px}:host.nx-notification-item--read{background-color:var(--notification-panel-item-read-background-color)}:host:focus{outline:none}:host.cdk-keyboard-focused{box-shadow:var(--focus-inset-box-shadow)}@media screen and (-ms-high-contrast: active){:host.cdk-keyboard-focused{box-shadow:inset 0 0 0 4px windowText,inset 0 0 0 6px background;border:4px solid CanvasText}}::ng-deep nx-notification-item-metadata{font-size:14px;font-weight:400;line-height:20px;letter-spacing:.2px;margin-bottom:4px;display:flex;align-items:center}::ng-deep nx-notification-item-content{font-size:16px;font-weight:400;line-height:24px}::ng-deep nx-notification-item-actions{font-size:16px;font-weight:400;line-height:24px;display:flex;justify-content:space-between;padding-top:8px}:host(.nx-notification-item--clickable){cursor:pointer}:host(.nx-notification-item--clickable):hover{background-color:var(--notification-panel-item-unread-hover-background-color)}:host(.nx-notification-item--clickable):active{background-color:var(--notification-panel-item-unread-active-background-color)}:host(.nx-notification-item--clickable).nx-notification-item--read:hover{background-color:var(--notification-panel-item-read-hover-background-color)}:host(.nx-notification-item--clickable).nx-notification-item--read:active{background-color:var(-notification-panel-item-read-active-background-color)}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.FocusMonitor }]; }, propDecorators: { read: [{
                type: Input
            }], clickable: [{
                type: Input
            }] } });

class NxNotificationItemMetadataDirective {
}
NxNotificationItemMetadataDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNotificationItemMetadataDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NxNotificationItemMetadataDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxNotificationItemMetadataDirective, selector: "nx-notification-item-metadata", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNotificationItemMetadataDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'nx-notification-item-metadata' }]
        }] });
class NxNotificationItemContentDirective {
}
NxNotificationItemContentDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNotificationItemContentDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NxNotificationItemContentDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxNotificationItemContentDirective, selector: "nx-notification-item-content", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNotificationItemContentDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'nx-notification-item-content' }]
        }] });
class NxNotificationItemActionsDirective {
}
NxNotificationItemActionsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNotificationItemActionsDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NxNotificationItemActionsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxNotificationItemActionsDirective, selector: "nx-notification-item-actions", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNotificationItemActionsDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'nx-notification-item-actions' }]
        }] });
class NxNotificationItemHeaderDirective {
}
NxNotificationItemHeaderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNotificationItemHeaderDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NxNotificationItemHeaderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxNotificationItemHeaderDirective, selector: "nx-notification-header", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNotificationItemHeaderDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'nx-notification-header' }]
        }] });

/** Injection token that determines the scroll handling while a notification-panel is open. */
const NX_NOTIFICATION_PANEL_SCROLL_STRATEGY = new InjectionToken('nx-notification-panel-scroll-strategy');
/** @docs-private */
function NX_NOTIFICATION_PANEL_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {
    return () => overlay.scrollStrategies.reposition();
}
/** @docs-private */
const NX_NOTIFICATION_PANEL_SCROLL_STRATEGY_PROVIDER = {
    provide: NX_NOTIFICATION_PANEL_SCROLL_STRATEGY,
    useFactory: NX_NOTIFICATION_PANEL_SCROLL_STRATEGY_PROVIDER_FACTORY,
    deps: [Overlay],
};
const DEFAULT_CONFIG = {
    direction: 'bottom-start',
    fallbackOrientation: 'vertical',
    autoFocus: true,
    offset: 8,
};
class NxNotificationPanelTriggerDirective {
    constructor(_nxOverlay, _element, _triggerButton, _defaultScrollStrategyFactory) {
        this._nxOverlay = _nxOverlay;
        this._element = _element;
        this._triggerButton = _triggerButton;
        this._defaultScrollStrategyFactory = _defaultScrollStrategyFactory;
        /** Strategy factory that will be used to handle scrolling while the notification-panel panel is open. */
        this._scrollStrategyFactory = this._defaultScrollStrategyFactory;
    }
    set notificationPanel(value) {
        this._panelTemplate = value;
    }
    get notificationPanel() {
        return this._panelTemplate;
    }
    open() {
        var _a;
        if (this._overlayRef) {
            return;
        }
        const config = Object.assign(Object.assign({}, DEFAULT_CONFIG), { scrollStrategy: this._scrollStrategyFactory(), triggerButton: (_a = this._triggerButton) !== null && _a !== void 0 ? _a : undefined });
        this._overlayRef = this._nxOverlay.open(this._panelTemplate, this._element, config);
        this._overlayRef
            .afterClosed()
            .pipe(take(1))
            .subscribe(() => this.close());
    }
    close() {
        if (this._overlayRef) {
            this._overlayRef.close();
            this._overlayRef = null;
        }
    }
}
NxNotificationPanelTriggerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNotificationPanelTriggerDirective, deps: [{ token: i1$1.NxOverlayService }, { token: i0.ElementRef }, { token: i1$1.NxTriggerButton, optional: true, self: true }, { token: NX_NOTIFICATION_PANEL_SCROLL_STRATEGY }], target: i0.ɵɵFactoryTarget.Directive });
NxNotificationPanelTriggerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxNotificationPanelTriggerDirective, selector: "[nxNotificationPanelTriggerFor]", inputs: { notificationPanel: ["nxNotificationPanelTriggerFor", "notificationPanel"] }, host: { listeners: { "click": "open()" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNotificationPanelTriggerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[nxNotificationPanelTriggerFor]',
                    host: {
                        '(click)': 'open()',
                    },
                }]
        }], ctorParameters: function () {
        return [{ type: i1$1.NxOverlayService }, { type: i0.ElementRef }, { type: i1$1.NxTriggerButton, decorators: [{
                        type: Optional
                    }, {
                        type: Self
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [NX_NOTIFICATION_PANEL_SCROLL_STRATEGY]
                    }] }];
    }, propDecorators: { notificationPanel: [{
                type: Input,
                args: ['nxNotificationPanelTriggerFor']
            }] } });

class NxNotificationPanelComponent {
    constructor() {
        this._destroyed = new Subject();
    }
    ngAfterContentInit() {
        this._initKeyManager();
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
    _initKeyManager() {
        this._keyManager = new FocusKeyManager(this.items).withVerticalOrientation().withHorizontalOrientation('ltr');
        if (this.items.length > 0) {
            merge(...this.items.map(item => item.focused))
                .pipe(takeUntil(this._destroyed))
                .subscribe(item => {
                this._keyManager.updateActiveItem(item);
            });
        }
    }
    _handleKeydown(event) {
        this._keyManager.onKeydown(event);
    }
}
NxNotificationPanelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNotificationPanelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
NxNotificationPanelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxNotificationPanelComponent, selector: "nx-notification-panel", host: { listeners: { "keydown": "_handleKeydown($event)" }, properties: { "class.nx-notification-panel": "true" } }, queries: [{ propertyName: "items", predicate: NxNotificationPanelItemComponent, descendants: true }], viewQueries: [{ propertyName: "templateRef", first: true, predicate: TemplateRef, descendants: true }], exportAs: ["nxNotificationPanel"], ngImport: i0, template: "<ng-content></ng-content>\n", styles: [":host{padding:16px 24px;display:flex;flex-direction:column;background-color:var(--notification-panel-background-color);max-height:740px;height:100%;width:400px;overflow-y:auto;box-shadow:var(--shadow-large);border-radius:8px}:host:focus{outline:none}::ng-deep nx-notification-header{display:flex;justify-content:space-between;padding:16px 0 8px}::ng-deep nx-notification-header:first-child{padding-top:0}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNotificationPanelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-notification-panel', exportAs: 'nxNotificationPanel', host: {
                        '[class.nx-notification-panel]': 'true',
                        '(keydown)': '_handleKeydown($event)',
                    }, template: "<ng-content></ng-content>\n", styles: [":host{padding:16px 24px;display:flex;flex-direction:column;background-color:var(--notification-panel-background-color);max-height:740px;height:100%;width:400px;overflow-y:auto;box-shadow:var(--shadow-large);border-radius:8px}:host:focus{outline:none}::ng-deep nx-notification-header{display:flex;justify-content:space-between;padding:16px 0 8px}::ng-deep nx-notification-header:first-child{padding-top:0}\n"] }]
        }], propDecorators: { templateRef: [{
                type: ViewChild,
                args: [TemplateRef]
            }], items: [{
                type: ContentChildren,
                args: [NxNotificationPanelItemComponent, { descendants: true }]
            }] } });

class NxNotificationPanelModule {
}
NxNotificationPanelModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNotificationPanelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NxNotificationPanelModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNotificationPanelModule, declarations: [NxNotificationPanelComponent,
        NxNotificationPanelItemComponent,
        NxNotificationPanelTriggerDirective,
        NxNotificationItemActionsDirective,
        NxNotificationItemContentDirective,
        NxNotificationItemMetadataDirective,
        NxNotificationItemHeaderDirective], imports: [NxOverlayModule, RouterModule], exports: [NxNotificationPanelComponent,
        NxNotificationPanelItemComponent,
        NxNotificationPanelTriggerDirective,
        NxNotificationItemActionsDirective,
        NxNotificationItemContentDirective,
        NxNotificationItemMetadataDirective,
        NxNotificationItemHeaderDirective] });
NxNotificationPanelModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNotificationPanelModule, providers: [NX_NOTIFICATION_PANEL_SCROLL_STRATEGY_PROVIDER], imports: [[NxOverlayModule, RouterModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNotificationPanelModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [NxOverlayModule, RouterModule],
                    exports: [
                        NxNotificationPanelComponent,
                        NxNotificationPanelItemComponent,
                        NxNotificationPanelTriggerDirective,
                        NxNotificationItemActionsDirective,
                        NxNotificationItemContentDirective,
                        NxNotificationItemMetadataDirective,
                        NxNotificationItemHeaderDirective,
                    ],
                    declarations: [
                        NxNotificationPanelComponent,
                        NxNotificationPanelItemComponent,
                        NxNotificationPanelTriggerDirective,
                        NxNotificationItemActionsDirective,
                        NxNotificationItemContentDirective,
                        NxNotificationItemMetadataDirective,
                        NxNotificationItemHeaderDirective,
                    ],
                    providers: [NX_NOTIFICATION_PANEL_SCROLL_STRATEGY_PROVIDER],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { NX_NOTIFICATION_PANEL_SCROLL_STRATEGY, NX_NOTIFICATION_PANEL_SCROLL_STRATEGY_PROVIDER, NX_NOTIFICATION_PANEL_SCROLL_STRATEGY_PROVIDER_FACTORY, NxNotificationItemActionsDirective, NxNotificationItemContentDirective, NxNotificationItemHeaderDirective, NxNotificationItemMetadataDirective, NxNotificationPanelComponent, NxNotificationPanelItemComponent, NxNotificationPanelModule, NxNotificationPanelTriggerDirective };
//# sourceMappingURL=aposin-ng-aquila-notification-panel.mjs.map
