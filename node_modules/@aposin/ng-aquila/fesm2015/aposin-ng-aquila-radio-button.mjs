import { coerceBooleanProperty } from '@angular/cdk/coercion';
import * as i0 from '@angular/core';
import { EventEmitter, Component, ChangeDetectionStrategy, Optional, Self, ContentChild, forwardRef, Input, Output, ContentChildren, ViewChild, NgModule } from '@angular/core';
import * as i1 from '@angular/forms';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { NxLabelComponent, NxErrorModule, NxLabelModule } from '@aposin/ng-aquila/base';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i2 from '@aposin/ng-aquila/utils';
import * as i3 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i4 from '@angular/cdk/a11y';
import * as i5 from '@angular/cdk/observers';
import { ObserversModule } from '@angular/cdk/observers';
import { NxIconModule } from '@aposin/ng-aquila/icon';

/** The change event object emitted by the radio group and radio button. */
class NxRadioChange {
    /** The NxRadioComponent that emits the change event. NxRadioChange object can be instantiated with source radio component and a value. */
    constructor(source, value) {
        this.source = source;
        this.value = value;
    }
}
let nextId = 0;
class NxRadioGroupComponent {
    constructor(_cdr, ngControl, _parentForm, _parentFormGroup, _errorStateMatcher) {
        this._cdr = _cdr;
        this.ngControl = ngControl;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this._errorStateMatcher = _errorStateMatcher;
        /** @docs-private */
        this.errorState = false;
        // emits when the internal state changes on properties which are relevant
        // for the radio buttons so that they can mark themself for check
        this._stateChanges = new Subject();
        this._id = `nx-radio-group-${nextId++}`;
        this._disabled = false;
        this._negative = false;
        this._required = false;
        /** An event is dispatched on each group value change. */
        this.groupValueChange = new EventEmitter();
        this._name = `nx-radio-group-${nextId++}`;
        this._value = null;
        // The currently selected radio button; should match _value
        this._selected = null;
        this._onChange = () => { };
        this._onTouched = () => { };
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
    }
    /** Sets the Id of the radio group. */
    set id(value) {
        if (this._id !== value) {
            this._id = value;
            this._cdr.markForCheck();
        }
    }
    get id() {
        return this._id;
    }
    /** Whether every radio button in this group should be disabled. */
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        // inform childs about the change where CD should be triggered
        this._stateChanges.next();
    }
    get disabled() {
        return this._disabled;
    }
    /** Whether the radio group should have negative styling. */
    set negative(value) {
        this._negative = coerceBooleanProperty(value);
        this._cdr.markForCheck();
    }
    get negative() {
        return this._negative;
    }
    /** Sets if at least an option should be selected. */
    set required(value) {
        this._required = coerceBooleanProperty(value);
        this._stateChanges.next();
    }
    get required() {
        return this._required;
    }
    get name() {
        return this._name;
    }
    // this is also the name attribute, which is mandatory in conjunction with ngModel, hence no nx prefix
    /** Sets the name of this radio group, which is mandatory in conjunction with ngModel (Default: null). */
    set name(value) {
        this._name = value;
        this._stateChanges.next();
    }
    get value() {
        return this._value;
    }
    /** Sets the value of the selected radion button in this group (Default: null). */
    set value(newValue) {
        if (this._value !== newValue) {
            // Set this before proceeding to ensure no circular loop occurs with selection.
            this._value = newValue;
            this._updateSelectedRadioFromValue();
            this._checkSelectedRadioButton();
        }
    }
    ngAfterContentInit() {
        this._updateSelectedRadioFromValue();
        this._checkSelectedRadioButton();
    }
    ngDoCheck() {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this.updateErrorState();
        }
    }
    ngOnDestroy() {
        this._stateChanges.complete();
    }
    writeValue(value) {
        this.value = value;
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /** @docs-private this is meant to be called by the radio buttons in this group */
    change(value) {
        this.value = value;
        this._onChange(value);
        this.groupValueChange.emit(new NxRadioChange(this._selected, this._value));
    }
    /** @docs-private this is meant to be called by the radio buttons in this group. */
    touch() {
        if (this._onTouched) {
            this._onTouched();
        }
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    _updateSelectedRadioFromValue() {
        // If the value already matches the selected radio, do nothing.
        const isAlreadySelected = this._selected != null && this._selected.value === this._value;
        if (this._radios != null && !isAlreadySelected) {
            this._selected = null;
            this._radios.forEach(radio => {
                radio.checked = this.value === radio.value;
                if (radio.checked) {
                    this._selected = radio;
                }
            });
        }
    }
    _checkSelectedRadioButton() {
        if (this._selected && !this._selected.checked) {
            this._selected.checked = true;
        }
    }
    /** @docs-private */
    updateErrorState() {
        const oldState = this.errorState;
        const parent = this._parentFormGroup || this._parentForm;
        const control = this.ngControl ? this.ngControl.control : null;
        const newState = this._errorStateMatcher.isErrorState(control, parent);
        if (newState !== oldState) {
            this.errorState = newState;
            this._cdr.markForCheck();
        }
    }
}
NxRadioGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxRadioGroupComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.NgControl, optional: true, self: true }, { token: i1.NgForm, optional: true }, { token: i1.FormGroupDirective, optional: true }, { token: i2.ErrorStateMatcher }], target: i0.ɵɵFactoryTarget.Component });
NxRadioGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxRadioGroupComponent, selector: "nx-radio-group", inputs: { id: "id", disabled: ["nxDisabled", "disabled"], negative: "negative", required: "required", name: "name", value: ["nxValue", "value"] }, outputs: { groupValueChange: "nxGroupValueChange" }, host: { attributes: { "role": "radiogroup" }, properties: { "attr.id": "id", "attr.required": "required", "class.nx-radio-group--negative": "negative", "attr.aria-labelledby": "this._label?.id  || null" } }, queries: [{ propertyName: "_label", first: true, predicate: i0.forwardRef(function () { return NxLabelComponent; }), descendants: true }, { propertyName: "_radios", predicate: i0.forwardRef(function () { return NxRadioComponent; }), descendants: true }], ngImport: i0, template: "<ng-content select=\"nx-label\"></ng-content>\n<ng-content></ng-content>\n<ng-container *ngIf=\"errorState\">\n    <ng-content select=\"nx-error\"></ng-content>\n</ng-container>\n", styles: [":host ::ng-deep nx-error{margin-bottom:8px}:host ::ng-deep nx-label{margin-bottom:16px;display:block}\n"], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxRadioGroupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-radio-group', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        role: 'radiogroup',
                        '[attr.id]': 'id',
                        '[attr.required]': 'required',
                        '[class.nx-radio-group--negative]': 'negative',
                        '[attr.aria-labelledby]': 'this._label?.id  || null',
                    }, template: "<ng-content select=\"nx-label\"></ng-content>\n<ng-content></ng-content>\n<ng-container *ngIf=\"errorState\">\n    <ng-content select=\"nx-error\"></ng-content>\n</ng-container>\n", styles: [":host ::ng-deep nx-error{margin-bottom:8px}:host ::ng-deep nx-label{margin-bottom:16px;display:block}\n"] }]
        }], ctorParameters: function () {
        return [{ type: i0.ChangeDetectorRef }, { type: i1.NgControl, decorators: [{
                        type: Optional
                    }, {
                        type: Self
                    }] }, { type: i1.NgForm, decorators: [{
                        type: Optional
                    }] }, { type: i1.FormGroupDirective, decorators: [{
                        type: Optional
                    }] }, { type: i2.ErrorStateMatcher }];
    }, propDecorators: { _label: [{
                type: ContentChild,
                args: [forwardRef(() => NxLabelComponent)]
            }], id: [{
                type: Input,
                args: ['id']
            }], disabled: [{
                type: Input,
                args: ['nxDisabled']
            }], negative: [{
                type: Input
            }], required: [{
                type: Input
            }], groupValueChange: [{
                type: Output,
                args: ['nxGroupValueChange']
            }], _radios: [{
                type: ContentChildren,
                args: [forwardRef(() => NxRadioComponent), { descendants: true }]
            }], name: [{
                type: Input
            }], value: [{
                type: Input,
                args: ['nxValue']
            }] } });
class NxRadioComponent {
    constructor(radioGroup, _cdr, _focusMonitor) {
        this.radioGroup = radioGroup;
        this._cdr = _cdr;
        this._focusMonitor = _focusMonitor;
        this._id = `nx-radio-${nextId++}`;
        this._name = null;
        this._labelSize = 'big';
        this._negative = false;
        /** An event is dispatched on each value change. */
        this.valueChange = new EventEmitter();
        this._value = null;
        this._checked = false;
        this._disabled = false;
        this._required = false;
        this._destroyed = new Subject();
        this.onChangeCallback = () => { };
        this.onTouchedCallback = () => { };
    }
    /** Sets the id of the radio component. */
    set id(value) {
        if (this._id !== value) {
            this._id = value;
            this._cdr.markForCheck();
        }
    }
    get id() {
        return this._id;
    }
    /** @docs-private */
    get inputId() {
        return `${this.id}-input`;
    }
    /** @docs-private */
    get labelId() {
        return `${this.id}-label`;
    }
    // this is also the name attribute, which is mandatory in conjunction with ngModel, hence no nx prefix
    /** Sets the name of this radio component, which is mandatory in conjunction with ngModel (Default: null). */
    set name(value) {
        if (this._name !== value) {
            this._name = value;
            this._cdr.markForCheck();
        }
    }
    get name() {
        var _a;
        return ((_a = this.radioGroup) === null || _a === void 0 ? void 0 : _a.name) || this._name;
    }
    /** Sets the label size of the radio button.
     * The default value is `big`.
     */
    set labelSize(value) {
        if (this._labelSize !== value) {
            this._labelSize = value;
            this._cdr.markForCheck();
        }
    }
    get labelSize() {
        return this._labelSize;
    }
    /**
     * Whether the negative set of styles should be used.
     *
     * If the radio button is placed in a radio group, the negative value
     * is overwritten by the group's negative value.
     */
    set negative(value) {
        const newValue = coerceBooleanProperty(value);
        if (this._negative !== newValue) {
            this._negative = newValue;
            this._cdr.markForCheck();
        }
    }
    get negative() {
        return this.radioGroup ? this.radioGroup.negative : this._negative;
    }
    /** @docs-private */
    get labelHasContent() {
        return !!this._radioLabelWrapper.nativeElement.innerHTML.trim();
    }
    /** Sets the value of the form control element (Default: null). */
    set value(value) {
        if (value !== this._value) {
            this._value = value;
            this.onChangeCallback(value);
        }
    }
    get value() {
        return this._value;
    }
    /** @docs-private */
    get checked() {
        return this._checked;
    }
    /** Whether the radio component is selected. */
    set checked(value) {
        if (this._checked !== value) {
            this._checked = value;
            this._cdr.markForCheck();
        }
    }
    /** @docs-private */
    get disabled() {
        var _a;
        return this._disabled || !!((_a = this.radioGroup) === null || _a === void 0 ? void 0 : _a.disabled);
    }
    /** Whether the radio button should be disabled or not. */
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        this._cdr.markForCheck();
    }
    /** @docs-private */
    get required() {
        var _a;
        return this._required || !!((_a = this.radioGroup) === null || _a === void 0 ? void 0 : _a.required);
    }
    /** Sets if at least a radio button should be selected. */
    set required(value) {
        this._required = value;
        // needed when the outer component is set to onPush because it is a native property
        // on the host element
        this._cdr.markForCheck();
    }
    ngOnInit() {
        if (this.radioGroup) {
            this.name = this.radioGroup.name;
            // when relevant properties of the parent like name and disabled change
            // we need to let change detection know that the template needs an update
            this.radioGroup._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {
                this._cdr.markForCheck();
            });
            if (this.radioGroup.value === this._value) {
                this._checked = true;
            }
        }
    }
    ngAfterViewInit() {
        this._focusMonitor.monitor(this._nativeInput);
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this._focusMonitor.stopMonitoring(this._nativeInput);
    }
    /** @docs-private
     * Callback for when the content of the label has changed.
     */
    labelContentChanged() {
        this._cdr.detectChanges();
    }
    writeValue(value) {
        if (value === this._value) {
            this._checked = true;
            this._cdr.markForCheck();
        }
    }
    registerOnChange(onChange) {
        this.onChangeCallback = onChange;
    }
    registerOnTouched(onTouched) {
        this.onTouchedCallback = onTouched;
    }
    /** Focuses the radio button element. */
    focus(focusOrigin) {
        this._focusMonitor.focusVia(this._nativeInput, focusOrigin);
    }
    /** @docs-private */
    touch() {
        this.onTouchedCallback();
        if (this.radioGroup) {
            this.radioGroup.touch();
        }
    }
    _onInputChange(event) {
        event.stopPropagation();
        this._checked = true;
        this.valueChange.emit(new NxRadioChange(this, this._value));
        this.onChangeCallback(this.value);
        if (this.radioGroup && this.value !== this.radioGroup.value) {
            this.radioGroup.change(this.value);
        }
    }
    _onInputClick(event) {
        // make sure click event propagation on the visually hidden input
        // are stopped to prevent multiple events bubbling up.
        event.stopPropagation();
    }
    /** @docs-private */
    _controlInvalid() {
        var _a, _b;
        const form = this.radioGroup && (this.radioGroup._parentFormGroup || this.radioGroup._parentForm);
        this._cdr.markForCheck();
        return !!(((_b = (_a = this.radioGroup) === null || _a === void 0 ? void 0 : _a.ngControl) === null || _b === void 0 ? void 0 : _b.invalid) && (this.radioGroup.ngControl.touched || (form === null || form === void 0 ? void 0 : form.submitted)));
    }
}
NxRadioComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxRadioComponent, deps: [{ token: NxRadioGroupComponent, optional: true }, { token: i0.ChangeDetectorRef }, { token: i4.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });
NxRadioComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxRadioComponent, selector: "nx-radio", inputs: { id: "id", name: "name", labelSize: "labelSize", negative: "negative", value: ["nxValue", "value"], checked: ["nxChecked", "checked"], disabled: ["nxDisabled", "disabled"], required: "required" }, outputs: { valueChange: "nxValueChange" }, host: { properties: { "attr.required": "required", "class.nx-radio-button--small-label": "labelSize === \"small\"", "class.nx-radio-button--big-label": "labelSize === \"big\"", "class.nx-radio--negative": "negative", "class.has-error": "_controlInvalid() || null", "attr.aria-invalid": "_controlInvalid() || null" } }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => NxRadioComponent),
            multi: true,
        },
    ], viewQueries: [{ propertyName: "_radioLabelWrapper", first: true, predicate: ["radioLabelWrapper"], descendants: true, static: true }, { propertyName: "_nativeInput", first: true, predicate: ["input"], descendants: true }], ngImport: i0, template: "<input\n    #input\n    type=\"radio\"\n    [id]=\"inputId\"\n    [attr.name]=\"name\"\n    [disabled]=\"disabled\"\n    (blur)=\"touch()\"\n    (change)=\"_onInputChange($event)\"\n    (click)=\"_onInputClick($event)\"\n    [checked]=\"checked\"\n    [attr.aria-labelledby]=\"labelId\"\n    [attr.aria-invalid]=\"_controlInvalid() || null\"\n    class=\"nx-radio__input\"\n/>\n<label [id]=\"labelId\" [attr.for]=\"inputId\" class=\"nx-radio__label\" [class.has-label]=\"labelHasContent\">\n    <div class=\"nx-radio__circle\">\n        <div *ngIf=\"checked\" class=\"nx-radio__dot\"></div>\n    </div>\n    <span class=\"nx-radio__label--text\" #radioLabelWrapper (cdkObserveContent)=\"labelContentChanged()\">\n        <ng-content></ng-content>\n    </span>\n</label>\n", styles: [":host{display:block;position:relative}.nx-radio__input{opacity:0;position:absolute}:host(.nx-radio-button--small-label) .nx-radio__label{font-size:var(--radio-button-small-label-font-size);line-height:var(--radio-button-small-label-line-height);font-weight:var(--radio-button-small-label-font-weight);letter-spacing:var(--radio-button-small-label-letter-spacing)}:host(.nx-radio-button--small-label) .nx-radio__label.has-label .nx-radio__circle{margin-top:var(--radio-button-small-circle-margin-top)}:host(.nx-radio-button--small-label) .nx-radio__label--text:not(:empty){margin-left:var(--radio-button-small-label-margin-left);margin-top:var(--radio-button-small-label-margin-top)}[dir=rtl] :host(.nx-radio-button--small-label) .nx-radio__label--text:not(:empty){margin-right:var(--radio-button-small-label-margin-left);margin-left:0;margin-left:initial}:host(.nx-radio-button--big-label) .nx-radio__label{font-size:var(--radio-button-large-label-font-size);line-height:var(--radio-button-large-label-line-height);font-weight:var(--radio-button-large-label-font-weight);letter-spacing:var(--radio-button-large-label-letter-spacing)}:host(.nx-radio-button--big-label) .nx-radio__label.has-label .nx-radio__circle{margin-top:var(--radio-button-large-circle-margin-top)}:host(.nx-radio-button--big-label) .nx-radio__label--text:not(:empty){margin-left:var(--radio-button-large-label-margin-left);margin-top:var(--radio-button-large-label-margin-top)}[dir=rtl] :host(.nx-radio-button--big-label) .nx-radio__label--text:not(:empty){margin-right:var(--radio-button-large-label-margin-left);margin-left:0;margin-left:initial}:host.nx-radio--negative .nx-radio__label--text{color:var(--negative)}:host.nx-radio--negative .nx-radio__circle{border-color:var(--negative)}:host.nx-radio--negative .nx-radio__input:checked+.nx-radio__label .nx-radio__circle{border-color:var(--negative);background-color:transparent}:host.nx-radio--negative .nx-radio__input:checked+.nx-radio__label .nx-radio__dot{background:var(--negative)}:host.nx-radio--negative .nx-radio__input:disabled+.nx-radio__label{opacity:.4}.nx-radio__label{color:var(--radio-button-label-color);cursor:pointer;display:flex;position:relative}.nx-radio__circle{border-width:2px;border-style:solid;border-color:var(--radio-button-circle-color);border-radius:50%;width:24px;min-width:24px;height:24px;position:relative;display:flex;justify-content:center;align-items:center}.nx-radio__dot{width:var(--radio-button-dot-size);height:var(--radio-button-dot-size);background-color:var(--radio-button-dot-background-color);border-radius:50%;transition:background-color .2s ease}.nx-radio__input:checked+.nx-radio__label .nx-radio__circle{border-color:var(--radio-button-selected-circle-color);background-color:var(--radio-button-selected-background-color)}.nx-radio__input:checked+.nx-radio__label .nx-radio__dot{background-color:var(--radio-button-selected-dot-color)}.nx-radio__input:disabled+.nx-radio__label{cursor:not-allowed;color:var(--radio-button-disabled-text-color)}.nx-radio__input:disabled+.nx-radio__label .nx-radio__circle{border-color:var(--radio-button-disabled-border-color)}.nx-radio__input:checked:disabled+.nx-radio__label .nx-radio__circle{background-color:var(--radio-button-disabled-selected-background-color)}.nx-radio__input:checked:disabled+.nx-radio__label .nx-radio__dot{background-color:var(--radio-button-disabled-selected-dot-color)}:host.has-error .nx-radio__input+.nx-radio__label .nx-radio__circle{border-color:var(--danger)}:host.has-error .nx-radio__input+.nx-radio__label .nx-radio__dot{background-color:var(--danger)}.nx-radio__input.cdk-keyboard-focused+.nx-radio__label .nx-radio__circle{box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-radio__input.cdk-keyboard-focused+.nx-radio__label .nx-radio__circle{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}:host:not(.nx-radio--negative):not(.has-error) .nx-radio__input:not(:disabled)+.nx-radio__label:hover .nx-radio__circle{border-color:var(--radio-button-hover-circle-color)}:host:not(.nx-radio--negative):not(.has-error) .nx-radio__input:not(:disabled):checked+.nx-radio__label:hover .nx-radio__dot{background-color:var(--radio-button-hover-dot-color)}:host:not(.nx-radio--negative):not(.has-error) .nx-radio__input:not(:disabled)+.nx-radio__label:active .nx-radio__circle{border-color:var(--radio-button-hover-circle-color)}:host:not(.nx-radio--negative):not(.has-error) .nx-radio__input:not(:disabled):checked+.nx-radio__label:active .nx-radio__dot{background-color:var(--radio-button-hover-dot-color)}@media screen and (-ms-high-contrast: active){:host .nx-radio__label{color:buttonText!important}:host .nx-radio__circle{forced-color-adjust:none;border-color:buttonText!important;background-color:buttonFace!important}:host .nx-radio__input:checked+.nx-radio__label .nx-radio__circle{border-color:highlight!important}:host .nx-radio__input:checked+.nx-radio__label .nx-radio__dot{background-color:highlight!important}:host .nx-radio__input:disabled+.nx-radio__label{color:GrayText!important;opacity:1}:host .nx-radio__input:disabled+.nx-radio__label .nx-radio__circle{border-color:GrayText!important}:host .nx-radio__input:checked:disabled+.nx-radio__label .nx-radio__dot{background-color:GrayText!important}}\n"], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.CdkObserveContent, selector: "[cdkObserveContent]", inputs: ["cdkObserveContentDisabled", "debounce"], outputs: ["cdkObserveContent"], exportAs: ["cdkObserveContent"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxRadioComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-radio', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => NxRadioComponent),
                            multi: true,
                        },
                    ], host: {
                        '[attr.required]': 'required',
                        '[class.nx-radio-button--small-label]': 'labelSize === "small"',
                        '[class.nx-radio-button--big-label]': 'labelSize === "big"',
                        '[class.nx-radio--negative]': 'negative',
                        '[class.has-error]': '_controlInvalid() || null',
                        '[attr.aria-invalid]': '_controlInvalid() || null',
                    }, template: "<input\n    #input\n    type=\"radio\"\n    [id]=\"inputId\"\n    [attr.name]=\"name\"\n    [disabled]=\"disabled\"\n    (blur)=\"touch()\"\n    (change)=\"_onInputChange($event)\"\n    (click)=\"_onInputClick($event)\"\n    [checked]=\"checked\"\n    [attr.aria-labelledby]=\"labelId\"\n    [attr.aria-invalid]=\"_controlInvalid() || null\"\n    class=\"nx-radio__input\"\n/>\n<label [id]=\"labelId\" [attr.for]=\"inputId\" class=\"nx-radio__label\" [class.has-label]=\"labelHasContent\">\n    <div class=\"nx-radio__circle\">\n        <div *ngIf=\"checked\" class=\"nx-radio__dot\"></div>\n    </div>\n    <span class=\"nx-radio__label--text\" #radioLabelWrapper (cdkObserveContent)=\"labelContentChanged()\">\n        <ng-content></ng-content>\n    </span>\n</label>\n", styles: [":host{display:block;position:relative}.nx-radio__input{opacity:0;position:absolute}:host(.nx-radio-button--small-label) .nx-radio__label{font-size:var(--radio-button-small-label-font-size);line-height:var(--radio-button-small-label-line-height);font-weight:var(--radio-button-small-label-font-weight);letter-spacing:var(--radio-button-small-label-letter-spacing)}:host(.nx-radio-button--small-label) .nx-radio__label.has-label .nx-radio__circle{margin-top:var(--radio-button-small-circle-margin-top)}:host(.nx-radio-button--small-label) .nx-radio__label--text:not(:empty){margin-left:var(--radio-button-small-label-margin-left);margin-top:var(--radio-button-small-label-margin-top)}[dir=rtl] :host(.nx-radio-button--small-label) .nx-radio__label--text:not(:empty){margin-right:var(--radio-button-small-label-margin-left);margin-left:0;margin-left:initial}:host(.nx-radio-button--big-label) .nx-radio__label{font-size:var(--radio-button-large-label-font-size);line-height:var(--radio-button-large-label-line-height);font-weight:var(--radio-button-large-label-font-weight);letter-spacing:var(--radio-button-large-label-letter-spacing)}:host(.nx-radio-button--big-label) .nx-radio__label.has-label .nx-radio__circle{margin-top:var(--radio-button-large-circle-margin-top)}:host(.nx-radio-button--big-label) .nx-radio__label--text:not(:empty){margin-left:var(--radio-button-large-label-margin-left);margin-top:var(--radio-button-large-label-margin-top)}[dir=rtl] :host(.nx-radio-button--big-label) .nx-radio__label--text:not(:empty){margin-right:var(--radio-button-large-label-margin-left);margin-left:0;margin-left:initial}:host.nx-radio--negative .nx-radio__label--text{color:var(--negative)}:host.nx-radio--negative .nx-radio__circle{border-color:var(--negative)}:host.nx-radio--negative .nx-radio__input:checked+.nx-radio__label .nx-radio__circle{border-color:var(--negative);background-color:transparent}:host.nx-radio--negative .nx-radio__input:checked+.nx-radio__label .nx-radio__dot{background:var(--negative)}:host.nx-radio--negative .nx-radio__input:disabled+.nx-radio__label{opacity:.4}.nx-radio__label{color:var(--radio-button-label-color);cursor:pointer;display:flex;position:relative}.nx-radio__circle{border-width:2px;border-style:solid;border-color:var(--radio-button-circle-color);border-radius:50%;width:24px;min-width:24px;height:24px;position:relative;display:flex;justify-content:center;align-items:center}.nx-radio__dot{width:var(--radio-button-dot-size);height:var(--radio-button-dot-size);background-color:var(--radio-button-dot-background-color);border-radius:50%;transition:background-color .2s ease}.nx-radio__input:checked+.nx-radio__label .nx-radio__circle{border-color:var(--radio-button-selected-circle-color);background-color:var(--radio-button-selected-background-color)}.nx-radio__input:checked+.nx-radio__label .nx-radio__dot{background-color:var(--radio-button-selected-dot-color)}.nx-radio__input:disabled+.nx-radio__label{cursor:not-allowed;color:var(--radio-button-disabled-text-color)}.nx-radio__input:disabled+.nx-radio__label .nx-radio__circle{border-color:var(--radio-button-disabled-border-color)}.nx-radio__input:checked:disabled+.nx-radio__label .nx-radio__circle{background-color:var(--radio-button-disabled-selected-background-color)}.nx-radio__input:checked:disabled+.nx-radio__label .nx-radio__dot{background-color:var(--radio-button-disabled-selected-dot-color)}:host.has-error .nx-radio__input+.nx-radio__label .nx-radio__circle{border-color:var(--danger)}:host.has-error .nx-radio__input+.nx-radio__label .nx-radio__dot{background-color:var(--danger)}.nx-radio__input.cdk-keyboard-focused+.nx-radio__label .nx-radio__circle{box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-radio__input.cdk-keyboard-focused+.nx-radio__label .nx-radio__circle{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}:host:not(.nx-radio--negative):not(.has-error) .nx-radio__input:not(:disabled)+.nx-radio__label:hover .nx-radio__circle{border-color:var(--radio-button-hover-circle-color)}:host:not(.nx-radio--negative):not(.has-error) .nx-radio__input:not(:disabled):checked+.nx-radio__label:hover .nx-radio__dot{background-color:var(--radio-button-hover-dot-color)}:host:not(.nx-radio--negative):not(.has-error) .nx-radio__input:not(:disabled)+.nx-radio__label:active .nx-radio__circle{border-color:var(--radio-button-hover-circle-color)}:host:not(.nx-radio--negative):not(.has-error) .nx-radio__input:not(:disabled):checked+.nx-radio__label:active .nx-radio__dot{background-color:var(--radio-button-hover-dot-color)}@media screen and (-ms-high-contrast: active){:host .nx-radio__label{color:buttonText!important}:host .nx-radio__circle{forced-color-adjust:none;border-color:buttonText!important;background-color:buttonFace!important}:host .nx-radio__input:checked+.nx-radio__label .nx-radio__circle{border-color:highlight!important}:host .nx-radio__input:checked+.nx-radio__label .nx-radio__dot{background-color:highlight!important}:host .nx-radio__input:disabled+.nx-radio__label{color:GrayText!important;opacity:1}:host .nx-radio__input:disabled+.nx-radio__label .nx-radio__circle{border-color:GrayText!important}:host .nx-radio__input:checked:disabled+.nx-radio__label .nx-radio__dot{background-color:GrayText!important}}\n"] }]
        }], ctorParameters: function () {
        return [{ type: NxRadioGroupComponent, decorators: [{
                        type: Optional
                    }] }, { type: i0.ChangeDetectorRef }, { type: i4.FocusMonitor }];
    }, propDecorators: { _radioLabelWrapper: [{
                type: ViewChild,
                args: ['radioLabelWrapper', { static: true }]
            }], _nativeInput: [{
                type: ViewChild,
                args: ['input']
            }], id: [{
                type: Input,
                args: ['id']
            }], name: [{
                type: Input,
                args: ['name']
            }], labelSize: [{
                type: Input
            }], negative: [{
                type: Input
            }], valueChange: [{
                type: Output,
                args: ['nxValueChange']
            }], value: [{
                type: Input,
                args: ['nxValue']
            }], checked: [{
                type: Input,
                args: ['nxChecked']
            }], disabled: [{
                type: Input,
                args: ['nxDisabled']
            }], required: [{
                type: Input
            }] } });

class NxRadioModule {
}
NxRadioModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxRadioModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NxRadioModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxRadioModule, declarations: [NxRadioComponent, NxRadioGroupComponent], imports: [CommonModule, NxIconModule, ObserversModule], exports: [NxRadioComponent, NxRadioGroupComponent, NxErrorModule, NxLabelModule] });
NxRadioModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxRadioModule, imports: [[CommonModule, NxIconModule, ObserversModule], NxErrorModule, NxLabelModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxRadioModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NxRadioComponent, NxRadioGroupComponent],
                    exports: [NxRadioComponent, NxRadioGroupComponent, NxErrorModule, NxLabelModule],
                    imports: [CommonModule, NxIconModule, ObserversModule],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { NxRadioChange, NxRadioComponent, NxRadioGroupComponent, NxRadioModule };
//# sourceMappingURL=aposin-ng-aquila-radio-button.mjs.map
