{"version":3,"file":"aposin-ng-aquila-formfield.mjs","sources":["../../../projects/ng-aquila/src/formfield/appendix.directive.ts","../../../projects/ng-aquila/src/formfield/error.directive.ts","../../../projects/ng-aquila/src/formfield/formfield-control.ts","../../../projects/ng-aquila/src/formfield/hint.directive.ts","../../../projects/ng-aquila/src/formfield/label.directive.ts","../../../projects/ng-aquila/src/formfield/note.directive.ts","../../../projects/ng-aquila/src/formfield/prefix.directive.ts","../../../projects/ng-aquila/src/formfield/suffix.directive.ts","../../../projects/ng-aquila/src/formfield/formfield.component.ts","../../../projects/ng-aquila/src/formfield/formfield.component.html","../../../projects/ng-aquila/src/formfield/formfield.module.ts","../../../projects/ng-aquila/src/formfield/aposin-ng-aquila-formfield.ts"],"sourcesContent":["import { Directive, Input } from '@angular/core';\n\nlet uniqueId = 0;\n\n// This Directive solely purpose is to mark given ng-content and project it into the required destination.\n@Directive({\n    selector: '[nxFormfieldAppendix]',\n    host: {\n        '[attr.id]': 'id',\n    },\n})\nexport class NxFormfieldAppendixDirective {\n    /** Sets the id of the formfield appendix. */\n    @Input() id = `nx-formfield-appendix-${uniqueId++}`;\n}\n","import { Directive, Input } from '@angular/core';\n\nlet uniqueId = 0;\n\n@Directive({\n    selector: '[nxFormfieldError], [nxError]',\n    host: {\n        role: 'alert',\n        '[attr.id]': 'id',\n    },\n})\nexport class NxFormfieldErrorDirective {\n    // create a unique id to be used by aria-described-by\n    /** Sets the id of the formfield error. */\n    @Input() id = `nx-formfield-error-${uniqueId++}`;\n}\n","import { Directive, ElementRef } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n/** @docs-private */\n@Directive()\nexport abstract class NxFormfieldControl<T> {\n    value!: T | null;\n\n    // Allow the control to notify the parent formfield about internal state changes\n    readonly stateChanges!: Observable<void>;\n\n    readonly empty!: boolean;\n\n    readonly id!: string;\n\n    readonly ngControl!: NgControl | null;\n\n    readonly focused!: boolean;\n\n    readonly required!: boolean;\n\n    readonly disabled!: boolean;\n\n    readonly readonly!: boolean;\n\n    readonly shouldLabelFloat?: boolean;\n\n    readonly errorState!: boolean;\n\n    /** The placeholder for this control. */\n    readonly placeholder!: string;\n\n    /**\n     * An optional name for the control type that can be used to distinguish `nx-formfield` elements\n     * based on their control type. The form field will add a class,\n     * `nx-formfield--type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n\n    abstract setDescribedByIds(ids: string[]): void;\n\n    abstract setAriaLabel?(value: string): void;\n\n    abstract get elementRef(): ElementRef;\n}\n","import { Directive, Input } from '@angular/core';\n\nlet uniqueId = 0;\n\n// This Directive solely purpose is to mark given ng-content and project it into the required destination.\n@Directive({\n    selector: '[nxFormfieldHint]',\n    host: {\n        '[attr.id]': 'id',\n        '[class.nx-formfield-hint]': 'true',\n    },\n})\nexport class NxFormfieldHintDirective {\n    /** Sets the id of the formfield hint. */\n    @Input() id = `nx-formfield-hint-${uniqueId++}`;\n}\n","import { Directive, ElementRef } from '@angular/core';\n\n/** A directive for passing more complex custom label content. */\n@Directive({\n    selector: 'nx-formfield-label',\n})\nexport class NxFormfieldLabelDirective {\n    constructor(readonly el: ElementRef) {}\n}\n","import { Directive, Input } from '@angular/core';\n\nlet uniqueId = 0;\n\n// This Directive solely purpose is to mark given ng-content and project it into the required destination.\n@Directive({\n    selector: '[nxFormfieldNote]',\n    host: {\n        '[attr.id]': 'id',\n    },\n})\nexport class NxFormfieldNoteDirective {\n    /** Sets the id of the formfield note. */\n    @Input() id = `nx-formfield-note-${uniqueId++}`;\n}\n","import { Directive } from '@angular/core';\n\n// This Directive solely purpose is to mark given ng-content and project it into the required destination.\n@Directive({\n    selector: '[nxFormfieldPrefix]',\n})\nexport class NxFormfieldPrefixDirective {}\n","import { Directive } from '@angular/core';\n\n// This Directive solely purpose is to mark given ng-content and project it into the required destination.\n@Directive({\n    selector: '[nxFormfieldSuffix]',\n})\nexport class NxFormfieldSuffixDirective {}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy,\n    Optional,\n    QueryList,\n    Renderer2,\n    ViewChild,\n    ViewEncapsulation,\n} from '@angular/core';\nimport { getClassNameList } from '@aposin/ng-aquila/utils';\nimport { merge, Subject } from 'rxjs';\nimport { startWith, takeUntil } from 'rxjs/operators';\n\nimport { NxFormfieldAppendixDirective } from './appendix.directive';\nimport { NxFormfieldErrorDirective } from './error.directive';\nimport { NxFormfieldControl } from './formfield-control';\nimport { NxFormfieldHintDirective } from './hint.directive';\nimport { NxFormfieldLabelDirective } from './label.directive';\nimport { NxFormfieldNoteDirective } from './note.directive';\nimport { NxFormfieldPrefixDirective } from './prefix.directive';\nimport { NxFormfieldSuffixDirective } from './suffix.directive';\n\nconst NX_STYLES = {\n    negative: 'nx-formfield--negative',\n};\n\nlet nextUniqueId = 0;\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `FORMFIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface FormfieldDefaultOptions {\n    /** Sets the default appearance. (optional) */\n    appearance?: AppearanceType;\n\n    /** Sets the default float label type. (optional) */\n    nxFloatLabel?: FloatLabelType;\n}\n\nexport const FORMFIELD_DEFAULT_OPTIONS = new InjectionToken<FormfieldDefaultOptions>('FORMFIELD_DEFAULT_OPTIONS');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'auto';\n\n/** Type for the appearance of the formfield. */\nexport type AppearanceType = 'outline' | 'auto';\n\n@Component({\n    selector: 'nx-formfield',\n    templateUrl: 'formfield.component.html',\n    styleUrls: ['formfield.scss', '../input/input.scss'],\n    host: {\n        '[class.nx-formfield]': 'true',\n        '[class.is-disabled]': 'this._control.disabled',\n        '[class.is-readonly]': 'this._control.readonly',\n        '[class.is-filled]': 'this._control.empty === false',\n        '[class.is-focused]': 'this._control.focused',\n        '[class.is-floating]': 'this.shouldLabelFloat',\n        '[class.has-error]': 'this._control.errorState',\n        '[class.has-outline]': 'this.appearance === \"outline\"',\n        '[class.has-hint]': 'this._hintChildren?.length > 0',\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n})\nexport class NxFormfieldComponent implements AfterContentInit, AfterContentChecked, OnDestroy {\n    private _styles = '';\n\n    /** Html id of the formfield label */\n    readonly labelId: string = `nx-formfield-label-${nextUniqueId++}`;\n\n    @ContentChild(NxFormfieldControl) _control!: NxFormfieldControl<any>;\n\n    /**\n     * Sets the label which will act as a floating label.\n     * In addition, the component uses input and label to properly support accessibility.\n     */\n    @Input('nxLabel') label?: string | null;\n\n    @ContentChild(NxFormfieldLabelDirective) _labelChild!: NxFormfieldLabelDirective;\n    @ContentChildren(NxFormfieldHintDirective) _hintChildren!: QueryList<NxFormfieldHintDirective>;\n    @ContentChildren(NxFormfieldNoteDirective) _noteChildren!: QueryList<NxFormfieldNoteDirective>;\n    @ContentChildren(NxFormfieldErrorDirective) _errorChildren!: QueryList<NxFormfieldErrorDirective>;\n    @ContentChildren(NxFormfieldSuffixDirective) _suffixChildren!: QueryList<NxFormfieldSuffixDirective>;\n    @ContentChildren(NxFormfieldPrefixDirective) _prefixChildren!: QueryList<NxFormfieldPrefixDirective>;\n    @ContentChildren(NxFormfieldAppendixDirective) _appendixChildren!: QueryList<NxFormfieldAppendixDirective>;\n\n    @ViewChild('connectionContainer', { static: true }) _connectionContainerRef!: ElementRef;\n\n    /**\n     * Whether the label should float once the input is focused or filled (auto, default)\n     * or force it to always float with a value of always to simulate a more static form.\n     */\n    @Input('nxFloatLabel')\n    get floatLabel(): FloatLabelType {\n        return this._floatLabel || this._defaultOptions?.nxFloatLabel || 'auto';\n    }\n    set floatLabel(value: FloatLabelType) {\n        if (value !== this._floatLabel) {\n            this._floatLabel = value || 'auto';\n            this._cdr.markForCheck();\n        }\n    }\n    private _floatLabel!: FloatLabelType;\n\n    /**\n     * Sets the styling of the formfield.\n     * If 'negative', a negative set of stylings is used.\n     */\n    @Input('nxStyle')\n    set styles(value: string) {\n        if (this._styles === value) {\n            return;\n        }\n\n        const classNames = getClassNameList(value, NX_STYLES);\n\n        classNames.forEach(classStr => {\n            this.renderer.addClass(this.elementRef.nativeElement, classStr);\n        });\n\n        this._styles = value;\n    }\n\n    private _appearance!: AppearanceType;\n\n    /**\n     * **Expert option**\n     *\n     * Sets the appearance of the formfield.\n     */\n    @Input()\n    set appearance(value: AppearanceType) {\n        if (this._appearance !== value) {\n            this._appearance = value;\n            this._cdr.markForCheck();\n        }\n    }\n    get appearance(): AppearanceType {\n        return this._appearance || this._defaultOptions?.appearance || 'auto';\n    }\n\n    get _shouldAlwaysFloat(): boolean {\n        return this.floatLabel === 'always';\n    }\n\n    /** @docs-private */\n    get shouldLabelFloat(): boolean {\n        return this._control.shouldLabelFloat || this._shouldAlwaysFloat;\n    }\n\n    /** @docs-private */\n    get control() {\n        return this._control;\n    }\n\n    private readonly _destroyed = new Subject<void>();\n\n    constructor(\n        /** @docs-private */ public elementRef: ElementRef,\n        private renderer: Renderer2,\n        private _cdr: ChangeDetectorRef,\n        @Optional() @Inject(FORMFIELD_DEFAULT_OPTIONS) private _defaultOptions: FormfieldDefaultOptions | null,\n    ) {}\n\n    ngAfterContentInit() {\n        let subscription;\n\n        this._validateControlChild();\n\n        if (this._control.controlType) {\n            this.elementRef.nativeElement.classList.add(`nx-formfield--type-${this._control.controlType}`);\n        }\n\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        this._control.stateChanges.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n            Promise.resolve().then(() => {\n                this._syncDescribedByIds();\n                this._cdr.markForCheck();\n            });\n        });\n\n        merge(\n            this._hintChildren.changes,\n            this._appendixChildren.changes,\n            this._prefixChildren.changes,\n            this._suffixChildren.changes,\n            this._noteChildren.changes,\n        )\n            .pipe(startWith(null), takeUntil(this._destroyed))\n            .subscribe(() => {\n                this._cdr.markForCheck();\n            });\n\n        // Update the aria-described by when the number of errors changes.\n        this._errorChildren.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n            Promise.resolve().then(() => {\n                this._syncDescribedByIds();\n                this._cdr.markForCheck();\n            });\n        });\n    }\n\n    ngAfterContentChecked() {\n        this._validateControlChild();\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n\n    /** @docs-private */\n    getDisplayedMessage(): 'note' | 'error' | '' {\n        if (this._control.errorState && this._errorChildren && this._errorChildren.length > 0) {\n            return 'error';\n        }\n        if (this._noteChildren && this._noteChildren.length > 0) {\n            return 'note';\n        }\n\n        return '';\n    }\n\n    private _syncDescribedByIds() {\n        if (this._control) {\n            let ids: string[] = [];\n            ids = this._hintChildren.map(hint => hint.id);\n\n            if (this.getDisplayedMessage() === 'note') {\n                ids = [...this._noteChildren.map(hint => hint.id), ...ids];\n            } else if (this._errorChildren) {\n                ids = [...this._errorChildren.map(error => error.id), ...ids];\n            }\n\n            this._control.setDescribedByIds(ids);\n        }\n    }\n\n    // Fail if the required control is missing.\n    protected _validateControlChild() {\n        if (!this._control) {\n            throw new Error('Formfield must contain a NxFormfieldControl like input[nxInput] or a custom implementation');\n        }\n    }\n\n    /** @docs-private */\n    getConnectedOverlayOrigin(): ElementRef {\n        return this._connectionContainerRef || this.elementRef;\n    }\n\n    /** @docs-private */\n    _hasLabel() {\n        return !!this._labelChild || !!this.label;\n    }\n\n    /** @docs-private\n     * The placeholder is hidden when\n     *  - the control is not empty\n     *  - The label is not floated\n     * */\n    _hideControlPlaceholder() {\n        return (!this.shouldLabelFloat && this._hasLabel()) || !this._control.empty;\n    }\n\n    _getTitle(): string {\n        if (!this._labelChild) {\n            return this.label ?? '';\n        }\n        return this._labelChild.el.nativeElement?.innerText;\n    }\n}\n","<!--\nWe are building the following structure.\n\n+-----------------------------+ +-----------+\n| Prefix |   Input   | Suffix | |  Appendix |\n+-----------------------------+ +-----------+\n|-----------------Border--------------------|\n+-------------------------------------------+\n|                 Hints                     |\n+-------------------------------------------+\n|                                           |\n|                Messages                   |\n|                                           |\n+-------------------------------------------+\n\n-->\n\n<div class=\"nx-formfield__wrapper\">\n    <!-- Give a flex context to properly align suffix, input & postfix -->\n    <div class=\"nx-formfield__row\">\n        <div class=\"nx-formfield__flexfield\">\n            <div class=\"nx-formfield__input-container\" #connectionContainer>\n                <div class=\"nx-formfield__prefix\" *ngIf=\"_prefixChildren.length\">\n                    <ng-content select=\"[nxFormfieldPrefix]\"></ng-content>\n                </div>\n\n                <div class=\"nx-formfield__input\" [title]=\"_getTitle()\">\n                    <!-- This handles the floating whole behavior -->\n                    <span class=\"nx-formfield__label-holder\">\n                        <label class=\"nx-formfield__label\" [id]=\"labelId\" [attr.aria-owns]=\"_control.id\" [attr.for]=\"_control.id\">\n                            <ng-container *ngIf=\"!_labelChild\">\n                                {{ label }}\n                            </ng-container>\n                            <ng-content select=\"nx-formfield-label\"></ng-content>\n                        </label>\n                    </span>\n\n                    <ng-content></ng-content>\n                </div>\n\n                <div class=\"nx-formfield__suffix\" *ngIf=\"_suffixChildren.length\">\n                    <ng-content select=\"[nxFormfieldSuffix]\"></ng-content>\n                </div>\n            </div>\n            <!-- Space to render the hints below the textfield -->\n            <div class=\"nx-formfield__hints\" *ngIf=\"_hintChildren.length\">\n                <ng-content select=\"[nxFormfieldHint]\"></ng-content>\n            </div>\n        </div>\n\n        <!-- Appendix is similar to a suffix but visibly outside of the input  -->\n        <div class=\"nx-formfield__appendix\" *ngIf=\"_appendixChildren.length\">\n            <ng-content select=\"[nxFormfieldAppendix]\"></ng-content>\n        </div>\n    </div>\n\n    <!-- In case we got some additional information we render them below the given input -->\n    <ng-container [ngSwitch]=\"getDisplayedMessage()\">\n        <div class=\"nx-formfield__message\" *ngSwitchCase=\"'error'\">\n            <ng-content select=\"[nxFormfieldError]\"></ng-content>\n        </div>\n\n        <div class=\"nx-formfield__message\" *ngSwitchCase=\"'note'\">\n            <ng-content select=\"[nxFormfieldNote]\"></ng-content>\n        </div>\n    </ng-container>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxErrorModule, NxLabelModule } from '@aposin/ng-aquila/base';\n\nimport { NxFormfieldAppendixDirective } from './appendix.directive';\nimport { NxFormfieldErrorDirective } from './error.directive';\nimport { NxFormfieldComponent } from './formfield.component';\nimport { NxFormfieldHintDirective } from './hint.directive';\nimport { NxFormfieldLabelDirective } from './label.directive';\nimport { NxFormfieldNoteDirective } from './note.directive';\nimport { NxFormfieldPrefixDirective } from './prefix.directive';\nimport { NxFormfieldSuffixDirective } from './suffix.directive';\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: [\n        NxFormfieldComponent,\n        NxFormfieldHintDirective,\n        NxFormfieldErrorDirective,\n        NxFormfieldNoteDirective,\n        NxFormfieldPrefixDirective,\n        NxFormfieldSuffixDirective,\n        NxFormfieldAppendixDirective,\n        NxFormfieldLabelDirective,\n    ],\n    exports: [\n        NxFormfieldComponent,\n        NxFormfieldHintDirective,\n        NxFormfieldErrorDirective,\n        NxFormfieldNoteDirective,\n        NxFormfieldPrefixDirective,\n        NxFormfieldSuffixDirective,\n        NxFormfieldAppendixDirective,\n        NxFormfieldLabelDirective,\n        NxErrorModule,\n        NxLabelModule,\n    ],\n})\nexport class NxFormfieldModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["uniqueId"],"mappings":"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"}