{"version":3,"file":"aposin-ng-aquila-phone-input.mjs","sources":["../../../projects/ng-aquila/src/phone-input/country-data.ts","../../../projects/ng-aquila/src/phone-input/phone-input-intl.ts","../../../projects/ng-aquila/src/phone-input/phone-input.component.ts","../../../projects/ng-aquila/src/phone-input/phone-input.component.html","../../../projects/ng-aquila/src/phone-input/phone-input.module.ts","../../../projects/ng-aquila/src/phone-input/aposin-ng-aquila-phone-input.ts"],"sourcesContent":["import { LocalizedCountryNames } from 'i18n-iso-countries';\n\n// This file gets created in the postinstall hook, see extract-calling-codes.js script\nimport rawMetadata from './metadata.json';\n\nconst MAX_LENGTH_COUNTRY_CODE = 3;\n\nclass CountryMetadata {\n    countries: { [key: string]: string } = {};\n    callingCodes: { [key: string]: string[] } = {};\n    constructor(sourceObj: any) {\n        this.countries = sourceObj.countries;\n        this.callingCodes = sourceObj.callingCodes;\n    }\n}\n\nconst metadata = new CountryMetadata(rawMetadata);\n\n/** Get dial code by country code */\nexport const getDialCodeByCountryCode = (countryCode: string): string => metadata.countries[countryCode];\n\n/** Get the country name by country code */\nexport const getCountryNameByCountryCode = (countryNames: LocalizedCountryNames<any>, countryCode: string): string => {\n    const name = countryNames[countryCode];\n    return Array.isArray(name) ? name[0] : name;\n};\n\nexport const getCountryCodeforCallingCode = (callingCode: string) => {\n    const countries = metadata.callingCodes[callingCode];\n    if (countries && countries.length > 0) {\n        return countries[0];\n    }\n\n    throw new Error('Could not find calling code ' + callingCode);\n};\n\n// Extract the country calling code from a number string\n// Returns the country calling code and the rest of the string with the calling code removed\n// Throws an error if the input is not correctly formatted.\nexport const getCountryCallingCodeFromNumber = (number: string) => {\n    // there are a lot of cases a phone number could have, e.g. with a \"IDD prefix\"\n    // e.g. instead of +49 123 it could be 0049 123 if you are calling from european countries\n    // this IDD prefix is specific to countries/areas. libphonenumber has all the metadata for it\n    // but as we don't want the dependency on it we only accept numbers with + sign and calling code\n    // in the beginning. this can later be done better once we introduce an adapter and then a libphonenumber adapter\n    // could have additional capabilities here.\n    if (!number.startsWith('+')) {\n        throw Error('Expected phone number to start with \"+\" sign followed by the calling code');\n    }\n\n    // Taken from libphonenumber-js\n    // https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/source/helpers/extractCountryCallingCode.js\n    let i = 2;\n    while (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n        const countryCallingCode = number.slice(1, i);\n        if (countryCallingCode in metadata.callingCodes) {\n            return {\n                countryCallingCode,\n                number: number.slice(i),\n            };\n        }\n        i++;\n    }\n\n    throw new Error('No country code found');\n};\n\n/** Get sorted country code */\nexport const getSortedCountryCodes = (countryNames: LocalizedCountryNames<any>) =>\n    Object.keys(countryNames)\n        .filter(countryCode => countryCode in metadata.countries)\n        .sort((a, b) => {\n            // There are arrays and strings provided for locals. For example (en):\n            // \"RO\": \"Romania\",\n            // \"RU\": [\"Russian Federation\", \"Russia\"],\n            const localA: string = (Array.isArray(countryNames[a]) ? countryNames[a][0] : countryNames[a]) as string;\n            const localB: string = (Array.isArray(countryNames[b]) ? countryNames[b][0] : countryNames[b]) as string;\n\n            return localA.localeCompare(localB);\n        });\n","import { Injectable } from '@angular/core';\nimport countries, { LocalizedCountryNames } from 'i18n-iso-countries';\nimport en from 'i18n-iso-countries/langs/en.json';\nimport { Subject } from 'rxjs';\n\ncountries.registerLocale(en);\n\n@Injectable({ providedIn: 'root' })\nexport class NxPhoneInputIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the properties have changed after initialization.\n     */\n    readonly changes: Subject<void> = new Subject<void>();\n\n    /** The label that is shown at the top of the opened overlay. */\n    areaCodeLabel = 'Country code';\n\n    /** The object providing the country name translations. */\n    countryNames: LocalizedCountryNames<any> = countries.getNames('en');\n}\n","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    DoCheck,\n    ElementRef,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Self,\n    ViewChild,\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { NxDropdownComponent, NxDropdownOption } from '@aposin/ng-aquila/dropdown';\nimport { NxFormfieldComponent, NxFormfieldControl } from '@aposin/ng-aquila/formfield';\nimport { ErrorStateMatcher } from '@aposin/ng-aquila/utils';\nimport { LocalizedCountryNames } from 'i18n-iso-countries';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { getCountryCallingCodeFromNumber, getCountryCodeforCallingCode, getDialCodeByCountryCode, getSortedCountryCodes } from './country-data';\nimport { NxPhoneInputIntl } from './phone-input-intl';\n\nlet next = 0;\n\n@Component({\n    selector: 'nx-phone-input',\n    templateUrl: './phone-input.component.html',\n    styleUrls: ['./phone-input.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: NxFormfieldControl, useExisting: NxPhoneInputComponent }],\n    host: {\n        '[attr.id]': 'id',\n    },\n})\nexport class NxPhoneInputComponent implements ControlValueAccessor, NxFormfieldControl<any>, OnDestroy, DoCheck, OnInit, AfterViewInit {\n    @ViewChild(NxDropdownComponent, { static: true }) dropdown!: NxDropdownComponent;\n\n    value: any;\n\n    _inputValue = '';\n\n    _describedBy = '';\n\n    readonly stateChanges = new Subject<any>();\n\n    get empty() {\n        return !!this._inputValue;\n    }\n\n    focused = false;\n\n    private _uid = 'phone-input-' + next++;\n\n    private _id!: string;\n\n    /** Sets the id of the phone input component. */\n    @Input()\n    get id() {\n        return this._id || this._uid;\n    }\n    set id(value: string) {\n        this._id = value;\n        this.stateChanges.next();\n    }\n\n    /** Whether the component should be required. */\n    @Input() set required(value: BooleanInput) {\n        const coercedValue = coerceBooleanProperty(value);\n        if (this.#required !== coercedValue) {\n            this.#required = coercedValue;\n            this._cdr.markForCheck();\n        }\n    }\n    get required(): boolean {\n        return this.#required;\n    }\n    #required = false;\n\n    private _disabled = false;\n\n    /** Whether the component should be disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n    set disabled(value: BooleanInput) {\n        this._disabled = value! as any; // TODO properly coerce input value\n    }\n\n    private _readonly = false;\n\n    /** Whether the component should be read only. */\n    @Input()\n    get readonly(): boolean {\n        return this._readonly;\n    }\n    set readonly(value: BooleanInput) {\n        this._readonly = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n\n    private _countryCode = 'DE';\n    private _initialCountryCode = 'DE';\n\n    /** Sets the initial country to be selected in the dropdown. Format is the international\n     * country code like DE, US.\n     * If there is already a number in the input field changing this property has no effect.\n     */\n    @Input()\n    set countryCode(value: string) {\n        if (this._inputValue) {\n            return;\n        }\n        this._initialCountryCode = value;\n        this._countryCode = value;\n    }\n    get countryCode() {\n        return this._countryCode;\n    }\n\n    private _areaCodeLabel!: string;\n\n    /** Set the text at the top of the dropdown. The default value is 'Area Code'. */\n    @Input()\n    get areaCodeLabel() {\n        return this._areaCodeLabel || this._intl.areaCodeLabel;\n    }\n    set areaCodeLabel(value: string) {\n        this._areaCodeLabel = value;\n    }\n\n    private _countryNames!: LocalizedCountryNames<any>;\n\n    /** Set the translations of the countries. */\n    @Input()\n    get countryNames() {\n        return this._countryNames || this._intl.countryNames;\n    }\n    set countryNames(value: LocalizedCountryNames<any>) {\n        this._countryNames = value;\n        this._sortCountries();\n    }\n\n    private _placeholder = '';\n\n    /** The placeholder to be shown in the input field. */\n    @Input()\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(value: string) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n\n    /**\n     * Function to format the value in the input part of the component.\n     * The function is called on blur. The default function removes leading zeros.\n     * Please note: to determine the model value the component will remove parenthesis,\n     * whitespace and dash characters from the formatted input.\n     */\n    @Input()\n    get inputFormatter() {\n        return this._inputFormatter;\n    }\n    set inputFormatter(formatFn) {\n        this._inputFormatter = formatFn;\n        this._inputValue = this._inputFormatter(this._inputValue, this._countryCallingCode);\n    }\n\n    // TODO we are disabling the floating label for now. the problem is: the label\n    // is supposed to float next to the dropdown. we could introduce some changes to the\n    // formfield that a control can also give something like an offset for the floating label\n    // but for capacity reasons this has to be done at a later stage.\n    readonly shouldLabelFloat?: boolean = true;\n    /** @docs-private */\n    errorState = false;\n    readonly controlType?: string = 'nx-phone-input';\n\n    _sortedCountries!: NxDropdownOption[];\n    _countryCallingCode = getDialCodeByCountryCode(this.countryCode);\n\n    private readonly _destroyed = new Subject<void>();\n\n    private _inputFormatter = (inputValue: string, countryCode: string) => this._removeLeadingZero(inputValue);\n\n    /** `View -> model callback called when value changes` */\n    _onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    _onTouched = () => {};\n\n    constructor(\n        private _elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _cdr: ChangeDetectorRef,\n        private _errorStateMatcher: ErrorStateMatcher,\n        private _intl: NxPhoneInputIntl,\n        @Optional() private formFieldComponent: NxFormfieldComponent | null,\n        /** @docs-private */ @Optional() @Self() public ngControl: NgControl | null,\n        @Optional() private _parentForm: NgForm | null,\n        @Optional() private _parentFormGroup: FormGroupDirective | null,\n    ) {\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        _intl.changes.pipe(takeUntil(this._destroyed)).subscribe(_ => {\n            this._sortCountries();\n            this._cdr.detectChanges();\n        });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n\n    ngOnInit() {\n        this._sortCountries();\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this.dropdown.elementRef);\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n\n    setDescribedByIds(ids: string[]): void {\n        this._describedBy = ids.join(' ');\n        this.dropdown.setDescribedByIds(ids);\n    }\n\n    get _ariaLabelledBy() {\n        return this.formFieldComponent?.labelId;\n    }\n\n    get elementRef(): ElementRef<any> {\n        return this._elementRef;\n    }\n\n    writeValue(value: any): void {\n        if (typeof value === 'string') {\n            const noWhitespaceNumber = value.replace(/\\s/g, '');\n            const { countryCallingCode, number } = getCountryCallingCodeFromNumber(noWhitespaceNumber || '+' + getDialCodeByCountryCode(this.countryCode)); // requires string starting with '+'\n            this._countryCallingCode = countryCallingCode;\n            this._inputValue = this.inputFormatter(number, countryCallingCode);\n            this._countryCode = getCountryCodeforCallingCode(countryCallingCode);\n        } else {\n            this.value = '';\n            this._inputValue = '';\n            this._countryCode = this._initialCountryCode;\n        }\n        this._cdr.markForCheck();\n    }\n\n    registerOnChange(fn: any): void {\n        this._onChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this._onTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this._cdr.markForCheck();\n        this.stateChanges.next();\n    }\n\n    updateErrorState() {\n        const oldState = this.errorState;\n        const parent = this._parentFormGroup || this._parentForm;\n        const control = this.ngControl ? (this.ngControl.control as FormControl) : null;\n        const newState = this._errorStateMatcher.isErrorState(control, parent);\n\n        if (newState !== oldState) {\n            this.errorState = newState;\n            this.stateChanges.next();\n        }\n    }\n\n    _onInputBlur() {\n        this._onTouched();\n        this._inputValue = this.inputFormatter(this._inputValue, this._countryCallingCode);\n    }\n\n    _onInput() {\n        this.updateModel();\n    }\n\n    _onCountryChange(countryCode: string) {\n        this._countryCode = countryCode;\n        this._countryCallingCode = getDialCodeByCountryCode(this.countryCode);\n        this._inputValue = this.inputFormatter(this._inputValue, this._countryCallingCode);\n\n        this._onInput();\n    }\n\n    updateModel() {\n        const hasNumber = typeof this._inputValue === 'string' && this._removeLeadingZero(this._trimInputValue(this._inputValue)).length > 0;\n\n        if (hasNumber) {\n            this._onChange(this.getModelValue());\n        } else {\n            this._onChange('');\n        }\n    }\n\n    private _trimInputValue(value: string) {\n        return value.replace(/[\\s()\\-/]/g, '');\n    }\n\n    private _removeLeadingZero(value: string) {\n        return value.replace(/^0/, '');\n    }\n\n    /** Returns the combined string of selected calling code + input number */\n    getModelValue() {\n        return '+' + this._getCallingCode(this.dropdown.value) + this._trimInputValue(this._removeLeadingZero(this._inputValue));\n    }\n\n    _getCallingCode(country: string) {\n        return getDialCodeByCountryCode(country);\n    }\n\n    _sortCountries() {\n        this._sortedCountries = getSortedCountryCodes(this.countryNames).map(country => this._getDropdownOption(country));\n    }\n\n    _getDropdownOption(country: string): NxDropdownOption {\n        return {\n            value: country,\n            label: `${this._getCountryName(country)} (+${this._getCallingCode(country)})`,\n        };\n    }\n\n    _getCountryName(countryCode: string) {\n        const name = this.countryNames[countryCode];\n        return Array.isArray(name) ? name[0] : name;\n    }\n\n    _getReadonlyValue() {\n        return this.getModelValue();\n    }\n}\n","<div class=\"wrapper\">\n    <nx-dropdown\n        [class.hide]=\"readonly && !disabled\"\n        [nxValue]=\"countryCode\"\n        #dropdown\n        [nxShowFilter]=\"true\"\n        [nxDisabled]=\"disabled\"\n        [nxOverlayLabel]=\"areaCodeLabel\"\n        (nxValueChange)=\"_onCountryChange($event)\"\n        [options]=\"_sortedCountries\"\n    >\n        <span *nxClosedLabel>+{{ _getCallingCode(dropdown.value) }}</span>\n    </nx-dropdown>\n\n    <!-- adding c-input for the styles and to not get the overhead of the nxInput directive -->\n    <input\n        class=\"c-input\"\n        [class.hide]=\"readonly && !disabled\"\n        type=\"tel\"\n        (blur)=\"_onInputBlur()\"\n        [(ngModel)]=\"_inputValue\"\n        (ngModelChange)=\"_onInput()\"\n        [attr.aria-describedby]=\"_describedBy\"\n        [attr.aria-labelledby]=\"_ariaLabelledBy\"\n        [attr.required]=\"required || null\"\n        [attr.disabled]=\"disabled || null\"\n        [attr.placeholder]=\"placeholder || null\"\n    />\n\n    <input\n        class=\"c-input readonly-input\"\n        *ngIf=\"readonly && !disabled\"\n        type=\"tel\"\n        [attr.readonly]=\"readonly || null\"\n        [attr.aria-readonly]=\"readonly || null\"\n        [value]=\"_getReadonlyValue()\"\n        [attr.aria-describedby]=\"_describedBy\"\n        [attr.aria-labelledby]=\"_ariaLabelledBy\"\n    />\n</div>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NxDropdownModule } from '@aposin/ng-aquila/dropdown';\nimport { NxFormfieldModule } from '@aposin/ng-aquila/formfield';\nimport { NxInputModule } from '@aposin/ng-aquila/input';\n\nimport { NxPhoneInputComponent } from './phone-input.component';\n\n@NgModule({\n    imports: [NxDropdownModule, CommonModule, FormsModule, NxInputModule],\n    exports: [NxPhoneInputComponent, NxFormfieldModule],\n    declarations: [NxPhoneInputComponent],\n    providers: [],\n})\nexport class NxPhoneInputModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["countries","i3.NxPhoneInputIntl"],"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"}