import { HttpClient } from '@angular/common/http';
import { OnDestroy } from '@angular/core';
import { DomSanitizer, SafeHtml, SafeResourceUrl } from '@angular/platform-browser';
import { NxFontIcon, NxSvgIcon } from './icons';
import * as i0 from "@angular/core";
export declare function throwNxIconNotFoundError(iconName: string): void;
export declare class NxIconFontDefinition {
    hostClass: string;
    prefix: string;
    constructor(hostClass: string, prefix?: string);
}
export declare class NxIconRegistry implements OnDestroy {
    private _httpClient;
    private _sanitizer;
    private _document;
    private _icons;
    private _fonts;
    private _defaultFont?;
    constructor(_httpClient: HttpClient | null, _sanitizer: DomSanitizer, _document: Document);
    /**
     * Registers an icon using an HTML string.
     * @param iconName
     * @param literal
     */
    addSvgIconLiteral(iconName: string, literal: SafeHtml): void;
    /**
     * Registers an icon by URL.
     * @param iconName Name under which the icon should be registered.
     * @param url
     */
    addSvgIcon(iconName: string, safeUrl: SafeResourceUrl): void;
    /**
     * Only necessary to override an existing svg icon in the registry
     * with a font class. Useful to override the essential library icons.
     * To register an icon font in general use `registerFont` and
     * `setDefaultFontClass`.
     *
     * Example: you want to override the essential svg icon of the library `chevron-down`
     * with an icon from your icon font called 'arrow-down'. You would first register your
     * icon font:
     * `iconRegistry.registerFont('my-icons');`
     * `iconRegistry.setDefaultFontClass('my-icons');`
     * and then override the chevron-down icon in the registry:
     * `iconRegistry.addFontIcon('chevron-down', 'arrow-down');`
     */
    addFontIcon(iconName: string, alias?: string, fontName?: string): void;
    /** Returns the icon from the registry or undefined if not found. */
    getIcon(iconName: string): NxSvgIcon | NxFontIcon | undefined;
    ngOnDestroy(): void;
    /**
     * Register an icon font which can be used by the font input on the icon component.
     * @param name
     * @param hostClass The hostClass is the general class like `fa` and an optional prefix can be given.
     * @param prefix The prefix is helpful if your class name for the icon would be prefixed,
     * e.g. my-icons--heart but you still want to only use the name
     * <code>&lt;nx-icon name="heart" font="my-icons"&gt;&lt;/nx-icon&gt;</code>.
     */
    registerFont(name: string, hostClass?: string, prefix?: string): void;
    /**
     * Sets the font as the default font that is used when the font input
     * is omitted.
     */
    setDefaultFont(name: string): void;
    /**
     * Returns the registered CSS class name.
     */
    getDefaultFont(): NxIconFontDefinition | undefined;
    /**
     * Returns the registered font by name.
     */
    getFont(fontName: string): NxIconFontDefinition;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxIconRegistry, [{ optional: true; }, null, null]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<NxIconRegistry>;
}
/** Clones an SVGElement while preserving type information. */
export declare function cloneSvg(svg: SVGElement): SVGElement;
