import { HttpClient } from '@angular/common/http';
import { DomSanitizer, SafeHtml, SafeResourceUrl } from '@angular/platform-browser';
import { Observable } from 'rxjs';
import { NxIconFontDefinition } from './icon-registry';
export declare class NxSvgIcon {
    protected _httpClient: HttpClient | null;
    protected _sanitizer: DomSanitizer;
    protected _document: Document;
    svgElement: SVGElement | undefined;
    constructor(_httpClient: HttpClient | null, _sanitizer: DomSanitizer, _document: Document);
    /** Returns the content. */
    getContent(): Observable<SVGElement | undefined>;
    protected _svgElementFromString(str: string): SVGElement;
}
export declare class NxSvgIconLiteral extends NxSvgIcon {
    constructor(data: SafeHtml, _httpClient: HttpClient | null, _sanitizer: DomSanitizer, _document: Document);
}
export declare class NxSvgIconFromUrl extends NxSvgIcon {
    protected _sanitizer: DomSanitizer;
    protected _document: Document;
    url: string;
    protected _httpClient: HttpClient;
    private _pendingRequest;
    constructor(safeUrl: SafeResourceUrl, _httpClient: HttpClient | null, _sanitizer: DomSanitizer, _document: Document);
    /** Returns the content. If the SVG is not already loaded it fetches the SVG from icons' URL */
    getContent(): Observable<SVGElement>;
    private _loadSvgIcon;
    /**
     * Returns an Observable which produces the string contents of the given URL. Results may be
     * cached, so future calls with the same URL may not cause another HTTP request.
     */
    private _fetchUrl;
}
export declare class NxFontIcon {
    alias: string;
    font: NxIconFontDefinition;
    constructor(alias: string, font: NxIconFontDefinition);
    getClasses(): {
        alias: string;
        font: NxIconFontDefinition;
    };
}
