import { FocusMonitor } from '@angular/cdk/a11y';
import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, QueryList } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as i0 from "@angular/core";
export declare class NxRatingComponent implements ControlValueAccessor, AfterViewInit, OnDestroy {
    private _cdr;
    private _focusMonitor;
    private _value;
    /** Sets the selected rating 1 - 5. */
    set value(newValue: NumberInput);
    get value(): number;
    private _hover;
    private _disabled;
    /** Whether the rating component should be disabled. */
    set disabled(newValue: BooleanInput);
    get disabled(): boolean;
    private _negative;
    /** Whether the negative colors be used. */
    set negative(newValue: BooleanInput);
    get negative(): boolean;
    private _startLabel;
    /** Sets the label painted at the start of the rating component. */
    set startLabel(newValue: string);
    get startLabel(): string;
    private _endLabel;
    /** Sets the label painted at the end of the rating component. */
    set endLabel(newValue: string);
    get endLabel(): string;
    private _ariaLabel;
    set ariaLabel(newAriaLabels: string[]);
    get ariaLabel(): string[];
    set iconColor(color: string);
    get iconColor(): string;
    private _iconColor;
    /** An event is dispatched each time when the rating changes. */
    valueChange: EventEmitter<number>;
    /** @docs-private */
    icons: QueryList<ElementRef>;
    private onTouchedCallback;
    private onChangeCallback;
    constructor(_cdr: ChangeDetectorRef, _focusMonitor: FocusMonitor);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /** Whether the given rating is selected. */
    isSelected(index: number): boolean;
    /** Allows to set the rating. */
    setSelection(value: number): void;
    /** @docs-private */
    handleKeyUp(event: KeyboardEvent, rating: number): void;
    writeValue(value: number): void;
    registerOnChange(callback: (option: any) => any): void;
    registerOnTouched(callback: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    /** @docs-private */
    getAriaLabel(rating: number): string;
    /** @docs-private */
    getIconName(rating: number): string;
    /** @docs-private */
    setHover(rating: number): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxRatingComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxRatingComponent, "nx-rating", never, { "value": "nxValue"; "disabled": "nxDisabled"; "negative": "nxNegative"; "startLabel": "nxStartLabel"; "endLabel": "nxEndLabel"; "ariaLabel": "nxAriaLabel"; "iconColor": "nxIconColor"; }, { "valueChange": "nxValueChange"; }, never, never>;
}
