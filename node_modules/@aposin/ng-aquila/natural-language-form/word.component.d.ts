import { Overlay, OverlayPositionBuilder } from '@angular/cdk/overlay';
import { AfterContentInit, ChangeDetectorRef, ElementRef, OnDestroy, OnInit, QueryList, Renderer2, ViewContainerRef } from '@angular/core';
import { NxDropdownComponent } from '@aposin/ng-aquila/dropdown';
import { NxFormfieldControl, NxFormfieldErrorDirective } from '@aposin/ng-aquila/formfield';
import { NxPopoverComponent } from '@aposin/ng-aquila/popover';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
/** Type to determine the minimal width of a word. */
export declare type SIZES = 'regular' | 'short' | 'long';
export declare class NxWordComponent implements AfterContentInit, OnDestroy, OnInit {
    /** @docs-private */ elementRef: ElementRef;
    private _cdr;
    private _renderer;
    private _overlay;
    private _viewContainerRef;
    private _overlayPositionBuilder;
    private measureCanvas;
    /** @docs-private */
    inputChanges: Subject<any>;
    _hasErrors: boolean;
    private _overlayRef;
    private _embeddedViewRef;
    private _overlayState;
    _control: NxFormfieldControl<any>;
    _errorChildren: QueryList<NxFormfieldErrorDirective>;
    _popover: NxPopoverComponent;
    _dropdown: NxDropdownComponent;
    /** @docs-private */
    currentTextWidth: number;
    /** Provide a hint for a minimal width. The actual size will be determined for inputs for each change. */
    size: SIZES;
    /**
     * A word doesn't have a set place to show labels.
     * In order to be accessible, you have to provide a label with this property.
     * It will be attached to the given input through `aria-label`.
     */
    label: string;
    private readonly _destroyed;
    constructor(
    /** @docs-private */ elementRef: ElementRef, _cdr: ChangeDetectorRef, _renderer: Renderer2, _overlay: Overlay, _viewContainerRef: ViewContainerRef, _overlayPositionBuilder: OverlayPositionBuilder);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    /**
    @docs-private
    Calculate the width of the full text given by the input,
    that value is bound to this component so it can grow.

    The involved input is known to have a width of 100% an will fit the additional space given
    which completes the auto growing behavior.
  */
    updateCurrentTextWidth(): void;
    /** @docs-private */
    repositionError(): void;
    protected _validateControlChild(): void;
    /** @docs-private */
    getConnectedOverlayOrigin(): ElementRef;
    /** @docs-private */
    get isFocused(): boolean;
    /** @docs-private */
    get isFilled(): boolean;
    /** @docs-private */
    get hasDropdown(): boolean;
    updateErrorPopoverState(): void;
    setupErrorPopover(): void;
    private positionArrow;
    showPopover(): void;
    hidePopover(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxWordComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxWordComponent, "nx-word", never, { "size": "nxSize"; "label": "nxLabel"; }, {}, ["_control", "_dropdown", "_errorChildren"], ["[nxInput]", "nx-dropdown", "[nxError]"]>;
}
