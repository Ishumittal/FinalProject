import { FocusOrigin } from '@angular/cdk/a11y';
import { Directionality } from '@angular/cdk/bidi';
import { Overlay, ScrollStrategy } from '@angular/cdk/overlay';
import { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, InjectionToken, OnDestroy, ViewContainerRef } from '@angular/core';
import { NxTriggerButton } from '@aposin/ng-aquila/overlay';
import { NxContextMenuComponent } from './context-menu.component';
import { NxContextMenuItemComponent } from './context-menu-item.component';
import * as i0 from "@angular/core";
/** Default top padding of the menu panel. */
export declare const MENU_PANEL_TOP_PADDING = 8;
export declare const MENU_PANEL_OFFSET_Y = 8;
export declare const MENU_PANEL_OFFSET_X = 8;
export declare type NxContextMenuScrollStrategy = 'close' | 'reposition';
export declare type NxContextMenuMode = 'button' | 'cursor';
/** Injection token that determines the scroll handling while a context-menu is open. */
export declare const NX_CONTEXT_MENU_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;
/** @docs-private */
export declare function NX_CONTEXT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => ScrollStrategy;
/** @docs-private */
export declare const NX_CONTEXT_MENU_SCROLL_STRATEGY_PROVIDER: {
    provide: InjectionToken<() => ScrollStrategy>;
    useFactory: typeof NX_CONTEXT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY;
    deps: (typeof Overlay)[];
};
interface Point {
    x: number;
    y: number;
}
/**
 * This directive is intended to be used in conjunction with an nx-context-menu tag.
 * It is responsible for toggling the display of the provided context menu instance.
 */
export declare class NxContextMenuTriggerDirective implements AfterContentInit, OnDestroy {
    #private;
    private _overlay;
    private _element;
    private _viewContainerRef;
    private _parentMenu;
    private _contextMenuItemInstance;
    private _dir;
    private _triggerButton;
    private _defaultScrollStrategyFactory;
    private _cdr;
    private _portal;
    private _overlayRef;
    private _contextMenuOpen;
    private _closingActionsSubscription;
    private _contextMenuCloseSubscription;
    private _documentClickObservable;
    /** Strategy factory that will be used to handle scrolling while the context-menu panel is open. */
    private _scrollStrategyFactory;
    /** References the context menu instance that the trigger is associated with. */
    get contextMenu(): NxContextMenuComponent;
    set contextMenu(contextMenu: NxContextMenuComponent);
    private _contextMenu;
    set scrollStrategy(value: NxContextMenuScrollStrategy | null | undefined);
    get scrollStrategy(): NxContextMenuScrollStrategy | null | undefined;
    /** Whether the context menu is open. */
    get contextMenuOpen(): boolean;
    /** The text direction of the containing app. */
    private get dir();
    /** Data to be passed along to any lazily-rendered content. */
    contextMenuData: object;
    /**
     * Sets the mode of this context menu trigger.
     * 'button' (default): Opens by clicking the trigger
     * 'cursor': Opens at the cursor position by right clicking anywhere on the trigger.
     */
    mode: NxContextMenuMode;
    /** Event emitted when the associated context menu is opened. */
    readonly contextMenuOpened: EventEmitter<void>;
    /** Event emitted when the associated context menu is closed. */
    readonly contextMenuClosed: EventEmitter<void>;
    private readonly _destroyed;
    private _rightClicked;
    constructor(_overlay: Overlay, _element: ElementRef<HTMLElement>, _viewContainerRef: ViewContainerRef, _parentMenu: NxContextMenuComponent | null, _contextMenuItemInstance: NxContextMenuItemComponent | null, _dir: Directionality | null, _triggerButton: NxTriggerButton | null, _defaultScrollStrategyFactory: () => ScrollStrategy, _cdr: ChangeDetectorRef);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    /** Whether the context menu triggers a sub-menu or a top-level one. */
    triggersSubmenu(): boolean;
    /** Toggles the context menu between the open and closed states. */
    toggleContextMenu(origin?: FocusOrigin): void;
    /** Opens the context menu. */
    openContextMenu(origin?: FocusOrigin, position?: Point): void;
    /** Closes the context menu. */
    closeContextMenu(): void;
    private getScrollStrtegyFactory;
    /** Closes the context menu and does the necessary cleanup. */
    private _destroyMenu;
    /**
     * This method sets the context menu state to open and focuses the first item if
     * the context menu was opened via the keyboard.
     */
    private _initContextMenu;
    /**
     * Focuses the context menu trigger.
     */
    focus(): void;
    /**
     * This method resets the context menu when it's closed, most importantly restoring
     * focus to the context menu trigger if the context menu was opened via the keyboard.
     */
    private _resetContextMenu;
    /** Set state rather than toggle to support triggers sharing a menu. */
    private _setIsContextMenuOpen;
    /**
     * This method checks that a valid instance of NxContextMenuComponent has been passed into
     * nxContextMenuTriggerFor. If not, an exception is thrown.
     */
    private _checkContextMenu;
    /**
     * This method creates the overlay from the provided menu's template and saves its
     * OverlayRef so that it can be attached to the DOM when openContextMenu is called.
     */
    private _createOverlay;
    /**
     * This method builds the configuration object needed to create the overlay, the OverlayState.
     * @returns OverlayConfig
     */
    private _getOverlayConfig;
    /**
     * Sets the position on a position strategy so the overlay is placed at the cursor.
     * @param positionStrategy Strategy whose position to update.
     * @param position Position of the cursor.
     */
    private _setPositionToCursor;
    /**
     * Sets the appropriate positions on a position strategy
     * so the overlay connects with the trigger correctly.
     * @param positionStrategy Strategy whose position to update.
     */
    private _setPosition;
    /**
     * Returns a stream that emits whenever an action that should close the context menu occurs. */
    private _contextMenuClosingActions;
    /** Handles mouse presses on the trigger. */
    _handleMousedown(event: MouseEvent): void;
    _handleRightClick(event: MouseEvent): void;
    /** Handles key presses on the trigger. */
    _handleKeydown(event: KeyboardEvent): void;
    /** Handles click events on the trigger. */
    _handleClick(event: MouseEvent): void;
    private _waitForClose;
    /** Handles the cases where the user hovers over the trigger. */
    private _handleHover;
    /** Gets the portal that should be attached to the overlay. */
    private _getPortal;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxContextMenuTriggerDirective, [null, null, null, { optional: true; }, { optional: true; self: true; }, { optional: true; }, { optional: true; self: true; }, null, null]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NxContextMenuTriggerDirective, "[nxContextMenuTriggerFor]", ["nxContextMenuTrigger"], { "contextMenu": "nxContextMenuTriggerFor"; "scrollStrategy": "scrollStrategy"; "contextMenuData": "nxContextMenuTriggerData"; "mode": "nxContextMenuTriggerMode"; }, { "contextMenuOpened": "contextMenuOpened"; "contextMenuClosed": "contextMenuClosed"; }, never>;
}
export {};
