import { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';
import { BooleanInput } from '@angular/cdk/coercion';
import { ChangeDetectorRef, ElementRef, OnDestroy, QueryList } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * This directive is intended to be used inside an nx-context-menu tag.
 * It exists mostly to set the role attribute, disabled state and styling.
 */
export declare class NxContextMenuItemComponent implements OnDestroy {
    private _elementRef;
    private _document;
    private _cdr;
    private _focusMonitor;
    /** Stream that emits when the context menu item is hovered. */
    readonly _hovered: Subject<NxContextMenuItemComponent>;
    /** Whether the context menu item is disabled. */
    set disabled(value: BooleanInput);
    get disabled(): boolean;
    private _disabled;
    /** Whether the context menu close on select. */
    set disableCloseOnSelect(value: BooleanInput);
    get disableCloseOnSelect(): boolean;
    private _disableCloseOnSelect;
    /** Whether the context menu item is highlighted. */
    _highlighted: boolean;
    /** Whether the context menu item acts as a trigger for a sub-menu. */
    _triggersSubmenu: boolean;
    constructor(_elementRef: ElementRef<HTMLElement>, _document: Document | null, _cdr: ChangeDetectorRef, _focusMonitor: FocusMonitor);
    /** Focuses this context menu item. */
    focus(origin?: FocusOrigin): void;
    ngOnDestroy(): void;
    /** Used to set the `tabindex`. */
    _getTabIndex(): string;
    /** Returns the host DOM element. */
    _getHostElement(): HTMLElement;
    /** Prevents the default element actions if it is disabled. */
    _checkDisabled(event: Event): void;
    /** Emits to the hover stream. */
    _handleMouseEnter(): void;
    /** Gets the label to be used when determining whether the option should be focused. */
    getLabel(): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxContextMenuItemComponent, [null, { optional: true; }, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxContextMenuItemComponent, "[nxContextMenuItem]", ["nxContextMenuItem"], { "disabled": "disabled"; "disableCloseOnSelect": "disableCloseOnSelect"; }, {}, never, ["*"]>;
}
/**
 * This directive is need when [nx-context-menu-item] is not directly under [nx-context-menu].
 *
 * <nx-context-menu>
 *      <something else> // blocker
 *        <nx-context-menu-item-wrap> // come to rescue
 *          <nx-context-menu-item/>
 *          <nx-context-menu-item/>
 *        </nx-context-menu-item-wrap>
 *      </something else>
 * </nx-context-menu>
 */
export declare class NxContextMenuItemWrapComponent {
    _items: QueryList<NxContextMenuItemComponent>;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxContextMenuItemWrapComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxContextMenuItemWrapComponent, "nx-context-menu-item-wrap", never, {}, {}, ["_items"], ["*"]>;
}
