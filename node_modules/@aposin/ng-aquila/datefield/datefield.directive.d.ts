/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { BooleanInput } from '@angular/cdk/coercion';
import { AfterContentInit, ElementRef, EventEmitter, OnDestroy } from '@angular/core';
import { AbstractControl, ControlValueAccessor, ValidationErrors, Validator, ValidatorFn } from '@angular/forms';
import { NxFormfieldComponent } from '@aposin/ng-aquila/formfield';
import { NxDateAdapter, NxDateFormats } from './adapter/index';
import { NxDatepickerComponent } from './datepicker/datepicker.component';
import * as i0 from "@angular/core";
export declare const NX_DATEFIELD_VALUE_ACCESSOR: any;
export declare const NX_DATEFIELD_VALIDATORS: any;
/**
 * An event used for datepicker input and change events. We don't always have access to a native
 * input or change event because the event may have been triggered by the user clicking on the
 * calendar popup. For consistency, we always use NxDatepickerInputEvent instead.
 */
export declare class NxDatepickerInputEvent<D> {
    /** Reference to the datepicker input component that emitted the event. */
    target: NxDatefieldDirective<D>;
    /** Reference to the native input element associated with the datepicker input. */
    targetElement: HTMLElement;
    /** The new value for the target datepicker input. */
    value: D | null;
    constructor(
    /** Reference to the datepicker input component that emitted the event. */
    target: NxDatefieldDirective<D>, 
    /** Reference to the native input element associated with the datepicker input. */
    targetElement: HTMLElement);
}
/**
 * Directive used to provide date processing functionality to an input.
 */
export declare class NxDatefieldDirective<D> implements AfterContentInit, ControlValueAccessor, OnDestroy, Validator {
    private _elementRef;
    private _formField;
    /** @docs-private */
    currentFormattedDate: string | null;
    /** Whether the component has been initialized. */
    private _isInitialized;
    /** The datepicker that this input is associated with. */
    set datepicker(value: NxDatepickerComponent<D>);
    _datepicker: NxDatepickerComponent<D>;
    /** Function that can be used to filter out dates within the datepicker and invalidate values in the datefield. */
    set datefieldFilter(value: (date: D | null) => boolean);
    /** Provide or read the current date. It's type <D> depends on the chosen date implementation */
    get value(): D | null;
    set value(value: D | null);
    private _value;
    /** Sets the minimum valid date. */
    get min(): D | null;
    set min(value: D | null);
    private _min;
    /** Sets the maximum valid date. */
    get max(): D | null;
    set max(value: D | null);
    private _max;
    /**
     * If supported by the date implementation enable strict parsing (applies to Moment's parse function here).
     *
     * The date value is not updated on a `strict` change.
     */
    get strict(): any;
    set strict(value: any);
    private _strict;
    /**
     * Override the parse format given with parse.dateInput with the token NX_DATE_FORMATS.
     *
     * The date value is not updated on a `parseFormat` change.
     */
    get parseFormat(): string | string[];
    set parseFormat(value: string | string[]);
    private _parseFormat;
    /** Override the display format given with display.dateInput with the token NX_DATE_FORMATS  */
    get displayFormat(): string;
    set displayFormat(value: string);
    private _displayFormat;
    /** Whether the datepicker-input is disabled. */
    get disabled(): boolean;
    set disabled(value: BooleanInput);
    private _disabled;
    /** Whether the datefield is readonly. */
    get readonly(): boolean;
    set readonly(value: BooleanInput);
    private _readonly;
    /** Emits when a `change` event is fired on this `<input>`. */
    readonly dateChange: EventEmitter<NxDatepickerInputEvent<D>>;
    /** Emits when an `input` event is fired on this `<input>`. */
    readonly dateInput: EventEmitter<NxDatepickerInputEvent<D>>;
    /** Emits when the value changes (either due to user input or programmatic change). */
    _valueChange: EventEmitter<D | null>;
    /** Emits when the disabled state has changed. */
    _disabledChange: EventEmitter<boolean>;
    /** Emits when the readonly state has changed. */
    _readonlyChange: EventEmitter<boolean>;
    readonly _dateAdapter: NxDateAdapter<D>;
    private readonly _dateFormats;
    private readonly _destroyed;
    _dateFilter: (date: D | null) => boolean;
    _onTouched: () => void;
    private _cvaOnChange;
    private _validatorOnChange;
    constructor(_elementRef: ElementRef, _dateAdapter: NxDateAdapter<D> | null, _dateFormats: NxDateFormats | null, _formField: NxFormfieldComponent | null);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    /** @docs-private */
    registerOnValidatorChange(fn: () => void): void;
    /** @docs-private */
    validate(c: AbstractControl): ValidationErrors | null;
    /**
     * @docs-private
     *
     * Gets the element that the datepicker popup should be connected to.
     * @return The element to connect the popup to.
     */
    getConnectedOverlayOrigin(): ElementRef;
    writeValue(value: D): void;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    _onKeydown(event: KeyboardEvent): void;
    _onInput(value: string): void;
    _onChange(): void;
    _focus(): void;
    _onBlur(): void;
    /** Returns the validators of the datefield. */
    getValidators(): ValidatorFn[];
    /** Formats a value and sets it on the input native element. */
    private _formatValue;
    /**
     * @param obj The object to check.
     * @returns The given object if it is both a date instance and valid, otherwise null.
     */
    private _getValidDateOrNull;
    private registerDatepicker;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxDatefieldDirective<any>, [null, { optional: true; }, { optional: true; }, { optional: true; }]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NxDatefieldDirective<any>, "input[nxDatefield]", ["nxDatefield"], { "datepicker": "nxDatepicker"; "datefieldFilter": "nxDatefieldFilter"; "value": "value"; "min": "nxMin"; "max": "nxMax"; "strict": "nxStrict"; "parseFormat": "nxParseFormat"; "displayFormat": "nxDisplayFormat"; "disabled": "disabled"; "readonly": "readonly"; }, { "dateChange": "dateChange"; "dateInput": "dateInput"; }, never>;
}
