/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Directionality } from '@angular/cdk/bidi';
import { BooleanInput } from '@angular/cdk/coercion';
import { Overlay, ScrollStrategy } from '@angular/cdk/overlay';
import { AfterContentInit, ElementRef, EventEmitter, InjectionToken, NgZone, OnDestroy, ViewContainerRef } from '@angular/core';
import { Subject } from 'rxjs';
import { NxDateAdapter } from '../adapter/date-adapter';
import { NxDatefieldDirective } from '../datefield.directive';
import { NxCalendarComponent } from './calendar';
import { NxDatepickerIntl } from './datepicker-intl';
import { NxDatepickerToggleComponent } from './datepicker-toggle';
import * as i0 from "@angular/core";
/** Injection token that determines the scroll handling while the calendar is open. */
export declare const NX_DATEPICKER_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;
/** @docs-private */
export declare function NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => ScrollStrategy;
/** @docs-private */
export declare const NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER: {
    provide: InjectionToken<() => ScrollStrategy>;
    deps: (typeof Overlay)[];
    useFactory: typeof NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY;
};
export declare class DatepickerDefaultOptions {
    /**
     * Stream that emits whenever the default options are changed. Use this to notify
     * components if the default options have changed after initialization.
     */
    changes?: Subject<void>;
    /** Sets the focus on toggle behavior. (optional) */
    toggleIconTabindex?: number;
    static ɵfac: i0.ɵɵFactoryDeclaration<DatepickerDefaultOptions, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<DatepickerDefaultOptions>;
}
export declare const DATEPICKER_DEFAULT_OPTIONS: InjectionToken<DatepickerDefaultOptions>;
/**
 * @docs-private
 * Component used as the content for the datepicker dialog and popup. We use this instead of using
 * NxCalendarComponent directly as the content so we can control the initial focus. This also gives us a
 * place to put additional features of the popup that are not part of the calendar itself in the
 * future. (e.g. confirmation buttons).
 */
export declare class NxDatepickerContentComponent<D> implements AfterContentInit {
    _intl: NxDatepickerIntl;
    elementRef: ElementRef;
    private _ngZone;
    datepicker: NxDatepickerComponent<D>;
    _calendar: NxCalendarComponent<D>;
    constructor(_intl: NxDatepickerIntl, elementRef: ElementRef, _ngZone: NgZone);
    ngAfterContentInit(): void;
    /** Focuses the active cell after the microtask queue is empty. */
    private _focusActiveCell;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxDatepickerContentComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxDatepickerContentComponent<any>, "nx-datepicker-content", ["nxDatepickerContent"], {}, {}, never, never>;
}
/** Component responsible for managing the datepicker popup/dialog. */
export declare class NxDatepickerComponent<D> implements OnDestroy {
    private _overlay;
    private _ngZone;
    private _viewContainerRef;
    private _defaultScrollStrategyFactory;
    private _dir;
    private _document;
    /** The date to open the calendar initially. */
    get startAt(): D | null;
    set startAt(value: D | null);
    private _startAt;
    /** The view that the calendar should start in. */
    startView: 'month' | 'year' | 'multi-year';
    /**
     * Whether the datepicker pop-up should be disabled.
     * The datepicker is also disabled if the belonging input is readonly.
     */
    get disabled(): boolean;
    set disabled(value: BooleanInput);
    private _disabled;
    /** @docs-private */
    selectedChanged: EventEmitter<D>;
    /**
     * Emits selected year in multiyear view.
     * This doesn't imply a change on the selected date.
     */
    readonly yearSelected: EventEmitter<D>;
    /**
     * Emits selected month in year view.
     * This doesn't imply a change on the selected date.
     */
    readonly monthSelected: EventEmitter<D>;
    /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */
    panelClass: string | string[];
    /** Emits when the datepicker has been opened. */
    openedStream: EventEmitter<void>;
    /** Emits when the datepicker has been closed. */
    closedStream: EventEmitter<void>;
    /** Whether the calendar is open. */
    get opened(): boolean;
    set opened(value: boolean);
    private _opened;
    /**
     * @docs-private
     * The id for the datepicker calendar.
     */
    id: string;
    /**
     * @docs-private
     * The currently selected date.
     */
    get selected(): D | null;
    set selected(value: D | null);
    private _validSelected;
    /**
     * @docs-private
     * The minimum selectable date.
     */
    get minDate(): D | null;
    /**
     * @docs-private
     * The maximum selectable date.
     */
    get maxDate(): D | null;
    /** @docs-private */
    get dateFilter(): (date: D | null) => boolean;
    /** A reference to the overlay when the calendar is opened as a popup. */
    private _popupRef;
    /** A portal containing the calendar for this datepicker. */
    private _calendarPortal;
    /** Reference to the component instantiated in popup mode. */
    private _popupComponentRef;
    /** The element that was focused before the datepicker was opened. */
    private _focusedElementBeforeOpen;
    /** The input element this datepicker is associated with. */
    _datepickerInput: NxDatefieldDirective<D>;
    _toggleButton: NxDatepickerToggleComponent<D>;
    /** Strategy factory that will be used to handle scrolling while the datepicker panel is open. */
    private _scrollStrategyFactory;
    /** Emits when the datepicker is disabled. */
    readonly _disabledChange: Subject<boolean>;
    private readonly _dateAdapter;
    private readonly _destroyed;
    constructor(_overlay: Overlay, _ngZone: NgZone, _viewContainerRef: ViewContainerRef, _defaultScrollStrategyFactory: () => ScrollStrategy, _dateAdapter: NxDateAdapter<D> | null, _dir: Directionality | null, _document: Document | null);
    ngOnDestroy(): void;
    /**
     * @docs-private
     * Selects the given date
     */
    select(date: D): void;
    /**
     * @docs-private
     * Emits the selected year in multiyear view
     */
    selectYear(normalizedYear: D): void;
    /**
     * @docs-private
     * Emits selected month in year view
     */
    selectMonth(normalizedMonth: D): void;
    /**
     * @docs-private
     * Register an input with this datepicker.
     * @param input The datepicker input to register with this datepicker.
     */
    registerInput(input: NxDatefieldDirective<D>): void;
    /**
     * @docs-private
     * Register an input toggle with this datepicker.
     */
    registerToggle(toggle: NxDatepickerToggleComponent<D>): void;
    /**
     * @docs-private
     * Open the calendar.
     */
    open(): void;
    /**
     * @docs-private
     * Close the calendar.
     */
    close(): void;
    /** Open the calendar as a popup. */
    private _openAsPopup;
    /** Create the popup. */
    private _createPopup;
    /** Destroy popup */
    private _destroyPopup;
    /** Create the popup PositionStrategy. */
    private _createPopupPositionStrategy;
    /**
     * @param obj The object to check.
     * @returns The given object if it is both a date instance and valid, otherwise null.
     */
    private _getValidDateOrNull;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxDatepickerComponent<any>, [null, null, null, null, { optional: true; }, { optional: true; }, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxDatepickerComponent<any>, "nx-datepicker", ["nxDatepicker"], { "startAt": "startAt"; "startView": "startView"; "disabled": "disabled"; "panelClass": "panelClass"; "opened": "opened"; }, { "yearSelected": "yearSelected"; "monthSelected": "monthSelected"; "openedStream": "opened"; "closedStream": "closed"; }, never, never>;
}
