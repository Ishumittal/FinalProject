import { ChangeDetectorRef, EventEmitter, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { Subject } from 'rxjs';
import { NxPopoverContentDirective } from './popover-content';
import { NxPopoverIntl } from './popover-intl';
import * as i0 from "@angular/core";
export declare class NxPopoverComponent implements OnDestroy, OnInit {
    _intl: NxPopoverIntl;
    private _cdr;
    /** @docs-private */
    templateRef: TemplateRef<any>;
    /** Content that will be rendered lazily. */
    _lazyContent: NxPopoverContentDirective;
    /** Event emitted when the popover is closed. */
    closed: EventEmitter<void>;
    /** @docs-private */
    closeButtonClick: Subject<void>;
    /** @docs-private */
    id: string;
    /** @docs-private */
    direction: string;
    /** @docs-private */
    showCloseButton: boolean;
    /** @docs-private */
    arrowStyle: {};
    private readonly _destroyed;
    constructor(_intl: NxPopoverIntl, _cdr: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * Emits event to notify the popover trigger directive that the close button was clicked.
     * @docs-private
     */
    emitCloseButtonClick(): void;
    /** @docs-private */
    _onCloseKeyup($event: KeyboardEvent): void;
    /** @docs-private */
    emitClosedEvent(): void;
    /** @docs-private */
    get classList(): string;
    /** Prevent the popover from closing when the user clicks on the popover content. */
    _onClick(event: Event): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxPopoverComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxPopoverComponent, "nx-popover", ["nxPopover"], {}, { "closed": "nxClosed"; }, ["_lazyContent"], ["*"]>;
}
