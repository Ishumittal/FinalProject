import { CdkAccordionItem } from '@angular/cdk/accordion';
import { BooleanInput } from '@angular/cdk/coercion';
import { UniqueSelectionDispatcher } from '@angular/cdk/collections';
import { TemplatePortal } from '@angular/cdk/portal';
import { AfterContentInit, ChangeDetectorRef, OnChanges, OnDestroy, SimpleChanges, ViewContainerRef } from '@angular/core';
import { Subject } from 'rxjs';
import { NxAccordionDirective } from './accordion';
import * as i0 from "@angular/core";
/** The styling of the accordion. */
export declare type AccordionStyle = 'regular' | 'light' | 'extra-light';
export declare class NxExpansionPanelComponent extends CdkAccordionItem implements AfterContentInit, OnChanges, OnDestroy {
    /** @docs-private */ accordion: NxAccordionDirective;
    private _viewContainerRef;
    /** Whether the negative set of styles should be used. */
    set negative(value: BooleanInput);
    get negative(): boolean;
    private _negative;
    _accordionStyle: AccordionStyle;
    /**
     * Value for the styling that should be chosen.
     * Default value: 'regular'.
     */
    set style(value: AccordionStyle);
    get style(): AccordionStyle;
    private _style;
    /** @docs-private */
    lazyContent: any;
    private _portal;
    /** @docs-private */
    get portal(): TemplatePortal<any>;
    _headerId: string;
    /** Stream that emits for changes in `@Input` properties. */
    readonly _inputChanges: Subject<SimpleChanges>;
    constructor(
    /** @docs-private */ accordion: NxAccordionDirective, // not typed as nullable: super class does not support `null`
    _cdr: ChangeDetectorRef, _expansionDispatcher: UniqueSelectionDispatcher, _viewContainerRef: ViewContainerRef);
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    /** @docs-private */
    getOpenState(): "closed" | "open";
    static ɵfac: i0.ɵɵFactoryDeclaration<NxExpansionPanelComponent, [{ optional: true; skipSelf: true; }, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxExpansionPanelComponent, "nx-expansion-panel", ["NxExpansionPanelComponent"], { "negative": "negative"; "style": "nxStyle"; }, {}, ["lazyContent"], ["nx-expansion-panel-header", "*"]>;
}
