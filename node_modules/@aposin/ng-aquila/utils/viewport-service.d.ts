import { OnDestroy } from '@angular/core';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
/** Available breakpoints to subscribe to. */
export declare enum NxBreakpoints {
    /** Min size for BREAKPOINT_MOBILE */
    BREAKPOINT_XSMALL = 0,
    BREAKPOINT_SMALL = 320,
    /** Min size for BREAKPOINT_TABLET */
    BREAKPOINT_MEDIUM = 704,
    /** Min size for BREAKPOINT_DESKTOP */
    BREAKPOINT_LARGE = 992,
    BREAKPOINT_XLARGE = 1280,
    BREAKPOINT_2XLARGE = 1472,
    BREAKPOINT_3XLARGE = 1760
}
/** Service subscribing to window resize events and providing breakpoint matching functions. */
export declare class NxViewportService implements OnDestroy {
    private _destroyed;
    initialViewportWidth: number;
    viewportChange$: Observable<number>;
    constructor();
    /** Returns whether the current viewport width is greater than or equal (>=) to minSize. */
    min(minSize: NxBreakpoints, throttleTimeMs?: number): Observable<boolean>;
    /** Returns whether the current viewport width is lower (<) than maxSize. */
    max(maxSize: NxBreakpoints, throttleTimeMs?: number): Observable<boolean>;
    /** Returns whether the current viewport width is greater than or equal (>=) to minSize and lower (<) than maxSize. */
    between(minSize: NxBreakpoints, maxSize: NxBreakpoints, throttleTimeMs?: number): Observable<boolean>;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxViewportService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<NxViewportService>;
}
