import { FocusMonitor } from '@angular/cdk/a11y';
import { Directionality } from '@angular/cdk/bidi';
import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as i0 from "@angular/core";
interface TickItem {
    gapSize: number;
    hideTick: boolean;
    isLongTick: boolean;
}
export declare class NxSliderComponent implements ControlValueAccessor, AfterViewInit, OnDestroy {
    private elementRef;
    private _cdr;
    private _ngZone;
    private _dir;
    private _focusMonitor;
    private _dragSubscriptions;
    private _value;
    private _decimalPlaces;
    private _step;
    private _id;
    private _tabIndex;
    private _min;
    private _max;
    private _label;
    private _inverted;
    private _thumbLabel;
    private _negative;
    private _hideLabels;
    private _disabled;
    /**
     * How often to show ticks. Relative to the step so that a tick always appears on a step.
     * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).
     */
    set tickInterval(value: NumberInput);
    get tickInterval(): number;
    private _tickInterval;
    ticks: TickItem[];
    private _handleElement;
    _labelPosition: string;
    /** Sets the id of the slider. */
    set id(value: string);
    get id(): string;
    /** Sets the tabindex of the slider. */
    set tabindex(value: NumberInput);
    get tabindex(): number;
    /** Sets the minimum value (Default: 0). */
    set min(value: NumberInput);
    get min(): number;
    /** Sets the maximum value (Default: 100). */
    set max(value: NumberInput);
    get max(): number;
    /** Sets the step size by which the value of the slider can be increased or decreased (Default: 1). */
    get step(): number;
    set step(value: NumberInput);
    /** Sets the label which is displayed on top of the slider. */
    set label(value: string);
    get label(): string;
    /** Whether the input to the control of the slider should be disabled. */
    set disabled(value: BooleanInput);
    get disabled(): boolean;
    /** Whether the max value is to the right (false) or left (true).*/
    set inverted(value: BooleanInput);
    get inverted(): boolean;
    /** Whether to display the thumb label on top of the slider.*/
    set thumbLabel(value: BooleanInput);
    get thumbLabel(): boolean;
    /** Whether the negative set of styles is applied (Default: 'false').*/
    set negative(value: BooleanInput);
    get negative(): boolean;
    /** Hides the min/max labels (Default: 'false'). */
    set hideLabels(value: BooleanInput);
    get hideLabels(): boolean;
    /** Sets the array of value which will render as long tick (Default: Middle value if present). */
    set longTicks(value: number[]);
    get longTicks(): number[];
    private _longTicks;
    /** An event is dispatched on each value change. */
    valueChange: EventEmitter<number>;
    /** Sets the customization function for the value which is displayed above the slider handle (Default:(value) => value). ). */
    valueFormatter: (value: any) => any;
    /** Sets the customization function for the label on the min-side of the slider (Default:(value) => value). */
    labelMinFormatter: (value: any) => any;
    /** Sets the customization function for the label on the max-side of the slider (Default:(value) => value). */
    labelMaxFormatter: (value: any) => any;
    private _onChange;
    private _onTouched;
    constructor(elementRef: ElementRef, _cdr: ChangeDetectorRef, _ngZone: NgZone, _dir: Directionality | null, _focusMonitor: FocusMonitor);
    ngAfterViewInit(): void;
    /** Sets the current value of the slider. */
    set value(value: NumberInput);
    get value(): number;
    ngOnDestroy(): void;
    writeValue(value: number): void;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: any): void;
    setDisabledState(disabled: boolean): void;
    _isMinimum(): boolean;
    /**
     * Checks if the value is in the boundaries of min/max and if it is a multiple of `step.
     */
    _isValidStep(): boolean;
    /**
     * We have to look at two cases:
     * - current value is a valid multitude of the step size
     *   then we can safely add or subtract the step
     * - the value is not a valid multitude. this could be the max value or the value bound
     *   via nxValue
     *   then we look for the next closest value upwards or downwards
     *   decimal.js provides a nice utility function for this.
     */
    _changeValue(valueDiff: number): void;
    get _percentageValue(): number;
    _sliderClick(event: MouseEvent): void;
    _focus(): void;
    /**
     * Prevent text selection when dragging the handle.
     */
    _selectStart(): boolean;
    _handleKeypress(event: KeyboardEvent): void;
    /**
     * This is called on mousedown or touchstart
     */
    _dragStart(): void;
    _formatValue(value: number): string;
    _formatLabelLeft(): string;
    _formatLabelRight(): string;
    _formatLabelMin(): any;
    _formatLabelMax(): any;
    _focusHandleElement(): void;
    private _updateLabelPosition;
    private _getValueFromPosition;
    private _roundToDecimal;
    private _handleDragMove;
    private _handleDragStop;
    private _reset;
    private _getPositionFromEvent;
    private getTicks;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxSliderComponent, [null, null, null, { optional: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxSliderComponent, "nx-slider", never, { "tickInterval": "tickInterval"; "id": "id"; "tabindex": "tabindex"; "min": "nxMin"; "max": "nxMax"; "step": "nxStep"; "label": "nxLabel"; "disabled": "disabled"; "inverted": "nxInverted"; "thumbLabel": "thumbLabel"; "negative": "negative"; "hideLabels": "hideLabels"; "longTicks": "longTicks"; "valueFormatter": "nxValueFormatter"; "labelMinFormatter": "nxLabelMinFormatter"; "labelMaxFormatter": "nxLabelMaxFormatter"; "value": "nxValue"; }, { "valueChange": "nxValueChange"; }, never, never>;
}
export {};
