import { BooleanInput } from '@angular/cdk/coercion';
import { ChangeDetectorRef, DoCheck, EventEmitter } from '@angular/core';
import { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';
import { ErrorStateMatcher } from '@aposin/ng-aquila/utils';
import { NxTimefieldIntl } from './timefield-intl';
import * as i0 from "@angular/core";
export declare class NxTimefieldComponent implements ControlValueAccessor, DoCheck {
    private _cdr;
    /** @docs-private */ ngControl: NgControl | null;
    private _errorStateMatcher;
    private _parentForm;
    private _parentFormGroup;
    _intl: NxTimefieldIntl;
    /** @docs-private */
    errorState: boolean;
    _toggleAMPM: string | null;
    /** Event that emits the time in 24h ISO format. */
    valueChange: EventEmitter<string>;
    private _idHours;
    /** @docs-private */
    get idHours(): string;
    private _idMinutes;
    /** @docs-private */
    get idMinutes(): string;
    private _idRadioGroup;
    /** @docs-private */
    get idRadioGroup(): string;
    private _maxHours;
    /** @docs-private */
    get maxHours(): number;
    private _minHours;
    /** @docs-private */
    get minHours(): number;
    private _maxMinutes;
    /** @docs-private */
    get maxMinutes(): number;
    private _minMinutes;
    /** @docs-private */
    get minMinutes(): number;
    private _time;
    /** @docs-private */
    set time(value: string);
    get time(): string;
    private _twelveHourFormat;
    /** Whether to show the time in 12-hour format with AM/PM toggle. Default: false. */
    set twelveHourFormat(value: BooleanInput);
    get twelveHourFormat(): boolean;
    private _label;
    /** Sets the label which is displayed on top of timefield. */
    set label(value: string);
    get label(): string;
    private _labelAM;
    /** Sets the AM radio button label which is displayed in radio group. */
    set labelAM(value: string);
    get labelAM(): string;
    private _labelPM;
    /** Sets the PM radio button label which is displayed in radio group. */
    set labelPM(value: string);
    get labelPM(): string;
    private _placeholderHours;
    /** Sets the placeholder of hours field. Default: 'hh' */
    set placeholderHours(value: string);
    get placeholderHours(): string;
    private _placeholderMinutes;
    /** Sets the placeholder of minutes field. Default: 'mm' */
    set placeholderMinutes(value: string);
    get placeholderMinutes(): string;
    private _required;
    /** Whether the timefield is required. */
    get required(): boolean;
    set required(value: BooleanInput);
    private _negative;
    /** Whether the timefield uses the negative set of styling. */
    set negative(value: BooleanInput);
    get negative(): BooleanInput;
    private _disabled;
    /** Whether the timefield is disabled. */
    set disabled(value: BooleanInput);
    get disabled(): boolean;
    private _hours;
    /** @docs-private */
    set hours(value: string);
    get hours(): string;
    private _minutes;
    /** @docs-private */
    set minutes(value: string);
    get minutes(): string;
    private _hasFocus;
    /** @docs-private */
    get hasFocus(): "has-focus" | null;
    constructor(_cdr: ChangeDetectorRef, 
    /** @docs-private */ ngControl: NgControl | null, _errorStateMatcher: ErrorStateMatcher, _parentForm: NgForm | null, _parentFormGroup: FormGroupDirective | null, _intl: NxTimefieldIntl);
    ngDoCheck(): void;
    /** @docs-private */
    updateErrorState(): void;
    private _convertToISOFormat;
    _updateTime(): void;
    _onFocus(): void;
    _getAriaLabel(type: string): string;
    _onInput(event: any, type: string): void;
    _onBlur(type: string): void;
    private _timeInTwentyFourHourFormat;
    private _isValidInput;
    private _isValidTime;
    private _parseAndSetTime;
    writeValue(value: string): void;
    private _onTouchedCallback;
    private _onChangeCallback;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxTimefieldComponent, [null, { optional: true; self: true; }, null, { optional: true; }, { optional: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxTimefieldComponent, "nx-timefield", never, { "twelveHourFormat": "twelveHourFormat"; "label": "label"; "labelAM": "labelAM"; "labelPM": "labelPM"; "placeholderHours": "placeholderHours"; "placeholderMinutes": "placeholderMinutes"; "required": "required"; "negative": "negative"; "disabled": "disabled"; }, { "valueChange": "valueChange"; }, never, never>;
}
