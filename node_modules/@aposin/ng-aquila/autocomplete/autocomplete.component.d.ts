import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';
import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, QueryList, TemplateRef } from '@angular/core';
import { NxFormfieldComponent } from '@aposin/ng-aquila/formfield';
import { Observable } from 'rxjs';
import { NxAutocompleteOptionComponent } from './autocomplete-option.component';
import * as i0 from "@angular/core";
/** Event object that is emitted when an autocomplete option is selected. */
export declare class NxAutocompleteSelectedEvent {
    /** Reference to the autocomplete panel that emitted the event. */
    source: NxAutocompleteComponent;
    /** Option that was selected. */
    option: NxAutocompleteOptionComponent;
    constructor(
    /** Reference to the autocomplete panel that emitted the event. */
    source: NxAutocompleteComponent, 
    /** Option that was selected. */
    option: NxAutocompleteOptionComponent);
}
export declare class NxAutocompleteComponent implements AfterViewInit, OnDestroy {
    private _cdr;
    private _elementRef;
    private formFieldComponent;
    /** Manages active item in option list based on key events. */
    _keyManager: ActiveDescendantKeyManager<NxAutocompleteOptionComponent>;
    /** Whether the autocomplete panel should be visible, depending on option length. */
    showPanel: boolean;
    /** Whether the autocomplete panel is open. */
    get isOpen(): boolean;
    _isOpen: boolean;
    /** @docs-private */
    template: TemplateRef<any>;
    /**
     * @docs-private
     * Element for the panel containing the autocomplete options.
     */
    panel: ElementRef;
    /** Items observable. If given, autocomplete takes care of the options and ng-content is discarderd */
    set items(val: string[] | Observable<string[]>);
    get items(): string[];
    private _items;
    private _itemsSubscription?;
    /**
     * @docs-private
     * Is items observable set
     */
    get hasItems(): boolean;
    private _hasItems;
    /** Event that is emitted whenever an option from the list is selected. */
    readonly optionSelected: EventEmitter<NxAutocompleteSelectedEvent>;
    /** Event that is emitted when the autocomplete panel is opened. */
    readonly opened: EventEmitter<void>;
    /** Event that is emitted when the autocomplete panel is closed. */
    readonly closed: EventEmitter<void>;
    /** Autocomplete options in view - ie from items */
    private _vOptions;
    /** Autocomplete options in content - ie user provided */
    private _cOptions;
    /** Autocomplete options */
    get options(): QueryList<NxAutocompleteOptionComponent>;
    /**
     * Takes classes set on the host nx-autocomplete element and applies them to the panel
     * inside the overlay container to allow for easy styling.
     */
    set classList(value: string);
    _classList: {
        [key: string]: boolean;
    };
    /** Unique ID to be used by autocomplete trigger's "aria-owns" property. */
    id: string;
    private readonly _destroyed;
    /**
     * Value to string converter function.
     * As an autocomplete option can hold any value, a converter might be needed
     * to get a string representation of the value, which can be stored in the input.
     *
     * Default: value ? value.toString() : null.
     */
    valueFormatter: (value: any) => string;
    constructor(_cdr: ChangeDetectorRef, _elementRef: ElementRef, formFieldComponent: NxFormfieldComponent | null);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /**
     * Sets the panel scrollTop. This allows us to manually scroll to display options
     * above or below the fold, as they are not actually being focused when active.
     */
    _setScrollTop(scrollTop: number): void;
    /** Returns the panel's scrollTop. */
    _getScrollTop(): number;
    /** Panel should hide itself when the option list is empty. */
    _setVisibility(): void;
    /** Emits the `select` event. */
    _emitSelectEvent(option: NxAutocompleteOptionComponent): void;
    get _isInOutlineField(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxAutocompleteComponent, [null, null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxAutocompleteComponent, "nx-autocomplete", ["nxAutocomplete"], { "items": "items"; "classList": "class"; "valueFormatter": "nxValueFormatter"; }, { "optionSelected": "optionSelected"; "opened": "opened"; "closed": "closed"; }, ["_cOptions"], ["*"]>;
}
