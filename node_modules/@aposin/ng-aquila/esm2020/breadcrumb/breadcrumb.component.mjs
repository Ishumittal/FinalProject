import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ChangeDetectionStrategy, Component, ContentChildren, Input } from '@angular/core';
import { Subject } from 'rxjs';
import { filter, startWith, takeUntil } from 'rxjs/operators';
import { NxBreadcrumbItemComponent } from './breadcrumb-item.component';
import * as i0 from "@angular/core";
export class NxBreadcrumbComponent {
    constructor(_cdr) {
        this._cdr = _cdr;
        this._negative = false;
        this._appeareance = 'default';
        this._destroyed = new Subject();
    }
    /**
     * Sets the appearance of the breadcrumb. default: 'default'
     */
    set appearance(value) {
        this._appeareance = value;
        this._cdr.markForCheck();
    }
    get appearance() {
        return this._appeareance;
    }
    /** Whether the component uses the negative styling. */
    set negative(value) {
        this._negative = coerceBooleanProperty(value);
        this._cdr.markForCheck();
    }
    get negative() {
        return this._negative;
    }
    ngAfterContentInit() {
        if (this.breadcrumbItems.length === 0) {
            console.warn('A breadcrumb needs NxBreadcrumbItemComponent children wrapped in <li>!');
        }
        this.breadcrumbItems.changes
            .pipe(startWith(this.breadcrumbItems), filter(items => items.length !== 0), takeUntil(this._destroyed))
            .subscribe(items => {
            this.breadcrumbItems.forEach(item => item.resetAriaLabel());
            this.breadcrumbItems.last.setAsLast();
        });
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
}
NxBreadcrumbComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxBreadcrumbComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NxBreadcrumbComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxBreadcrumbComponent, selector: "ol[nxBreadcrumb]", inputs: { appearance: "appearance", negative: "negative" }, host: { properties: { "class.is-negative": "negative", "class.is-link": "appearance === \"link\"" } }, queries: [{ propertyName: "breadcrumbItems", predicate: NxBreadcrumbItemComponent, descendants: true }], ngImport: i0, template: "<ng-content></ng-content>\n", styles: [":host{display:flex;list-style:none;height:24px;padding:0}:host(.is-link) ::ng-deep .nx-breadcrumb-item{color:var(--breadcrumb-link-color)}:host(.is-link) ::ng-deep .nx-breadcrumb-item__text:hover{color:var(--breadcrumb-link-hover-color)}:host(.is-link) ::ng-deep .nx-breadcrumb-item__text:active{color:var(--breadcrumb-link-active-color)}::ng-deep li:last-child .nx-breadcrumb-item{font-weight:600;cursor:auto}::ng-deep li:last-child .nx-breadcrumb-item__chevron{display:none}::ng-deep li+li .nx-breadcrumb-item{margin-left:4px}:host-context([dir=rtl]) ::ng-deep li+li .nx-breadcrumb-item{margin-left:0;margin-left:initial;margin-right:4px}:host(.is-negative) ::ng-deep .nx-breadcrumb-item{color:var(--negative)}@media screen and (-ms-high-contrast: active){::ng-deep .nx-breadcrumb-item__chevron{color:windowText}}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxBreadcrumbComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ol[nxBreadcrumb]', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[class.is-negative]': 'negative',
                        '[class.is-link]': 'appearance === "link"',
                    }, template: "<ng-content></ng-content>\n", styles: [":host{display:flex;list-style:none;height:24px;padding:0}:host(.is-link) ::ng-deep .nx-breadcrumb-item{color:var(--breadcrumb-link-color)}:host(.is-link) ::ng-deep .nx-breadcrumb-item__text:hover{color:var(--breadcrumb-link-hover-color)}:host(.is-link) ::ng-deep .nx-breadcrumb-item__text:active{color:var(--breadcrumb-link-active-color)}::ng-deep li:last-child .nx-breadcrumb-item{font-weight:600;cursor:auto}::ng-deep li:last-child .nx-breadcrumb-item__chevron{display:none}::ng-deep li+li .nx-breadcrumb-item{margin-left:4px}:host-context([dir=rtl]) ::ng-deep li+li .nx-breadcrumb-item{margin-left:0;margin-left:initial;margin-right:4px}:host(.is-negative) ::ng-deep .nx-breadcrumb-item{color:var(--negative)}@media screen and (-ms-high-contrast: active){::ng-deep .nx-breadcrumb-item__chevron{color:windowText}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { appearance: [{
                type: Input
            }], negative: [{
                type: Input
            }], breadcrumbItems: [{
                type: ContentChildren,
                args: [NxBreadcrumbItemComponent, { descendants: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1hcXVpbGEvc3JjL2JyZWFkY3J1bWIvYnJlYWRjcnVtYi5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1hcXVpbGEvc3JjL2JyZWFkY3J1bWIvYnJlYWRjcnVtYi5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWdCLHFCQUFxQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDNUUsT0FBTyxFQUFvQix1QkFBdUIsRUFBcUIsU0FBUyxFQUFFLGVBQWUsRUFBRSxLQUFLLEVBQXdCLE1BQU0sZUFBZSxDQUFDO0FBQ3RKLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFOUQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7O0FBaUJ4RSxNQUFNLE9BQU8scUJBQXFCO0lBbUM5QixZQUFvQixJQUF1QjtRQUF2QixTQUFJLEdBQUosSUFBSSxDQUFtQjtRQWxDbkMsY0FBUyxHQUFHLEtBQUssQ0FBQztRQUVsQixpQkFBWSxHQUEyQixTQUFTLENBQUM7UUE4QnhDLGVBQVUsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO0lBRUosQ0FBQztJQTlCL0M7O09BRUc7SUFDSCxJQUNJLFVBQVUsQ0FBQyxLQUE2QjtRQUN4QyxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztRQUMxQixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCxJQUFJLFVBQVU7UUFDVixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDN0IsQ0FBQztJQUVELHVEQUF1RDtJQUN2RCxJQUNJLFFBQVEsQ0FBQyxLQUFtQjtRQUM1QixJQUFJLENBQUMsU0FBUyxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVELElBQUksUUFBUTtRQUNSLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMxQixDQUFDO0lBVUQsa0JBQWtCO1FBQ2QsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDbkMsT0FBTyxDQUFDLElBQUksQ0FBQyx3RUFBd0UsQ0FBQyxDQUFDO1NBQzFGO1FBRUQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPO2FBQ3ZCLElBQUksQ0FDRCxTQUFTLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUMvQixNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxFQUNuQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUM3QjthQUNBLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNmLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7WUFDNUQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDMUMsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMvQixDQUFDOztrSEF6RFEscUJBQXFCO3NHQUFyQixxQkFBcUIsMlBBOEJiLHlCQUF5QixnRENwRDlDLDZCQUNBOzJGRHFCYSxxQkFBcUI7a0JBVmpDLFNBQVM7K0JBQ0ksa0JBQWtCLG1CQUdYLHVCQUF1QixDQUFDLE1BQU0sUUFDekM7d0JBQ0YscUJBQXFCLEVBQUUsVUFBVTt3QkFDakMsaUJBQWlCLEVBQUUsdUJBQXVCO3FCQUM3Qzt3R0FXRyxVQUFVO3NCQURiLEtBQUs7Z0JBWUYsUUFBUTtzQkFEWCxLQUFLO2dCQVlOLGVBQWU7c0JBRGQsZUFBZTt1QkFBQyx5QkFBeUIsRUFBRSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb29sZWFuSW5wdXQsIGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XG5pbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgQ29udGVudENoaWxkcmVuLCBJbnB1dCwgT25EZXN0cm95LCBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciwgc3RhcnRXaXRoLCB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IE54QnJlYWRjcnVtYkl0ZW1Db21wb25lbnQgfSBmcm9tICcuL2JyZWFkY3J1bWItaXRlbS5jb21wb25lbnQnO1xuXG4vKipcbiAqIFRoZSBhcHBlYXJhbmNlIG9mIHRoZSBicmVhZGNydW1iLlxuICovXG5leHBvcnQgdHlwZSBOeEJyZWFkY3J1bXBBcHBlYXJhbmNlID0gJ2RlZmF1bHQnIHwgJ2xpbmsnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ29sW254QnJlYWRjcnVtYl0nLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9icmVhZGNydW1iLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9icmVhZGNydW1iLmNvbXBvbmVudC5zY3NzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgaG9zdDoge1xuICAgICAgICAnW2NsYXNzLmlzLW5lZ2F0aXZlXSc6ICduZWdhdGl2ZScsXG4gICAgICAgICdbY2xhc3MuaXMtbGlua10nOiAnYXBwZWFyYW5jZSA9PT0gXCJsaW5rXCInLFxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIE54QnJlYWRjcnVtYkNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBfbmVnYXRpdmUgPSBmYWxzZTtcblxuICAgIHByaXZhdGUgX2FwcGVhcmVhbmNlOiBOeEJyZWFkY3J1bXBBcHBlYXJhbmNlID0gJ2RlZmF1bHQnO1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYXBwZWFyYW5jZSBvZiB0aGUgYnJlYWRjcnVtYi4gZGVmYXVsdDogJ2RlZmF1bHQnXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBzZXQgYXBwZWFyYW5jZSh2YWx1ZTogTnhCcmVhZGNydW1wQXBwZWFyYW5jZSkge1xuICAgICAgICB0aGlzLl9hcHBlYXJlYW5jZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLl9jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuXG4gICAgZ2V0IGFwcGVhcmFuY2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBlYXJlYW5jZTtcbiAgICB9XG5cbiAgICAvKiogV2hldGhlciB0aGUgY29tcG9uZW50IHVzZXMgdGhlIG5lZ2F0aXZlIHN0eWxpbmcuICovXG4gICAgQElucHV0KClcbiAgICBzZXQgbmVnYXRpdmUodmFsdWU6IEJvb2xlYW5JbnB1dCkge1xuICAgICAgICB0aGlzLl9uZWdhdGl2ZSA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSk7XG4gICAgICAgIHRoaXMuX2Nkci5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG5cbiAgICBnZXQgbmVnYXRpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9uZWdhdGl2ZTtcbiAgICB9XG5cbiAgICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICAgIEBDb250ZW50Q2hpbGRyZW4oTnhCcmVhZGNydW1iSXRlbUNvbXBvbmVudCwgeyBkZXNjZW5kYW50czogdHJ1ZSB9KVxuICAgIGJyZWFkY3J1bWJJdGVtcyE6IFF1ZXJ5TGlzdDxOeEJyZWFkY3J1bWJJdGVtQ29tcG9uZW50PjtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2Rlc3Ryb3llZCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9jZHI6IENoYW5nZURldGVjdG9yUmVmKSB7fVxuXG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgICAgICBpZiAodGhpcy5icmVhZGNydW1iSXRlbXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0EgYnJlYWRjcnVtYiBuZWVkcyBOeEJyZWFkY3J1bWJJdGVtQ29tcG9uZW50IGNoaWxkcmVuIHdyYXBwZWQgaW4gPGxpPiEnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYnJlYWRjcnVtYkl0ZW1zLmNoYW5nZXNcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIHN0YXJ0V2l0aCh0aGlzLmJyZWFkY3J1bWJJdGVtcyksXG4gICAgICAgICAgICAgICAgZmlsdGVyKGl0ZW1zID0+IGl0ZW1zLmxlbmd0aCAhPT0gMCksXG4gICAgICAgICAgICAgICAgdGFrZVVudGlsKHRoaXMuX2Rlc3Ryb3llZCksXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuc3Vic2NyaWJlKGl0ZW1zID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmJyZWFkY3J1bWJJdGVtcy5mb3JFYWNoKGl0ZW0gPT4gaXRlbS5yZXNldEFyaWFMYWJlbCgpKTtcbiAgICAgICAgICAgICAgICB0aGlzLmJyZWFkY3J1bWJJdGVtcy5sYXN0LnNldEFzTGFzdCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuX2Rlc3Ryb3llZC5uZXh0KCk7XG4gICAgICAgIHRoaXMuX2Rlc3Ryb3llZC5jb21wbGV0ZSgpO1xuICAgIH1cbn1cbiIsIjxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiJdfQ==