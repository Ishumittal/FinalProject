import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Component, EventEmitter, Input, Optional, Output, ViewChild } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../comparison-table-base";
import * as i2 from "../comparison-table-row-base";
import * as i3 from "../toggle-section/toggle-section-base";
import * as i4 from "@angular/common";
let nextId = 0;
export class NxComparisonTableCell {
    constructor(_table, _row, _toggleSection) {
        this._table = _table;
        this._row = _row;
        this._toggleSection = _toggleSection;
        this._disabledColumn = false;
        /** @docs-private */
        this.indexChange = new EventEmitter();
        this._id = `nx-comparison-table-cell-${nextId++}`;
        this._type = 'content';
    }
    /** @docs-private */
    set index(newValue) {
        if (this._index !== newValue) {
            if (this._disabledColumn) {
                this._table._removeDisabledColumn(this._index);
                this._table._addDisabledColumn(newValue);
            }
            this._index = newValue;
            this.indexChange.emit(this._index);
        }
    }
    get index() {
        return this._index;
    }
    /** Sets all cells below a header cell to be disabled (disabled column).
     *  Important: this property can be set only on header cells.
     */
    set disabledColumn(value) {
        const newValue = coerceBooleanProperty(value);
        if (this._type === 'header' && newValue !== this.disabledColumn) {
            this._disabledColumn = newValue;
            if (this._disabledColumn) {
                this._table._addDisabledColumn(this._index);
            }
            else {
                this._table._removeDisabledColumn(this._index);
            }
        }
    }
    get disabledColumn() {
        return this._disabledColumn;
    }
    /** Sets the Id of the cell. */
    set id(value) {
        if (this._id !== value) {
            this._id = value;
        }
    }
    get id() {
        return this._id;
    }
    /** Sets the type of the cell. Default: 'content'. */
    set type(value) {
        if (this._type !== value) {
            this._type = value;
        }
    }
    get type() {
        return this._type;
    }
    _isSelected() {
        return this.index !== undefined && this.index === this._table.selectedIndex;
    }
    _isCellHidden() {
        return Array.isArray(this._table._hiddenIndexes) && this._table._hiddenIndexes.includes(this.index);
    }
    _selectCell() {
        this._table.selectedIndex = this.index;
    }
    get _isCellDisabled() {
        return this._table._disabledIndexes.includes(this.index);
    }
    _getHeaderIds() {
        // product header cell + (toggle-section) + description-cell
        const headerCell = this._table._getHeaderCells().find((cell) => cell.index === this.index);
        let headers = headerCell ? `${headerCell.id}` : '';
        if (this._row.descriptionCell) {
            headers += ` ${this._row.descriptionCell.id}`;
        }
        if (this._toggleSection) {
            headers += ` ${this._toggleSection.toggleSectionHeader.id}`;
        }
        return headers;
    }
}
NxComparisonTableCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableCell, deps: [{ token: i1.NxComparisonTableBase }, { token: i2.NxComparisonTableRowBase }, { token: i3.NxToggleSectionBase, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NxComparisonTableCell.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxComparisonTableCell, selector: "nx-comparison-table-cell", inputs: { index: "index", disabledColumn: "disabledColumn", id: "id", type: "type" }, outputs: { indexChange: "indexChange" }, viewQueries: [{ propertyName: "_content", first: true, predicate: ["content"], descendants: true, static: true }], ngImport: i0, template: "<ng-template #content>\n    <ng-container *ngIf=\"_table.viewType === 'desktop' || _table.viewType === 'tablet'\">\n        <div\n            class=\"nx-comparison-table__cell\"\n            [class.is-disabled]=\"_isCellDisabled\"\n            [attr.role]=\"type === 'header' ? 'columnheader' : 'cell'\"\n            [class.is-selected]=\"_isSelected()\"\n            [class.is-hidden]=\"_isCellHidden()\"\n            [attr.id]=\"id\"\n            [attr.headers]=\"_getHeaderIds()\"\n        >\n            <div class=\"nx-comparison-table__cell-content\">\n                <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n            </div>\n        </div>\n    </ng-container>\n    <ng-container *ngIf=\"_table.viewType === 'mobile'\">\n        <td\n            [class.nx-comparison-table__mobile-header-cell]=\"type === 'header'\"\n            [class.nx-comparison-table__cell]=\"type !== 'header'\"\n            [class.is-selected]=\"_isSelected()\"\n            [class.is-hidden]=\"_isCellHidden()\"\n            [attr.scope]=\"type === 'header' ? 'row' : ''\"\n            [attr.id]=\"id\"\n            [attr.headers]=\"_getHeaderIds()\"\n        >\n            <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n        </td>\n    </ng-container>\n</ng-template>\n\n<ng-template #ngContent>\n    <ng-content></ng-content>\n</ng-template>\n", styles: [".nx-comparison-table__mobile-header-cell.is-selected,.nx-comparison-table__cell.is-selected{background-color:var(--comparison-table-selected-column-background-color);color:var(--comparison-table-selected-column-text-color)}.nx-comparison-table__mobile-header-cell.is-hidden,.nx-comparison-table__cell.is-hidden{display:none}\n"], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableCell, decorators: [{
            type: Component,
            args: [{ selector: 'nx-comparison-table-cell', template: "<ng-template #content>\n    <ng-container *ngIf=\"_table.viewType === 'desktop' || _table.viewType === 'tablet'\">\n        <div\n            class=\"nx-comparison-table__cell\"\n            [class.is-disabled]=\"_isCellDisabled\"\n            [attr.role]=\"type === 'header' ? 'columnheader' : 'cell'\"\n            [class.is-selected]=\"_isSelected()\"\n            [class.is-hidden]=\"_isCellHidden()\"\n            [attr.id]=\"id\"\n            [attr.headers]=\"_getHeaderIds()\"\n        >\n            <div class=\"nx-comparison-table__cell-content\">\n                <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n            </div>\n        </div>\n    </ng-container>\n    <ng-container *ngIf=\"_table.viewType === 'mobile'\">\n        <td\n            [class.nx-comparison-table__mobile-header-cell]=\"type === 'header'\"\n            [class.nx-comparison-table__cell]=\"type !== 'header'\"\n            [class.is-selected]=\"_isSelected()\"\n            [class.is-hidden]=\"_isCellHidden()\"\n            [attr.scope]=\"type === 'header' ? 'row' : ''\"\n            [attr.id]=\"id\"\n            [attr.headers]=\"_getHeaderIds()\"\n        >\n            <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n        </td>\n    </ng-container>\n</ng-template>\n\n<ng-template #ngContent>\n    <ng-content></ng-content>\n</ng-template>\n", styles: [".nx-comparison-table__mobile-header-cell.is-selected,.nx-comparison-table__cell.is-selected{background-color:var(--comparison-table-selected-column-background-color);color:var(--comparison-table-selected-column-text-color)}.nx-comparison-table__mobile-header-cell.is-hidden,.nx-comparison-table__cell.is-hidden{display:none}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.NxComparisonTableBase }, { type: i2.NxComparisonTableRowBase }, { type: i3.NxToggleSectionBase, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { _content: [{
                type: ViewChild,
                args: ['content', { static: true }]
            }], index: [{
                type: Input
            }], disabledColumn: [{
                type: Input
            }], indexChange: [{
                type: Output
            }], id: [{
                type: Input
            }], type: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,