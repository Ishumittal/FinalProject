import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ENTER, SPACE } from '@angular/cdk/keycodes';
import { Component, EventEmitter, Inject, Input, Optional, Output, ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { COMPARISON_TABLE_DEFAULT_OPTIONS } from '../comparison-table.models';
import * as i0 from "@angular/core";
import * as i1 from "../comparison-table-base";
import * as i2 from "@angular/cdk/a11y";
import * as i3 from "@angular/cdk/bidi";
import * as i4 from "../flex-row/flex-row.component";
import * as i5 from "@aposin/ng-aquila/icon";
import * as i6 from "@angular/common";
/**
 * @docs-private
 *
 * Component that is only used internally for displaying a `nxComparisonTableRowGroup` in desktop and tablet view.
 */
export class NxComparisonTableDesktopGroup {
    constructor(_table, _focusMonitor, _dir, _defaultOptions) {
        this._table = _table;
        this._focusMonitor = _focusMonitor;
        this._dir = _dir;
        this._defaultOptions = _defaultOptions;
        this._expanded = false;
        this._useFullRowForExpandableArea = false;
        this.isExpandedChange = new EventEmitter();
        this._destroyed = new Subject();
    }
    /** Sets if the row group is expanded. Default: false. */
    set isExpanded(value) {
        this._expanded = coerceBooleanProperty(value);
    }
    get isExpanded() {
        return this._expanded;
    }
    /** Sets if the expansion cell uses the full row of the table or leaves out the first column. Default: false. */
    set useFullRowForExpandableArea(value) {
        this._useFullRowForExpandableArea = coerceBooleanProperty(value);
    }
    get useFullRowForExpandableArea() {
        if (this._useFullRowForExpandableArea !== undefined) {
            return this._useFullRowForExpandableArea;
        }
        if (this._defaultOptions?.useFullRowForExpandableArea !== undefined) {
            return this._defaultOptions.useFullRowForExpandableArea;
        }
        return false;
    }
    ngAfterViewInit() {
        this._updateFocusMonitoring();
        this.group?.rows.changes.pipe(takeUntil(this._destroyed)).subscribe(rows => 
        // timeout is needed here so that the focus monitor is updated after the view was updated
        setTimeout(() => this._updateFocusMonitoring()));
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this._focusMonitor.stopMonitoring(this._expansionCell);
    }
    /** The text direction of the containing app. */
    get dir() {
        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
    }
    toggleGroup() {
        this.isExpanded = !this.isExpanded;
        this.isExpandedChange.emit(this.isExpanded);
    }
    _updateFocusMonitoring() {
        if (this._expansionCellPrevious && !this._expansionCell) {
            this._focusMonitor.stopMonitoring(this._expansionCellPrevious);
            this._expansionCellPrevious = this._expansionCell;
        }
        if (!this._expansionCellPrevious && this._expansionCell) {
            this._focusMonitor
                .monitor(this._expansionCell)
                .pipe(takeUntil(this._destroyed))
                .subscribe(origin => {
                if (origin === 'keyboard') {
                    this._table._scrollElementIntoView(this._expansionCell, 8);
                }
            });
            this._expansionCellPrevious = this._expansionCell;
        }
    }
    _onKeydown(event) {
        if (event.keyCode === ENTER) {
            this.toggleGroup();
        }
        else if (event.keyCode === SPACE) {
            this.toggleGroup();
            event.preventDefault(); // prevent from scrolling
        }
    }
    getOpenState() {
        return this._expanded ? 'open' : 'closed';
    }
    get _expandedAreaColspan() {
        if (this._table.viewType === 'desktop' && this._useFullRowForExpandableArea) {
            return this._table._infoColumnCount() + 1;
        }
        return this._table._infoColumnCount();
    }
}
NxComparisonTableDesktopGroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableDesktopGroup, deps: [{ token: i1.NxComparisonTableBase }, { token: i2.FocusMonitor }, { token: i3.Directionality, optional: true }, { token: COMPARISON_TABLE_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NxComparisonTableDesktopGroup.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxComparisonTableDesktopGroup, selector: "nx-comparison-table-desktop-group", inputs: { group: "group", isExpanded: "isExpanded", useFullRowForExpandableArea: "useFullRowForExpandableArea" }, outputs: { isExpandedChange: "isExpandedChange" }, viewQueries: [{ propertyName: "_expansionCell", first: true, predicate: ["expansionCell"], descendants: true }], ngImport: i0, template: "<ng-container *ngFor=\"let row of group.rows; let i = index\">\n    <nx-comparison-table-flex-row *ngIf=\"i < group.visibleRows || _expanded\" [row]=\"row\"> </nx-comparison-table-flex-row>\n</ng-container>\n\n<div *ngIf=\"group.rows.length > group.visibleRows\" class=\"nx-comparison-table__row\" role=\"row\">\n    <div *ngIf=\"_table.viewType === 'desktop' && !useFullRowForExpandableArea\" class=\"nx-comparison-table__placeholder-cell\" role=\"cell\">\n        <div class=\"nx-comparison-table__cell-content\"></div>\n    </div>\n    <div\n        #expansionCell\n        class=\"nx-comparison-table__intersection-cell nx-comparison-table__group-expansion-cell\"\n        [class.full-width]=\"_table.viewType === 'desktop' && useFullRowForExpandableArea\"\n        role=\"cell\"\n        [attr.aria-colspan]=\"_expandedAreaColspan\"\n        [style.flex-grow]=\"_expandedAreaColspan\"\n        (click)=\"toggleGroup()\"\n        [attr.aria-expanded]=\"_expanded\"\n        tabindex=\"0\"\n        (keydown)=\"_onKeydown($event)\"\n    >\n        <div class=\"nx-comparison-table__cell-content\">\n            <span class=\"group-label\">{{ _expanded ? group.labelExpanded : group.labelCollapsed }}</span>\n            <nx-icon\n                [name]=\"_expanded ? 'chevron-up' : 'chevron-down'\"\n                aria-hidden=\"true\"\n                size=\"s\"\n                [class.nx-margin-left-2xs]=\"dir === 'ltr'\"\n                [class.nx-margin-right-2xs]=\"dir === 'rtl'\"\n            >\n            </nx-icon>\n        </div>\n    </div>\n</div>\n", styles: [":host{display:block}:host .nx-comparison-table__group-expansion-cell{cursor:pointer;color:var(--comparison-table-expansion-cell-color)}:host .nx-comparison-table__group-expansion-cell:focus{outline:0}:host .nx-comparison-table__group-expansion-cell .nx-comparison-table__cell-content{display:flex;justify-content:center}:host .nx-comparison-table__group-expansion-cell .group-label{font-size:var(--comparison-table-group-label-font-size);line-height:var(--comparison-table-group-label-line-height);font-weight:var(--comparison-table-group-label-font-weight);letter-spacing:var(--comparison-table-group-label-letter-spacing)}@media screen and (-ms-high-contrast: active){:host .nx-comparison-table__group-expansion-cell{color:buttonText;background:buttonFace;border-color:buttonText}}.nx-comparison-table__group-expansion-cell.cdk-keyboard-focused .nx-comparison-table__cell-content{box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-comparison-table__group-expansion-cell.cdk-keyboard-focused .nx-comparison-table__cell-content{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}\n"], components: [{ type: i4.NxComparisonTableFlexRow, selector: "nx-comparison-table-flex-row", inputs: ["row"] }, { type: i5.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }], directives: [{ type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableDesktopGroup, decorators: [{
            type: Component,
            args: [{ selector: 'nx-comparison-table-desktop-group', template: "<ng-container *ngFor=\"let row of group.rows; let i = index\">\n    <nx-comparison-table-flex-row *ngIf=\"i < group.visibleRows || _expanded\" [row]=\"row\"> </nx-comparison-table-flex-row>\n</ng-container>\n\n<div *ngIf=\"group.rows.length > group.visibleRows\" class=\"nx-comparison-table__row\" role=\"row\">\n    <div *ngIf=\"_table.viewType === 'desktop' && !useFullRowForExpandableArea\" class=\"nx-comparison-table__placeholder-cell\" role=\"cell\">\n        <div class=\"nx-comparison-table__cell-content\"></div>\n    </div>\n    <div\n        #expansionCell\n        class=\"nx-comparison-table__intersection-cell nx-comparison-table__group-expansion-cell\"\n        [class.full-width]=\"_table.viewType === 'desktop' && useFullRowForExpandableArea\"\n        role=\"cell\"\n        [attr.aria-colspan]=\"_expandedAreaColspan\"\n        [style.flex-grow]=\"_expandedAreaColspan\"\n        (click)=\"toggleGroup()\"\n        [attr.aria-expanded]=\"_expanded\"\n        tabindex=\"0\"\n        (keydown)=\"_onKeydown($event)\"\n    >\n        <div class=\"nx-comparison-table__cell-content\">\n            <span class=\"group-label\">{{ _expanded ? group.labelExpanded : group.labelCollapsed }}</span>\n            <nx-icon\n                [name]=\"_expanded ? 'chevron-up' : 'chevron-down'\"\n                aria-hidden=\"true\"\n                size=\"s\"\n                [class.nx-margin-left-2xs]=\"dir === 'ltr'\"\n                [class.nx-margin-right-2xs]=\"dir === 'rtl'\"\n            >\n            </nx-icon>\n        </div>\n    </div>\n</div>\n", styles: [":host{display:block}:host .nx-comparison-table__group-expansion-cell{cursor:pointer;color:var(--comparison-table-expansion-cell-color)}:host .nx-comparison-table__group-expansion-cell:focus{outline:0}:host .nx-comparison-table__group-expansion-cell .nx-comparison-table__cell-content{display:flex;justify-content:center}:host .nx-comparison-table__group-expansion-cell .group-label{font-size:var(--comparison-table-group-label-font-size);line-height:var(--comparison-table-group-label-line-height);font-weight:var(--comparison-table-group-label-font-weight);letter-spacing:var(--comparison-table-group-label-letter-spacing)}@media screen and (-ms-high-contrast: active){:host .nx-comparison-table__group-expansion-cell{color:buttonText;background:buttonFace;border-color:buttonText}}.nx-comparison-table__group-expansion-cell.cdk-keyboard-focused .nx-comparison-table__cell-content{box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-comparison-table__group-expansion-cell.cdk-keyboard-focused .nx-comparison-table__cell-content{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.NxComparisonTableBase }, { type: i2.FocusMonitor }, { type: i3.Directionality, decorators: [{
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [COMPARISON_TABLE_DEFAULT_OPTIONS]
                }] }]; }, propDecorators: { group: [{
                type: Input
            }], _expansionCell: [{
                type: ViewChild,
                args: ['expansionCell']
            }], isExpanded: [{
                type: Input
            }], useFullRowForExpandableArea: [{
                type: Input
            }], isExpandedChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,