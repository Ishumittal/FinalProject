import { coerceNumberProperty } from '@angular/cdk/coercion';
import { Component, Input, ViewChild } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../comparison-table-base";
import * as i2 from "../comparison-table-row-base";
import * as i3 from "@angular/common";
let nextId = 0;
export class NxComparisonTablePopularCell {
    constructor(_table, _row) {
        this._table = _table;
        this._row = _row;
        this._id = `nx-comparison-table-popular-cell-${nextId++}`;
        if (this._row.type !== 'header') {
            console.warn('A popular cell should be only in a header row.');
        }
    }
    /** Sets the Id of the popular cell. */
    set id(value) {
        if (this._id !== value) {
            this._id = value;
        }
    }
    get id() {
        return this._id;
    }
    /** Sets the id of the column above which the popular cell should be displayed.
     *
     * Note: counting starts from 1. If set to 1 the popular cell will appear above the first header column of the table.
     */
    set forColumn(value) {
        const newValue = coerceNumberProperty(value);
        if (this._forColumn !== newValue) {
            this._forColumn = newValue;
        }
    }
    get forColumn() {
        return this._forColumn;
    }
}
NxComparisonTablePopularCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTablePopularCell, deps: [{ token: i1.NxComparisonTableBase }, { token: i2.NxComparisonTableRowBase }], target: i0.ɵɵFactoryTarget.Component });
NxComparisonTablePopularCell.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxComparisonTablePopularCell, selector: "nx-comparison-table-popular-cell", inputs: { id: "id", forColumn: "forColumn" }, viewQueries: [{ propertyName: "_content", first: true, predicate: ["content"], descendants: true, static: true }], ngImport: i0, template: "<ng-template #content>\n    <ng-container *ngIf=\"_table.viewType === 'desktop' || _table.viewType === 'tablet'\">\n        <div class=\"nx-comparison-table__popular-cell\" [class.is-hidden]=\"_table._hiddenIndexes.indexOf(forColumn - 1) !== -1\" role=\"cell\" [attr.id]=\"id\">\n            <div class=\"nx-comparison-table__cell-content\">\n                <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n            </div>\n        </div>\n    </ng-container>\n    <ng-container *ngIf=\"_table.viewType === 'mobile'\">\n        <td class=\"nx-comparison-table__mobile-popular-cell\" [class.is-hidden]=\"_table._hiddenIndexes.indexOf(forColumn - 1) !== -1\" [attr.id]=\"id\">\n            <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n        </td>\n    </ng-container>\n</ng-template>\n\n<ng-template #ngContent>\n    <ng-content></ng-content>\n</ng-template>\n", styles: [".nx-comparison-table__popular-cell.is-hidden,::ng-deep td.nx-comparison-table__mobile-popular-cell.is-hidden div{display:none}td.nx-comparison-table__mobile-popular-cell.is-hidden{padding:0}\n"], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTablePopularCell, decorators: [{
            type: Component,
            args: [{ selector: 'nx-comparison-table-popular-cell', template: "<ng-template #content>\n    <ng-container *ngIf=\"_table.viewType === 'desktop' || _table.viewType === 'tablet'\">\n        <div class=\"nx-comparison-table__popular-cell\" [class.is-hidden]=\"_table._hiddenIndexes.indexOf(forColumn - 1) !== -1\" role=\"cell\" [attr.id]=\"id\">\n            <div class=\"nx-comparison-table__cell-content\">\n                <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n            </div>\n        </div>\n    </ng-container>\n    <ng-container *ngIf=\"_table.viewType === 'mobile'\">\n        <td class=\"nx-comparison-table__mobile-popular-cell\" [class.is-hidden]=\"_table._hiddenIndexes.indexOf(forColumn - 1) !== -1\" [attr.id]=\"id\">\n            <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n        </td>\n    </ng-container>\n</ng-template>\n\n<ng-template #ngContent>\n    <ng-content></ng-content>\n</ng-template>\n", styles: [".nx-comparison-table__popular-cell.is-hidden,::ng-deep td.nx-comparison-table__mobile-popular-cell.is-hidden div{display:none}td.nx-comparison-table__mobile-popular-cell.is-hidden{padding:0}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.NxComparisonTableBase }, { type: i2.NxComparisonTableRowBase }]; }, propDecorators: { _content: [{
                type: ViewChild,
                args: ['content', { static: true }]
            }], id: [{
                type: Input
            }], forColumn: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wdWxhci1jZWxsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWFxdWlsYS9zcmMvY29tcGFyaXNvbi10YWJsZS9wb3B1bGFyLWNlbGwvcG9wdWxhci1jZWxsLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWFxdWlsYS9zcmMvY29tcGFyaXNvbi10YWJsZS9wb3B1bGFyLWNlbGwvcG9wdWxhci1jZWxsLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxvQkFBb0IsRUFBZSxNQUFNLHVCQUF1QixDQUFDO0FBQzFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFlLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7QUFLekUsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBT2YsTUFBTSxPQUFPLDRCQUE0QjtJQWdDckMsWUFBbUIsTUFBNkIsRUFBUyxJQUE4QjtRQUFwRSxXQUFNLEdBQU4sTUFBTSxDQUF1QjtRQUFTLFNBQUksR0FBSixJQUFJLENBQTBCO1FBN0IvRSxRQUFHLEdBQUcsb0NBQW9DLE1BQU0sRUFBRSxFQUFFLENBQUM7UUE4QnpELElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO1lBQzdCLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0RBQWdELENBQUMsQ0FBQztTQUNsRTtJQUNMLENBQUM7SUE5QkQsdUNBQXVDO0lBQ3ZDLElBQ0ksRUFBRSxDQUFDLEtBQWE7UUFDaEIsSUFBSSxJQUFJLENBQUMsR0FBRyxLQUFLLEtBQUssRUFBRTtZQUNwQixJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQztTQUNwQjtJQUNMLENBQUM7SUFDRCxJQUFJLEVBQUU7UUFDRixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDcEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILElBQ0ksU0FBUyxDQUFDLEtBQWtCO1FBQzVCLE1BQU0sUUFBUSxHQUFHLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdDLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxRQUFRLEVBQUU7WUFDOUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUM7U0FDOUI7SUFDTCxDQUFDO0lBQ0QsSUFBSSxTQUFTO1FBQ1QsT0FBTyxJQUFJLENBQUMsVUFBb0IsQ0FBQztJQUNyQyxDQUFDOzt5SEE5QlEsNEJBQTRCOzZHQUE1Qiw0QkFBNEIseU9DYnpDLGs0QkFrQkE7MkZETGEsNEJBQTRCO2tCQUx4QyxTQUFTOytCQUNJLGtDQUFrQzttSkFLSixRQUFRO3NCQUEvQyxTQUFTO3VCQUFDLFNBQVMsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7Z0JBT2xDLEVBQUU7c0JBREwsS0FBSztnQkFlRixTQUFTO3NCQURaLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb2VyY2VOdW1iZXJQcm9wZXJ0eSwgTnVtYmVySW5wdXQgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgVGVtcGxhdGVSZWYsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBOeENvbXBhcmlzb25UYWJsZUJhc2UgfSBmcm9tICcuLi9jb21wYXJpc29uLXRhYmxlLWJhc2UnO1xuaW1wb3J0IHsgTnhDb21wYXJpc29uVGFibGVSb3dCYXNlIH0gZnJvbSAnLi4vY29tcGFyaXNvbi10YWJsZS1yb3ctYmFzZSc7XG5cbmxldCBuZXh0SWQgPSAwO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ254LWNvbXBhcmlzb24tdGFibGUtcG9wdWxhci1jZWxsJyxcbiAgICBzdHlsZVVybHM6IFsnLi9wb3B1bGFyLWNlbGwuY29tcG9uZW50LnNjc3MnXSxcbiAgICB0ZW1wbGF0ZVVybDogJy4vcG9wdWxhci1jZWxsLmNvbXBvbmVudC5odG1sJyxcbn0pXG5leHBvcnQgY2xhc3MgTnhDb21wYXJpc29uVGFibGVQb3B1bGFyQ2VsbCB7XG4gICAgQFZpZXdDaGlsZCgnY29udGVudCcsIHsgc3RhdGljOiB0cnVlIH0pIF9jb250ZW50ITogVGVtcGxhdGVSZWY8YW55PjtcblxuICAgIHByaXZhdGUgX2lkID0gYG54LWNvbXBhcmlzb24tdGFibGUtcG9wdWxhci1jZWxsLSR7bmV4dElkKyt9YDtcbiAgICBwcml2YXRlIF9mb3JDb2x1bW46IG51bWJlciB8IHVuZGVmaW5lZDtcblxuICAgIC8qKiBTZXRzIHRoZSBJZCBvZiB0aGUgcG9wdWxhciBjZWxsLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgc2V0IGlkKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lkICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5faWQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgaWQoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xuICAgIH1cblxuICAgIC8qKiBTZXRzIHRoZSBpZCBvZiB0aGUgY29sdW1uIGFib3ZlIHdoaWNoIHRoZSBwb3B1bGFyIGNlbGwgc2hvdWxkIGJlIGRpc3BsYXllZC5cbiAgICAgKlxuICAgICAqIE5vdGU6IGNvdW50aW5nIHN0YXJ0cyBmcm9tIDEuIElmIHNldCB0byAxIHRoZSBwb3B1bGFyIGNlbGwgd2lsbCBhcHBlYXIgYWJvdmUgdGhlIGZpcnN0IGhlYWRlciBjb2x1bW4gb2YgdGhlIHRhYmxlLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgc2V0IGZvckNvbHVtbih2YWx1ZTogTnVtYmVySW5wdXQpIHtcbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBjb2VyY2VOdW1iZXJQcm9wZXJ0eSh2YWx1ZSk7XG4gICAgICAgIGlmICh0aGlzLl9mb3JDb2x1bW4gIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9mb3JDb2x1bW4gPSBuZXdWYWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgZm9yQ29sdW1uKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mb3JDb2x1bW4gYXMgbnVtYmVyO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBfdGFibGU6IE54Q29tcGFyaXNvblRhYmxlQmFzZSwgcHVibGljIF9yb3c6IE54Q29tcGFyaXNvblRhYmxlUm93QmFzZSkge1xuICAgICAgICBpZiAodGhpcy5fcm93LnR5cGUgIT09ICdoZWFkZXInKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0EgcG9wdWxhciBjZWxsIHNob3VsZCBiZSBvbmx5IGluIGEgaGVhZGVyIHJvdy4nKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIjxuZy10ZW1wbGF0ZSAjY29udGVudD5cbiAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiX3RhYmxlLnZpZXdUeXBlID09PSAnZGVza3RvcCcgfHwgX3RhYmxlLnZpZXdUeXBlID09PSAndGFibGV0J1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibngtY29tcGFyaXNvbi10YWJsZV9fcG9wdWxhci1jZWxsXCIgW2NsYXNzLmlzLWhpZGRlbl09XCJfdGFibGUuX2hpZGRlbkluZGV4ZXMuaW5kZXhPZihmb3JDb2x1bW4gLSAxKSAhPT0gLTFcIiByb2xlPVwiY2VsbFwiIFthdHRyLmlkXT1cImlkXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibngtY29tcGFyaXNvbi10YWJsZV9fY2VsbC1jb250ZW50XCI+XG4gICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdUZW1wbGF0ZU91dGxldD1cIm5nQ29udGVudFwiPjwvbmctY29udGFpbmVyPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvbmctY29udGFpbmVyPlxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJfdGFibGUudmlld1R5cGUgPT09ICdtb2JpbGUnXCI+XG4gICAgICAgIDx0ZCBjbGFzcz1cIm54LWNvbXBhcmlzb24tdGFibGVfX21vYmlsZS1wb3B1bGFyLWNlbGxcIiBbY2xhc3MuaXMtaGlkZGVuXT1cIl90YWJsZS5faGlkZGVuSW5kZXhlcy5pbmRleE9mKGZvckNvbHVtbiAtIDEpICE9PSAtMVwiIFthdHRyLmlkXT1cImlkXCI+XG4gICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ1RlbXBsYXRlT3V0bGV0PVwibmdDb250ZW50XCI+PC9uZy1jb250YWluZXI+XG4gICAgICAgIDwvdGQ+XG4gICAgPC9uZy1jb250YWluZXI+XG48L25nLXRlbXBsYXRlPlxuXG48bmctdGVtcGxhdGUgI25nQ29udGVudD5cbiAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG48L25nLXRlbXBsYXRlPlxuIl19