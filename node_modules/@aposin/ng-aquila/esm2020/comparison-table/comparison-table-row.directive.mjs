import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ContentChild, ContentChildren, Directive, Input, Optional } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { NxComparisonTableCell } from './cell/cell.component';
import { NxComparisonTableRowBase } from './comparison-table-row-base';
import { NxComparisonTableDescriptionCell } from './description-cell/description-cell.component';
import { NxComparisonTableIntersectionCell } from './intersection-cell/intersection-cell.component';
import { NxComparisonTablePopularCell } from './popular-cell/popular-cell.component';
import { NxTableContentElement } from './table-content-element.directive';
import * as i0 from "@angular/core";
import * as i1 from "./toggle-section/toggle-section-base";
import * as i2 from "./comparison-table-row-group-base";
export class NxComparisonTableRowDirective extends NxComparisonTableRowBase {
    constructor(_toggleSection, _rowGroup) {
        super();
        this._toggleSection = _toggleSection;
        this._rowGroup = _rowGroup;
        this._type = 'content';
        this._mayStick = true;
        this._requestCellClippingUpdate$ = new Subject();
        this._destroyed = new Subject();
    }
    /** Sets the type of the row. Default: 'content'. */
    set type(newValue) {
        if (newValue !== this._type) {
            this._type = newValue;
        }
    }
    get type() {
        return this._type;
    }
    set mayStick(newValue) {
        if (newValue !== this._mayStick) {
            this._mayStick = coerceBooleanProperty(newValue);
            this._requestCellClippingUpdate$.next(undefined);
        }
    }
    get mayStick() {
        return this._type === 'header' && this._mayStick;
    }
    ngAfterContentInit() {
        this._setCellIndexes();
        this.cells.changes.pipe(takeUntil(this._destroyed)).subscribe(() => {
            this._setCellIndexes();
        });
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
    _setCellIndexes() {
        this.cells.forEach((cell, index) => {
            cell.index = index;
        });
    }
    _isPartOfToggleSection() {
        return !!this._toggleSection;
    }
    _isPartOfRowGroup() {
        return !!this._rowGroup;
    }
    _isIntersectionRow() {
        return !!this.intersectionCell;
    }
}
NxComparisonTableRowDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableRowDirective, deps: [{ token: i1.NxToggleSectionBase, optional: true }, { token: i2.NxComparisonTableRowGroupBase, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
NxComparisonTableRowDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxComparisonTableRowDirective, selector: "[nxComparisonTableRow]", inputs: { type: "type", mayStick: "mayStick" }, providers: [
        { provide: NxTableContentElement, useExisting: NxComparisonTableRowDirective },
        { provide: NxComparisonTableRowBase, useExisting: NxComparisonTableRowDirective },
    ], queries: [{ propertyName: "intersectionCell", first: true, predicate: NxComparisonTableIntersectionCell, descendants: true }, { propertyName: "descriptionCell", first: true, predicate: NxComparisonTableDescriptionCell, descendants: true }, { propertyName: "popularCell", first: true, predicate: NxComparisonTablePopularCell, descendants: true }, { propertyName: "cells", predicate: NxComparisonTableCell }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableRowDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[nxComparisonTableRow]',
                    providers: [
                        { provide: NxTableContentElement, useExisting: NxComparisonTableRowDirective },
                        { provide: NxComparisonTableRowBase, useExisting: NxComparisonTableRowDirective },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.NxToggleSectionBase, decorators: [{
                    type: Optional
                }] }, { type: i2.NxComparisonTableRowGroupBase, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { cells: [{
                type: ContentChildren,
                args: [NxComparisonTableCell]
            }], intersectionCell: [{
                type: ContentChild,
                args: [NxComparisonTableIntersectionCell, { static: false }]
            }], descriptionCell: [{
                type: ContentChild,
                args: [NxComparisonTableDescriptionCell, { static: false }]
            }], popularCell: [{
                type: ContentChild,
                args: [NxComparisonTablePopularCell, { static: false }]
            }], type: [{
                type: Input
            }], mayStick: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,