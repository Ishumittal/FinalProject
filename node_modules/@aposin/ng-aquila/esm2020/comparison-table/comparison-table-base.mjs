import { Directive, EventEmitter } from '@angular/core';
import { NxBreakpoints } from '@aposin/ng-aquila/utils';
import { merge, Subject } from 'rxjs';
import { filter, mapTo, takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@aposin/ng-aquila/utils";
/** @docs-private */
export class NxComparisonTableBase {
    constructor(viewportService, _cdr) {
        this.viewportService = viewportService;
        this._cdr = _cdr;
        this._disabledIndexes = [];
        this._hiddenIndexes = [];
        this.viewTypeChange = new EventEmitter();
        this._viewType = 'desktop';
        this._destroyed = new Subject();
        const mobile$ = this.viewportService.max(NxBreakpoints.BREAKPOINT_MEDIUM);
        const tablet$ = this.viewportService.between(NxBreakpoints.BREAKPOINT_MEDIUM, NxBreakpoints.BREAKPOINT_LARGE);
        const desktop$ = this.viewportService.min(NxBreakpoints.BREAKPOINT_LARGE);
        merge(mobile$.pipe(filter(value => value), mapTo('mobile')), tablet$.pipe(filter(value => value), mapTo('tablet')), desktop$.pipe(filter(value => value), mapTo('desktop')))
            .pipe(takeUntil(this._destroyed))
            .subscribe(value => {
            if (this._viewType !== value) {
                this.viewTypeChange.emit(value);
            }
            this._viewType = value;
            // We need to run change detection here or the view doesn't get updated
            // if the component is wrapped inside a parent with onPush change detection
            // we need mark for check as parts like the description cell look at the table's
            // viewType but because the description cell is part of ng-content it is not checked
            // when the comparison table view is checked but only when the component where the ng-content
            // gets declared is checked
            this._cdr.markForCheck();
        });
    }
    /** @docs-private */
    get viewType() {
        return this._viewType;
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
}
NxComparisonTableBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableBase, deps: [{ token: i1.NxViewportService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
NxComparisonTableBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxComparisonTableBase, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableBase, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.NxViewportService }, { type: i0.ChangeDetectorRef }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGFyaXNvbi10YWJsZS1iYXNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctYXF1aWxhL3NyYy9jb21wYXJpc29uLXRhYmxlL2NvbXBhcmlzb24tdGFibGUtYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQXFCLFNBQVMsRUFBYyxZQUFZLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDbEcsT0FBTyxFQUFFLGFBQWEsRUFBcUIsTUFBTSx5QkFBeUIsQ0FBQztBQUMzRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBTTFELG9CQUFvQjtBQUVwQixNQUFNLE9BQWdCLHFCQUFxQjtJQTBDdkMsWUFBb0IsZUFBa0MsRUFBWSxJQUF1QjtRQUFyRSxvQkFBZSxHQUFmLGVBQWUsQ0FBbUI7UUFBWSxTQUFJLEdBQUosSUFBSSxDQUFtQjtRQXZDekYscUJBQWdCLEdBQWEsRUFBRSxDQUFDO1FBQ2hDLG1CQUFjLEdBQWEsRUFBRSxDQUFDO1FBR3JCLG1CQUFjLEdBQTRDLElBQUksWUFBWSxFQUE2QixDQUFDO1FBRXpHLGNBQVMsR0FBOEIsU0FBUyxDQUFDO1FBRXRDLGVBQVUsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO1FBZ0NoRCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUMxRSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsaUJBQWlCLEVBQUUsYUFBYSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDOUcsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFFMUUsS0FBSyxDQUNELE9BQU8sQ0FBQyxJQUFJLENBQ1IsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQ3RCLEtBQUssQ0FBQyxRQUFxQyxDQUFDLENBQy9DLEVBQ0QsT0FBTyxDQUFDLElBQUksQ0FDUixNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFDdEIsS0FBSyxDQUFDLFFBQXFDLENBQUMsQ0FDL0MsRUFDRCxRQUFRLENBQUMsSUFBSSxDQUNULE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUN0QixLQUFLLENBQUMsU0FBc0MsQ0FBQyxDQUNoRCxDQUNKO2FBQ0ksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDaEMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ2YsSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLEtBQUssRUFBRTtnQkFDMUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDbkM7WUFDRCxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztZQUN2Qix1RUFBdUU7WUFDdkUsMkVBQTJFO1lBQzNFLGdGQUFnRjtZQUNoRixvRkFBb0Y7WUFDcEYsNkZBQTZGO1lBQzdGLDJCQUEyQjtZQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzdCLENBQUMsQ0FBQyxDQUFDO0lBQ1gsQ0FBQztJQXRDRCxvQkFBb0I7SUFDcEIsSUFBSSxRQUFRO1FBQ1IsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzFCLENBQUM7SUFxQ0QsV0FBVztRQUNQLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMvQixDQUFDOztrSEFoRmlCLHFCQUFxQjtzR0FBckIscUJBQXFCOzJGQUFyQixxQkFBcUI7a0JBRDFDLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTnhCcmVha3BvaW50cywgTnhWaWV3cG9ydFNlcnZpY2UgfSBmcm9tICdAYXBvc2luL25nLWFxdWlsYS91dGlscyc7XG5pbXBvcnQgeyBtZXJnZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyLCBtYXBUbywgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBOeENvbXBhcmlzb25UYWJsZUNlbGwgfSBmcm9tICcuL2NlbGwvY2VsbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnhDb21wYXJpc29uVGFibGVWaWV3VHlwZSB9IGZyb20gJy4vY29tcGFyaXNvbi10YWJsZS5tb2RlbHMnO1xuaW1wb3J0IHsgTnhDb21wYXJpc29uVGFibGVQb3B1bGFyQ2VsbCB9IGZyb20gJy4vcG9wdWxhci1jZWxsL3BvcHVsYXItY2VsbC5jb21wb25lbnQnO1xuXG4vKiogQGRvY3MtcHJpdmF0ZSAqL1xuQERpcmVjdGl2ZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTnhDb21wYXJpc29uVGFibGVCYXNlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBzZWxlY3RlZEluZGV4Q2hhbmdlITogRXZlbnRFbWl0dGVyPG51bWJlcj47XG5cbiAgICBfZGlzYWJsZWRJbmRleGVzOiBudW1iZXJbXSA9IFtdO1xuICAgIF9oaWRkZW5JbmRleGVzOiBudW1iZXJbXSA9IFtdO1xuICAgIGFic3RyYWN0IHNlbGVjdGVkSW5kZXg6IG51bWJlcjtcblxuICAgIHJlYWRvbmx5IHZpZXdUeXBlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8TnhDb21wYXJpc29uVGFibGVWaWV3VHlwZT4gPSBuZXcgRXZlbnRFbWl0dGVyPE54Q29tcGFyaXNvblRhYmxlVmlld1R5cGU+KCk7XG5cbiAgICBwcml2YXRlIF92aWV3VHlwZTogTnhDb21wYXJpc29uVGFibGVWaWV3VHlwZSA9ICdkZXNrdG9wJztcblxuICAgIHByb3RlY3RlZCByZWFkb25seSBfZGVzdHJveWVkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICAgIC8qKiBHZXQgYWxsIGhlYWRlciBjZWxscyBvZiB0aGUgdGFibGUuICovXG4gICAgYWJzdHJhY3QgX2dldEhlYWRlckNlbGxzKCk6IE54Q29tcGFyaXNvblRhYmxlQ2VsbFtdO1xuXG4gICAgLyoqIEhvdyBtYW55IHByb2R1Y3QgY29sdW1ucyB0aGUgdGFibGUgaGFzLiAqL1xuICAgIGFic3RyYWN0IF9pbmZvQ29sdW1uQ291bnQoKTogbnVtYmVyO1xuXG4gICAgLyoqIEdldCB0aGUgcG9wdWxhciBjZWxsIG9mIHRoZSB0YWJsZS4gKi9cbiAgICBhYnN0cmFjdCBfZ2V0UG9wdWxhckNlbGwoKTogTnhDb21wYXJpc29uVGFibGVQb3B1bGFyQ2VsbDtcblxuICAgIC8qKiBBZGQgYSBjb2x1bW4gdG8gdGhlIGxpc3Qgb2YgZGlzYWJsZWQgY29sdW1ucy4gKi9cbiAgICBhYnN0cmFjdCBfYWRkRGlzYWJsZWRDb2x1bW4oZGlzYWJsZWRDb2x1bW46IG51bWJlcik6IHZvaWQ7XG5cbiAgICAvKiogUmVtb3ZlIGEgY29sdW1uIGZyb20gdGhlIGxpc3Qgb2YgZGlzYWJsZWQgY29sdW1ucy4gKi9cbiAgICBhYnN0cmFjdCBfcmVtb3ZlRGlzYWJsZWRDb2x1bW4oZW5hYmxlZENvbHVtbjogbnVtYmVyKTogdm9pZDtcblxuICAgIC8qKiBHZXQgdGhlIG1vYmlsZSBjbGlwcGluZyBwYXRoIGZvciBhIGNlbGwgdGhhdCBzaG91bGQgYmUgY3V0IHdoZW4gc2Nyb2xsaW5nLiAqL1xuICAgIGFic3RyYWN0IF9nZXRNb2JpbGVDbGlwUGF0aEluc2V0KGNlbGxSZWN0OiBET01SZWN0KTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQnJpbmcgYW4gZWxlbWVudCBpbnRvIHZpZXcgaW4gY2FzZSBpdCBpcyBoaWRkZW4gYnkgdGhlIHN0aWNreSBoZWFkZXIgcm93IG9uIHRvcCxcbiAgICAgKiBvcHRpb25hbGx5IHdpdGggc29tZSBhZGRpdGlvbmFsIHNwYWNlIGFib3ZlIHRoZSBlbGVtZW50LlxuICAgICAqL1xuICAgIGFic3RyYWN0IF9zY3JvbGxFbGVtZW50SW50b1ZpZXcoZWxlbWVudDogRWxlbWVudFJlZiwgYWRkaXRpb25hbFNwYWNpbmc/OiBudW1iZXIpOiB2b2lkO1xuXG4gICAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgICBnZXQgdmlld1R5cGUoKTogTnhDb21wYXJpc29uVGFibGVWaWV3VHlwZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92aWV3VHlwZTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZpZXdwb3J0U2VydmljZTogTnhWaWV3cG9ydFNlcnZpY2UsIHByb3RlY3RlZCBfY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICAgICAgICBjb25zdCBtb2JpbGUkID0gdGhpcy52aWV3cG9ydFNlcnZpY2UubWF4KE54QnJlYWtwb2ludHMuQlJFQUtQT0lOVF9NRURJVU0pO1xuICAgICAgICBjb25zdCB0YWJsZXQkID0gdGhpcy52aWV3cG9ydFNlcnZpY2UuYmV0d2VlbihOeEJyZWFrcG9pbnRzLkJSRUFLUE9JTlRfTUVESVVNLCBOeEJyZWFrcG9pbnRzLkJSRUFLUE9JTlRfTEFSR0UpO1xuICAgICAgICBjb25zdCBkZXNrdG9wJCA9IHRoaXMudmlld3BvcnRTZXJ2aWNlLm1pbihOeEJyZWFrcG9pbnRzLkJSRUFLUE9JTlRfTEFSR0UpO1xuXG4gICAgICAgIG1lcmdlKFxuICAgICAgICAgICAgbW9iaWxlJC5waXBlKFxuICAgICAgICAgICAgICAgIGZpbHRlcih2YWx1ZSA9PiB2YWx1ZSksXG4gICAgICAgICAgICAgICAgbWFwVG8oJ21vYmlsZScgYXMgTnhDb21wYXJpc29uVGFibGVWaWV3VHlwZSksXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgdGFibGV0JC5waXBlKFxuICAgICAgICAgICAgICAgIGZpbHRlcih2YWx1ZSA9PiB2YWx1ZSksXG4gICAgICAgICAgICAgICAgbWFwVG8oJ3RhYmxldCcgYXMgTnhDb21wYXJpc29uVGFibGVWaWV3VHlwZSksXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgZGVza3RvcCQucGlwZShcbiAgICAgICAgICAgICAgICBmaWx0ZXIodmFsdWUgPT4gdmFsdWUpLFxuICAgICAgICAgICAgICAgIG1hcFRvKCdkZXNrdG9wJyBhcyBOeENvbXBhcmlzb25UYWJsZVZpZXdUeXBlKSxcbiAgICAgICAgICAgICksXG4gICAgICAgIClcbiAgICAgICAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLl9kZXN0cm95ZWQpKVxuICAgICAgICAgICAgLnN1YnNjcmliZSh2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3ZpZXdUeXBlICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdUeXBlQ2hhbmdlLmVtaXQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl92aWV3VHlwZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gcnVuIGNoYW5nZSBkZXRlY3Rpb24gaGVyZSBvciB0aGUgdmlldyBkb2Vzbid0IGdldCB1cGRhdGVkXG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIGNvbXBvbmVudCBpcyB3cmFwcGVkIGluc2lkZSBhIHBhcmVudCB3aXRoIG9uUHVzaCBjaGFuZ2UgZGV0ZWN0aW9uXG4gICAgICAgICAgICAgICAgLy8gd2UgbmVlZCBtYXJrIGZvciBjaGVjayBhcyBwYXJ0cyBsaWtlIHRoZSBkZXNjcmlwdGlvbiBjZWxsIGxvb2sgYXQgdGhlIHRhYmxlJ3NcbiAgICAgICAgICAgICAgICAvLyB2aWV3VHlwZSBidXQgYmVjYXVzZSB0aGUgZGVzY3JpcHRpb24gY2VsbCBpcyBwYXJ0IG9mIG5nLWNvbnRlbnQgaXQgaXMgbm90IGNoZWNrZWRcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHRoZSBjb21wYXJpc29uIHRhYmxlIHZpZXcgaXMgY2hlY2tlZCBidXQgb25seSB3aGVuIHRoZSBjb21wb25lbnQgd2hlcmUgdGhlIG5nLWNvbnRlbnRcbiAgICAgICAgICAgICAgICAvLyBnZXRzIGRlY2xhcmVkIGlzIGNoZWNrZWRcbiAgICAgICAgICAgICAgICB0aGlzLl9jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5fZGVzdHJveWVkLm5leHQoKTtcbiAgICAgICAgdGhpcy5fZGVzdHJveWVkLmNvbXBsZXRlKCk7XG4gICAgfVxufVxuIl19