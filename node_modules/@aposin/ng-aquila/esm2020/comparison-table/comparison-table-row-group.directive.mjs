import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { ContentChildren, Directive, EventEmitter, Inject, Input, Optional, Output } from '@angular/core';
import { COMPARISON_TABLE_DEFAULT_OPTIONS } from './comparison-table.models';
import { NxComparisonTableRowDirective } from './comparison-table-row.directive';
import { NxComparisonTableRowGroupBase } from './comparison-table-row-group-base';
import { NxTableContentElement } from './table-content-element.directive';
import * as i0 from "@angular/core";
import * as i1 from "./toggle-section/toggle-section-base";
export class NxComparisonTableRowGroupDirective extends NxComparisonTableRowGroupBase {
    constructor(_toggleSection, _defaultOptions) {
        super();
        this._toggleSection = _toggleSection;
        this._defaultOptions = _defaultOptions;
        this._labelCollapsed = 'More services';
        this._labelExpanded = 'Less services';
        this._visibleRows = 5;
        this._isExpanded = false;
        /** An event emitted every time the expanded state of the group changes */
        this.isExpandedChange = new EventEmitter();
    }
    /**
     * Sets the label of the expandable area that is shown when the row group is collapsed.
     */
    set labelCollapsed(newValue) {
        if (newValue !== this._labelCollapsed) {
            this._labelCollapsed = newValue;
        }
    }
    get labelCollapsed() {
        return this._labelCollapsed;
    }
    /** Sets the label of the expandable area that is shown when the row group is expanded. */
    set labelExpanded(newValue) {
        if (newValue !== this._labelExpanded) {
            this._labelExpanded = newValue;
        }
    }
    get labelExpanded() {
        return this._labelExpanded;
    }
    /** Sets the number of rows that are visible when loading the component. Default: 5. */
    set visibleRows(value) {
        const newValue = coerceNumberProperty(value);
        if (newValue !== this._visibleRows) {
            this._visibleRows = newValue;
        }
    }
    get visibleRows() {
        return this._visibleRows;
    }
    /** Sets the expanded state of the row group */
    set isExpanded(value) {
        const newValue = coerceBooleanProperty(value);
        if (newValue !== this._isExpanded) {
            this._isExpanded = newValue;
        }
    }
    get isExpanded() {
        return this._isExpanded;
    }
    /**
     * **Expert Option**
     *
     * Sets if the expandable area uses the full width of the row or leaves out the first column. Default: false.
     */
    set useFullRowForExpandableArea(value) {
        this._useFullRowForExpandableArea = coerceBooleanProperty(value);
    }
    get useFullRowForExpandableArea() {
        if (this._useFullRowForExpandableArea !== undefined) {
            return this._useFullRowForExpandableArea;
        }
        if (this._defaultOptions?.useFullRowForExpandableArea !== undefined) {
            return this._defaultOptions.useFullRowForExpandableArea;
        }
        return false;
    }
    _isPartOfToggleSection() {
        return !!this._toggleSection;
    }
    _handleIsExpandedChange(value) {
        this.isExpanded = value;
        this.isExpandedChange.emit(this.isExpanded);
    }
}
NxComparisonTableRowGroupDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableRowGroupDirective, deps: [{ token: i1.NxToggleSectionBase, optional: true }, { token: COMPARISON_TABLE_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
NxComparisonTableRowGroupDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxComparisonTableRowGroupDirective, selector: "[nxComparisonTableRowGroup]", inputs: { labelCollapsed: "labelCollapsed", labelExpanded: "labelExpanded", visibleRows: "visibleRows", isExpanded: "isExpanded", useFullRowForExpandableArea: "useFullRowForExpandableArea" }, outputs: { isExpandedChange: "isExpandedChange" }, providers: [
        { provide: NxTableContentElement, useExisting: NxComparisonTableRowGroupDirective },
        { provide: NxComparisonTableRowGroupBase, useExisting: NxComparisonTableRowGroupDirective },
    ], queries: [{ propertyName: "rows", predicate: NxComparisonTableRowDirective }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxComparisonTableRowGroupDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[nxComparisonTableRowGroup]',
                    providers: [
                        { provide: NxTableContentElement, useExisting: NxComparisonTableRowGroupDirective },
                        { provide: NxComparisonTableRowGroupBase, useExisting: NxComparisonTableRowGroupDirective },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.NxToggleSectionBase, decorators: [{
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [COMPARISON_TABLE_DEFAULT_OPTIONS]
                }] }]; }, propDecorators: { rows: [{
                type: ContentChildren,
                args: [NxComparisonTableRowDirective]
            }], labelCollapsed: [{
                type: Input
            }], labelExpanded: [{
                type: Input
            }], visibleRows: [{
                type: Input
            }], isExpanded: [{
                type: Input
            }], useFullRowForExpandableArea: [{
                type: Input
            }], isExpandedChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGFyaXNvbi10YWJsZS1yb3ctZ3JvdXAuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctYXF1aWxhL3NyYy9jb21wYXJpc29uLXRhYmxlL2NvbXBhcmlzb24tdGFibGUtcm93LWdyb3VwLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWdCLHFCQUFxQixFQUFFLG9CQUFvQixFQUFlLE1BQU0sdUJBQXVCLENBQUM7QUFDL0csT0FBTyxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUVySCxPQUFPLEVBQUUsZ0NBQWdDLEVBQWlDLE1BQU0sMkJBQTJCLENBQUM7QUFDNUcsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDakYsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDbEYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7OztBQVUxRSxNQUFNLE9BQU8sa0NBQW1DLFNBQVEsNkJBQTZCO0lBcUZqRixZQUN3QixjQUEwQyxFQUNBLGVBQXFEO1FBRW5ILEtBQUssRUFBRSxDQUFDO1FBSFksbUJBQWMsR0FBZCxjQUFjLENBQTRCO1FBQ0Esb0JBQWUsR0FBZixlQUFlLENBQXNDO1FBbkYvRyxvQkFBZSxHQUFHLGVBQWUsQ0FBQztRQWVsQyxtQkFBYyxHQUFHLGVBQWUsQ0FBQztRQWFqQyxpQkFBWSxHQUFHLENBQUMsQ0FBQztRQWNqQixnQkFBVyxHQUFHLEtBQUssQ0FBQztRQW9DNUIsMEVBQTBFO1FBQ2hFLHFCQUFnQixHQUEwQixJQUFJLFlBQVksRUFBVyxDQUFDO0lBT2hGLENBQUM7SUFwRkQ7O09BRUc7SUFDSCxJQUNJLGNBQWMsQ0FBQyxRQUFnQjtR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MUMsY0FBYztzQkFEakIsS0FBSztnQkFjRixhQUFhO3NCQURoQixLQUFLO2dCQWNGLFdBQVc7c0JBRGQsS0FBSztnQkFlRixVQUFVO3NCQURiLEtBQUs7Z0JBb0JGLDJCQUEyQjtzQkFEOUIsS0FBSztnQkFlSSxnQkFBZ0I7c0JBQXpCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb29sZWFuSW5wdXQsIGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSwgY29lcmNlTnVtYmVyUHJvcGVydHksIE51bWJlcklucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcbmltcG9ydCB7IENvbnRlbnRDaGlsZHJlbiwgRGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIEluamVjdCwgSW5wdXQsIE9wdGlvbmFsLCBPdXRwdXQsIFF1ZXJ5TGlzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBDT01QQVJJU09OX1RBQkxFX0RFRkFVTFRfT1BUSU9OUywgQ29tcGFyaXNvblRhYmxlRGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuL2NvbXBhcmlzb24tdGFibGUubW9kZWxzJztcbmltcG9ydCB7IE54Q29tcGFyaXNvblRhYmxlUm93RGlyZWN0aXZlIH0gZnJvbSAnLi9jb21wYXJpc29uLXRhYmxlLXJvdy5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTnhDb21wYXJpc29uVGFibGVSb3dHcm91cEJhc2UgfSBmcm9tICcuL2NvbXBhcmlzb24tdGFibGUtcm93LWdyb3VwLWJhc2UnO1xuaW1wb3J0IHsgTnhUYWJsZUNvbnRlbnRFbGVtZW50IH0gZnJvbSAnLi90YWJsZS1jb250ZW50LWVsZW1lbnQuZGlyZWN0aXZlJztcbmltcG9ydCB7IE54VG9nZ2xlU2VjdGlvbkJhc2UgfSBmcm9tICcuL3RvZ2dsZS1zZWN0aW9uL3RvZ2dsZS1zZWN0aW9uLWJhc2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tueENvbXBhcmlzb25UYWJsZVJvd0dyb3VwXScsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHsgcHJvdmlkZTogTnhUYWJsZUNvbnRlbnRFbGVtZW50LCB1c2VFeGlzdGluZzogTnhDb21wYXJpc29uVGFibGVSb3dHcm91cERpcmVjdGl2ZSB9LFxuICAgICAgICB7IHByb3ZpZGU6IE54Q29tcGFyaXNvblRhYmxlUm93R3JvdXBCYXNlLCB1c2VFeGlzdGluZzogTnhDb21wYXJpc29uVGFibGVSb3dHcm91cERpcmVjdGl2ZSB9LFxuICAgIF0sXG59KVxuZXhwb3J0IGNsYXNzIE54Q29tcGFyaXNvblRhYmxlUm93R3JvdXBEaXJlY3RpdmUgZXh0ZW5kcyBOeENvbXBhcmlzb25UYWJsZVJvd0dyb3VwQmFzZSBpbXBsZW1lbnRzIE54VGFibGVDb250ZW50RWxlbWVudCB7XG4gICAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgICBAQ29udGVudENoaWxkcmVuKE54Q29tcGFyaXNvblRhYmxlUm93RGlyZWN0aXZlKSByb3dzITogUXVlcnlMaXN0PE54Q29tcGFyaXNvblRhYmxlUm93RGlyZWN0aXZlPjtcblxuICAgIHByaXZhdGUgX2xhYmVsQ29sbGFwc2VkID0gJ01vcmUgc2VydmljZXMnO1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbGFiZWwgb2YgdGhlIGV4cGFuZGFibGUgYXJlYSB0aGF0IGlzIHNob3duIHdoZW4gdGhlIHJvdyBncm91cCBpcyBjb2xsYXBzZWQuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBzZXQgbGFiZWxDb2xsYXBzZWQobmV3VmFsdWU6IHN0cmluZykge1xuICAgICAgICBpZiAobmV3VmFsdWUgIT09IHRoaXMuX2xhYmVsQ29sbGFwc2VkKSB7XG4gICAgICAgICAgICB0aGlzLl9sYWJlbENvbGxhcHNlZCA9IG5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBsYWJlbENvbGxhcHNlZCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGFiZWxDb2xsYXBzZWQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfbGFiZWxFeHBhbmRlZCA9ICdMZXNzIHNlcnZpY2VzJztcblxuICAgIC8qKiBTZXRzIHRoZSBsYWJlbCBvZiB0aGUgZXhwYW5kYWJsZSBhcmVhIHRoYXQgaXMgc2hvd24gd2hlbiB0aGUgcm93IGdyb3VwIGlzIGV4cGFuZGVkLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgc2V0IGxhYmVsRXhwYW5kZWQobmV3VmFsdWU6IHN0cmluZykge1xuICAgICAgICBpZiAobmV3VmFsdWUgIT09IHRoaXMuX2xhYmVsRXhwYW5kZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2xhYmVsRXhwYW5kZWQgPSBuZXdWYWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgbGFiZWxFeHBhbmRlZCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGFiZWxFeHBhbmRlZDtcbiAgICB9XG5cbiAgICBwcml2YXRlIF92aXNpYmxlUm93cyA9IDU7XG5cbiAgICAvKiogU2V0cyB0aGUgbnVtYmVyIG9mIHJvd3MgdGhhdCBhcmUgdmlzaWJsZSB3aGVuIGxvYWRpbmcgdGhlIGNvbXBvbmVudC4gRGVmYXVsdDogNS4gKi9cbiAgICBASW5wdXQoKVxuICAgIHNldCB2aXNpYmxlUm93cyh2YWx1ZTogTnVtYmVySW5wdXQpIHtcbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBjb2VyY2VOdW1iZXJQcm9wZXJ0eSh2YWx1ZSk7XG4gICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gdGhpcy5fdmlzaWJsZVJvd3MpIHtcbiAgICAgICAgICAgIHRoaXMuX3Zpc2libGVSb3dzID0gbmV3VmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IHZpc2libGVSb3dzKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl92aXNpYmxlUm93cztcbiAgICB9XG5cbiAgICBwcml2YXRlIF9pc0V4cGFuZGVkID0gZmFsc2U7XG5cbiAgICAvKiogU2V0cyB0aGUgZXhwYW5kZWQgc3RhdGUgb2YgdGhlIHJvdyBncm91cCAqL1xuICAgIEBJbnB1dCgpXG4gICAgc2V0IGlzRXhwYW5kZWQodmFsdWU6IEJvb2xlYW5JbnB1dCkge1xuICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSk7XG4gICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gdGhpcy5faXNFeHBhbmRlZCkge1xuICAgICAgICAgICAgdGhpcy5faXNFeHBhbmRlZCA9IG5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IGlzRXhwYW5kZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0V4cGFuZGVkO1xuICAgIH1cblxuICAgIHByaXZhdGUgX3VzZUZ1bGxSb3dGb3JFeHBhbmRhYmxlQXJlYTogYm9vbGVhbiB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqICoqRXhwZXJ0IE9wdGlvbioqXG4gICAgICpcbiAgICAgKiBTZXRzIGlmIHRoZSBleHBhbmRhYmxlIGFyZWEgdXNlcyB0aGUgZnVsbCB3aWR0aCBvZiB0aGUgcm93IG9yIGxlYXZlcyBvdXQgdGhlIGZpcnN0IGNvbHVtbi4gRGVmYXVsdDogZmFsc2UuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBzZXQgdXNlRnVsbFJvd0ZvckV4cGFuZGFibGVBcmVhKHZhbHVlOiBCb29sZWFuSW5wdXQpIHtcbiAgICAgICAgdGhpcy5fdXNlRnVsbFJvd0ZvckV4cGFuZGFibGVBcmVhID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcbiAgICB9XG4gICAgZ2V0IHVzZUZ1bGxSb3dGb3JFeHBhbmRhYmxlQXJlYSgpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHRoaXMuX3VzZUZ1bGxSb3dGb3JFeHBhbmRhYmxlQXJlYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdXNlRnVsbFJvd0ZvckV4cGFuZGFibGVBcmVhO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9kZWZhdWx0T3B0aW9ucz8udXNlRnVsbFJvd0ZvckV4cGFuZGFibGVBcmVhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZWZhdWx0T3B0aW9ucy51c2VGdWxsUm93Rm9yRXhwYW5kYWJsZUFyZWE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKiBBbiBldmVudCBlbWl0dGVkIGV2ZXJ5IHRpbWUgdGhlIGV4cGFuZGVkIHN0YXRlIG9mIHRoZSBncm91cCBjaGFuZ2VzICovXG4gICAgQE91dHB1dCgpIGlzRXhwYW5kZWRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPiA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBAT3B0aW9uYWwoKSBwcml2YXRlIF90b2dnbGVTZWN0aW9uOiBOeFRvZ2dsZVNlY3Rpb25CYXNlIHwgbnVsbCxcbiAgICAgICAgQE9wdGlvbmFsKCkgQEluamVjdChDT01QQVJJU09OX1RBQkxFX0RFRkFVTFRfT1BUSU9OUykgcHJpdmF0ZSBfZGVmYXVsdE9wdGlvbnM6IENvbXBhcmlzb25UYWJsZURlZmF1bHRPcHRpb25zIHwgbnVsbCxcbiAgICApIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBfaXNQYXJ0T2ZUb2dnbGVTZWN0aW9uKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gISF0aGlzLl90b2dnbGVTZWN0aW9uO1xuICAgIH1cblxuICAgIF9oYW5kbGVJc0V4cGFuZGVkQ2hhbmdlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuaXNFeHBhbmRlZCA9IHZhbHVlO1xuICAgICAgICB0aGlzLmlzRXhwYW5kZWRDaGFuZ2UuZW1pdCh0aGlzLmlzRXhwYW5kZWQpO1xuICAgIH1cbn1cbiJdfQ==