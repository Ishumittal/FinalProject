import { ContentChild, ContentChildren, Directive, Input } from '@angular/core';
import { NxComparisonTableRowDirective } from '../comparison-table-row.directive';
import { NxTableContentElement } from '../table-content-element.directive';
import { NxToggleSectionBase } from './toggle-section-base';
import { NxToggleSectionHeaderComponent } from './toggle-section-header.component';
import * as i0 from "@angular/core";
export class NxToggleSectionDirective extends NxToggleSectionBase {
    constructor() {
        super(...arguments);
        this._isExpanded = true;
    }
    /** Whether the toggle section is expanded. Default: true. */
    set isExpanded(value) {
        if (this._isExpanded !== value) {
            this._isExpanded = value;
        }
    }
    get isExpanded() {
        return this._isExpanded;
    }
    _numberOfRows() {
        return this.rows.filter(row => row instanceof NxComparisonTableRowDirective).length;
    }
}
NxToggleSectionDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxToggleSectionDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
NxToggleSectionDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxToggleSectionDirective, selector: "[nxComparisonTableToggleSection]", inputs: { isExpanded: "isExpanded" }, providers: [
        { provide: NxTableContentElement, useExisting: NxToggleSectionDirective },
        { provide: NxToggleSectionBase, useExisting: NxToggleSectionDirective },
    ], queries: [{ propertyName: "toggleSectionHeader", first: true, predicate: NxToggleSectionHeaderComponent, descendants: true }, { propertyName: "rows", predicate: NxTableContentElement }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxToggleSectionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[nxComparisonTableToggleSection]',
                    providers: [
                        { provide: NxTableContentElement, useExisting: NxToggleSectionDirective },
                        { provide: NxToggleSectionBase, useExisting: NxToggleSectionDirective },
                    ],
                }]
        }], propDecorators: { toggleSectionHeader: [{
                type: ContentChild,
                args: [NxToggleSectionHeaderComponent, { static: false }]
            }], rows: [{
                type: ContentChildren,
                args: [NxTableContentElement]
            }], isExpanded: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xlLXNlY3Rpb24uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctYXF1aWxhL3NyYy9jb21wYXJpc29uLXRhYmxlL3RvZ2dsZS1zZWN0aW9uL3RvZ2dsZS1zZWN0aW9uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBRTNGLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzVELE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDOztBQVNuRixNQUFNLE9BQU8sd0JBQXlCLFNBQVEsbUJBQW1CO0lBUGpFOztRQWNZLGdCQUFXLEdBQUcsSUFBSSxDQUFDO0tBZ0I5QjtJQWRHLDZEQUE2RDtJQUM3RCxJQUNJLFVBQVUsQ0FBQyxLQUFjO1FBQ3pCLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxLQUFLLEVBQUU7WUFDNUIsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7U0FDNUI7SUFDTCxDQUFDO0lBQ0QsSUFBSSxVQUFVO1FBQ1YsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzVCLENBQUM7SUFFRCxhQUFhO1FBQ1QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsWUFBWSw2QkFBNkIsQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUN4RixDQUFDOztxSEF0QlEsd0JBQXdCO3lHQUF4Qix3QkFBd0IsaUdBTHRCO1FBQ1AsRUFBRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsV0FBVyxFQUFFLHdCQUF3QixFQUFFO1FBQ3pFLEVBQUUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLFdBQVcsRUFBRSx3QkFBd0IsRUFBRTtLQUMxRSwyRUFJYSw4QkFBOEIsMERBRzNCLHFCQUFxQjsyRkFMN0Isd0JBQXdCO2tCQVBwQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxrQ0FBa0M7b0JBQzVDLFNBQVMsRUFBRTt3QkFDUCxFQUFFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxXQUFXLDBCQUEwQixFQUFFO3dCQUN6RSxFQUFFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxXQUFXLDBCQUEwQixFQUFFO3FCQUMxRTtpQkFDSjs4QkFHb0UsbUJBQW1CO3NCQUFuRixZQUFZO3VCQUFDLDhCQUE4QixFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRTtnQkFHdkIsSUFBSTtzQkFBM0MsZUFBZTt1QkFBQyxxQkFBcUI7Z0JBTWxDLFVBQVU7c0JBRGIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnRlbnRDaGlsZCwgQ29udGVudENoaWxkcmVuLCBEaXJlY3RpdmUsIElucHV0LCBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTnhDb21wYXJpc29uVGFibGVSb3dEaXJlY3RpdmUgfSBmcm9tICcuLi9jb21wYXJpc29uLXRhYmxlLXJvdy5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTnhUYWJsZUNvbnRlbnRFbGVtZW50IH0gZnJvbSAnLi4vdGFibGUtY29udGVudC1lbGVtZW50LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBOeFRvZ2dsZVNlY3Rpb25CYXNlIH0gZnJvbSAnLi90b2dnbGUtc2VjdGlvbi1iYXNlJztcbmltcG9ydCB7IE54VG9nZ2xlU2VjdGlvbkhlYWRlckNvbXBvbmVudCB9IGZyb20gJy4vdG9nZ2xlLXNlY3Rpb24taGVhZGVyLmNvbXBvbmVudCc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW254Q29tcGFyaXNvblRhYmxlVG9nZ2xlU2VjdGlvbl0nLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7IHByb3ZpZGU6IE54VGFibGVDb250ZW50RWxlbWVudCwgdXNlRXhpc3Rpbmc6IE54VG9nZ2xlU2VjdGlvbkRpcmVjdGl2ZSB9LFxuICAgICAgICB7IHByb3ZpZGU6IE54VG9nZ2xlU2VjdGlvbkJhc2UsIHVzZUV4aXN0aW5nOiBOeFRvZ2dsZVNlY3Rpb25EaXJlY3RpdmUgfSxcbiAgICBdLFxufSlcbmV4cG9ydCBjbGFzcyBOeFRvZ2dsZVNlY3Rpb25EaXJlY3RpdmUgZXh0ZW5kcyBOeFRvZ2dsZVNlY3Rpb25CYXNlIGltcGxlbWVudHMgTnhUYWJsZUNvbnRlbnRFbGVtZW50IHtcbiAgICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICAgIEBDb250ZW50Q2hpbGQoTnhUb2dnbGVTZWN0aW9uSGVhZGVyQ29tcG9uZW50LCB7IHN0YXRpYzogZmFsc2UgfSkgdG9nZ2xlU2VjdGlvbkhlYWRlciE6IE54VG9nZ2xlU2VjdGlvbkhlYWRlckNvbXBvbmVudDtcblxuICAgIC8qKiBAZG9jcy1wcml2YXRlICovXG4gICAgQENvbnRlbnRDaGlsZHJlbihOeFRhYmxlQ29udGVudEVsZW1lbnQpIHJvd3MhOiBRdWVyeUxpc3Q8TnhUYWJsZUNvbnRlbnRFbGVtZW50PjtcblxuICAgIHByaXZhdGUgX2lzRXhwYW5kZWQgPSB0cnVlO1xuXG4gICAgLyoqIFdoZXRoZXIgdGhlIHRvZ2dsZSBzZWN0aW9uIGlzIGV4cGFuZGVkLiBEZWZhdWx0OiB0cnVlLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgc2V0IGlzRXhwYW5kZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzRXhwYW5kZWQgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9pc0V4cGFuZGVkID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGlzRXhwYW5kZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0V4cGFuZGVkO1xuICAgIH1cblxuICAgIF9udW1iZXJPZlJvd3MoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm93cy5maWx0ZXIocm93ID0+IHJvdyBpbnN0YW5jZW9mIE54Q29tcGFyaXNvblRhYmxlUm93RGlyZWN0aXZlKS5sZW5ndGg7XG4gICAgfVxufVxuIl19