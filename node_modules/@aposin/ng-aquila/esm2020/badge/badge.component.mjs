import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
export class NxBadgeComponent {
    constructor(_cdr) {
        this._cdr = _cdr;
        this._vibrant = false;
    }
    /** Sets the class name for the badge element.  */
    set type(value) {
        if (value !== this._type) {
            this._type = value; // TODO properly coerce input value
            this._cdr.markForCheck();
        }
    }
    get type() {
        return this._type;
    }
    /** Change badge style to vibrant. */
    set vibrant(value) {
        const newValue = coerceBooleanProperty(value);
        if (value !== this._vibrant) {
            this._vibrant = newValue;
            this._cdr.markForCheck();
        }
    }
    get vibrant() {
        return this._vibrant;
    }
}
NxBadgeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxBadgeComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NxBadgeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxBadgeComponent, selector: "nx-badge", inputs: { type: "type", vibrant: "vibrant" }, host: { properties: { "class.nx-badge--active": "type === \"active\"", "class.nx-badge--positive": "type === \"positive\"", "class.nx-badge--critical": "type === \"critical\"", "class.nx-badge--negative": "type === \"negative\"", "class.nx-badge--vibrant": "vibrant" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [":host{font-size:var(--badge-font-size);line-height:var(--badge-line-height);font-weight:var(--badge-font-weight);letter-spacing:var(--badge-letter-spacing);display:inline-block;padding:0 8px;white-space:nowrap;border-radius:12px;min-width:24px}@media screen and (-ms-high-contrast: active){:host{border:1px solid windowText}}:host{color:var(--badge-color);background-color:var(--badge-background-color)}:host.nx-badge--active{background-color:var(--badge-active-background-color);color:var(--badge-active-color)}:host.nx-badge--positive{background-color:var(--badge-positive-background-color);color:var(--badge-positive-color)}:host.nx-badge--critical{background-color:var(--badge-critical-background-color);color:var(--badge-critical-color)}:host.nx-badge--negative{background-color:var(--badge-negative-background-color);color:var(--badge-negative-color)}:host.nx-badge--vibrant{color:var(--badge-vibrant-color);background-color:var(--badge-vibrant-background-color)}:host.nx-badge--vibrant.nx-badge--active{background-color:var(--badge-vibrant-active-background-color);color:var(--badge-vibrant-active-color)}:host.nx-badge--vibrant.nx-badge--positive{background-color:var(--badge-vibrant-positive-background-color);color:var(--badge-vibrant-positive-color)}:host.nx-badge--vibrant.nx-badge--critical{background-color:var(--badge-vibrant-critical-background-color);color:var(--badge-vibrant-critical-color)}:host.nx-badge--vibrant.nx-badge--negative{background-color:var(--badge-vibrant-negative-background-color);color:var(--badge-vibrant-negative-color)}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxBadgeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-badge', template: '<ng-content></ng-content>', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[class.nx-badge--active]': 'type === "active"',
                        '[class.nx-badge--positive]': 'type === "positive"',
                        '[class.nx-badge--critical]': 'type === "critical"',
                        '[class.nx-badge--negative]': 'type === "negative"',
                        '[class.nx-badge--vibrant]': 'vibrant',
                    }, styles: [":host{font-size:var(--badge-font-size);line-height:var(--badge-line-height);font-weight:var(--badge-font-weight);letter-spacing:var(--badge-letter-spacing);display:inline-block;padding:0 8px;white-space:nowrap;border-radius:12px;min-width:24px}@media screen and (-ms-high-contrast: active){:host{border:1px solid windowText}}:host{color:var(--badge-color);background-color:var(--badge-background-color)}:host.nx-badge--active{background-color:var(--badge-active-background-color);color:var(--badge-active-color)}:host.nx-badge--positive{background-color:var(--badge-positive-background-color);color:var(--badge-positive-color)}:host.nx-badge--critical{background-color:var(--badge-critical-background-color);color:var(--badge-critical-color)}:host.nx-badge--negative{background-color:var(--badge-negative-background-color);color:var(--badge-negative-color)}:host.nx-badge--vibrant{color:var(--badge-vibrant-color);background-color:var(--badge-vibrant-background-color)}:host.nx-badge--vibrant.nx-badge--active{background-color:var(--badge-vibrant-active-background-color);color:var(--badge-vibrant-active-color)}:host.nx-badge--vibrant.nx-badge--positive{background-color:var(--badge-vibrant-positive-background-color);color:var(--badge-vibrant-positive-color)}:host.nx-badge--vibrant.nx-badge--critical{background-color:var(--badge-vibrant-critical-background-color);color:var(--badge-vibrant-critical-color)}:host.nx-badge--vibrant.nx-badge--negative{background-color:var(--badge-vibrant-negative-background-color);color:var(--badge-vibrant-negative-color)}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { type: [{
                type: Input
            }], vibrant: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFkZ2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctYXF1aWxhL3NyYy9iYWRnZS9iYWRnZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFnQixxQkFBcUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzVFLE9BQU8sRUFBRSx1QkFBdUIsRUFBcUIsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFpQjdGLE1BQU0sT0FBTyxnQkFBZ0I7SUFJekIsWUFBb0IsSUFBdUI7UUFBdkIsU0FBSSxHQUFKLElBQUksQ0FBbUI7UUFGbkMsYUFBUSxHQUFHLEtBQUssQ0FBQztJQUVxQixDQUFDO0lBRS9DLGtEQUFrRDtJQUNsRCxJQUNJLElBQUksQ0FBQyxLQUE4QztRQUNuRCxJQUFJLEtBQUssS0FBSyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ3RCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBcUIsQ0FBQyxDQUFDLG1DQUFtQztZQUN2RSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQzVCO0lBQ0wsQ0FBQztJQUNELElBQUksSUFBSTtRQUNKLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBQ0QscUNBQXFDO0lBQ3JDLElBQ0ksT0FBTyxDQUFDLEtBQW1CO1FBQzNCLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTlDLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDekIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7WUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUM1QjtJQUNMLENBQUM7SUFDRCxJQUFJLE9BQU87UUFDUCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDekIsQ0FBQzs7NkdBN0JRLGdCQUFnQjtpR0FBaEIsZ0JBQWdCLDhXQVhmLDJCQUEyQjsyRkFXNUIsZ0JBQWdCO2tCQWI1QixTQUFTOytCQUNJLFVBQVUsWUFDViwyQkFBMkIsbUJBQ3BCLHVCQUF1QixDQUFDLE1BQU0sUUFFekM7d0JBQ0YsMEJBQTBCLEVBQUUsbUJBQW1CO3dCQUMvQyw0QkFBNEIsRUFBRSxxQkFBcUI7d0JBQ25ELDRCQUE0QixFQUFFLHFCQUFxQjt3QkFDbkQsNEJBQTRCLEVBQUUscUJBQXFCO3dCQUNuRCwyQkFBMkIsRUFBRSxTQUFTO3FCQUN6Qzt3R0FVRyxJQUFJO3NCQURQLEtBQUs7Z0JBWUYsT0FBTztzQkFEVixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQm9vbGVhbklucHV0LCBjb2VyY2VCb29sZWFuUHJvcGVydHkgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4vKiogUG9zc2libGUgYmFkZ2UgdHlwZXMuICovXG5leHBvcnQgdHlwZSBOeEJhZGdlVHlwZSA9ICdhY3RpdmUnIHwgJ3Bvc2l0aXZlJyB8ICdjcml0aWNhbCcgfCAnbmVnYXRpdmUnIHwgJyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnbngtYmFkZ2UnLFxuICAgIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgc3R5bGVVcmxzOiBbJy4vYmFkZ2UuY29tcG9uZW50LnNjc3MnXSxcbiAgICBob3N0OiB7XG4gICAgICAgICdbY2xhc3MubngtYmFkZ2UtLWFjdGl2ZV0nOiAndHlwZSA9PT0gXCJhY3RpdmVcIicsXG4gICAgICAgICdbY2xhc3MubngtYmFkZ2UtLXBvc2l0aXZlXSc6ICd0eXBlID09PSBcInBvc2l0aXZlXCInLFxuICAgICAgICAnW2NsYXNzLm54LWJhZGdlLS1jcml0aWNhbF0nOiAndHlwZSA9PT0gXCJjcml0aWNhbFwiJyxcbiAgICAgICAgJ1tjbGFzcy5ueC1iYWRnZS0tbmVnYXRpdmVdJzogJ3R5cGUgPT09IFwibmVnYXRpdmVcIicsXG4gICAgICAgICdbY2xhc3MubngtYmFkZ2UtLXZpYnJhbnRdJzogJ3ZpYnJhbnQnLFxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIE54QmFkZ2VDb21wb25lbnQge1xuICAgIHByaXZhdGUgX3R5cGUhOiBOeEJhZGdlVHlwZTtcbiAgICBwcml2YXRlIF92aWJyYW50ID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9jZHI6IENoYW5nZURldGVjdG9yUmVmKSB7fVxuXG4gICAgLyoqIFNldHMgdGhlIGNsYXNzIG5hbWUgZm9yIHRoZSBiYWRnZSBlbGVtZW50LiAgKi9cbiAgICBASW5wdXQoKVxuICAgIHNldCB0eXBlKHZhbHVlOiBOeEJhZGdlVHlwZSB8IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB0aGlzLl90eXBlKSB7XG4gICAgICAgICAgICB0aGlzLl90eXBlID0gdmFsdWUhIGFzIE54QmFkZ2VUeXBlOyAvLyBUT0RPIHByb3Blcmx5IGNvZXJjZSBpbnB1dCB2YWx1ZVxuICAgICAgICAgICAgdGhpcy5fY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCB0eXBlKCk6IE54QmFkZ2VUeXBlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3R5cGU7XG4gICAgfVxuICAgIC8qKiBDaGFuZ2UgYmFkZ2Ugc3R5bGUgdG8gdmlicmFudC4gKi9cbiAgICBASW5wdXQoKVxuICAgIHNldCB2aWJyYW50KHZhbHVlOiBCb29sZWFuSW5wdXQpIHtcbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdGhpcy5fdmlicmFudCkge1xuICAgICAgICAgICAgdGhpcy5fdmlicmFudCA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCB2aWJyYW50KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmlicmFudDtcbiAgICB9XG59XG4iXX0=