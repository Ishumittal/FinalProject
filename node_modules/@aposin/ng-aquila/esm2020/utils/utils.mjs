import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export function isString(value) {
    return typeof value === 'string';
}
export function pad(str, length = 2, padCharacter = '0') {
    if (!isString(str) || str.length >= length) {
        return str;
    }
    while (str.length < length) {
        str = padCharacter + str;
    }
    return str;
}
// DATE -> YYYY-MM-DD
export function formatDate(date) {
    const dateOfBirth = [String(date.getFullYear()), pad(String(date.getMonth() + 1)), pad(String(date.getDate()))].join('-');
    return dateOfBirth;
}
export function formatDateHuman(date) {
    const dateOfBirth = [pad(String(date.getDate())), pad(String(date.getMonth() + 1)), String(date.getFullYear())].join('-');
    return dateOfBirth;
}
/*
  Purpose of this function is to allow a list of short keywords
  expand to longer bem class names with will then be applied to the classname value.

  This function will map a list of keys to values in a MAPPING list.
  Whatever value is found will replace the keyword.
  Every keyword not found will just transfered wiithmout modifying.
*/
export function mapClassNames(value, DEFAULTS = [], MAPPING = {}) {
    let sanitizedList = [...DEFAULTS];
    if (typeof value === 'string') {
        const mappedClasses = getClassNameList(value, MAPPING);
        sanitizedList = [...sanitizedList, ...mappedClasses];
    }
    return sanitizedList.join(' ').trim();
}
export function getClassNameList(value, MAPPING = {}) {
    let mappedClasses = [];
    if (typeof value === 'string') {
        const classNames = value.split(' ');
        const keys = Object.keys(MAPPING);
        mappedClasses = classNames.map(className => {
            if (keys.includes(className)) {
                return MAPPING[className];
            }
            return className;
        });
    }
    return mappedClasses;
}
export function appendClasses(renderer, element, classes) {
    if (renderer && element && classes) {
        classes.split(' ').forEach(item => {
            renderer.addClass(element.nativeElement, item);
        });
    }
}
export function removeClasses(renderer, element, classes) {
    if (renderer && element && classes) {
        classes.split(' ').forEach(item => {
            renderer.removeClass(element.nativeElement, item);
        });
    }
}
// YYYY-MM-DD -> DATE
export function parseDate(dateString) {
    return new Date(dateString);
}
// Manually compose a font shorthand defintion as it's not
// guaranteed to be given by the computed style object.
export function getFontShorthand(style) {
    const { font, fontStyle, fontVariant, fontWeight, fontSize, lineHeight, fontFamily } = style;
    if (font.length > 0) {
        return font;
    }
    return `${fontStyle} ${fontVariant} ${fontWeight} ${fontSize}/${lineHeight} ${fontFamily}`;
}
export function numberOfDecimals(number) {
    const parsed = Number(number);
    if (Number.isNaN(parsed) || Number.isInteger(parsed)) {
        return 0;
    }
    const match = parsed.toString().match(/(?:\.(\d+))?(?:[Ee]([+-]?\d+))?$/);
    if (!match || !match[1]) {
        return 0;
    }
    return match[1].length;
}
export function clamp(value, min = 0, max = 1) {
    return Math.max(min, Math.min(max, value));
}
export function randomString() {
    return Math.random().toString(36);
}
/** Provider that defines when form controls have an error. */
export class ErrorStateMatcher {
    isErrorState(control, form) {
        return !!(control?.invalid && (control.touched || form?.submitted));
    }
}
ErrorStateMatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: ErrorStateMatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
ErrorStateMatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: ErrorStateMatcher, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: ErrorStateMatcher, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,