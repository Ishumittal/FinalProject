import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ChangeDetectionStrategy, Component, Inject, Injectable, InjectionToken, Input, Optional } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@aposin/ng-aquila/icon";
import * as i2 from "@aposin/ng-aquila/message";
import * as i3 from "@angular/common";
let nextId = 0;
/**
 * Represents the default options for the error notification that can be configured
 * using the `ERROR_DEFAULT_OPTIONS` injection token.
 */
export class ErrorDefaultOptions {
}
ErrorDefaultOptions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: ErrorDefaultOptions, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
ErrorDefaultOptions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: ErrorDefaultOptions });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: ErrorDefaultOptions, decorators: [{
            type: Injectable
        }] });
export const ERROR_DEFAULT_OPTIONS = new InjectionToken('ERROR_DEFAULT_OPTIONS');
export class NxErrorComponent {
    constructor(_cdr, _defaultOptions) {
        this._cdr = _cdr;
        this._defaultOptions = _defaultOptions;
        this._showIcon = true;
        this._id = `nx-error-${nextId++}`;
        this._destroyed = new Subject();
        this._defaultOptions?.changes?.pipe(takeUntil(this._destroyed)).subscribe(() => {
            this._cdr.markForCheck();
        });
    }
    /** Whether an icon should be displayed. Only has an effect for type 'text' */
    set showIcon(value) {
        this._showIcon = coerceBooleanProperty(value);
        this._cdr.markForCheck();
    }
    get showIcon() {
        return this._showIcon;
    }
    /**
     * Id of the nx-error.
     *
     * If not set, the selectable card gets an incremented value by default.
     */
    set id(value) {
        if (value && value !== this._id) {
            this._id = value;
            this._cdr.markForCheck();
        }
    }
    get id() {
        return this._id;
    }
    /**
     * Whether the error should have message or text styling.
     *
     * Default is 'message'.
     */
    set appearance(value) {
        if (value !== this.appearance) {
            this._appearance = value;
            this._cdr.markForCheck();
        }
    }
    get appearance() {
        return this._appearance || this._defaultOptions?.appearance || 'message';
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
}
NxErrorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxErrorComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: ERROR_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NxErrorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxErrorComponent, selector: "nx-error", inputs: { showIcon: "showIcon", id: "id", appearance: "appearance" }, host: { properties: { "attr.role": "\"alert\"", "attr.id": "id", "class.nx-error--message": "appearance == \"message\"" } }, ngImport: i0, template: "<!-- b2b (expert) error notification -->\n<ng-container *ngIf=\"appearance === 'text'\">\n    <nx-icon *ngIf=\"showIcon\" class=\"nx-error__icon\" [name]=\"'exclamation-triangle'\"> </nx-icon>\n    <div class=\"nx-error__content-wrapper\">\n        <div class=\"nx-error__content\">\n            <ng-container [ngTemplateOutlet]=\"errorContent\"></ng-container>\n        </div>\n    </div>\n</ng-container>\n\n<!-- b2c error notification -->\n<nx-message *ngIf=\"appearance === 'message'\" nxContext=\"error\">\n    <ng-container [ngTemplateOutlet]=\"errorContent\"></ng-container>\n</nx-message>\n\n<ng-template #errorContent>\n    <ng-content></ng-content>\n</ng-template>\n", styles: [":host{font-size:var(--base-error-simple-font-size);line-height:var(--base-error-simple-line-height);font-weight:var(--base-error-simple-font-weight);letter-spacing:var(--base-error-simple-letter-spacing);color:var(--base-error-color);width:100%;display:flex;text-align:left}:host .nx-error__icon{font-size:var(--base-error-simple-icon-size);line-height:var(--base-error-simple-line-height);margin-right:8px}@media screen and (-ms-high-contrast: active){:host .nx-error__icon{color:windowText}}:host .nx-error__content-wrapper{max-width:100%}[dir=rtl] :host{text-align:right}[dir=rtl] :host .nx-error__icon{margin-right:0;margin-right:initial;margin-left:8px}\n"], components: [{ type: i1.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }, { type: i2.NxMessageComponent, selector: "nx-message", inputs: ["nxContext", "closable", "closeButtonLabel"], outputs: ["close"], exportAs: ["nxMessage"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxErrorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-error', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[attr.role]': '"alert"',
                        '[attr.id]': 'id',
                        '[class.nx-error--message]': 'appearance == "message"',
                    }, template: "<!-- b2b (expert) error notification -->\n<ng-container *ngIf=\"appearance === 'text'\">\n    <nx-icon *ngIf=\"showIcon\" class=\"nx-error__icon\" [name]=\"'exclamation-triangle'\"> </nx-icon>\n    <div class=\"nx-error__content-wrapper\">\n        <div class=\"nx-error__content\">\n            <ng-container [ngTemplateOutlet]=\"errorContent\"></ng-container>\n        </div>\n    </div>\n</ng-container>\n\n<!-- b2c error notification -->\n<nx-message *ngIf=\"appearance === 'message'\" nxContext=\"error\">\n    <ng-container [ngTemplateOutlet]=\"errorContent\"></ng-container>\n</nx-message>\n\n<ng-template #errorContent>\n    <ng-content></ng-content>\n</ng-template>\n", styles: [":host{font-size:var(--base-error-simple-font-size);line-height:var(--base-error-simple-line-height);font-weight:var(--base-error-simple-font-weight);letter-spacing:var(--base-error-simple-letter-spacing);color:var(--base-error-color);width:100%;display:flex;text-align:left}:host .nx-error__icon{font-size:var(--base-error-simple-icon-size);line-height:var(--base-error-simple-line-height);margin-right:8px}@media screen and (-ms-high-contrast: active){:host .nx-error__icon{color:windowText}}:host .nx-error__content-wrapper{max-width:100%}[dir=rtl] :host{text-align:right}[dir=rtl] :host .nx-error__icon{margin-right:0;margin-right:initial;margin-left:8px}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: ErrorDefaultOptions, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ERROR_DEFAULT_OPTIONS]
                }] }]; }, propDecorators: { showIcon: [{
                type: Input
            }], id: [{
                type: Input
            }], appearance: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,