import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export const datepickerOptions = { changes: new Subject() };
export const errorOptions = { changes: new Subject() };
export const formfieldOptions = {};
export const labelOptions = {};
export const tabGroupOptions = {};
export const tabNavBarOptions = {};
export const selectableCardOptions = {};
export const smallStageOptions = {};
export const circleToggleGroupOptions = {};
export const dataDisplayOptions = {};
/**
 * Service for switching values of the defaultOptions injection tokens at runtime.
 * WARNING: This service should not be used in actual applications!
 * It is only meant to showcase different options for documentation purposes.
 */
export class NxConfigurationService {
    clearOptions() {
        delete datepickerOptions.toggleIconTabindex;
        datepickerOptions.changes.next();
        delete errorOptions.appearance;
        errorOptions.changes.next();
        delete formfieldOptions.appearance;
        delete formfieldOptions.nxFloatLabel;
        delete labelOptions.size;
        delete tabGroupOptions.appearance;
        delete tabNavBarOptions.appearance;
        delete selectableCardOptions.appearance;
        delete smallStageOptions.appearance;
        delete circleToggleGroupOptions.appearance;
        delete dataDisplayOptions.size;
    }
    switchToExpert() {
        datepickerOptions.toggleIconTabindex = -1;
        datepickerOptions.changes.next();
        errorOptions.appearance = 'text';
        errorOptions.changes.next();
        formfieldOptions.appearance = 'outline';
        formfieldOptions.nxFloatLabel = 'always';
        labelOptions.size = 'small';
        tabGroupOptions.appearance = 'expert';
        tabNavBarOptions.appearance = 'expert';
        selectableCardOptions.appearance = 'expert';
        smallStageOptions.appearance = 'expert';
        circleToggleGroupOptions.appearance = 'expert';
        dataDisplayOptions.size = 'medium';
    }
    switchToRetail() {
        datepickerOptions.toggleIconTabindex = 0;
        datepickerOptions.changes.next();
        errorOptions.appearance = 'message';
        errorOptions.changes.next();
        formfieldOptions.appearance = 'auto';
        formfieldOptions.nxFloatLabel = 'auto';
        labelOptions.size = 'large';
        tabGroupOptions.appearance = 'default';
        tabNavBarOptions.appearance = 'default';
        selectableCardOptions.appearance = 'default';
        smallStageOptions.appearance = 'default';
        circleToggleGroupOptions.appearance = 'default';
        dataDisplayOptions.size = 'large';
    }
}
NxConfigurationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxConfigurationService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NxConfigurationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxConfigurationService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxConfigurationService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,