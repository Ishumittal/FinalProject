import { NgModule } from '@angular/core';
import { ERROR_DEFAULT_OPTIONS, LABEL_DEFAULT_OPTIONS } from '@aposin/ng-aquila/base';
import { SELECTABLE_CARD_DEFAULT_OPTIONS } from '@aposin/ng-aquila/card';
import { CIRCLE_TOGGLE_GROUP_DEFAULT_OPTIONS } from '@aposin/ng-aquila/circle-toggle';
import { COMPARISON_TABLE_DEFAULT_OPTIONS } from '@aposin/ng-aquila/comparison-table';
import { DATA_DISPLAY_DEFAULT_OPTIONS } from '@aposin/ng-aquila/data-display';
import { DATEPICKER_DEFAULT_OPTIONS } from '@aposin/ng-aquila/datefield';
import { FORMFIELD_DEFAULT_OPTIONS } from '@aposin/ng-aquila/formfield';
import { SMALL_STAGE_DEFAULT_OPTIONS } from '@aposin/ng-aquila/small-stage';
import { TAB_GROUP_DEFAULT_OPTIONS, TAB_NAV_BAR_DEFAULT_OPTIONS } from '@aposin/ng-aquila/tabs';
import * as i0 from "@angular/core";
// expert presets
const comparisonTableExpertOptions = { useFullRowForExpandableArea: true };
const formfieldExpertOptions = {
    appearance: 'outline',
    nxFloatLabel: 'always',
};
const errorExpertOptions = { appearance: 'text' };
const labelExpertOptions = { size: 'small' };
const datepickerExpertOptions = { toggleIconTabindex: -1 };
const tabGroupOptions = { appearance: 'expert' };
const tabNavBarOptions = { appearance: 'expert' };
const selectableCardOptions = { appearance: 'expert' };
const smallStageOptions = { appearance: 'expert' };
const circleToggleGroupOptions = { appearance: 'expert' };
const dataDisplayOptions = { size: 'medium' };
// should not be a singleton since different tokens can be used in separate modules
export class NxExpertModule {
}
NxExpertModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxExpertModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NxExpertModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxExpertModule });
NxExpertModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxExpertModule, providers: [
        { provide: COMPARISON_TABLE_DEFAULT_OPTIONS, useValue: comparisonTableExpertOptions },
        { provide: FORMFIELD_DEFAULT_OPTIONS, useValue: formfieldExpertOptions },
        { provide: LABEL_DEFAULT_OPTIONS, useValue: labelExpertOptions },
        { provide: DATEPICKER_DEFAULT_OPTIONS, useValue: datepickerExpertOptions },
        { provide: ERROR_DEFAULT_OPTIONS, useValue: errorExpertOptions },
        { provide: TAB_GROUP_DEFAULT_OPTIONS, useValue: tabGroupOptions },
        { provide: TAB_NAV_BAR_DEFAULT_OPTIONS, useValue: tabNavBarOptions },
        { provide: SELECTABLE_CARD_DEFAULT_OPTIONS, useValue: selectableCardOptions },
        { provide: SMALL_STAGE_DEFAULT_OPTIONS, useValue: smallStageOptions },
        { provide: CIRCLE_TOGGLE_GROUP_DEFAULT_OPTIONS, useValue: circleToggleGroupOptions },
        { provide: DATA_DISPLAY_DEFAULT_OPTIONS, useValue: dataDisplayOptions },
    ] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxExpertModule, decorators: [{
            type: NgModule,
            args: [{
                    providers: [
                        { provide: COMPARISON_TABLE_DEFAULT_OPTIONS, useValue: comparisonTableExpertOptions },
                        { provide: FORMFIELD_DEFAULT_OPTIONS, useValue: formfieldExpertOptions },
                        { provide: LABEL_DEFAULT_OPTIONS, useValue: labelExpertOptions },
                        { provide: DATEPICKER_DEFAULT_OPTIONS, useValue: datepickerExpertOptions },
                        { provide: ERROR_DEFAULT_OPTIONS, useValue: errorExpertOptions },
                        { provide: TAB_GROUP_DEFAULT_OPTIONS, useValue: tabGroupOptions },
                        { provide: TAB_NAV_BAR_DEFAULT_OPTIONS, useValue: tabNavBarOptions },
                        { provide: SELECTABLE_CARD_DEFAULT_OPTIONS, useValue: selectableCardOptions },
                        { provide: SMALL_STAGE_DEFAULT_OPTIONS, useValue: smallStageOptions },
                        { provide: CIRCLE_TOGGLE_GROUP_DEFAULT_OPTIONS, useValue: circleToggleGroupOptions },
                        { provide: DATA_DISPLAY_DEFAULT_OPTIONS, useValue: dataDisplayOptions },
                    ],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibngtZXhwZXJ0Lm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWFxdWlsYS9zcmMvY29uZmlnL254LWV4cGVydC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUscUJBQXFCLEVBQXVCLHFCQUFxQixFQUF1QixNQUFNLHdCQUF3QixDQUFDO0FBQ2hJLE9BQU8sRUFBRSwrQkFBK0IsRUFBZ0MsTUFBTSx3QkFBd0IsQ0FBQztBQUN2RyxPQUFPLEVBQUUsbUNBQW1DLEVBQW1DLE1BQU0saUNBQWlDLENBQUM7QUFDdkgsT0FBTyxFQUFFLGdDQUFnQyxFQUFpQyxNQUFNLG9DQUFvQyxDQUFDO0FBQ3JILE9BQU8sRUFBRSw0QkFBNEIsRUFBNkIsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN6RyxPQUFPLEVBQUUsMEJBQTBCLEVBQTRCLE1BQU0sNkJBQTZCLENBQUM7QUFDbkcsT0FBTyxFQUFFLHlCQUF5QixFQUEyQixNQUFNLDZCQUE2QixDQUFDO0FBQ2pHLE9BQU8sRUFBRSwyQkFBMkIsRUFBNEIsTUFBTSwrQkFBK0IsQ0FBQztBQUN0RyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsMkJBQTJCLEVBQW1ELE1BQU0sd0JBQXdCLENBQUM7O0FBRWpKLGlCQUFpQjtBQUNqQixNQUFNLDRCQUE0QixHQUFrQyxFQUFFLDJCQUEyQixFQUFFLElBQUksRUFBRSxDQUFDO0FBQzFHLE1BQU0sc0JBQXNCLEdBQTRCO0lBQ3BELFVBQVUsRUFBRSxTQUFTO0lBQ3JCLFlBQVksRUFBRSxRQUFRO0NBQ3pCLENBQUM7QUFDRixNQUFNLGtCQUFrQixHQUF3QixFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsQ0FBQztBQUN2RSxNQUFNLGtCQUFrQixHQUF3QixFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQztBQUNsRSxNQUFNLHVCQUF1QixHQUE2QixFQUFFLGtCQUFrQixFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDckYsTUFBTSxlQUFlLEdBQTJCLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxDQUFDO0FBQ3pFLE1BQU0sZ0JBQWdCLEdBQTRCLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxDQUFDO0FBQzNFLE1BQU0scUJBQXFCLEdBQWlDLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxDQUFDO0FBQ3JGLE1BQU0saUJBQWlCLEdBQTZCLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxDQUFDO0FBQzdFLE1BQU0sd0JBQXdCLEdBQW9DLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxDQUFDO0FBQzNGLE1BQU0sa0JBQWtCLEdBQThCLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDO0FBa0J6RSxtRkFBbUY7QUFDbkYsTUFBTSxPQUFPLGNBQWM7OzJHQUFkLGNBQWM7NEdBQWQsY0FBYzs0R0FBZCxjQUFjLGFBaEJaO1FBQ1AsRUFBRSxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsUUFBUSxFQUFFLDRCQUE0QixFQUFFO1FBQ3JGLEVBQUUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLFFBQVEsRUFBRSxzQkFBc0IsRUFBRTtRQUN4RSxFQUFFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUU7UUFDaEUsRUFBRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsUUFBUSxFQUFFLHVCQUF1QixFQUFFO1FBQzFFLEVBQUUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLFFBQVEsRUFBRSxrQkFBa0IsRUFBRTtRQUNoRSxFQUFFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFO1FBQ2pFLEVBQUUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRTtRQUNwRSxFQUFFLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxRQUFRLEVBQUUscUJBQXFCLEVBQUU7UUFDN0UsRUFBRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFO1FBQ3JFLEVBQUUsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLFFBQVEsRUFBRSx3QkFBd0IsRUFBRTtRQUNwRixFQUFFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUU7S0FDMUU7MkZBSVEsY0FBYztrQkFqQjFCLFFBQVE7bUJBQUM7b0JBQ04sU0FBUyxFQUFFO3dCQUNQLEVBQUUsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLFFBQVEsRUFBRSw0QkFBNEIsRUFBRTt3QkFDckYsRUFBRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsUUFBUSxFQUFFLHNCQUFzQixFQUFFO3dCQUN4RSxFQUFFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUU7d0JBQ2hFLEVBQUUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLFFBQVEsRUFBRSx1QkFBdUIsRUFBRTt3QkFDMUUsRUFBRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsUUFBUSxFQUFFLGtCQUFrQixFQUFFO3dCQUNoRSxFQUFFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFO3dCQUNqRSxFQUFFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUU7d0JBQ3BFLEVBQUUsT0FBTyxFQUFFLCtCQUErQixFQUFFLFFBQVEsRUFBRSxxQkFBcUIsRUFBRTt3QkFDN0UsRUFBRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFO3dCQUNyRSxFQUFFLE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSxRQUFRLEVBQUUsd0JBQXdCLEVBQUU7d0JBQ3BGLEVBQUUsT0FBTyxFQUFFLDRCQUE0QixFQUFFLFFBQVEsRUFBRSxrQkFBa0IsRUFBRTtxQkFDMUU7aUJBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRVJST1JfREVGQVVMVF9PUFRJT05TLCBFcnJvckRlZmF1bHRPcHRpb25zLCBMQUJFTF9ERUZBVUxUX09QVElPTlMsIExhYmVsRGVmYXVsdE9wdGlvbnMgfSBmcm9tICdAYXBvc2luL25nLWFxdWlsYS9iYXNlJztcbmltcG9ydCB7IFNFTEVDVEFCTEVfQ0FSRF9ERUZBVUxUX09QVElPTlMsIFNlbGVjdGFibGVDYXJkRGVmYXVsdE9wdGlvbnMgfSBmcm9tICdAYXBvc2luL25nLWFxdWlsYS9jYXJkJztcbmltcG9ydCB7IENJUkNMRV9UT0dHTEVfR1JPVVBfREVGQVVMVF9PUFRJT05TLCBDaXJjbGVUb2dnbGVHcm91cERlZmF1bHRPcHRpb25zIH0gZnJvbSAnQGFwb3Npbi9uZy1hcXVpbGEvY2lyY2xlLXRvZ2dsZSc7XG5pbXBvcnQgeyBDT01QQVJJU09OX1RBQkxFX0RFRkFVTFRfT1BUSU9OUywgQ29tcGFyaXNvblRhYmxlRGVmYXVsdE9wdGlvbnMgfSBmcm9tICdAYXBvc2luL25nLWFxdWlsYS9jb21wYXJpc29uLXRhYmxlJztcbmltcG9ydCB7IERBVEFfRElTUExBWV9ERUZBVUxUX09QVElPTlMsIERhdGFEaXNwbGF5RGVmYXVsdE9wdGlvbnMgfSBmcm9tICdAYXBvc2luL25nLWFxdWlsYS9kYXRhLWRpc3BsYXknO1xuaW1wb3J0IHsgREFURVBJQ0tFUl9ERUZBVUxUX09QVElPTlMsIERhdGVwaWNrZXJEZWZhdWx0T3B0aW9ucyB9IGZyb20gJ0BhcG9zaW4vbmctYXF1aWxhL2RhdGVmaWVsZCc7XG5pbXBvcnQgeyBGT1JNRklFTERfREVGQVVMVF9PUFRJT05TLCBGb3JtZmllbGREZWZhdWx0T3B0aW9ucyB9IGZyb20gJ0BhcG9zaW4vbmctYXF1aWxhL2Zvcm1maWVsZCc7XG5pbXBvcnQgeyBTTUFMTF9TVEFHRV9ERUZBVUxUX09QVElPTlMsIFNtYWxsU3RhZ2VEZWZhdWx0T3B0aW9ucyB9IGZyb20gJ0BhcG9zaW4vbmctYXF1aWxhL3NtYWxsLXN0YWdlJztcbmltcG9ydCB7IFRBQl9HUk9VUF9ERUZBVUxUX09QVElPTlMsIFRBQl9OQVZfQkFSX0RFRkFVTFRfT1BUSU9OUywgVGFiR3JvdXBEZWZhdWx0T3B0aW9ucywgVGFiTmF2QmFyRGVmYXVsdE9wdGlvbnMgfSBmcm9tICdAYXBvc2luL25nLWFxdWlsYS90YWJzJztcblxuLy8gZXhwZXJ0IHByZXNldHNcbmNvbnN0IGNvbXBhcmlzb25UYWJsZUV4cGVydE9wdGlvbnM6IENvbXBhcmlzb25UYWJsZURlZmF1bHRPcHRpb25zID0geyB1c2VGdWxsUm93Rm9yRXhwYW5kYWJsZUFyZWE6IHRydWUgfTtcbmNvbnN0IGZvcm1maWVsZEV4cGVydE9wdGlvbnM6IEZvcm1maWVsZERlZmF1bHRPcHRpb25zID0ge1xuICAgIGFwcGVhcmFuY2U6ICdvdXRsaW5lJyxcbiAgICBueEZsb2F0TGFiZWw6ICdhbHdheXMnLFxufTtcbmNvbnN0IGVycm9yRXhwZXJ0T3B0aW9uczogRXJyb3JEZWZhdWx0T3B0aW9ucyA9IHsgYXBwZWFyYW5jZTogJ3RleHQnIH07XG5jb25zdCBsYWJlbEV4cGVydE9wdGlvbnM6IExhYmVsRGVmYXVsdE9wdGlvbnMgPSB7IHNpemU6ICdzbWFsbCcgfTtcbmNvbnN0IGRhdGVwaWNrZXJFeHBlcnRPcHRpb25zOiBEYXRlcGlja2VyRGVmYXVsdE9wdGlvbnMgPSB7IHRvZ2dsZUljb25UYWJpbmRleDogLTEgfTtcbmNvbnN0IHRhYkdyb3VwT3B0aW9uczogVGFiR3JvdXBEZWZhdWx0T3B0aW9ucyA9IHsgYXBwZWFyYW5jZTogJ2V4cGVydCcgfTtcbmNvbnN0IHRhYk5hdkJhck9wdGlvbnM6IFRhYk5hdkJhckRlZmF1bHRPcHRpb25zID0geyBhcHBlYXJhbmNlOiAnZXhwZXJ0JyB9O1xuY29uc3Qgc2VsZWN0YWJsZUNhcmRPcHRpb25zOiBTZWxlY3RhYmxlQ2FyZERlZmF1bHRPcHRpb25zID0geyBhcHBlYXJhbmNlOiAnZXhwZXJ0JyB9O1xuY29uc3Qgc21hbGxTdGFnZU9wdGlvbnM6IFNtYWxsU3RhZ2VEZWZhdWx0T3B0aW9ucyA9IHsgYXBwZWFyYW5jZTogJ2V4cGVydCcgfTtcbmNvbnN0IGNpcmNsZVRvZ2dsZUdyb3VwT3B0aW9uczogQ2lyY2xlVG9nZ2xlR3JvdXBEZWZhdWx0T3B0aW9ucyA9IHsgYXBwZWFyYW5jZTogJ2V4cGVydCcgfTtcbmNvbnN0IGRhdGFEaXNwbGF5T3B0aW9uczogRGF0YURpc3BsYXlEZWZhdWx0T3B0aW9ucyA9IHsgc2l6ZTogJ21lZGl1bScgfTtcblxuQE5nTW9kdWxlKHtcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgeyBwcm92aWRlOiBDT01QQVJJU09OX1RBQkxFX0RFRkFVTFRfT1BUSU9OUywgdXNlVmFsdWU6IGNvbXBhcmlzb25UYWJsZUV4cGVydE9wdGlvbnMgfSxcbiAgICAgICAgeyBwcm92aWRlOiBGT1JNRklFTERfREVGQVVMVF9PUFRJT05TLCB1c2VWYWx1ZTogZm9ybWZpZWxkRXhwZXJ0T3B0aW9ucyB9LFxuICAgICAgICB7IHByb3ZpZGU6IExBQkVMX0RFRkFVTFRfT1BUSU9OUywgdXNlVmFsdWU6IGxhYmVsRXhwZXJ0T3B0aW9ucyB9LFxuICAgICAgICB7IHByb3ZpZGU6IERBVEVQSUNLRVJfREVGQVVMVF9PUFRJT05TLCB1c2VWYWx1ZTogZGF0ZXBpY2tlckV4cGVydE9wdGlvbnMgfSxcbiAgICAgICAgeyBwcm92aWRlOiBFUlJPUl9ERUZBVUxUX09QVElPTlMsIHVzZVZhbHVlOiBlcnJvckV4cGVydE9wdGlvbnMgfSxcbiAgICAgICAgeyBwcm92aWRlOiBUQUJfR1JPVVBfREVGQVVMVF9PUFRJT05TLCB1c2VWYWx1ZTogdGFiR3JvdXBPcHRpb25zIH0sXG4gICAgICAgIHsgcHJvdmlkZTogVEFCX05BVl9CQVJfREVGQVVMVF9PUFRJT05TLCB1c2VWYWx1ZTogdGFiTmF2QmFyT3B0aW9ucyB9LFxuICAgICAgICB7IHByb3ZpZGU6IFNFTEVDVEFCTEVfQ0FSRF9ERUZBVUxUX09QVElPTlMsIHVzZVZhbHVlOiBzZWxlY3RhYmxlQ2FyZE9wdGlvbnMgfSxcbiAgICAgICAgeyBwcm92aWRlOiBTTUFMTF9TVEFHRV9ERUZBVUxUX09QVElPTlMsIHVzZVZhbHVlOiBzbWFsbFN0YWdlT3B0aW9ucyB9LFxuICAgICAgICB7IHByb3ZpZGU6IENJUkNMRV9UT0dHTEVfR1JPVVBfREVGQVVMVF9PUFRJT05TLCB1c2VWYWx1ZTogY2lyY2xlVG9nZ2xlR3JvdXBPcHRpb25zIH0sXG4gICAgICAgIHsgcHJvdmlkZTogREFUQV9ESVNQTEFZX0RFRkFVTFRfT1BUSU9OUywgdXNlVmFsdWU6IGRhdGFEaXNwbGF5T3B0aW9ucyB9LFxuICAgIF0sXG59KVxuXG4vLyBzaG91bGQgbm90IGJlIGEgc2luZ2xldG9uIHNpbmNlIGRpZmZlcmVudCB0b2tlbnMgY2FuIGJlIHVzZWQgaW4gc2VwYXJhdGUgbW9kdWxlc1xuZXhwb3J0IGNsYXNzIE54RXhwZXJ0TW9kdWxlIHt9XG4iXX0=