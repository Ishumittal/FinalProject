import { ChangeDetectionStrategy, Component } from '@angular/core';
import { Subject } from 'rxjs';
import { nxTooltipAnimations } from './tooltip-animations';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
/**
 * Internal component that wraps the tooltip's content.
 * @docs-private
 */
export class NxTooltipComponent {
    constructor(_cdr, elementRef) {
        this._cdr = _cdr;
        this.elementRef = elementRef;
        /** The timeout ID of any current timer set to show the tooltip */
        this._showTimeoutId = null;
        /** The timeout ID of any current timer set to hide the tooltip */
        this._hideTimeoutId = null;
        this._visibility = 'initial';
        this._position = 'bottom';
        this._arrowStyle = {};
        /** Whether interactions on the page should close the tooltip */
        this._closeOnInteraction = false;
        /** Subject for notifying that the tooltip has been hidden from the view */
        this._onHide = new Subject();
    }
    set message(value) {
        this._message = value;
        this._cdr.markForCheck();
    }
    get message() {
        return this._message;
    }
    /** Property watched by the animation framework to show or hide the tooltip */
    get visibility() {
        return this._visibility;
    }
    /* @docs-private */
    set position(value) {
        this._position = value;
        this._cdr.markForCheck();
    }
    /* @docs-private */
    get position() {
        return this._position;
    }
    /* @docs-private */
    set arrowStyle(value) {
        this._arrowStyle = value;
        this._cdr.markForCheck();
    }
    /* @docs-private */
    get arrowStyle() {
        return this._arrowStyle;
    }
    /* @docs-private */
    get arrowClass() {
        return `nx-tooltip__arrow--${this.position}`;
    }
    /**
     * Shows the tooltip with an aninxion originating from the provided origin
     * @param delay Amount of milliseconds to the delay showing the tooltip.
     */
    show(delay) {
        // Cancel the delayed hide if it is scheduled
        if (this._hideTimeoutId) {
            clearTimeout(this._hideTimeoutId);
            this._hideTimeoutId = null;
        }
        // Body interactions should cancel the tooltip if there is a delay in showing.
        this._closeOnInteraction = true;
        this._showTimeoutId = window.setTimeout(() => {
            this._visibility = 'visible';
            this._showTimeoutId = null;
            // Mark for check so if any parent component has set the
            // ChangeDetectionStrategy to OnPush it will be checked anyways
            this._cdr.markForCheck();
        }, delay);
    }
    /**
     * Begins the animation to hide the tooltip after the provided delay in ms.
     * @param delay Amount of milliseconds to delay showing the tooltip.
     */
    hide(delay) {
        if (this._hideTimeoutId) {
            return;
        }
        // Cancel the delayed show if it is scheduled
        if (this._showTimeoutId) {
            clearTimeout(this._showTimeoutId);
            this._showTimeoutId = null;
        }
        this._hideTimeoutId = window.setTimeout(() => {
            this._visibility = 'hidden';
            this._hideTimeoutId = null;
            // Mark for check so if any parent component has set the
            // ChangeDetectionStrategy to OnPush it will be checked anyways
            this._cdr.markForCheck();
        }, delay);
    }
    /** Returns an observable that notifies when the tooltip has been hidden from view. */
    afterHidden() {
        return this._onHide.asObservable();
    }
    /** Whether the tooltip is being displayed. */
    isVisible() {
        return this.visibility === 'visible';
    }
    /** Whether the tooltip started a delay to be shown/hidden */
    isDelayed() {
        return this._showTimeoutId !== null || this._hideTimeoutId !== null;
    }
    ngOnDestroy() {
        this._onHide.complete();
    }
    _animationStart() {
        this._closeOnInteraction = false;
    }
    _animationDone(event) {
        const toState = event.toState;
        if (toState === 'hidden' && !this.isVisible()) {
            this._onHide.next();
        }
        if (toState === 'visible' || toState === 'hidden') {
            this._closeOnInteraction = true;
        }
    }
    /**
     * Interactions on the HTML body should close the tooltip immediately.
     */
    _handleBodyInteraction() {
        if (this._closeOnInteraction) {
            this.hide(0);
        }
    }
}
NxTooltipComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTooltipComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
NxTooltipComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxTooltipComponent, selector: "nx-tooltip-component", host: { attributes: { "aria-hidden": "true" }, listeners: { "body:click": "this._handleBodyInteraction()" }, properties: { "style.zoom": "visibility === \"visible\" ? 1 : null" } }, ngImport: i0, template: "<div class=\"nx-tooltip\" [@state]=\"visibility\" (@state.start)=\"_animationStart()\" (@state.done)=\"_animationDone($event)\">\n    <div [ngClass]=\"arrowClass\" class=\"nx-tooltip__arrow\" [ngStyle]=\"arrowStyle\"></div>\n    {{ message }}\n</div>\n", styles: ["::ng-deep .nx-tooltip-panel{pointer-events:none!important}.nx-tooltip{font-size:var(--tooltip-font-size);line-height:var(--tooltip-line-height);font-weight:var(--tooltip-font-weight);letter-spacing:var(--tooltip-letter-spacing);color:var(--tooltip-text-color);background-color:var(--tooltip-background-color);border-radius:var(--tooltip-border-radius);max-width:408px;padding:4px 8px}.nx-tooltip__arrow{position:absolute;width:8px;height:8px;background-color:inherit;z-index:-1;opacity:inherit}.nx-tooltip__arrow--top{transform:translate(-50%) rotate(45deg);bottom:-4px}.nx-tooltip__arrow--right{transform:translateY(-50%) rotate(45deg);left:-4px}:host-context([dir=rtl]) .nx-tooltip__arrow--right{right:-4px;left:auto}.nx-tooltip__arrow--bottom{transform:translate(-50%) rotate(45deg);top:-4px}.nx-tooltip__arrow--left{transform:translateY(-50%) rotate(45deg);right:-4px}:host-context([dir=rtl]) .nx-tooltip__arrow--left{right:auto;left:-4px}@media screen and (-ms-high-contrast: active){.nx-tooltip__arrow{border:1px solid windowText}.nx-tooltip{border:1px solid windowText;border-radius:4px}}\n"], directives: [{ type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }], animations: [nxTooltipAnimations.tooltipState], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTooltipComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-tooltip-component', changeDetection: ChangeDetectionStrategy.OnPush, animations: [nxTooltipAnimations.tooltipState], host: {
                        // Forces the element to have a layout in IE and Edge. This fixes issues where the element
                        // won't be rendered if the aninxions are disabled or there is no web aninxions polyfill.
                        '[style.zoom]': 'visibility === "visible" ? 1 : null',
                        '(body:click)': 'this._handleBodyInteraction()',
                        'aria-hidden': 'true',
                    }, template: "<div class=\"nx-tooltip\" [@state]=\"visibility\" (@state.start)=\"_animationStart()\" (@state.done)=\"_animationDone($event)\">\n    <div [ngClass]=\"arrowClass\" class=\"nx-tooltip__arrow\" [ngStyle]=\"arrowStyle\"></div>\n    {{ message }}\n</div>\n", styles: ["::ng-deep .nx-tooltip-panel{pointer-events:none!important}.nx-tooltip{font-size:var(--tooltip-font-size);line-height:var(--tooltip-line-height);font-weight:var(--tooltip-font-weight);letter-spacing:var(--tooltip-letter-spacing);color:var(--tooltip-text-color);background-color:var(--tooltip-background-color);border-radius:var(--tooltip-border-radius);max-width:408px;padding:4px 8px}.nx-tooltip__arrow{position:absolute;width:8px;height:8px;background-color:inherit;z-index:-1;opacity:inherit}.nx-tooltip__arrow--top{transform:translate(-50%) rotate(45deg);bottom:-4px}.nx-tooltip__arrow--right{transform:translateY(-50%) rotate(45deg);left:-4px}:host-context([dir=rtl]) .nx-tooltip__arrow--right{right:-4px;left:auto}.nx-tooltip__arrow--bottom{transform:translate(-50%) rotate(45deg);top:-4px}.nx-tooltip__arrow--left{transform:translateY(-50%) rotate(45deg);right:-4px}:host-context([dir=rtl]) .nx-tooltip__arrow--left{right:auto;left:-4px}@media screen and (-ms-high-contrast: active){.nx-tooltip__arrow{border:1px solid windowText}.nx-tooltip{border:1px solid windowText;border-radius:4px}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }]; } });
//# sourceMappingURL=data:application/json;base64,