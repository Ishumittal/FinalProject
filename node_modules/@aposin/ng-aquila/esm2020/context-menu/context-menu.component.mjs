import { FocusKeyManager } from '@angular/cdk/a11y';
import { END, ESCAPE, hasModifierKey, HOME, LEFT_ARROW, RIGHT_ARROW } from '@angular/cdk/keycodes';
import { ChangeDetectionStrategy, Component, ContentChild, ContentChildren, EventEmitter, HostListener, Output, TemplateRef, ViewChild, } from '@angular/core';
import { merge, ReplaySubject, Subject } from 'rxjs';
import { startWith, switchMap, take, takeUntil } from 'rxjs/operators';
import { nxContextMenuAnimations } from './context-menu-animations';
import { NxContextMenuContentDirective } from './context-menu-content.directive';
import { NxContextMenuItemComponent, NxContextMenuItemWrapComponent } from './context-menu-item.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class NxContextMenuComponent {
    constructor(_ngZone) {
        this._ngZone = _ngZone;
        this._init = new ReplaySubject(1);
        /** Config object to be passed into the menu's ngClass */
        this._classList = {};
        /** Current state of the panel animation. */
        this._panelAnimationState = 'void';
        /** Emits whenever an animation on the menu completes. */
        this._animationDone = new Subject();
        /** Whether the menu is animating. */
        this._isAnimating = false;
        /**
         * @docs-private
         * Layout direction of the menu.
         */
        this.direction = 'ltr';
        /** Event emitted when the menu is closed. */
        this.closed = new EventEmitter();
        this._destroyed = new Subject();
    }
    _onClick(event) {
        event.preventDefault();
    }
    ngAfterContentInit() {
        this._items = this._wrap ? this._wrap?._items : this._items;
        this._keyManager = new FocusKeyManager(this._items).withWrap().withTypeAhead().setFocusOrigin('keyboard');
        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => this.closed.emit('tab'));
        this._init.next();
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this.closed.complete();
        this._init.complete();
    }
    /** Stream that emits whenever the hovered menu item changes. */
    _hovered() {
        return this._init.pipe(switchMap(() => this._items.changes.pipe(startWith(this._items))), switchMap((items) => merge(...items.map(item => item._hovered))));
    }
    /** Handle a keyboard event from the menu, delegating to the appropriate action. */
    _handleKeydown(event) {
        const keyCode = event.keyCode;
        const manager = this._keyManager;
        switch (keyCode) {
            case ESCAPE:
                if (!hasModifierKey(event)) {
                    event.preventDefault();
                    this.closed.emit('keydown');
                }
                break;
            case LEFT_ARROW:
                if (this.parentMenu && this.direction === 'ltr') {
                    this.closed.emit('keydown');
                }
                break;
            case RIGHT_ARROW:
                if (this.parentMenu && this.direction === 'rtl') {
                    this.closed.emit('keydown');
                }
                break;
            case HOME:
            case END:
                if (!hasModifierKey(event)) {
                    keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();
                    event.preventDefault();
                }
                break;
            default:
                manager.onKeydown(event);
        }
    }
    /**
     * Focus the first item in the menu.
     */
    focusFirstItem(origin) {
        // When the content is rendered lazily, it takes a bit before the items are inside the DOM.
        this._ngZone.onStable
            .asObservable()
            .pipe(take(1))
            .subscribe(() => {
            this._keyManager.setFirstItemActive();
            this._keyManager.activeItem?.focus(origin);
        });
    }
    /**
     * Resets the active item in the menu. This is used when the menu is opened, allowing
     * the user to start from the first option when pressing the down arrow.
     */
    resetActiveItem() {
        this._keyManager.setActiveItem(-1);
    }
    /** Starts the enter animation. */
    _startAnimation() {
        this._panelAnimationState = 'enter';
    }
    /** Resets the panel animation to its initial state. */
    _resetAnimation() {
        this._panelAnimationState = 'void';
    }
    /** Callback that is invoked when the panel animation completes. */
    _onAnimationDone(event) {
        this._animationDone.next(event);
        this._isAnimating = false;
    }
    _onAnimationStart(event) {
        this._isAnimating = true;
        // Scroll the content element to the top as soon as the animation starts. This is necessary,
        // because we move focus to the first item while it's still being animated, which can throw
        // the browser off when it determines the scroll position. Alternatively we can move focus
        // when the animation is done, however moving focus asynchronously will interrupt screen
        // readers which are in the process of reading out the menu already. We take the `element`
        // from the `event` since we can't use a `ViewChild` to access the pane.
        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {
            event.element.scrollTop = 0;
        }
    }
}
NxContextMenuComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxContextMenuComponent, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
NxContextMenuComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxContextMenuComponent, selector: "nx-context-menu", outputs: { closed: "closed" }, host: { listeners: { "click": "_onClick()" } }, queries: [{ propertyName: "_wrap", first: true, predicate: NxContextMenuItemWrapComponent, descendants: true }, { propertyName: "lazyContent", first: true, predicate: NxContextMenuContentDirective, descendants: true }, { propertyName: "_items", predicate: NxContextMenuItemComponent }], viewQueries: [{ propertyName: "templateRef", first: true, predicate: TemplateRef, descendants: true }], exportAs: ["nxContextMenu"], ngImport: i0, template: "<ng-template>\n    <div\n        class=\"nx-context-menu\"\n        [ngClass]=\"_classList\"\n        (keydown)=\"_handleKeydown($event)\"\n        (click)=\"closed.emit('click')\"\n        [@transformContextMenu]=\"_panelAnimationState\"\n        (@transformContextMenu.start)=\"_onAnimationStart($event)\"\n        (@transformContextMenu.done)=\"_onAnimationDone($event)\"\n        tabindex=\"-1\"\n        role=\"menu\"\n    >\n        <div class=\"nx-context-menu__content\">\n            <ng-content></ng-content>\n        </div>\n    </div>\n</ng-template>\n", styles: [".nx-context-menu{border-radius:4px;background:var(--context-menu-background-color);min-height:56px;box-shadow:var(--shadow-small);outline:none;overflow-y:auto}@media screen and (-ms-high-contrast: active){.nx-context-menu{border:1px solid windowText}}.nx-context-menu.ng-animating{pointer-events:none}.nx-context-menu__content:not(:empty){padding-top:8px;padding-bottom:8px;display:flex;flex-direction:column}@media screen and (-ms-high-contrast: active){.nx-context-menu__content:not(:empty){background-color:buttonFace}}\n"], directives: [{ type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], animations: [nxContextMenuAnimations.transformContextMenu], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxContextMenuComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-context-menu', changeDetection: ChangeDetectionStrategy.OnPush, exportAs: 'nxContextMenu', animations: [nxContextMenuAnimations.transformContextMenu], template: "<ng-template>\n    <div\n        class=\"nx-context-menu\"\n        [ngClass]=\"_classList\"\n        (keydown)=\"_handleKeydown($event)\"\n        (click)=\"closed.emit('click')\"\n        [@transformContextMenu]=\"_panelAnimationState\"\n        (@transformContextMenu.start)=\"_onAnimationStart($event)\"\n        (@transformContextMenu.done)=\"_onAnimationDone($event)\"\n        tabindex=\"-1\"\n        role=\"menu\"\n    >\n        <div class=\"nx-context-menu__content\">\n            <ng-content></ng-content>\n        </div>\n    </div>\n</ng-template>\n", styles: [".nx-context-menu{border-radius:4px;background:var(--context-menu-background-color);min-height:56px;box-shadow:var(--shadow-small);outline:none;overflow-y:auto}@media screen and (-ms-high-contrast: active){.nx-context-menu{border:1px solid windowText}}.nx-context-menu.ng-animating{pointer-events:none}.nx-context-menu__content:not(:empty){padding-top:8px;padding-bottom:8px;display:flex;flex-direction:column}@media screen and (-ms-high-contrast: active){.nx-context-menu__content:not(:empty){background-color:buttonFace}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }]; }, propDecorators: { _items: [{
                type: ContentChildren,
                args: [NxContextMenuItemComponent]
            }], _wrap: [{
                type: ContentChild,
                args: [NxContextMenuItemWrapComponent]
            }], templateRef: [{
                type: ViewChild,
                args: [TemplateRef]
            }], lazyContent: [{
                type: ContentChild,
                args: [NxContextMenuContentDirective]
            }], closed: [{
                type: Output
            }], _onClick: [{
                type: HostListener,
                args: ['click']
            }] } });
//# sourceMappingURL=data:application/json;base64,