import { BasePortalOutlet, CdkPortalOutlet } from '@angular/cdk/portal';
import { Component, ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
import { take } from 'rxjs/operators';
import { messageToastAnimations } from './message-toast-animations';
import * as i0 from "@angular/core";
import * as i1 from "./message-toast-config";
import * as i2 from "../message/message.component";
import * as i3 from "@angular/cdk/portal";
import * as i4 from "@angular/common";
/**
 * Internal component that wraps user-provided message toastcontent.
 * @docs-private
 */
export class NxMessageToastComponent extends BasePortalOutlet {
    constructor(_ngZone, _cdr, 
    /** The message toastconfiguration. */
    config, 
    /** Injected data into the notifciation. */
    data) {
        super();
        this._ngZone = _ngZone;
        this._cdr = _cdr;
        this.config = config;
        this.data = data;
        /** Whether the component has been destroyed. */
        this._destroyed = false;
        /** Subject for notifying that the message toasthas exited from view. */
        this._onExit = new Subject();
        /** Subject for notifying that the message toasthas finished entering the view. */
        this._onEnter = new Subject();
        /** The state of the message toastanimations. */
        this._animationState = 'void';
        /** ARIA role for the message toastcontainer. */
        this._role = null;
        this._context = this.config.context;
        this._setAriaLabels();
    }
    /** Attach a component portal as content to this message toastcontainer. */
    attachComponentPortal(portal) {
        this._assertNotAttached();
        return this._portalOutlet.attachComponentPortal(portal);
    }
    /** Attach a template portal as content to this message toastcontainer. */
    attachTemplatePortal(portal) {
        this._assertNotAttached();
        return this._portalOutlet.attachTemplatePortal(portal);
    }
    /** Handle end of animations, updating the state of the notification. */
    onAnimationEnd(event) {
        const { fromState, toState } = event;
        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {
            this._completeExit();
        }
        if (toState === 'visible') {
            // Note: we shouldn't use `this` inside the zone callback,
            // because it can cause a memory leak.
            const onEnter = this._onEnter;
            this._ngZone.run(() => {
                onEnter.next();
                onEnter.complete();
            });
        }
    }
    /** Begin animation of message toastentrance into view. */
    enter() {
        if (!this._destroyed) {
            this._animationState = 'visible';
            this._cdr.detectChanges();
        }
    }
    /** Begin animation of the message toastexiting from view. */
    exit() {
        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case
        // where multiple notifications are opened in quick succession (e.g. two consecutive calls to
        // `NxMessageToastService.open`).
        this._animationState = 'hidden';
    }
    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */
    ngOnDestroy() {
        this._destroyed = true;
        this._completeExit();
    }
    /**
     * Waits for the zone to settle before removing the element. Helps prevent
     * errors where we end up removing an element which is in the middle of an animation.
     */
    _completeExit() {
        this._ngZone.onMicrotaskEmpty
            .asObservable()
            .pipe(take(1))
            .subscribe(() => {
            this._onExit.next();
            this._onExit.complete();
        });
    }
    /** Asserts that no content is already attached to the container. */
    _assertNotAttached() {
        if (this._portalOutlet.hasAttached()) {
            throw Error('Attempting to attach message toastcontent after content is already attached');
        }
    }
    _setAriaLabels() {
        // Based on the ARIA spec, `alert` and `status` roles have an
        // implicit `assertive` and `polite` politeness respectively.
        if (this.config.politeness === 'assertive' && !this.config.announcementMessage) {
            this._role = 'alert';
        }
        else if (this.config.politeness === 'off') {
            this._role = null;
        }
        else {
            this._role = 'status';
        }
    }
}
NxMessageToastComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxMessageToastComponent, deps: [{ token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: i1.NxMessageToastConfig }, { token: i1.NxMessageToastData }], target: i0.ɵɵFactoryTarget.Component });
NxMessageToastComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxMessageToastComponent, selector: "nx-message-toast", host: { listeners: { "@state.done": "onAnimationEnd($event)" }, properties: { "attr.role": "_role", "@state": "_animationState" } }, viewQueries: [{ propertyName: "_portalOutlet", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: "<nx-message [nxContext]=\"_context\">\n    <!-- Used when opening from a template -->\n    <ng-template cdkPortalOutlet></ng-template>\n    <!-- Used when opening only with custom text-->\n    <ng-container *ngIf=\"data\">{{ data.data }}</ng-container>\n</nx-message>\n", styles: ["nx-message{box-shadow:var(--message-box-shadow);max-width:352px}@media (max-width: 703px){nx-message{max-width:calc(100vw - 16px)}}\n"], components: [{ type: i2.NxMessageComponent, selector: "nx-message", inputs: ["nxContext", "closable", "closeButtonLabel"], outputs: ["close"], exportAs: ["nxMessage"] }], directives: [{ type: i3.CdkPortalOutlet, selector: "[cdkPortalOutlet]", inputs: ["cdkPortalOutlet"], outputs: ["attached"], exportAs: ["cdkPortalOutlet"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], animations: [messageToastAnimations.toastState] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxMessageToastComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-message-toast', host: {
                        '[attr.role]': '_role',
                        '[@state]': '_animationState',
                        '(@state.done)': 'onAnimationEnd($event)',
                    }, animations: [messageToastAnimations.toastState], template: "<nx-message [nxContext]=\"_context\">\n    <!-- Used when opening from a template -->\n    <ng-template cdkPortalOutlet></ng-template>\n    <!-- Used when opening only with custom text-->\n    <ng-container *ngIf=\"data\">{{ data.data }}</ng-container>\n</nx-message>\n", styles: ["nx-message{box-shadow:var(--message-box-shadow);max-width:352px}@media (max-width: 703px){nx-message{max-width:calc(100vw - 16px)}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: i1.NxMessageToastConfig }, { type: i1.NxMessageToastData }]; }, propDecorators: { _portalOutlet: [{
                type: ViewChild,
                args: [CdkPortalOutlet, { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,