import { coerceNumberProperty } from '@angular/cdk/coercion';
import { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@angular/cdk/keycodes';
import { Overlay, OverlayConfig } from '@angular/cdk/overlay';
import { TemplatePortal } from '@angular/cdk/portal';
import { DOCUMENT } from '@angular/common';
import { Directive, forwardRef, Host, Inject, InjectionToken, Input, Optional, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { defer, fromEvent, merge, of, Subject, Subscription } from 'rxjs';
import { debounceTime, delay, filter, first, switchMap, take, takeUntil, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
import * as i2 from "@angular/cdk/bidi";
import * as i3 from "@angular/cdk/text-field";
import * as i4 from "@aposin/ng-aquila/formfield";
import * as i5 from "@aposin/ng-aquila/natural-language-form";
/**
 * Provider that allows the autocomplete to register as a ControlValueAccessor.
 * @docs-private
 */
export const NX_AUTOCOMPLETE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NxAutocompleteTriggerDirective),
    multi: true,
};
/** Injection token that determines the scroll handling while an autocomplete is open. */
export const NX_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('nx-autocomplete-scroll-strategy');
/** @docs-private */
export function NX_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {
    return () => overlay.scrollStrategies.reposition();
}
/** @docs-private */
export const NX_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {
    provide: NX_AUTOCOMPLETE_SCROLL_STRATEGY,
    useFactory: NX_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,
    deps: [Overlay],
};
/**
 * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.
 */
export function getNxAutocompleteMissingPanelError() {
    return Error('Attempting to open an undefined instance of `nx-autocomplete`. ' +
        'Make sure that the id passed to the `nxAutocomplete` is correct and that ' +
        "you're attempting to open it after the ngAfterContentInit hook.");
}
export class NxAutocompleteTriggerDirective {
    constructor(_element, _overlay, _viewContainerRef, _zone, _cdr, _dir, _autofillMonitor, _nxFormField, _nxWordField, _document, _defaultScrollStrategyFactory, _viewportRuler) {
        this._element = _element;
        this._overlay = _overlay;
        this._viewContainerRef = _viewContainerRef;
        this._zone = _zone;
        this._cdr = _cdr;
        this._dir = _dir;
        this._autofillMonitor = _autofillMonitor;
        this._nxFormField = _nxFormField;
        this._nxWordField = _nxWordField;
        this._document = _document;
        this._defaultScrollStrategyFactory = _defaultScrollStrategyFactory;
        this._viewportRuler = _viewportRuler;
        this._componentDestroyed = false;
        this._isAutofill = false;
        /** Whether or not the label state is being overridden. */
        this._manuallyFloatingLabel = false;
        /** Subscription to viewport size changes. */
        this._viewportSubscription = Subscription.EMPTY;
        /**
         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,
         * closed autocomplete from being reopened if the user switches to another browser tab and then
         * comes back.
         */
        this._canOpenOnNextFocus = true;
        /** Stream of keyboard events that can close the panel. */
        this._closeKeyEventStream = new Subject();
        /** Value changes */
        this._valueChanges = new Subject();
        /** Strategy factory that will be used to handle scrolling while the autocomplete panel is open. */
        this._scrollStrategyFactory = this._defaultScrollStrategyFactory;
        this._debounce = 400;
        this._autocompleteDisabled = false;
        this._overlayAttached = false;
        /** Stream of autocomplete option selections. */
        this.optionSelections = defer(() => {
            if (this.autocomplete?.options) {
                return merge(...this.autocomplete.options.map(option => option.onSelectionChange));
            }
            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.
            // Return a stream that we'll replace with the real one once everything is in place.
            return this._zone.onStable.asObservable().pipe(take(1), switchMap(() => this.optionSelections));
        });
        this._destroyed = new Subject();
        /**
         * Event handler for when the window is blurred. Needs to be an
         * arrow function in order to preserve the context.
         */
        this._windowBlurHandler = () => {
            // If the user blurred the window while the autocomplete is focused, it means that it'll be
            // refocused when they come back. In this case we want to skip the first focus event, if the
            // pane was closed, in order to avoid reopening it unintentionally.
            this._canOpenOnNextFocus = document.activeElement !== this._element.nativeElement || this.panelOpen;
        };
        /** `View -> model callback called when value changes` */
        this._onChange = val => {
            this._valueChanges.next(val);
        };
        /** `View -> model callback called when autocomplete has been touched` */
        this._onTouched = () => { };
        if (typeof window !== 'undefined') {
            _zone.runOutsideAngular(() => {
                window.addEventListener('blur', this._windowBlurHandler);
            });
        }
    }
    /** The items callback. Called with input value, must return Observable of Array of strings */
    set itemsCb(val) {
        if (typeof val === 'function') {
            this._itemsCb = val;
        }
        else {
            throw new Error('Wrong value type for nxAutocompleteItems');
        }
    }
    get itemsCb() {
        return this._itemsCb;
    }
    /** Debounce in ms before items callback is triggered. Defaults to 400 */
    set debounce(val) {
        this._debounce = coerceNumberProperty(val);
    }
    /** Whether autocomplete functionality is disabled. */
    set autocompleteDisabled(val) {
        this._autocompleteDisabled = val;
        this._bindAutocompleteItems();
    }
    get autocompleteDisabled() {
        return this._autocompleteDisabled;
    }
    /** Whether or not the autocomplete panel is open. */
    get panelOpen() {
        return this._overlayAttached && this.autocomplete.showPanel;
    }
    /** The currently active option, coerced to NxAutocompleteOptionComponent type. */
    get activeOption() {
        if (this.autocomplete?._keyManager) {
            return this.autocomplete._keyManager.activeItem;
        }
        return null;
    }
    /** Stream of clicks outside of the autocomplete panel. */
    get _outsideClickStream() {
        if (!this._document) {
            return of(null);
        }
        return merge(fromEvent(this._document, 'mouseup'), fromEvent(this._document, 'touchend')).pipe(filter((event) => {
            const clickTarget = event.target;
            const formField = this._formField ? this._formField.elementRef.nativeElement : null;
            return (this._overlayAttached &&
                clickTarget !== this._element.nativeElement &&
                (!formField || !formField.contains(clickTarget)) &&
                !!this._overlayRef &&
                !this._overlayRef.overlayElement.contains(clickTarget));
        }));
    }
    get _formField() {
        if (this._nxFormField) {
            return this._nxFormField;
        }
        return this._nxWordField;
    }
    ngOnInit() {
        this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {
            this._flipDirection();
            this._cdr.markForCheck();
        });
        this._autofillMonitor
            .monitor(this._element.nativeElement)
            .pipe(takeUntil(this._destroyed))
            .subscribe(event => {
            this._isAutofill = event.isAutofilled;
        });
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        if (typeof window !== 'undefined') {
            window.removeEventListener('blur', this._windowBlurHandler);
        }
        this._viewportSubscription.unsubscribe();
        this._componentDestroyed = true;
        this._destroyPanel();
        this._closeKeyEventStream.complete();
        this._controlValueChangesSubscription?.unsubscribe();
        this._itemsSubscription?.unsubscribe();
        this._autofillMonitor.stopMonitoring(this._element.nativeElement);
    }
    ngOnChanges() {
        this._bindAutocompleteItems();
    }
    ngAfterViewInit() {
        this._bindAutocompleteItems();
    }
    /**
     * Binds or rebinds the autocomplete items. Prerequisites:
     * - items callback has to be defined
     * - autocomplete panel has to be bound
     */
    _bindAutocompleteItems() {
        if (this._controlValueChangesSubscription) {
            this._controlValueChangesSubscription.unsubscribe();
        }
        if (typeof this._itemsCb === 'function' && this.autocomplete && !this.autocompleteDisabled) {
            const itemsSubject = new Subject();
            this.autocomplete.items = itemsSubject;
            const valueChanges = this._formField?._control?.ngControl?.valueChanges || this._valueChanges;
            this._controlValueChangesSubscription = valueChanges.pipe(debounceTime(this._debounce)).subscribe(input => {
                if (this._itemsSubscription) {
                    this._itemsSubscription.unsubscribe();
                }
                this._itemsSubscription = this._itemsCb(input)
                    .pipe(first())
                    .subscribe(result => {
                    itemsSubject.next(result);
                }, err => {
                    // On error reset
                    // TODO Log error?
                    itemsSubject.next([]);
                });
            });
        }
    }
    /** Opens the autocomplete suggestion panel. */
    openPanel() {
        if (!this.autocompleteDisabled) {
            this._attachOverlay();
            this._floatLabel();
        }
    }
    /** Closes the autocomplete suggestion panel. */
    closePanel() {
        this._resetLabel();
        if (!this._overlayAttached) {
            return;
        }
        if (this.panelOpen) {
            // Only emit if the panel was visible.
            this.autocomplete.closed.emit();
        }
        this.autocomplete._isOpen = this._overlayAttached = false;
        if (this._overlayRef?.hasAttached()) {
            this._overlayRef.detach();
            this._closingActionsSubscription.unsubscribe();
        }
        // Note that in some cases this can end up being called after the component is destroyed.
        // Add a check to ensure that we don't try to run change detection on a destroyed view.
        if (!this._componentDestroyed) {
            // We need to trigger change detection manually, because
            // `fromEvent` doesn't seem to do it at the proper time.
            // This ensures that the label is reset when the
            // user clicks outside.
            this._cdr.detectChanges();
        }
    }
    /**
     * A stream of actions that should close the autocomplete panel, including
     * when an option is selected, on blur, and when TAB is pressed.
     */
    get panelClosingActions() {
        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._outsideClickStream, this._overlayRef ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) : of());
    }
    // Implemented as part of ControlValueAccessor.
    writeValue(value) {
        Promise.resolve(null).then(() => this._setTriggerValue(value));
    }
    // Implemented as part of ControlValueAccessor.
    registerOnChange(fn) {
        this._onChange = fn;
    }
    // Implemented as part of ControlValueAccessor.
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    // Implemented as part of ControlValueAccessor.
    setDisabledState(isDisabled) {
        this._element.nativeElement.disabled = isDisabled;
    }
    _handleKeydown(event) {
        const keyCode = event.keyCode;
        // Prevent the default action on all escape key presses. This is here primarily to bring IE
        // in line with other browsers. By default, pressing escape on IE will cause it to revert
        // the input value to the one that it had on focus, however it won't dispatch any events
        // which means that the model value will be out of sync with the view.
        if (keyCode === ESCAPE) {
            event.preventDefault();
        }
        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.
        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction
        if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {
            this._resetActiveItem();
            this._closeKeyEventStream.next();
            event.stopPropagation();
        }
        else if (this.activeOption && keyCode === ENTER && this.panelOpen) {
            this.activeOption._selectViaInteraction();
            this._resetActiveItem();
            event.preventDefault();
        }
        else {
            const prevActiveItem = this.autocomplete._keyManager.activeItem;
            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;
            if (this.panelOpen || keyCode === TAB) {
                this.autocomplete._keyManager.onKeydown(event);
            }
            else if (isArrowKey && this._isFieldEnabled()) {
                this.openPanel();
            }
            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {
                this._scrollToOption();
            }
        }
    }
    _handleInput(event) {
        const target = event.target;
        let value = target.value;
        // Based on `NumberValueAccessor` from forms.
        if (target.type === 'number') {
            value = value === '' ? null : parseFloat(value);
        }
        // in case of autofill from browser
        // input can come from any activeElement which differ from event.target
        // so checking if it's autofill instead.
        if (this._isFieldEnabled() && this._previousValue !== value && this._isAutofill) {
            this._previousValue = value;
            this._onChange(value);
            this._isAutofill = false;
            return;
        }
        // If the input has a placeholder, IE will fire the `input` event on page load,
        // focus and blur, in addition to when the user actually changed the value. To
        // filter out all of the extra events, we save the value on focus and between
        // `input` events, and we check whether it changed.
        // See: https://connect.microsoft.com/IE/feedback/details/885747/
        if (this._isFieldEnabled() && this._previousValue !== value && this._rootElement().activeElement === event.target) {
            this._previousValue = value;
            this._onChange(value);
            this.openPanel();
        }
    }
    _rootElement() {
        return this._element.nativeElement.getRootNode();
    }
    _handleFocus() {
        if (!this._canOpenOnNextFocus) {
            this._canOpenOnNextFocus = true;
        }
        else if (this._isFieldEnabled()) {
            this._previousValue = this._element.nativeElement.value;
            this.openPanel();
        }
    }
    /**
     * In "auto" mode, the label will animate down as soon as focus is lost.
     * This causes the value to jump when selecting an option with the mouse.
     * This method manually floats the label until the panel can be closed.
     * @param shouldAnimate Whether the label should be animated when it is floated.
     */
    _floatLabel() {
        if (this._nxFormField && this._nxFormField.floatLabel === 'auto') {
            this._nxFormField.floatLabel = 'always';
            this._manuallyFloatingLabel = true;
        }
    }
    /** If the label has been manually elevated, return it to its normal state. */
    _resetLabel() {
        if (this._nxFormField && this._manuallyFloatingLabel) {
            this._nxFormField.floatLabel = 'auto';
            this._manuallyFloatingLabel = false;
        }
    }
    /**
     * Given that we are not actually focusing active options, we must manually adjust scroll
     * to reveal options below the fold. First, we find the offset of the option from the top
     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -
     * the panel height + the option height, so the active option will be just visible at the
     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop
     * will become the offset. If that offset is visible within the panel already, the scrollTop is
     * not adjusted.
     */
    _scrollToOption() {
        if (this.autocomplete.options.length === 0) {
            return;
        }
        let optionOffset = 0;
        let optionHeight = this.autocomplete.options.first.elementRef.nativeElement.offsetHeight;
        if (this.autocomplete._keyManager.activeItem) {
            optionOffset = this.autocomplete._keyManager.activeItem.elementRef.nativeElement.offsetTop;
            optionHeight = this.autocomplete._keyManager.activeItem.elementRef.nativeElement.offsetHeight;
        }
        const panelOffsetTop = this.autocomplete.panel.nativeElement.offsetTop;
        const newScrollPosition = _getOptionScrollPosition(optionOffset, optionHeight, this.autocomplete._getScrollTop() + panelOffsetTop, this.autocomplete.panel.nativeElement.offsetHeight);
        this.autocomplete._setScrollTop(newScrollPosition - panelOffsetTop);
    }
    /**
     * This method listens to a stream of panel closing actions and resets the
     * stream every time the option list changes.
     */
    _subscribeToClosingActions() {
        const firstStable = this._zone.onStable.asObservable().pipe(take(1));
        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), 
        // Defer emitting to the stream until the next tick, because changing
        // bindings in here will cause "changed after checked" errors.
        delay(0));
        // When the zone is stable initially, and when the option list changes...
        return (merge(firstStable, optionChanges)
            .pipe(
        // create a new stream of panelClosingActions, replacing any previous streams
        // that were created, and flatten it so our stream only emits closing events...
        switchMap(() => {
            this._resetActiveItem();
            this.autocomplete._setVisibility();
            return this.panelClosingActions;
        }), 
        // when the first closing event occurs...
        take(1))
            // set the value, close the panel, and complete.
            .subscribe(event => this._setValueAndClose(event)));
    }
    /** Destroys the autocomplete suggestion panel. */
    _destroyPanel() {
        if (this._overlayRef) {
            this.closePanel();
            this._overlayRef.dispose();
            this._overlayRef = null;
        }
    }
    _setTriggerValue(value) {
        const toDisplay = this.autocomplete?.valueFormatter ? this.autocomplete.valueFormatter(value) : value;
        // Simply falling back to an empty string if the display value is falsy does not work properly.
        // The display value can also be the number zero and shouldn't fall back to an empty string.
        const inputValue = toDisplay ?? '';
        // If it's used within a `NxFormField` or `NxWord`, we should set it through the property so it can go
        // through change detection.
        if (this._formField) {
            this._formField._control.value = inputValue;
        }
        else {
            this._element.nativeElement.value = inputValue;
        }
    }
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     */
    _setValueAndClose(event) {
        if (event?.source) {
            this._clearPreviousSelectedOption(event.source);
            this._setTriggerValue(event.source.value);
            this._onChange(event.source.value);
            this._element.nativeElement.focus();
            this.autocomplete._emitSelectEvent(event.source);
        }
        this.closePanel();
    }
    /**
     * Clear any previous selected option and emit a selection change event for this option
     */
    _clearPreviousSelectedOption(skip) {
        this.autocomplete.options.forEach(option => {
            if (option !== skip && option.selected) {
                option.deselect();
            }
        });
    }
    _attachOverlay() {
        if (!this.autocomplete) {
            throw getNxAutocompleteMissingPanelError();
        }
        if (this._overlayRef) {
            /** Update the panel width, in case the host width has changed */
            this._overlayRef.updateSize({ minWidth: this._getHostWidth() });
        }
        else {
            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);
            this._overlayRef = this._overlay.create(this._getOverlayConfig());
            if (this._viewportRuler) {
                this._viewportSubscription = this._viewportRuler.change().subscribe(() => {
                    if (this.panelOpen && this._overlayRef) {
                        this._overlayRef.updateSize({ minWidth: this._getHostWidth() });
                    }
                });
            }
        }
        if (this._overlayRef && !this._overlayRef.hasAttached()) {
            this._overlayRef.attach(this._portal);
            this._closingActionsSubscription = this._subscribeToClosingActions();
        }
        const wasOpen = this.panelOpen;
        this.autocomplete._setVisibility();
        this.autocomplete._isOpen = this._overlayAttached = true;
        // We need to do an extra `panelOpen` check in here, because the
        // autocomplete won't be shown if there are no options.
        if (this.panelOpen && wasOpen !== this.panelOpen) {
            this.autocomplete.opened.emit();
        }
    }
    _getOverlayConfig() {
        return new OverlayConfig({
            positionStrategy: this._getOverlayPosition(),
            scrollStrategy: this._scrollStrategyFactory(),
            minWidth: this._getHostWidth(),
            direction: this._dir?.value || 'ltr',
        });
    }
    _getOverlayPosition() {
        const isRtl = this._dir?.value === 'rtl';
        // HINT: somehow setting margin breaks overlay positioning for rtl
        const viewPortMargin = isRtl ? 0 : 16;
        this._positionStrategy = this._overlay
            .position()
            .flexibleConnectedTo(this._getConnectedElement())
            .withViewportMargin(viewPortMargin)
            .withPush(false)
            // to fix an edge case that would open the overlay after it has been visually hidden
            // and the trigger moved to the bottom edge of the viewport
            // problem is that the CDK overlay takes the last position into account which results
            // in the overlay only being 16px in height. this change disabled this code path for now
            .withGrowAfterOpen(true)
            .withPositions([
            {
                originX: 'start',
                originY: 'bottom',
                overlayX: 'start',
                overlayY: 'top',
            },
            {
                originX: 'start',
                originY: 'top',
                overlayX: 'start',
                overlayY: 'bottom',
            },
        ]);
        return this._positionStrategy;
    }
    _getConnectedElement() {
        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;
    }
    /** Returns the width of the input element, so the panel min-width can match it. */
    _getHostWidth() {
        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;
    }
    /**
     * Resets the active item to -1 so arrow events will activate the
     * correct options, or to 0 if the consumer opted into it.
     */
    _resetActiveItem() {
        this.autocomplete._keyManager.setActiveItem(-1);
    }
    /** Determines whether the panel can be opened. */
    _isFieldEnabled() {
        const element = this._element.nativeElement;
        return !element.readOnly && !element.disabled;
    }
    _flipDirection() {
        this._overlayRef?.setDirection(this._dir.value);
        this._overlayRef?.updatePositionStrategy(this._getOverlayPosition());
    }
}
NxAutocompleteTriggerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxAutocompleteTriggerDirective, deps: [{ token: i0.ElementRef }, { token: i1.Overlay }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: i2.Directionality }, { token: i3.AutofillMonitor }, { token: i4.NxFormfieldComponent, host: true, optional: true }, { token: i5.NxWordComponent, host: true, optional: true }, { token: DOCUMENT, optional: true }, { token: NX_AUTOCOMPLETE_SCROLL_STRATEGY }, { token: i1.ViewportRuler }], target: i0.ɵɵFactoryTarget.Directive });
NxAutocompleteTriggerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxAutocompleteTriggerDirective, selector: "input[nxAutocomplete], textarea[nxAutocomplete]", inputs: { autocomplete: ["nxAutocomplete", "autocomplete"], itemsCb: ["nxAutocompleteItems", "itemsCb"], debounce: ["nxAutocompleteDebounce", "debounce"], autocompleteDisabled: ["nxAutocompleteDisabled", "autocompleteDisabled"] }, host: { attributes: { "role": "combobox", "autocomplete": "off", "aria-autocomplete": "list" }, listeners: { "focusin": "_handleFocus()", "blur": "_onTouched()", "input": "_handleInput($event)", "keydown": "_handleKeydown($event)" }, properties: { "attr.aria-activedescendant": "activeOption?.id", "attr.aria-expanded": "panelOpen.toString()", "attr.aria-owns": "autocomplete?.id" } }, providers: [NX_AUTOCOMPLETE_VALUE_ACCESSOR], exportAs: ["nxAutocompleteTrigger"], usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxAutocompleteTriggerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: `input[nxAutocomplete], textarea[nxAutocomplete]`,
                    host: {
                        role: 'combobox',
                        autocomplete: 'off',
                        'aria-autocomplete': 'list',
                        '[attr.aria-activedescendant]': 'activeOption?.id',
                        '[attr.aria-expanded]': 'panelOpen.toString()',
                        '[attr.aria-owns]': 'autocomplete?.id',
                        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel
                        // a little earlier. This avoids issues where IE delays the focusing of the input.
                        '(focusin)': '_handleFocus()',
                        '(blur)': '_onTouched()',
                        '(input)': '_handleInput($event)',
                        '(keydown)': '_handleKeydown($event)',
                    },
                    exportAs: 'nxAutocompleteTrigger',
                    providers: [NX_AUTOCOMPLETE_VALUE_ACCESSOR],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.Overlay }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: i2.Directionality }, { type: i3.AutofillMonitor }, { type: i4.NxFormfieldComponent, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }, { type: i5.NxWordComponent, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }, { type: Document, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NX_AUTOCOMPLETE_SCROLL_STRATEGY]
                }] }, { type: i1.ViewportRuler }]; }, propDecorators: { autocomplete: [{
                type: Input,
                args: ['nxAutocomplete']
            }], itemsCb: [{
                type: Input,
                args: ['nxAutocompleteItems']
            }], debounce: [{
                type: Input,
                args: ['nxAutocompleteDebounce']
            }], autocompleteDisabled: [{
                type: Input,
                args: ['nxAutocompleteDisabled']
            }] } });
/**
 * Determines the position to which to scroll a panel in order for an option to be into view.
 * @param optionOffset Option offset
 * @param optionHeight Height of the options.
 * @param currentScrollPosition Current scroll position of the panel.
 * @param panelHeight Height of the panel.
 * @docs-private
 */
function _getOptionScrollPosition(optionOffset, optionHeight, currentScrollPosition, panelHeight) {
    if (optionOffset < currentScrollPosition) {
        return optionOffset;
    }
    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {
        return Math.max(0, optionOffset - panelHeight + optionHeight);
    }
    return currentScrollPosition;
}
//# sourceMappingURL=data:application/json;base64,