import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';
import { ChangeDetectionStrategy, Component, ContentChildren, EventEmitter, Input, Optional, Output, TemplateRef, ViewChild, ViewChildren, } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { NxAutocompleteOptionComponent } from './autocomplete-option.component';
import * as i0 from "@angular/core";
import * as i1 from "@aposin/ng-aquila/formfield";
import * as i2 from "./autocomplete-option.component";
import * as i3 from "@angular/common";
/**
 * Autocomplete IDs need to be unique across components, so this counter exists outside of
 * the component definition.
 */
let _uniqueAutocompleteIdCounter = 0;
/** Event object that is emitted when an autocomplete option is selected. */
export class NxAutocompleteSelectedEvent {
    constructor(
    /** Reference to the autocomplete panel that emitted the event. */
    source, 
    /** Option that was selected. */
    option) {
        this.source = source;
        this.option = option;
    }
}
export class NxAutocompleteComponent {
    constructor(_cdr, _elementRef, formFieldComponent) {
        this._cdr = _cdr;
        this._elementRef = _elementRef;
        this.formFieldComponent = formFieldComponent;
        /** Whether the autocomplete panel should be visible, depending on option length. */
        this.showPanel = false;
        this._isOpen = false;
        this._items = null;
        this._hasItems = false;
        /** Event that is emitted whenever an option from the list is selected. */
        this.optionSelected = new EventEmitter();
        /** Event that is emitted when the autocomplete panel is opened. */
        this.opened = new EventEmitter();
        /** Event that is emitted when the autocomplete panel is closed. */
        this.closed = new EventEmitter();
        this._classList = {};
        /** Unique ID to be used by autocomplete trigger's "aria-owns" property. */
        this.id = `nx-autocomplete-${_uniqueAutocompleteIdCounter++}`;
        this._destroyed = new Subject();
        /**
         * Value to string converter function.
         * As an autocomplete option can hold any value, a converter might be needed
         * to get a string representation of the value, which can be stored in the input.
         *
         * Default: value ? value.toString() : null.
         */
        this.valueFormatter = (value) => (value ? value.toString() : null);
    }
    /** Whether the autocomplete panel is open. */
    get isOpen() {
        return this._isOpen && this.showPanel;
    }
    /** Items observable. If given, autocomplete takes care of the options and ng-content is discarderd */
    set items(val) {
        this._hasItems = true;
        if (Array.isArray(val)) {
            this._items = val;
        }
        else if (val instanceof Observable) {
            this._itemsSubscription?.unsubscribe();
            this._itemsSubscription = val.subscribe(itms => {
                this._items = itms;
                this._cdr.markForCheck();
                // and check visibility in next cycle, when options are set
                setTimeout(() => this._setVisibility());
            });
        }
        else if (val === null) {
            this._items = val;
        }
        else {
            throw new Error('Invalid argument for autocomplete items. It has to be Array<string> or Observable<Array<string>>');
        }
    }
    get items() {
        return this._items; // TODO properly coerce input as empty array
    }
    /**
     * @docs-private
     * Is items observable set
     */
    get hasItems() {
        return this._hasItems;
    }
    /** Autocomplete options */
    get options() {
        return this.hasItems ? this._vOptions : this._cOptions;
    }
    /**
     * Takes classes set on the host nx-autocomplete element and applies them to the panel
     * inside the overlay container to allow for easy styling.
     */
    set classList(value) {
        if (value?.length) {
            value.split(' ').forEach(className => (this._classList[className.trim()] = true));
            this._elementRef.nativeElement.className = '';
        }
    }
    ngAfterViewInit() {
        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();
        this._setVisibility();
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this._itemsSubscription?.unsubscribe();
    }
    /**
     * Sets the panel scrollTop. This allows us to manually scroll to display options
     * above or below the fold, as they are not actually being focused when active.
     */
    _setScrollTop(scrollTop) {
        if (this.panel) {
            this.panel.nativeElement.scrollTop = scrollTop;
        }
    }
    /** Returns the panel's scrollTop. */
    _getScrollTop() {
        return this.panel ? this.panel.nativeElement.scrollTop : 0;
    }
    /** Panel should hide itself when the option list is empty. */
    _setVisibility() {
        this.showPanel = !!this.options?.length;
        this._classList['nx-autocomplete-visible'] = this.showPanel;
        this._classList['nx-autocomplete-hidden'] = !this.showPanel;
        this._cdr.markForCheck();
    }
    /** Emits the `select` event. */
    _emitSelectEvent(option) {
        const event = new NxAutocompleteSelectedEvent(this, option);
        this.optionSelected.emit(event);
    }
    get _isInOutlineField() {
        return this.formFieldComponent !== null && this.formFieldComponent.appearance === 'outline';
    }
}
NxAutocompleteComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxAutocompleteComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i1.NxFormfieldComponent, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NxAutocompleteComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxAutocompleteComponent, selector: "nx-autocomplete", inputs: { items: "items", classList: ["class", "classList"], valueFormatter: ["nxValueFormatter", "valueFormatter"] }, outputs: { optionSelected: "optionSelected", opened: "opened", closed: "closed" }, host: { classAttribute: "nx-autocomplete" }, queries: [{ propertyName: "_cOptions", predicate: NxAutocompleteOptionComponent, descendants: true }], viewQueries: [{ propertyName: "template", first: true, predicate: TemplateRef, descendants: true }, { propertyName: "panel", first: true, predicate: ["panel"], descendants: true }, { propertyName: "_vOptions", predicate: NxAutocompleteOptionComponent, descendants: true }], exportAs: ["nxAutocomplete"], ngImport: i0, template: "<ng-template>\n    <div\n        class=\"nx-autocomplete-panel\"\n        role=\"listbox\"\n        [id]=\"id\"\n        [ngClass]=\"_classList\"\n        [class.nx-autocomplete-panel--in-outline-field]=\"_isInOutlineField\"\n        #panel\n    >\n        <ng-container *ngIf=\"hasItems\">\n            <nx-autocomplete-option *ngFor=\"let item of items\" [value]=\"item\">\n                {{ item }}\n            </nx-autocomplete-option>\n        </ng-container>\n        <ng-container *ngIf=\"!hasItems\">\n            <ng-content></ng-content>\n        </ng-container>\n    </div>\n</ng-template>\n", styles: [":host ::ng-deep .c-input::-ms-clear{width:0;height:0}.nx-autocomplete-panel{background-color:var(--dropdown-panel-background-color);box-shadow:var(--shadow-small);overflow-y:auto;overflow-x:hidden;max-height:280px;width:100%;border-radius:4px}.nx-autocomplete-panel.nx-autocomplete-visible{visibility:visible}.nx-autocomplete-panel.nx-autocomplete-hidden{visibility:hidden}.nx-autocomplete-panel--in-outline-field ::ng-deep nx-autocomplete-option .nx-autocomplete-option,.nx-autocomplete-panel--in-outline-field ::ng-deep nx-autocomplete-option .nx-autocomplete-option__label{font-size:var(--dropdown-item-outline-font-size);line-height:var(--dropdown-item-outline-line-height);font-weight:var(--dropdown-item-outline-font-weight);letter-spacing:var(--dropdown-item-outline-letter-spacing)}@media screen and (-ms-high-contrast: active){.nx-autocomplete-panel{box-shadow:0 0 0 1px windowText}}\n"], components: [{ type: i2.NxAutocompleteOptionComponent, selector: "nx-autocomplete-option", inputs: ["disabled", "value"], outputs: ["onSelectionChange"] }], directives: [{ type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxAutocompleteComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-autocomplete', changeDetection: ChangeDetectionStrategy.OnPush, exportAs: 'nxAutocomplete', host: {
                        class: 'nx-autocomplete',
                    }, template: "<ng-template>\n    <div\n        class=\"nx-autocomplete-panel\"\n        role=\"listbox\"\n        [id]=\"id\"\n        [ngClass]=\"_classList\"\n        [class.nx-autocomplete-panel--in-outline-field]=\"_isInOutlineField\"\n        #panel\n    >\n        <ng-container *ngIf=\"hasItems\">\n            <nx-autocomplete-option *ngFor=\"let item of items\" [value]=\"item\">\n                {{ item }}\n            </nx-autocomplete-option>\n        </ng-container>\n        <ng-container *ngIf=\"!hasItems\">\n            <ng-content></ng-content>\n        </ng-container>\n    </div>\n</ng-template>\n", styles: [":host ::ng-deep .c-input::-ms-clear{width:0;height:0}.nx-autocomplete-panel{background-color:var(--dropdown-panel-background-color);box-shadow:var(--shadow-small);overflow-y:auto;overflow-x:hidden;max-height:280px;width:100%;border-radius:4px}.nx-autocomplete-panel.nx-autocomplete-visible{visibility:visible}.nx-autocomplete-panel.nx-autocomplete-hidden{visibility:hidden}.nx-autocomplete-panel--in-outline-field ::ng-deep nx-autocomplete-option .nx-autocomplete-option,.nx-autocomplete-panel--in-outline-field ::ng-deep nx-autocomplete-option .nx-autocomplete-option__label{font-size:var(--dropdown-item-outline-font-size);line-height:var(--dropdown-item-outline-line-height);font-weight:var(--dropdown-item-outline-font-weight);letter-spacing:var(--dropdown-item-outline-letter-spacing)}@media screen and (-ms-high-contrast: active){.nx-autocomplete-panel{box-shadow:0 0 0 1px windowText}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i1.NxFormfieldComponent, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { template: [{
                type: ViewChild,
                args: [TemplateRef]
            }], panel: [{
                type: ViewChild,
                args: ['panel']
            }], items: [{
                type: Input
            }], optionSelected: [{
                type: Output
            }], opened: [{
                type: Output
            }], closed: [{
                type: Output
            }], _vOptions: [{
                type: ViewChildren,
                args: [NxAutocompleteOptionComponent]
            }], _cOptions: [{
                type: ContentChildren,
                args: [NxAutocompleteOptionComponent, { descendants: true }]
            }], classList: [{
                type: Input,
                args: ['class']
            }], valueFormatter: [{
                type: Input,
                args: ['nxValueFormatter']
            }] } });
//# sourceMappingURL=data:application/json;base64,