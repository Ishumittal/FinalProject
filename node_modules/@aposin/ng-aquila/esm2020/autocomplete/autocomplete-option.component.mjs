import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ENTER, SPACE } from '@angular/cdk/keycodes';
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
/** Option selected event */
export class NxAutocompleteOptionSelected {
    constructor(
    /** The option that is selected or deselected. */
    source, 
    /** Whether the input was triggered by the user. */
    isUserInput = false) {
        this.source = source;
        this.isUserInput = isUserInput;
    }
}
/**
 * Option IDs need to be unique across components, so this counter exists outside of
 * the component definition.
 */
let _uniqueIdCounter = 0;
export class NxAutocompleteOptionComponent {
    constructor(/** @docs-private */ elementRef, _cdr) {
        this.elementRef = elementRef;
        this._cdr = _cdr;
        this._id = `nx-autocomplete-option-${_uniqueIdCounter++}`;
        this._selected = false;
        this._active = false;
        this._disabled = false;
        /** Event emitted when the option is selected or deselected. */
        this.onSelectionChange = new EventEmitter();
    }
    /** Id of the autocomplete option. By default it is set to an incremented value. */
    get id() {
        return this._id;
    }
    /** Whether or not the option is currently selected. */
    get selected() {
        return this._selected;
    }
    /**
     * Whether or not the option is currently active and ready to be selected.
     * An active option displays styles as if it is focused, but the
     * focus is actually retained somewhere else. This comes in handy
     * for components like autocomplete where focus must remain on the input.
     */
    get active() {
        return this._active;
    }
    /** Whether the option is disabled. */
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        const newValue = coerceBooleanProperty(value);
        if (this._disabled !== newValue) {
            this._disabled = newValue;
        }
    }
    /** Ensures the option is selected when activated from the keyboard. */
    _handleKeydown(event) {
        if (event.keyCode === ENTER || event.keyCode === SPACE) {
            this._selectViaInteraction();
            // Prevent the page from scrolling down and form submits.
            event.preventDefault();
        }
    }
    /**
     * `Selects the option while indicating the selection came from the user. Used to
     * determine if the select's view -> model callback should be invoked.`
     */
    _selectViaInteraction() {
        if (!this.disabled) {
            this._selected = true;
            this._cdr.markForCheck();
            this._emitSelectionChangeEvent(true);
        }
    }
    /** Returns the correct tabindex for the option depending on disabled state. */
    _getTabIndex() {
        return this.disabled ? '-1' : '0';
    }
    /** Emits the selection change event. */
    _emitSelectionChangeEvent(isUserInput = false) {
        this.onSelectionChange.emit(new NxAutocompleteOptionSelected(this, isUserInput));
    }
    /** @docs-private */
    get viewValue() {
        return (this.elementRef.nativeElement.textContent || '').trim();
    }
    /**
     * @docs-private
     * This method sets display styles on the option to make it appear
     * active. This is used by the ActiveDescendantKeyManager so key
     * events will display the proper options as active on arrow key events.
     */
    setActiveStyles() {
        if (!this._active) {
            this._active = true;
            this._cdr.markForCheck();
        }
    }
    /**
     * @docs-private
     * This method removes display styles on the option that made it appear
     * active. This is used by the ActiveDescendantKeyManager so key
     * events will display the proper options as active on arrow key events.
     */
    setInactiveStyles() {
        if (this._active) {
            this._active = false;
            this._cdr.markForCheck();
        }
    }
    /**
     * @docs-private
     * Gets the label to be used when determining whether the option should be focused.
     */
    getLabel() {
        return this.viewValue;
    }
    /** Selects the option. */
    select() {
        this._selected = true;
        this._cdr.markForCheck();
        this._emitSelectionChangeEvent();
    }
    /** Deselects the option. */
    deselect() {
        this._selected = false;
        this._cdr.markForCheck();
        this._emitSelectionChangeEvent();
    }
    /**
     * @docs-private
     * Sets focus onto this option.
     */
    focus() {
        const element = this.elementRef.nativeElement;
        if (typeof element.focus === 'function') {
            element.focus();
        }
    }
}
NxAutocompleteOptionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxAutocompleteOptionComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NxAutocompleteOptionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxAutocompleteOptionComponent, selector: "nx-autocomplete-option", inputs: { disabled: "disabled", value: "value" }, outputs: { onSelectionChange: "onSelectionChange" }, host: { attributes: { "role": "option" }, listeners: { "click": "_selectViaInteraction()", "keydown": "_handleKeydown($event)" }, properties: { "attr.tabindex": "_getTabIndex()", "id": "id", "attr.aria-selected": "selected.toString()", "attr.aria-disabled": "disabled.toString()", "class.nx-active": "active", "class.nx-disabled": "disabled", "style.display": "\"block\"" } }, ngImport: i0, template: "<div class=\"nx-autocomplete-option\" [class.nx-active]=\"active\">\n    <div class=\"nx-autocomplete-option__label\">\n        <ng-content></ng-content>\n    </div>\n</div>\n", styles: [":host:focus{outline:none}:host:first-child .nx-autocomplete-option{padding-top:16px}:host:last-child .nx-autocomplete-option{padding-bottom:16px}:host .nx-autocomplete-option{font-size:var(--dropdown-item-font-size);line-height:var(--dropdown-item-line-height);font-weight:var(--dropdown-item-font-weight);letter-spacing:var(--dropdown-item-letter-spacing);cursor:pointer;position:relative;display:flex;max-width:100%;white-space:nowrap;padding:8px 32px}:host-context([dir=rtl]) :host .nx-autocomplete-option{padding:8px 8px 8px 32px}:host .nx-autocomplete-option:hover .nx-autocomplete-option__label,:host .nx-autocomplete-option.nx-active .nx-autocomplete-option__label{color:var(--dropdown-item-hover-color)}@media screen and (-ms-high-contrast: active){:host .nx-autocomplete-option:hover .nx-autocomplete-option__label,:host .nx-autocomplete-option.nx-active .nx-autocomplete-option__label{color:highlightText;background-color:highlight;border-radius:4px}}:host .nx-autocomplete-option.nx-active .nx-autocomplete-option__label{border-radius:4px;box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){:host .nx-autocomplete-option.nx-active .nx-autocomplete-option__label{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}:host-context([dir=rtl]) :host .nx-autocomplete-option{padding-right:32px}:host .nx-autocomplete-option__label{padding:0 12px;margin:0 -12px;color:var(--dropdown-item-text-color)}@media screen and (-ms-high-contrast: active){:host .nx-autocomplete-option__label{-ms-high-contrast-adjust:none;color:buttonText;background-color:buttonFace;border-radius:4px}}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxAutocompleteOptionComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-autocomplete-option', host: {
                        role: 'option',
                        '[attr.tabindex]': '_getTabIndex()',
                        '[id]': 'id',
                        '[attr.aria-selected]': 'selected.toString()',
                        '[attr.aria-disabled]': 'disabled.toString()',
                        '(click)': '_selectViaInteraction()',
                        '(keydown)': '_handleKeydown($event)',
                        '[class.nx-active]': 'active',
                        '[class.nx-disabled]': 'disabled',
                        '[style.display]': '"block"', // needed for to be able to calculate offset height
                    }, changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"nx-autocomplete-option\" [class.nx-active]=\"active\">\n    <div class=\"nx-autocomplete-option__label\">\n        <ng-content></ng-content>\n    </div>\n</div>\n", styles: [":host:focus{outline:none}:host:first-child .nx-autocomplete-option{padding-top:16px}:host:last-child .nx-autocomplete-option{padding-bottom:16px}:host .nx-autocomplete-option{font-size:var(--dropdown-item-font-size);line-height:var(--dropdown-item-line-height);font-weight:var(--dropdown-item-font-weight);letter-spacing:var(--dropdown-item-letter-spacing);cursor:pointer;position:relative;display:flex;max-width:100%;white-space:nowrap;padding:8px 32px}:host-context([dir=rtl]) :host .nx-autocomplete-option{padding:8px 8px 8px 32px}:host .nx-autocomplete-option:hover .nx-autocomplete-option__label,:host .nx-autocomplete-option.nx-active .nx-autocomplete-option__label{color:var(--dropdown-item-hover-color)}@media screen and (-ms-high-contrast: active){:host .nx-autocomplete-option:hover .nx-autocomplete-option__label,:host .nx-autocomplete-option.nx-active .nx-autocomplete-option__label{color:highlightText;background-color:highlight;border-radius:4px}}:host .nx-autocomplete-option.nx-active .nx-autocomplete-option__label{border-radius:4px;box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){:host .nx-autocomplete-option.nx-active .nx-autocomplete-option__label{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}:host-context([dir=rtl]) :host .nx-autocomplete-option{padding-right:32px}:host .nx-autocomplete-option__label{padding:0 12px;margin:0 -12px;color:var(--dropdown-item-text-color)}@media screen and (-ms-high-contrast: active){:host .nx-autocomplete-option__label{-ms-high-contrast-adjust:none;color:buttonText;background-color:buttonFace;border-radius:4px}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { disabled: [{
                type: Input
            }], value: [{
                type: Input
            }], onSelectionChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,