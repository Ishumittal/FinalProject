import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
export class NxLayoutComponent {
    constructor() {
        this._classNames = '';
        /** @docs-private */
        this.grid = true;
    }
    /**
     * Type of layout.
     *
     * Values: grid | grid nogutters | grid maxwidth | grid nopadding. Default value: grid.
     */
    set classNames(value) {
        if (this._classNames === value) {
            return;
        }
        this._classNames = value;
        // TODO kick null safe-guards after setter value or any calling input values are properly coerced as string
        this.grid = !!this._classNames?.includes('grid');
        this.noGutters = !!this._classNames?.includes('nogutters');
        this.maxWidth = !!this._classNames?.includes('maxwidth');
        this.noPadding = !!this._classNames?.includes('nopadding');
    }
    get classNames() {
        return this._classNames;
    }
}
NxLayoutComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxLayoutComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
NxLayoutComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxLayoutComponent, selector: "[nxLayout]", inputs: { classNames: ["nxLayout", "classNames"] }, host: { properties: { "class.nx-grid": "grid", "class.nx-grid--no-gutters": "noGutters", "class.nx-grid--max-width": "maxWidth", "class.nx-grid--no-padding": "noPadding" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [":host(.nx-grid){position:relative;margin-left:auto;margin-right:auto;padding-right:16px;padding-left:16px}@media (min-width: 704px){:host(.nx-grid){padding-right:32px;padding-left:32px}}:host(.nx-grid--no-gutters) ::ng-deep{padding-left:0;padding-right:0}:host(.nx-grid--no-gutters) ::ng-deep .nx-grid__row{margin-left:0;margin-right:0}:host(.nx-grid--no-gutters) ::ng-deep .nx-grid__row>[class*=nx-grid__column]{padding-left:0;padding-right:0}:host(.nx-grid--no-padding) ::ng-deep{padding-left:0;padding-right:0}:host(.nx-grid--no-padding) ::ng-deep .nx-grid__row{margin-left:-16px;margin-right:-16px}@media (max-width: 703px){:host(.nx-grid--no-padding) ::ng-deep .nx-grid__row{margin-left:-8px;margin-right:-8px}}:host(.nx-grid--max-width){max-width:100%;width:var(--grid-max-width)}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxLayoutComponent, decorators: [{
            type: Component,
            args: [{ selector: '[nxLayout]', template: '<ng-content></ng-content>', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[class.nx-grid]': 'grid',
                        '[class.nx-grid--no-gutters]': 'noGutters',
                        '[class.nx-grid--max-width]': 'maxWidth',
                        '[class.nx-grid--no-padding]': 'noPadding',
                    }, styles: [":host(.nx-grid){position:relative;margin-left:auto;margin-right:auto;padding-right:16px;padding-left:16px}@media (min-width: 704px){:host(.nx-grid){padding-right:32px;padding-left:32px}}:host(.nx-grid--no-gutters) ::ng-deep{padding-left:0;padding-right:0}:host(.nx-grid--no-gutters) ::ng-deep .nx-grid__row{margin-left:0;margin-right:0}:host(.nx-grid--no-gutters) ::ng-deep .nx-grid__row>[class*=nx-grid__column]{padding-left:0;padding-right:0}:host(.nx-grid--no-padding) ::ng-deep{padding-left:0;padding-right:0}:host(.nx-grid--no-padding) ::ng-deep .nx-grid__row{margin-left:-16px;margin-right:-16px}@media (max-width: 703px){:host(.nx-grid--no-padding) ::ng-deep .nx-grid__row{margin-left:-8px;margin-right:-8px}}:host(.nx-grid--max-width){max-width:100%;width:var(--grid-max-width)}\n"] }]
        }], propDecorators: { classNames: [{
                type: Input,
                args: ['nxLayout']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWFxdWlsYS9zcmMvZ3JpZC9sYXlvdXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQWMxRSxNQUFNLE9BQU8saUJBQWlCO0lBWjlCO1FBYVksZ0JBQVcsR0FBRyxFQUFFLENBQUM7UUFFekIsb0JBQW9CO1FBQ3BCLFNBQUksR0FBRyxJQUFJLENBQUM7S0FpQ2Y7SUF0Qkc7Ozs7T0FJRztJQUNILElBQ0ksVUFBVSxDQUFDLEtBQWE7UUFDeEIsSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLEtBQUssRUFBRTtZQUM1QixPQUFPO1NBQ1Y7UUFDRCxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztRQUV6QiwyR0FBMkc7UUFDM0csSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDM0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDekQsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVELElBQUksVUFBVTtRQUNWLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUM1QixDQUFDOzs4R0FwQ1EsaUJBQWlCO2tHQUFqQixpQkFBaUIscVJBVmhCLDJCQUEyQjsyRkFVNUIsaUJBQWlCO2tCQVo3QixTQUFTOytCQUNJLFlBQVksWUFDWiwyQkFBMkIsbUJBQ3BCLHVCQUF1QixDQUFDLE1BQU0sUUFFekM7d0JBQ0YsaUJBQWlCLEVBQUUsTUFBTTt3QkFDekIsNkJBQTZCLEVBQUUsV0FBVzt3QkFDMUMsNEJBQTRCLEVBQUUsVUFBVTt3QkFDeEMsNkJBQTZCLEVBQUUsV0FBVztxQkFDN0M7OEJBdUJHLFVBQVU7c0JBRGIsS0FBSzt1QkFBQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdbbnhMYXlvdXRdJyxcbiAgICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIHN0eWxlVXJsczogWydsYXlvdXQuY29tcG9uZW50LnNjc3MnXSxcbiAgICBob3N0OiB7XG4gICAgICAgICdbY2xhc3MubngtZ3JpZF0nOiAnZ3JpZCcsXG4gICAgICAgICdbY2xhc3MubngtZ3JpZC0tbm8tZ3V0dGVyc10nOiAnbm9HdXR0ZXJzJyxcbiAgICAgICAgJ1tjbGFzcy5ueC1ncmlkLS1tYXgtd2lkdGhdJzogJ21heFdpZHRoJyxcbiAgICAgICAgJ1tjbGFzcy5ueC1ncmlkLS1uby1wYWRkaW5nXSc6ICdub1BhZGRpbmcnLFxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIE54TGF5b3V0Q29tcG9uZW50IHtcbiAgICBwcml2YXRlIF9jbGFzc05hbWVzID0gJyc7XG5cbiAgICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICAgIGdyaWQgPSB0cnVlO1xuXG4gICAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgICBub0d1dHRlcnMhOiBib29sZWFuO1xuXG4gICAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgICBtYXhXaWR0aCE6IGJvb2xlYW47XG5cbiAgICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICAgIG5vUGFkZGluZyE6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBUeXBlIG9mIGxheW91dC5cbiAgICAgKlxuICAgICAqIFZhbHVlczogZ3JpZCB8IGdyaWQgbm9ndXR0ZXJzIHwgZ3JpZCBtYXh3aWR0aCB8IGdyaWQgbm9wYWRkaW5nLiBEZWZhdWx0IHZhbHVlOiBncmlkLlxuICAgICAqL1xuICAgIEBJbnB1dCgnbnhMYXlvdXQnKVxuICAgIHNldCBjbGFzc05hbWVzKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NsYXNzTmFtZXMgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY2xhc3NOYW1lcyA9IHZhbHVlO1xuXG4gICAgICAgIC8vIFRPRE8ga2ljayBudWxsIHNhZmUtZ3VhcmRzIGFmdGVyIHNldHRlciB2YWx1ZSBvciBhbnkgY2FsbGluZyBpbnB1dCB2YWx1ZXMgYXJlIHByb3Blcmx5IGNvZXJjZWQgYXMgc3RyaW5nXG4gICAgICAgIHRoaXMuZ3JpZCA9ICEhdGhpcy5fY2xhc3NOYW1lcz8uaW5jbHVkZXMoJ2dyaWQnKTtcbiAgICAgICAgdGhpcy5ub0d1dHRlcnMgPSAhIXRoaXMuX2NsYXNzTmFtZXM/LmluY2x1ZGVzKCdub2d1dHRlcnMnKTtcbiAgICAgICAgdGhpcy5tYXhXaWR0aCA9ICEhdGhpcy5fY2xhc3NOYW1lcz8uaW5jbHVkZXMoJ21heHdpZHRoJyk7XG4gICAgICAgIHRoaXMubm9QYWRkaW5nID0gISF0aGlzLl9jbGFzc05hbWVzPy5pbmNsdWRlcygnbm9wYWRkaW5nJyk7XG4gICAgfVxuXG4gICAgZ2V0IGNsYXNzTmFtZXMoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsYXNzTmFtZXM7XG4gICAgfVxufVxuIl19