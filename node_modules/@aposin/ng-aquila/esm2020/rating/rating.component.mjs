import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { ENTER, LEFT_ARROW, RIGHT_ARROW } from '@angular/cdk/keycodes';
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, forwardRef, Input, Output, ViewChildren, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { NxIconComponent } from '@aposin/ng-aquila/icon';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/a11y";
import * as i2 from "@aposin/ng-aquila/icon";
import * as i3 from "@angular/common";
export class NxRatingComponent {
    constructor(_cdr, _focusMonitor) {
        this._cdr = _cdr;
        this._focusMonitor = _focusMonitor;
        this._value = 0;
        this._hover = 0;
        this._disabled = false;
        this._negative = false;
        this._startLabel = '';
        this._endLabel = null;
        this._ariaLabel = ['1/5', '2/5', '3/5', '4/5', '5/5'];
        this._iconColor = '';
        /** An event is dispatched each time when the rating changes. */
        this.valueChange = new EventEmitter();
        this.onTouchedCallback = () => { };
        this.onChangeCallback = (option) => { };
    }
    /** Sets the selected rating 1 - 5. */
    set value(newValue) {
        this._value = coerceNumberProperty(newValue);
        this._cdr.markForCheck();
    }
    get value() {
        return this._value;
    }
    /** Whether the rating component should be disabled. */
    set disabled(newValue) {
        if (this._disabled === newValue) {
            return;
        }
        this._disabled = coerceBooleanProperty(newValue);
        this._cdr.markForCheck();
    }
    get disabled() {
        return this._disabled;
    }
    /** Whether the negative colors be used. */
    set negative(newValue) {
        if (this._negative === newValue) {
            return;
        }
        this._negative = coerceBooleanProperty(newValue);
        this._cdr.markForCheck();
    }
    get negative() {
        return this._negative;
    }
    /** Sets the label painted at the start of the rating component. */
    set startLabel(newValue) {
        this._startLabel = newValue;
        this._cdr.markForCheck();
    }
    get startLabel() {
        return this._startLabel;
    }
    /** Sets the label painted at the end of the rating component. */
    set endLabel(newValue) {
        this._endLabel = newValue;
        this._cdr.markForCheck();
    }
    get endLabel() {
        return this._endLabel;
    }
    set ariaLabel(newAriaLabels) {
        this._ariaLabel = newAriaLabels;
        this._cdr.markForCheck();
    }
    get ariaLabel() {
        return this._ariaLabel;
    }
    set iconColor(color) {
        this._iconColor = color;
        this._cdr.markForCheck();
    }
    get iconColor() {
        return this._iconColor;
    }
    ngAfterViewInit() {
        this.icons.forEach(icon => this._focusMonitor.monitor(icon));
    }
    ngOnDestroy() {
        this.icons.forEach(icon => this._focusMonitor.stopMonitoring(icon));
    }
    /** Whether the given rating is selected. */
    isSelected(index) {
        return index <= this.value || index <= this._hover;
    }
    /** Allows to set the rating. */
    setSelection(value) {
        if (!this.disabled) {
            this.value = value;
            this.valueChange.emit(value);
            this.onTouchedCallback();
            this.onChangeCallback(this.value);
        }
    }
    /** @docs-private */
    handleKeyUp(event, rating) {
        const keyCode = event.keyCode;
        event.preventDefault();
        event.stopPropagation();
        if (keyCode === ENTER) {
            this.setSelection(rating);
        }
        if (keyCode === RIGHT_ARROW) {
            this.value = Math.min(this.value + 1, 5);
            const elementRef = this.icons.toArray()[this.value - 1];
            this._focusMonitor.focusVia(elementRef, 'keyboard');
        }
        if (keyCode === LEFT_ARROW) {
            this.value = Math.max(this.value - 1, 1);
            const elementRef = this.icons.toArray()[this.value - 1];
            this._focusMonitor.focusVia(elementRef, 'keyboard');
        }
    }
    writeValue(value) {
        this.value = value;
    }
    registerOnChange(callback) {
        this.onChangeCallback = callback;
    }
    registerOnTouched(callback) {
        this.onTouchedCallback = callback;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /** @docs-private */
    getAriaLabel(rating) {
        return this.ariaLabel[rating - 1];
    }
    /** @docs-private */
    getIconName(rating) {
        return 'star' + (this.isSelected(rating) ? '' : '-o');
    }
    /** @docs-private */
    setHover(rating) {
        if (this.disabled) {
            return;
        }
        this._hover = rating;
    }
}
NxRatingComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxRatingComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });
NxRatingComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxRatingComponent, selector: "nx-rating", inputs: { value: ["nxValue", "value"], disabled: ["nxDisabled", "disabled"], negative: ["nxNegative", "negative"], startLabel: ["nxStartLabel", "startLabel"], endLabel: ["nxEndLabel", "endLabel"], ariaLabel: ["nxAriaLabel", "ariaLabel"], iconColor: ["nxIconColor", "iconColor"] }, outputs: { valueChange: "nxValueChange" }, host: { properties: { "class.nx-rating--negative": "negative", "class.nx-rating--disabled": "disabled", "style.--iconColor": "iconColor" } }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => NxRatingComponent),
            multi: true,
        },
    ], viewQueries: [{ propertyName: "icons", predicate: NxIconComponent, descendants: true, read: ElementRef }], ngImport: i0, template: "<div class=\"nx-rating__container\" role=\"radiogroup\">\n    <nx-icon\n        *ngFor=\"let rating of [1, 2, 3, 4, 5]\"\n        (click)=\"setSelection(rating)\"\n        (keyup)=\"handleKeyUp($event, rating)\"\n        role=\"radio\"\n        [attr.aria-label]=\"getAriaLabel(rating)\"\n        [attr.aria-checked]=\"isSelected(rating)\"\n        [tabindex]=\"disabled ? -1 : 0\"\n        class=\"nx-rating__icon\"\n        [name]=\"getIconName(rating)\"\n        (mouseenter)=\"setHover(rating)\"\n        (mouseleave)=\"setHover(0)\"\n        size=\"m\"\n    >\n    </nx-icon>\n</div>\n<div class=\"nx-rating__label\" *ngIf=\"startLabel || endLabel\">\n    <span class=\"nx-rating__label--start\">{{ startLabel }}</span>\n    <span class=\"nx-rating__label--end\">{{ endLabel }}</span>\n</div>\n", styles: [":host{display:inline-block}:host(.nx-rating--negative) .nx-rating__label,:host(.nx-rating--negative) .nx-rating__icon{color:var(--negative)}:host(.nx-rating--disabled){cursor:not-allowed;outline:none}:host(.nx-rating--disabled) .nx-rating__label{color:var(--rating-disabled-label-color)}:host(.nx-rating--disabled) .nx-rating__icon{color:var(--rating-disabled-icon-color);cursor:not-allowed}.nx-rating__container{display:flex}.nx-rating__label{display:flex;font-size:var(--rating-label-font-size);line-height:var(--rating-label-line-height);font-weight:var(--rating-label-font-weight);letter-spacing:var(--rating-label-letter-spacing);color:var(--rating-label-color)}.nx-rating__label--end{margin-left:auto}:host-context([dir=rtl]) .nx-rating__label--end{margin-right:auto;margin-left:0;margin-left:initial}.nx-rating__icon{font-size:var(--rating-icon-size);color:var(--rating-icon-color);color:var(--iconColor, var(--rating-icon-color));width:auto;background:none;border:none;margin-right:16px;cursor:pointer;outline:none}:host-context([dir=rtl]) .nx-rating__icon{margin-right:0;margin-right:initial;margin-left:16px}.nx-rating__icon:last-child{margin-right:0}:host-context([dir=rtl]) .nx-rating__icon:last-child{margin-right:0;margin-right:initial;margin-left:0}.nx-rating__icon.cdk-keyboard-focused{box-shadow:var(--focus-box-shadow);border-radius:4px}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-rating__icon.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}@media screen and (-ms-high-contrast: active){:host .nx-rating__icon,:host.nx-rating--negative .nx-rating__icon{color:buttonText}:host .nx-rating__label,:host.nx-rating--negative .nx-rating__label{-ms-high-contrast-adjust:none;color:CanvasText}:host(.nx-rating--disabled) .nx-rating__icon{color:GrayText}:host(.nx-rating--disabled) .nx-rating__label{color:windowText}}\n"], components: [{ type: i2.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }], directives: [{ type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxRatingComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-rating', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => NxRatingComponent),
                            multi: true,
                        },
                    ], host: {
                        '[class.nx-rating--negative]': 'negative',
                        '[class.nx-rating--disabled]': 'disabled',
                        '[style.--iconColor]': 'iconColor',
                    }, template: "<div class=\"nx-rating__container\" role=\"radiogroup\">\n    <nx-icon\n        *ngFor=\"let rating of [1, 2, 3, 4, 5]\"\n        (click)=\"setSelection(rating)\"\n        (keyup)=\"handleKeyUp($event, rating)\"\n        role=\"radio\"\n        [attr.aria-label]=\"getAriaLabel(rating)\"\n        [attr.aria-checked]=\"isSelected(rating)\"\n        [tabindex]=\"disabled ? -1 : 0\"\n        class=\"nx-rating__icon\"\n        [name]=\"getIconName(rating)\"\n        (mouseenter)=\"setHover(rating)\"\n        (mouseleave)=\"setHover(0)\"\n        size=\"m\"\n    >\n    </nx-icon>\n</div>\n<div class=\"nx-rating__label\" *ngIf=\"startLabel || endLabel\">\n    <span class=\"nx-rating__label--start\">{{ startLabel }}</span>\n    <span class=\"nx-rating__label--end\">{{ endLabel }}</span>\n</div>\n", styles: [":host{display:inline-block}:host(.nx-rating--negative) .nx-rating__label,:host(.nx-rating--negative) .nx-rating__icon{color:var(--negative)}:host(.nx-rating--disabled){cursor:not-allowed;outline:none}:host(.nx-rating--disabled) .nx-rating__label{color:var(--rating-disabled-label-color)}:host(.nx-rating--disabled) .nx-rating__icon{color:var(--rating-disabled-icon-color);cursor:not-allowed}.nx-rating__container{display:flex}.nx-rating__label{display:flex;font-size:var(--rating-label-font-size);line-height:var(--rating-label-line-height);font-weight:var(--rating-label-font-weight);letter-spacing:var(--rating-label-letter-spacing);color:var(--rating-label-color)}.nx-rating__label--end{margin-left:auto}:host-context([dir=rtl]) .nx-rating__label--end{margin-right:auto;margin-left:0;margin-left:initial}.nx-rating__icon{font-size:var(--rating-icon-size);color:var(--rating-icon-color);color:var(--iconColor, var(--rating-icon-color));width:auto;background:none;border:none;margin-right:16px;cursor:pointer;outline:none}:host-context([dir=rtl]) .nx-rating__icon{margin-right:0;margin-right:initial;margin-left:16px}.nx-rating__icon:last-child{margin-right:0}:host-context([dir=rtl]) .nx-rating__icon:last-child{margin-right:0;margin-right:initial;margin-left:0}.nx-rating__icon.cdk-keyboard-focused{box-shadow:var(--focus-box-shadow);border-radius:4px}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-rating__icon.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}@media screen and (-ms-high-contrast: active){:host .nx-rating__icon,:host.nx-rating--negative .nx-rating__icon{color:buttonText}:host .nx-rating__label,:host.nx-rating--negative .nx-rating__label{-ms-high-contrast-adjust:none;color:CanvasText}:host(.nx-rating--disabled) .nx-rating__icon{color:GrayText}:host(.nx-rating--disabled) .nx-rating__label{color:windowText}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.FocusMonitor }]; }, propDecorators: { value: [{
                type: Input,
                args: ['nxValue']
            }], disabled: [{
                type: Input,
                args: ['nxDisabled']
            }], negative: [{
                type: Input,
                args: ['nxNegative']
            }], startLabel: [{
                type: Input,
                args: ['nxStartLabel']
            }], endLabel: [{
                type: Input,
                args: ['nxEndLabel']
            }], ariaLabel: [{
                type: Input,
                args: ['nxAriaLabel']
            }], iconColor: [{
                type: Input,
                args: ['nxIconColor']
            }], valueChange: [{
                type: Output,
                args: ['nxValueChange']
            }], icons: [{
                type: ViewChildren,
                args: [NxIconComponent, { read: ElementRef }]
            }] } });
//# sourceMappingURL=data:application/json;base64,