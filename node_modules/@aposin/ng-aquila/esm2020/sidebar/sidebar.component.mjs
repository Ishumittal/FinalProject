import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { LEFT_ARROW, RIGHT_ARROW, SPACE } from '@angular/cdk/keycodes';
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Optional, Output, ViewChild, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/bidi";
import * as i2 from "@angular/cdk/a11y";
import * as i3 from "@angular/common";
export const MAX_WIDTH = 400;
export const MIN_WIDTH = 56;
export const AUTO_COLLAPSE_WIDTH = 168;
export const RESIZE_STEP_SIZE = 20;
export class NxSidebarComponent {
    constructor(_cdr, renderer, _element, _dir, _focusMonitor) {
        this._cdr = _cdr;
        this.renderer = renderer;
        this._element = _element;
        this._dir = _dir;
        this._focusMonitor = _focusMonitor;
        /** Emits the new width of the sidebar on resize or on close/open event.*/
        this.widthChange = new EventEmitter();
        this._resizeable = false;
        this._minWidth = MIN_WIDTH;
        this._maxWidth = MAX_WIDTH;
        this._resizeHandleAriaLabel = '';
        this._open = true;
        this._width = 0;
        this._resizing = false;
        this._previousWidth = 0;
        this._isMobile = false;
        this._resizeWidth = 0;
        this._unsubscribeListeners = [];
        this._onResize = this._onResize.bind(this);
        this._onResizeEnd = this._onResizeEnd.bind(this);
    }
    /** If set to `true` this will enable dynamic resizing of the sidebar. */
    set resizeable(value) {
        const newValue = coerceBooleanProperty(value);
        if (newValue !== this._resizeable) {
            this._resizeable = newValue;
            this._cdr.markForCheck();
        }
    }
    get resizeable() {
        return this._resizeable;
    }
    /** Sets the minimal width (in pixel) of the sidebar. */
    set minWidth(value) {
        this._minWidth = coerceNumberProperty(value) || MIN_WIDTH;
    }
    get minWidth() {
        return this._minWidth;
    }
    /** Sets the maximal width (in pixel) of the sidebar. */
    set maxWidth(value) {
        this._maxWidth = coerceNumberProperty(value) || MAX_WIDTH;
    }
    get maxWidth() {
        return this._maxWidth;
    }
    /** This sets the accessibility label for the resize handle of the sidebar. */
    set resizeHandleAriaLabel(value) {
        if (value !== this._resizeHandleAriaLabel) {
            this._resizeHandleAriaLabel = value;
            this._cdr.markForCheck();
        }
    }
    get resizeHandleAriaLabel() {
        return this._resizeHandleAriaLabel;
    }
    /** This reflects the current open state of the sidebar.
      It will be `true` if the sidebar is expanded and `false` if the sidebar is closed.
  */
    set open(value) {
        const newValue = coerceBooleanProperty(value);
        if (newValue !== this._open) {
            this._open = newValue;
            this._cdr.markForCheck();
        }
    }
    get open() {
        return this._open;
    }
    /** This sets the width of the sidebar in an expanded state. */
    set width(value) {
        const newValue = Math.max(value, this.minWidth);
        if (newValue !== this._width) {
            this._width = newValue;
            this._cdr.markForCheck();
        }
    }
    get width() {
        return this._width;
    }
    /** The text direction of the containing app. */
    get dir() {
        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
    }
    ngOnInit() {
        this.width = this._element.nativeElement.clientWidth;
    }
    ngAfterViewInit() {
        if (this.resizeable) {
            this._focusMonitor.monitor(this._resizeHandle);
        }
    }
    ngOnDestroy() {
        this._removeDragEventListeners();
        this._focusMonitor.stopMonitoring(this._resizeHandle);
    }
    /** This will expand the sidebar to its full width. */
    expand(expandedWidth) {
        this.open = true;
        if (expandedWidth) {
            this.width = expandedWidth;
        }
    }
    /** This will close the sidebar to its minimal width. */
    close() {
        this.open = false;
    }
    /** This will close or expand the sidebar depending if it is expanded or closed. */
    toggle() {
        if (this.open) {
            this.close();
        }
        else {
            this.expand();
        }
        this._emitWidthChange(this._sidebarElementWidth);
    }
    get _sidebarElementWidth() {
        if (this._resizing) {
            return this._resizeWidth;
        }
        return this.open ? this.width : this.minWidth;
    }
    _onResizeStart(event) {
        if (event.type.startsWith('touch')) {
            event = event.changedTouches[0];
        }
        this._resizeStartX = event.screenX;
        this._resizeStartWidth = this.open ? this.width : this.minWidth;
        this._resizeWidth = this.width;
        this._attachDragEventListeners();
    }
    _onResize(event) {
        this._resizing = true;
        if (event.type.startsWith('touch')) {
            event = event.changedTouches[0];
        }
        let dx = event.screenX - this._resizeStartX;
        if (this.dir === 'rtl') {
            dx *= -1;
        }
        this._resizeWidth = Math.max(this.minWidth, this._resizeStartWidth + dx);
        this.open = this._resizeWidth > this.minWidth;
        this._cdr.markForCheck();
    }
    _onResizeEnd(event) {
        this._resizing = false;
        this._removeDragEventListeners();
        if (this._isMouseDrag(this._resizeStartX, event.screenX)) {
            if (this._resizeWidth < AUTO_COLLAPSE_WIDTH) {
                this.open = false;
                this._emitWidthChange(this._sidebarElementWidth);
            }
            else {
                this.open = true;
                this.width = Math.min(this._maxWidth, this._resizeWidth);
                this._emitWidthChange(this.width);
            }
        }
        this._resizeWidth = 0;
    }
    _onResizeHandleClick(event) {
        if (this._isMouseDrag(this._resizeStartX, event.screenX)) {
            return;
        }
        this.toggle();
    }
    _onSidebarKeydown(event) {
        if (event.which === SPACE) {
            event.preventDefault();
            this.toggle();
        }
        else if (event.which === LEFT_ARROW) {
            this.width -= RESIZE_STEP_SIZE;
            if (this.width <= AUTO_COLLAPSE_WIDTH) {
                this.open = false;
                this.width = AUTO_COLLAPSE_WIDTH + 1;
            }
            this._emitWidthChange(this.width);
        }
        else if (event.which === RIGHT_ARROW) {
            if (this.open) {
                this.width = Math.min(this._maxWidth, this.width + RESIZE_STEP_SIZE);
            }
            else {
                this.open = true;
                this.width = Math.max(this.width, AUTO_COLLAPSE_WIDTH);
            }
            this._emitWidthChange(this.width);
        }
    }
    _emitWidthChange(width) {
        this.widthChange.emit(width);
    }
    _isMouseDrag(startX, endX) {
        return Math.abs(endX - startX) > 5;
    }
    _attachDragEventListeners() {
        this._unsubscribeListeners.push(this.renderer.listen('document', 'mousemove', this._onResize));
        this._unsubscribeListeners.push(this.renderer.listen('document', 'mouseup', this._onResizeEnd));
        this._unsubscribeListeners.push(this.renderer.listen('document', 'touchmove', this._onResize));
        this._unsubscribeListeners.push(this.renderer.listen('document', 'touchend', this._onResizeEnd));
    }
    _removeDragEventListeners() {
        this._unsubscribeListeners.forEach(unsubscribe => unsubscribe());
    }
}
NxSidebarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSidebarComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.Renderer2 }, { token: i0.ElementRef }, { token: i1.Directionality, optional: true }, { token: i2.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });
NxSidebarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxSidebarComponent, selector: "nx-sidebar", inputs: { resizeable: "resizeable", minWidth: "minWidth", maxWidth: "maxWidth", resizeHandleAriaLabel: "resizeHandleAriaLabel" }, outputs: { widthChange: "widthChange" }, host: { properties: { "class.is-resizing": "_resizing", "class.is-closed": "!open", "style.width.px": "_sidebarElementWidth" } }, viewQueries: [{ propertyName: "_resizeHandle", first: true, predicate: ["resizeHandle"], descendants: true }], ngImport: i0, template: "<div class=\"nx-sidebar__box\" role=\"tabpanel\" [attr.aria-expanded]=\"open\">\n    <div class=\"nx-sidebar__content\">\n        <ng-content></ng-content>\n    </div>\n    <ng-content select=\"nx-sidebar-footer\"></ng-content>\n</div>\n\n<button\n    #resizeHandle\n    class=\"nx-sidebar__handle\"\n    *ngIf=\"resizeable\"\n    tabindex=\"0\"\n    type=\"button\"\n    (mousedown)=\"_onResizeStart($event)\"\n    (keydown)=\"_onSidebarKeydown($event)\"\n    (touchstart)=\"_onResizeStart($event)\"\n    (click)=\"_onResizeHandleClick($event)\"\n    [attr.aria-label]=\"resizeHandleAriaLabel\"\n>\n</button>\n", styles: [":host{position:relative;height:100%;transition:width .15s ease;display:flex;flex:0 0 auto;width:280px}:host.is-resizing{transition:none}@media (max-width: 703px){:host{width:100%;transition:none}:host .nx-sidebar__handle{display:none}}:host.is-closed ::ng-deep .nx-sidebar__toggle-button{transform:rotate(180deg)}:host.is-closed ::ng-deep .nx-sidebar__footer-container{flex-direction:column;align-items:center}::ng-deep .nx-sidebar__footer{padding-bottom:8px;display:flex;justify-content:flex-end;color:var(--sidebar-footer-button-color)}::ng-deep .nx-sidebar__footer:before,::ng-deep .nx-sidebar__footer:after{content:\"\";display:block;flex:0 1 22px;min-width:8px;height:1px}::ng-deep .nx-sidebar__footer:after{flex:0 1 16px}::ng-deep .nx-sidebar__footer-container{display:flex;flex:1 1 auto;flex-direction:row}.nx-sidebar__handle{position:absolute;right:-14px;top:0;bottom:0;display:flex;flex:0 0 16px;justify-content:center;align-items:center;-webkit-appearance:none;appearance:none;border:none;box-shadow:none;background:none;margin:0;cursor:col-resize;outline:none;z-index:1;color:var(--sidebar-handle-color)}:host-context([dir=rtl]) .nx-sidebar__handle{right:auto;left:-15px}.nx-sidebar__handle:before{content:\"||\";font-size:14px;letter-spacing:-1px;font-weight:600;color:inherit}@media screen and (-ms-high-contrast: active){.nx-sidebar__handle:before{-ms-high-contrast-adjust:none;color:buttonText;background-color:buttonFace;box-shadow:0 0 0 6px buttonFace,0 0 0 8px buttonText}}.nx-sidebar__handle::-moz-focus-inner{border:0}.nx-sidebar__handle.cdk-keyboard-focused:before{border-radius:4px;padding-right:1px;box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-sidebar__handle.cdk-keyboard-focused:before{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}[dir=rtl] .nx-sidebar__handle.cdk-keyboard-focused:before{padding-right:0;padding-right:initial;padding-left:1px}.nx-sidebar__box{height:100%;flex:1 1 100%;display:flex;overflow:hidden;flex-direction:column;background:var(--sidebar-background-color)}@media screen and (-ms-high-contrast: active){.nx-sidebar__box{border-right:1px solid windowText}:host-context([dir=rtl]) .nx-sidebar__box{border-right:none;border-left:1px solid windowText}}.nx-sidebar__content{flex:1 1 100%;overflow:hidden;overflow-y:auto;padding-top:16px}.nx-sidebar__content:only-child{padding-bottom:16px}\n"], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSidebarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-sidebar', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[class.is-resizing]': '_resizing',
                        '[class.is-closed]': '!open',
                        '[style.width.px]': `_sidebarElementWidth`,
                    }, template: "<div class=\"nx-sidebar__box\" role=\"tabpanel\" [attr.aria-expanded]=\"open\">\n    <div class=\"nx-sidebar__content\">\n        <ng-content></ng-content>\n    </div>\n    <ng-content select=\"nx-sidebar-footer\"></ng-content>\n</div>\n\n<button\n    #resizeHandle\n    class=\"nx-sidebar__handle\"\n    *ngIf=\"resizeable\"\n    tabindex=\"0\"\n    type=\"button\"\n    (mousedown)=\"_onResizeStart($event)\"\n    (keydown)=\"_onSidebarKeydown($event)\"\n    (touchstart)=\"_onResizeStart($event)\"\n    (click)=\"_onResizeHandleClick($event)\"\n    [attr.aria-label]=\"resizeHandleAriaLabel\"\n>\n</button>\n", styles: [":host{position:relative;height:100%;transition:width .15s ease;display:flex;flex:0 0 auto;width:280px}:host.is-resizing{transition:none}@media (max-width: 703px){:host{width:100%;transition:none}:host .nx-sidebar__handle{display:none}}:host.is-closed ::ng-deep .nx-sidebar__toggle-button{transform:rotate(180deg)}:host.is-closed ::ng-deep .nx-sidebar__footer-container{flex-direction:column;align-items:center}::ng-deep .nx-sidebar__footer{padding-bottom:8px;display:flex;justify-content:flex-end;color:var(--sidebar-footer-button-color)}::ng-deep .nx-sidebar__footer:before,::ng-deep .nx-sidebar__footer:after{content:\"\";display:block;flex:0 1 22px;min-width:8px;height:1px}::ng-deep .nx-sidebar__footer:after{flex:0 1 16px}::ng-deep .nx-sidebar__footer-container{display:flex;flex:1 1 auto;flex-direction:row}.nx-sidebar__handle{position:absolute;right:-14px;top:0;bottom:0;display:flex;flex:0 0 16px;justify-content:center;align-items:center;-webkit-appearance:none;appearance:none;border:none;box-shadow:none;background:none;margin:0;cursor:col-resize;outline:none;z-index:1;color:var(--sidebar-handle-color)}:host-context([dir=rtl]) .nx-sidebar__handle{right:auto;left:-15px}.nx-sidebar__handle:before{content:\"||\";font-size:14px;letter-spacing:-1px;font-weight:600;color:inherit}@media screen and (-ms-high-contrast: active){.nx-sidebar__handle:before{-ms-high-contrast-adjust:none;color:buttonText;background-color:buttonFace;box-shadow:0 0 0 6px buttonFace,0 0 0 8px buttonText}}.nx-sidebar__handle::-moz-focus-inner{border:0}.nx-sidebar__handle.cdk-keyboard-focused:before{border-radius:4px;padding-right:1px;box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-sidebar__handle.cdk-keyboard-focused:before{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}[dir=rtl] .nx-sidebar__handle.cdk-keyboard-focused:before{padding-right:0;padding-right:initial;padding-left:1px}.nx-sidebar__box{height:100%;flex:1 1 100%;display:flex;overflow:hidden;flex-direction:column;background:var(--sidebar-background-color)}@media screen and (-ms-high-contrast: active){.nx-sidebar__box{border-right:1px solid windowText}:host-context([dir=rtl]) .nx-sidebar__box{border-right:none;border-left:1px solid windowText}}.nx-sidebar__content{flex:1 1 100%;overflow:hidden;overflow-y:auto;padding-top:16px}.nx-sidebar__content:only-child{padding-bottom:16px}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i1.Directionality, decorators: [{
                    type: Optional
                }] }, { type: i2.FocusMonitor }]; }, propDecorators: { _resizeHandle: [{
                type: ViewChild,
                args: ['resizeHandle']
            }], widthChange: [{
                type: Output
            }], resizeable: [{
                type: Input
            }], minWidth: [{
                type: Input
            }], maxWidth: [{
                type: Input
            }], resizeHandleAriaLabel: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,