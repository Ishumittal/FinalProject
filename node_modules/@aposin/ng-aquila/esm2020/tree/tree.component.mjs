import { DOWN_ARROW, END, HOME, LEFT_ARROW, NUMPAD_MULTIPLY, RIGHT_ARROW, UP_ARROW } from '@angular/cdk/keycodes';
import { CdkTree, CdkTreeNode } from '@angular/cdk/tree';
import { ChangeDetectionStrategy, Component, Input, Optional, ViewChild, ViewEncapsulation, } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { NxTreeNodeOutletDirective } from './outlet';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/bidi";
import * as i2 from "@angular/cdk/a11y";
import * as i3 from "./outlet";
/**
 * Wrapper for the CdkTree with custom design styles and keyboard nav mechanics.
 */
export class NxTreeComponent extends CdkTree {
    constructor(_wrapperDiffers, _cdr, dir, _elementRef, _focusMonitor) {
        super(_wrapperDiffers, _cdr);
        this._wrapperDiffers = _wrapperDiffers;
        this._cdr = _cdr;
        this.dir = dir;
        this._elementRef = _elementRef;
        this._focusMonitor = _focusMonitor;
        /** The node map map data nodes to CdkTreeNodes */
        this.nodeMap = new Map();
        /** A map from parent node to a list of children. */
        this.childrenMap = new Map();
        /** A map from node data to its parent node data. */
        this.parentMap = new Map();
        /** Tab index for the tree. */
        this._tabIndex = 0;
        /**
         * User defined tab index.
         * When it is not null, use user defined tab index. Otherwise use _tabIndex
         */
        this._userTabIndex = null;
        /** Subject that emits when the component has been destroyed. */
        this._wrapperOnDestroy = new Subject();
    }
    set tabIndex(value) {
        this._userTabIndex = value;
    }
    ngOnInit() {
        super.ngOnInit();
        this._monitorTreeFocus();
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this._wrapperOnDestroy.next();
        this._wrapperOnDestroy.complete();
    }
    /** Get current focused data */
    get focusedData() {
        return this._focusedData;
    }
    /** Add tree node to data list based on owner of parent view container. */
    insertToA11yNodeTracking(index, data, node, parentData) {
        this.nodeMap.set(data, node);
        if (parentData) {
            this.parentMap.set(data, parentData);
        }
        this._getChildrenList(parentData).splice(index, 0, data);
    }
    /** Remove a node data from node list based on the owner of view container. */
    removeFromA11yNodeTracking(index, parentData) {
        const nodeList = this._getChildrenList(parentData);
        const removed = nodeList.splice(index, 1)[0];
        if (removed && removed === this._focusedData) {
            this._changeFocusedData(this._getNextVisibleNode());
        }
        this.nodeMap.delete(removed);
        this.parentMap.delete(removed);
        this.childrenMap.delete(removed);
    }
    /** Update node's index information based on the owner of view container. */
    moveInA11yNodeTracking(previousIndex, currentIndex, parentData) {
        const nodeList = this._getChildrenList(parentData);
        const target = nodeList.splice(previousIndex, 1);
        nodeList.splice(currentIndex, 0, target[0]);
    }
    /** When a tree node is focused, update the current focused data. */
    updateFocusedData(newFocusedData) {
        this._focusedData = newFocusedData;
    }
    /** Focus first node when the tree is focused */
    focus() {
        this._focusedData ? this._changeFocusedData(this._focusedData) : this.focusFirstVisibleNode();
    }
    /** Change focus to first visible node in the tree. */
    focusFirstVisibleNode() {
        this._changeFocusedData(this._getFirstVisibleNode());
    }
    /** Change focus to last visible node in the tree. */
    focusLastVisibleNode() {
        this._changeFocusedData(this._getLastVisibleNode());
    }
    /** Change focus to previous visible node. */
    focusPreviousVisibleNode() {
        if (!this._focusedData) {
            return this.focusLastVisibleNode();
        }
        this._changeFocusedData(this._getPreviousVisibleNode());
    }
    /** Change focus to next visible node. */
    focusNextVisibleNode() {
        if (!this._focusedData) {
            return this.focusFirstVisibleNode();
        }
        this._changeFocusedData(this._getNextVisibleNode());
    }
    /** Collapse the current node if it's expanded. Otherwise move to parent. */
    collapseCurrentFocusedNode() {
        if (this._focusedData && this.treeControl) {
            if (this.treeControl.isExpanded(this._focusedData)) {
                this.treeControl.collapse(this._focusedData);
            }
            else {
                this._changeFocusedData(this._getParentNode());
            }
        }
    }
    /** Expand the current node if it's not expanded. Otherwise move to its first child. */
    expandCurrentFocusedNode() {
        if (this._focusedData && this.treeControl) {
            if (this.treeControl.isExpanded(this._focusedData)) {
                this._changeFocusedData(this._getNextVisibleNode());
            }
            else {
                this.treeControl.expand(this._focusedData);
            }
        }
    }
    /** Expand all the nodes in the tree */
    expandAllNodes() {
        if (this.treeControl) {
            this.treeControl.expandAll();
        }
    }
    /** Expand the current node if it's not expanded. Otherwise move to its first child. */
    toggleCurrentFocusedNode() {
        if (this._focusedData && this.treeControl) {
            this.treeControl.toggle(this._focusedData);
        }
    }
    _isRtl() {
        return this.dir && this.dir.value === 'rtl';
    }
    /**
     * Pass events to the keyboard manager. Available here for tests.
     */
    _handleKeydown(event) {
        switch (event.keyCode) {
            case HOME:
                this.focusFirstVisibleNode();
                event.preventDefault();
                break;
            case END:
                this.focusLastVisibleNode();
                event.preventDefault();
                break;
            case UP_ARROW:
                this.focusPreviousVisibleNode();
                event.preventDefault();
                break;
            case DOWN_ARROW:
                this.focusNextVisibleNode();
                event.preventDefault();
                break;
            case LEFT_ARROW:
                this._isRtl() ? this.expandCurrentFocusedNode() : this.collapseCurrentFocusedNode();
                event.preventDefault();
                break;
            case RIGHT_ARROW:
                this._isRtl() ? this.collapseCurrentFocusedNode() : this.expandCurrentFocusedNode();
                event.preventDefault();
                break;
            case NUMPAD_MULTIPLY:
                this.expandAllNodes();
                event.preventDefault();
                break;
            default:
        }
    }
    /** Focus the tree node component with new focused data. */
    _changeFocusedData(newFocused) {
        if (newFocused) {
            this._focusedData = newFocused;
            if (this.nodeMap.has(this._focusedData)) {
                this.nodeMap.get(this._focusedData).focus();
            }
        }
    }
    /** Returns the data of the first visible tree node in the tree. */
    _getFirstVisibleNode() {
        const nodeList = this._getChildrenList();
        return nodeList[0];
    }
    /** Returns the data of the last visible tree node in the tree. */
    _getLastVisibleNode() {
        const nodeList = this._getChildrenList();
        return this._getLastChild(nodeList[nodeList.length - 1]);
    }
    /** Returns the previous visible tree node of current focused data. */
    _getPreviousVisibleNode() {
        if (!this._focusedData) {
            return;
        }
        const parent = this.parentMap.get(this._focusedData);
        const nodeList = this.childrenMap.get(parent);
        const index = nodeList.indexOf(this._focusedData);
        if (index === 0) {
            return parent;
        }
        else if (index > 0) {
            return this._getLastChild(nodeList[index - 1]);
        }
        return undefined;
    }
    /** Returns the next visible tree node data of current focused data. */
    _getNextVisibleNode() {
        if (!this._focusedData) {
            return;
        }
        // Always return first child if the node is expanded
        if (this.childrenMap.has(this._focusedData) && this.treeControl && this.treeControl.isExpanded(this._focusedData)) {
            const childNodeList = this._getChildrenList(this._focusedData);
            if (childNodeList.length) {
                return childNodeList[0];
            }
        }
        // Or return next sibling / parent's next child if any
        let currentData = this._focusedData;
        while (currentData) {
            const parent = this.parentMap.get(currentData);
            const nodeList = this.childrenMap.get(parent);
            const index = nodeList.indexOf(currentData);
            if (index === nodeList.length - 1) {
                currentData = parent;
            }
            else if (index > -1) {
                return nodeList[index + 1];
            }
        }
        return undefined;
    }
    /** Returns the parent of current focused node. */
    _getParentNode() {
        if (this.parentMap.has(this._focusedData)) {
            // For nested tree
            this._changeFocusedData(this.parentMap.get(this._focusedData));
        }
        else if (this.treeControl.getLevel) {
            // For flat tree
            const nodeList = this._getChildrenList();
            const index = nodeList.indexOf(this._focusedData);
            const level = this.treeControl.getLevel(this._focusedData) - 1;
            if (index <= 0) {
                return;
            }
            for (let i = index - 1; i >= 0; i--) {
                if (this.treeControl.getLevel(nodeList[i]) === level) {
                    return nodeList[i];
                }
            }
        }
        return undefined;
    }
    /**
     * Returns the data of list of children in the current `parentData` node's view container.
     * If there's no parent, return the tree nodes in the tree's view container.
     */
    _getChildrenList(parentData) {
        if (!this.childrenMap.has(parentData)) {
            this.childrenMap.set(parentData, []);
        }
        return this.childrenMap.get(parentData);
    }
    /**
     * Returns the data of last visible elements in the sub-tree rooted at `targetNode`.
     */
    _getLastChild(targetNode) {
        let currentData = targetNode;
        while (currentData && this.childrenMap.has(currentData) && this.treeControl && this.treeControl.isExpanded(currentData)) {
            const childNodeList = this._getChildrenList(currentData);
            if (childNodeList.length) {
                currentData = childNodeList[childNodeList.length - 1];
            }
            else {
                break;
            }
        }
        return currentData;
    }
    /**
     * Extended CdkTree method to track new nodes for a11y.
     */
    insertNode(nodeData, index, viewContainer, parentData) {
        super.insertNode(nodeData, index, viewContainer, parentData);
        if (CdkTreeNode.mostRecentTreeNode) {
            this.insertToA11yNodeTracking(index, nodeData, CdkTreeNode.mostRecentTreeNode, parentData);
            CdkTreeNode.mostRecentTreeNode.focus();
        }
    }
    /**
     * ⚠️  Here we override the method from cdk tree ⚠️
     * Adds some extra method calls to update the a11y node tracking.
     */
    renderNodeChanges(data, dataDiffer = this['_dataDiffer'], viewContainer = this._nodeOutlet.viewContainer, parentData) {
        super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);
        const changes = dataDiffer.diff(data);
        if (!changes) {
            return;
        }
        changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {
            if (currentIndex == null) {
                this.removeFromA11yNodeTracking(adjustedPreviousIndex, parentData);
            }
            else if (item.previousIndex !== null) {
                this.moveInA11yNodeTracking(adjustedPreviousIndex, currentIndex, parentData);
            }
        });
    }
    /**
     * Monitor focus of the tree. When the tree is focused, change the tab index to -1 so TAB
     * can move the focus out of the tree. When the tree is blurred, change back the tab index.
     */
    _monitorTreeFocus() {
        this._focusMonitor
            .monitor(this._elementRef.nativeElement, true)
            .pipe(takeUntil(this._wrapperOnDestroy))
            .subscribe(origin => {
            const newTabIndex = origin ? -1 : this._userTabIndex || 0;
            if (this._tabIndex !== newTabIndex) {
                this._tabIndex = newTabIndex;
                this._cdr.markForCheck();
            }
        });
    }
}
NxTreeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTreeComponent, deps: [{ token: i0.IterableDiffers }, { token: i0.ChangeDetectorRef }, { token: i1.Directionality, optional: true }, { token: i0.ElementRef }, { token: i2.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });
NxTreeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxTreeComponent, selector: "nx-tree", inputs: { tabIndex: "tabIndex" }, host: { attributes: { "role": "application" }, listeners: { "keydown": "_handleKeydown($event)", "focus": "focus()" }, properties: { "attr.tabindex": "_tabIndex" }, classAttribute: "nx-tree cdk-tree" }, providers: [{ provide: CdkTree, useExisting: NxTreeComponent }], viewQueries: [{ propertyName: "_nodeOutlet", first: true, predicate: NxTreeNodeOutletDirective, descendants: true, static: true }], exportAs: ["nxTree"], usesInheritance: true, ngImport: i0, template: `<ng-container nxTreeNodeOutlet></ng-container>`, isInline: true, styles: [":host.nx-tree{display:block}.nx-tree__node{display:block;overflow:hidden}.nx-tree__node.cdk-keyboard-focused{box-shadow:var(--focus-inset-box-shadow);border-radius:8px}@media screen and (-ms-high-contrast: active){.nx-tree__node.cdk-keyboard-focused{box-shadow:inset 0 0 0 4px windowText,inset 0 0 0 6px background;border:4px solid CanvasText}}\n"], directives: [{ type: i3.NxTreeNodeOutletDirective, selector: "[nxTreeNodeOutlet]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTreeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-tree', exportAs: 'nxTree', template: `<ng-container nxTreeNodeOutlet></ng-container>`, host: {
                        // The 'cdk-tree' class needs to be included here because classes set in the host in the
                        // parent class are not inherited with View Engine. The 'cdk-tree' class in CdkTreeNode has
                        // to be set in the host because:
                        // if it is set as a @HostBinding it is not set by the time the tree nodes try to read the
                        // class from it.
                        // the ElementRef is not available in the constructor so the class can't be applied directly
                        // without a breaking constructor change.
                        class: 'nx-tree cdk-tree',
                        role: 'application',
                        '[attr.tabindex]': '_tabIndex',
                        '(keydown)': '_handleKeydown($event)',
                        '(focus)': 'focus()',
                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, providers: [{ provide: CdkTree, useExisting: NxTreeComponent }], styles: [":host.nx-tree{display:block}.nx-tree__node{display:block;overflow:hidden}.nx-tree__node.cdk-keyboard-focused{box-shadow:var(--focus-inset-box-shadow);border-radius:8px}@media screen and (-ms-high-contrast: active){.nx-tree__node.cdk-keyboard-focused{box-shadow:inset 0 0 0 4px windowText,inset 0 0 0 6px background;border:4px solid CanvasText}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.IterableDiffers }, { type: i0.ChangeDetectorRef }, { type: i1.Directionality, decorators: [{
                    type: Optional
                }] }, { type: i0.ElementRef }, { type: i2.FocusMonitor }]; }, propDecorators: { _nodeOutlet: [{
                type: ViewChild,
                args: [NxTreeNodeOutletDirective, { static: true }]
            }], tabIndex: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,