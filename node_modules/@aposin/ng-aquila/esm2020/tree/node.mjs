import { CdkTreeNode, CdkTreeNodeDef } from '@angular/cdk/tree';
import { Component, ContentChild, Directive, Input } from '@angular/core';
import { NxTreeNodeActionItem } from './action-item.directive';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/tree";
import * as i2 from "@angular/cdk/a11y";
/**
 * Wrapper for the CdkTree node with custom design styles.
 */
export class NxTreeNodeComponent extends CdkTreeNode {
    constructor(_elementRef, _tree, _focusMonitor) {
        super(_elementRef, _tree);
        this._elementRef = _elementRef;
        this._tree = _tree;
        this._focusMonitor = _focusMonitor;
        this._focusMonitor.monitor(this._elementRef.nativeElement);
    }
    ngOnDestroy() {
        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);
        super.ngOnDestroy();
    }
    /** Update the focused data in tree keyboard interaction */
    _focus() {
        this._tree.updateFocusedData(this._data);
    }
    focus() {
        if (this.actionItem) {
            this.actionItem.focus?.();
        }
        else {
            this._elementRef.nativeElement.focus();
        }
    }
}
NxTreeNodeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTreeNodeComponent, deps: [{ token: i0.ElementRef }, { token: i1.CdkTree }, { token: i2.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });
NxTreeNodeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxTreeNodeComponent, selector: "nx-tree-node", inputs: { disabled: "disabled", tabIndex: "tabIndex" }, host: { properties: { "attr.aria-expanded": "isExpanded", "attr.aria-level": "role === \"treeitem\" ? level : null", "attr.role": "role", "class.is-expanded": "isExpanded", "attr.tabindex": "-1" }, classAttribute: "nx-tree__node" }, providers: [{ provide: CdkTreeNode, useExisting: NxTreeNodeComponent }], queries: [{ propertyName: "actionItem", first: true, predicate: NxTreeNodeActionItem, descendants: true }], exportAs: ["nxTreeNode"], usesInheritance: true, ngImport: i0, template: "<div class=\"nx-tree__node-box\">\n    <ng-content></ng-content>\n</div>\n" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTreeNodeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-tree-node', exportAs: 'nxTreeNode', inputs: ['disabled', 'tabIndex'], host: {
                        '[attr.aria-expanded]': 'isExpanded',
                        '[attr.aria-level]': 'role === "treeitem" ? level : null',
                        '[attr.role]': 'role',
                        class: 'nx-tree__node',
                        '[class.is-expanded]': 'isExpanded',
                        '[attr.tabindex]': '-1',
                    }, providers: [{ provide: CdkTreeNode, useExisting: NxTreeNodeComponent }], template: "<div class=\"nx-tree__node-box\">\n    <ng-content></ng-content>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.CdkTree }, { type: i2.FocusMonitor }]; }, propDecorators: { actionItem: [{
                type: ContentChild,
                args: [NxTreeNodeActionItem]
            }] } });
/**
 * Wrapper for the CdkTree node definition with custom design styles.
 */
export class NxTreeNodeDefDirective extends CdkTreeNodeDef {
}
NxTreeNodeDefDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTreeNodeDefDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
NxTreeNodeDefDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxTreeNodeDefDirective, selector: "[nxTreeNodeDef]", inputs: { when: ["nxTreeNodeDefWhen", "when"], data: ["nxTreeNode", "data"] }, providers: [{ provide: CdkTreeNodeDef, useExisting: NxTreeNodeDefDirective }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTreeNodeDefDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[nxTreeNodeDef]',
                    inputs: ['when: nxTreeNodeDefWhen'],
                    providers: [{ provide: CdkTreeNodeDef, useExisting: NxTreeNodeDefDirective }],
                }]
        }], propDecorators: { data: [{
                type: Input,
                args: ['nxTreeNode']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWFxdWlsYS9zcmMvdHJlZS9ub2RlLnRzIiwiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctYXF1aWxhL3NyYy90cmVlL25vZGUuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQVcsV0FBVyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBYyxLQUFLLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFFakcsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0seUJBQXlCLENBQUM7Ozs7QUFHL0Q7O0dBRUc7QUFnQkgsTUFBTSxPQUFPLG1CQUF1QixTQUFRLFdBQWM7SUFDdEQsWUFBc0IsV0FBb0MsRUFBWSxLQUFpQixFQUFZLGFBQTJCO1FBQzFILEtBQUssQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFEUixnQkFBVyxHQUFYLFdBQVcsQ0FBeUI7UUFBWSxVQUFLLEdBQUwsS0FBSyxDQUFZO1FBQVksa0JBQWEsR0FBYixhQUFhLENBQWM7UUFFMUgsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBSUQsV0FBVztRQUNQLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDbEUsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRCwyREFBMkQ7SUFDM0QsTUFBTTtRQUNELElBQUksQ0FBQyxLQUE0QixDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQsS0FBSztRQUNELElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNqQixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUM7U0FDN0I7YUFBTTtZQUNILElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQzFDO0lBQ0wsQ0FBQzs7Z0hBeEJRLG1CQUFtQjtvR0FBbkIsbUJBQW1CLHdVQUhqQixDQUFDLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQyxrRUFTekQsb0JBQW9CLGlHQy9CdEMsNEVBR0E7MkZEc0JhLG1CQUFtQjtrQkFmL0IsU0FBUzsrQkFDSSxjQUFjLFlBQ2QsWUFBWSxVQUNkLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxRQUMxQjt3QkFDRixzQkFBc0IsRUFBRSxZQUFZO3dCQUNwQyxtQkFBbUIsRUFBRSxvQ0FBb0M7d0JBQ3pELGFBQWEsRUFBRSxNQUFNO3dCQUNyQixLQUFLLEVBQUUsZUFBZTt3QkFDdEIscUJBQXFCLEVBQUUsWUFBWTt3QkFDbkMsaUJBQWlCLEVBQUUsSUFBSTtxQkFDMUIsYUFDVSxDQUFDLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxXQUFXLHFCQUFxQixFQUFFLENBQUM7a0pBU25DLFVBQVU7c0JBQTdDLFlBQVk7dUJBQUMsb0JBQW9COztBQXFCdEM7O0dBRUc7QUFNSCxNQUFNLE9BQU8sc0JBQTBCLFNBQVEsY0FBaUI7O21IQUFuRCxzQkFBc0I7dUdBQXRCLHNCQUFzQix5SEFGcEIsQ0FBQyxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFFLHNCQUFzQixFQUFFLENBQUM7MkZBRXBFLHNCQUFzQjtrQkFMbEMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsaUJBQWlCO29CQUMzQixNQUFNLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQztvQkFDbkMsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLFdBQVcsd0JBQXdCLEVBQUUsQ0FBQztpQkFDaEY7OEJBRXdCLElBQUk7c0JBQXhCLEtBQUs7dUJBQUMsWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZvY3VzYWJsZU9wdGlvbiwgRm9jdXNNb25pdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2ExMXknO1xuaW1wb3J0IHsgQ2RrVHJlZSwgQ2RrVHJlZU5vZGUsIENka1RyZWVOb2RlRGVmIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3RyZWUnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBDb250ZW50Q2hpbGQsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBOeFRyZWVOb2RlQWN0aW9uSXRlbSB9IGZyb20gJy4vYWN0aW9uLWl0ZW0uZGlyZWN0aXZlJztcbmltcG9ydCB7IE54VHJlZUNvbXBvbmVudCB9IGZyb20gJy4vdHJlZS5jb21wb25lbnQnO1xuXG4vKipcbiAqIFdyYXBwZXIgZm9yIHRoZSBDZGtUcmVlIG5vZGUgd2l0aCBjdXN0b20gZGVzaWduIHN0eWxlcy5cbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdueC10cmVlLW5vZGUnLFxuICAgIGV4cG9ydEFzOiAnbnhUcmVlTm9kZScsXG4gICAgaW5wdXRzOiBbJ2Rpc2FibGVkJywgJ3RhYkluZGV4J10sXG4gICAgaG9zdDoge1xuICAgICAgICAnW2F0dHIuYXJpYS1leHBhbmRlZF0nOiAnaXNFeHBhbmRlZCcsXG4gICAgICAgICdbYXR0ci5hcmlhLWxldmVsXSc6ICdyb2xlID09PSBcInRyZWVpdGVtXCIgPyBsZXZlbCA6IG51bGwnLFxuICAgICAgICAnW2F0dHIucm9sZV0nOiAncm9sZScsXG4gICAgICAgIGNsYXNzOiAnbngtdHJlZV9fbm9kZScsXG4gICAgICAgICdbY2xhc3MuaXMtZXhwYW5kZWRdJzogJ2lzRXhwYW5kZWQnLFxuICAgICAgICAnW2F0dHIudGFiaW5kZXhdJzogJy0xJyxcbiAgICB9LFxuICAgIHByb3ZpZGVyczogW3sgcHJvdmlkZTogQ2RrVHJlZU5vZGUsIHVzZUV4aXN0aW5nOiBOeFRyZWVOb2RlQ29tcG9uZW50IH1dLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9ub2RlLmh0bWwnLFxufSlcbmV4cG9ydCBjbGFzcyBOeFRyZWVOb2RlQ29tcG9uZW50PFQ+IGV4dGVuZHMgQ2RrVHJlZU5vZGU8VD4gaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBfZWxlbWVudFJlZjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sIHByb3RlY3RlZCBfdHJlZTogQ2RrVHJlZTxUPiwgcHJvdGVjdGVkIF9mb2N1c01vbml0b3I6IEZvY3VzTW9uaXRvcikge1xuICAgICAgICBzdXBlcihfZWxlbWVudFJlZiwgX3RyZWUpO1xuICAgICAgICB0aGlzLl9mb2N1c01vbml0b3IubW9uaXRvcih0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpO1xuICAgIH1cblxuICAgIEBDb250ZW50Q2hpbGQoTnhUcmVlTm9kZUFjdGlvbkl0ZW0pIGFjdGlvbkl0ZW0hOiBGb2N1c2FibGVPcHRpb247XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5fZm9jdXNNb25pdG9yLnN0b3BNb25pdG9yaW5nKHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudCk7XG4gICAgICAgIHN1cGVyLm5nT25EZXN0cm95KCk7XG4gICAgfVxuXG4gICAgLyoqIFVwZGF0ZSB0aGUgZm9jdXNlZCBkYXRhIGluIHRyZWUga2V5Ym9hcmQgaW50ZXJhY3Rpb24gKi9cbiAgICBfZm9jdXMoKTogdm9pZCB7XG4gICAgICAgICh0aGlzLl90cmVlIGFzIE54VHJlZUNvbXBvbmVudDxUPikudXBkYXRlRm9jdXNlZERhdGEodGhpcy5fZGF0YSk7XG4gICAgfVxuXG4gICAgZm9jdXMoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmFjdGlvbkl0ZW0pIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uSXRlbS5mb2N1cz8uKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBXcmFwcGVyIGZvciB0aGUgQ2RrVHJlZSBub2RlIGRlZmluaXRpb24gd2l0aCBjdXN0b20gZGVzaWduIHN0eWxlcy5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbbnhUcmVlTm9kZURlZl0nLFxuICAgIGlucHV0czogWyd3aGVuOiBueFRyZWVOb2RlRGVmV2hlbiddLFxuICAgIHByb3ZpZGVyczogW3sgcHJvdmlkZTogQ2RrVHJlZU5vZGVEZWYsIHVzZUV4aXN0aW5nOiBOeFRyZWVOb2RlRGVmRGlyZWN0aXZlIH1dLFxufSlcbmV4cG9ydCBjbGFzcyBOeFRyZWVOb2RlRGVmRGlyZWN0aXZlPFQ+IGV4dGVuZHMgQ2RrVHJlZU5vZGVEZWY8VD4ge1xuICAgIEBJbnB1dCgnbnhUcmVlTm9kZScpIGRhdGEhOiBUO1xufVxuIiwiPGRpdiBjbGFzcz1cIm54LXRyZWVfX25vZGUtYm94XCI+XG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuPC9kaXY+XG4iXX0=