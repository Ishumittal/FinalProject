import { CdkStepper, CdkStepperNext, CdkStepperPrevious } from '@angular/cdk/stepper';
import { Directive } from '@angular/core';
import { NxProgressStepperDirective } from './progress-stepper.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/stepper";
export class NxStepperNextDirective extends CdkStepperNext {
    constructor(_stepper, _cdr) {
        super(_stepper);
        this._cdr = _cdr;
        /** @docs-private */
        this.disabled = false;
    }
    /**
     * Implemented to prevent changed after checked error after stepper init.
     * When the stepper initializes the directive is checked first before
     * the stepper can check its content thus it doesn't know about it's children yet
     * so _stepper.hasNext returns false and disables the buttons. In the same CD cycle
     * after the stepper has checked its contents the button needs to be enabled resulting
     * in the error.
     */
    ngDoCheck() {
        const stepper = this._stepper;
        if (this.disabled !== !stepper.hasNext) {
            this.disabled = !stepper.hasNext;
            this._cdr.markForCheck();
        }
    }
}
NxStepperNextDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxStepperNextDirective, deps: [{ token: i1.CdkStepper }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
NxStepperNextDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxStepperNextDirective, selector: "button[nxStepperNext]", inputs: { type: "type" }, host: { properties: { "type": "type", "disabled": "disabled" } }, providers: [{ provide: CdkStepper, useExisting: NxProgressStepperDirective }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxStepperNextDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'button[nxStepperNext]',
                    host: {
                        '[type]': 'type',
                        '[disabled]': 'disabled',
                    },
                    inputs: ['type'],
                    providers: [{ provide: CdkStepper, useExisting: NxProgressStepperDirective }],
                }]
        }], ctorParameters: function () { return [{ type: i1.CdkStepper }, { type: i0.ChangeDetectorRef }]; } });
export class NxStepperPreviousDirective extends CdkStepperPrevious {
    constructor(_stepper) {
        super(_stepper);
    }
    get stepper() {
        return this._stepper;
    }
}
NxStepperPreviousDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxStepperPreviousDirective, deps: [{ token: i1.CdkStepper }], target: i0.ɵɵFactoryTarget.Directive });
NxStepperPreviousDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxStepperPreviousDirective, selector: "button[nxStepperPrevious]", inputs: { type: "type" }, host: { properties: { "type": "type", "disabled": "!stepper.hasPrevious" } }, providers: [{ provide: CdkStepper, useExisting: NxProgressStepperDirective }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxStepperPreviousDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'button[nxStepperPrevious]',
                    host: {
                        '[type]': 'type',
                        '[disabled]': '!stepper.hasPrevious',
                    },
                    inputs: ['type'],
                    providers: [{ provide: CdkStepper, useExisting: NxProgressStepperDirective }],
                }]
        }], ctorParameters: function () { return [{ type: i1.CdkStepper }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWFxdWlsYS9zcmMvcHJvZ3Jlc3Mtc3RlcHBlci9idXR0b25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDdEYsT0FBTyxFQUFxQixTQUFTLEVBQVcsTUFBTSxlQUFlLENBQUM7QUFFdEUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sOEJBQThCLENBQUM7OztBQVcxRSxNQUFNLE9BQU8sc0JBQXVCLFNBQVEsY0FBYztJQUl0RCxZQUFZLFFBQW9CLEVBQVUsSUFBdUI7UUFDN0QsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRHNCLFNBQUksR0FBSixJQUFJLENBQW1CO1FBSGpFLG9CQUFvQjtRQUNwQixhQUFRLEdBQUcsS0FBSyxDQUFDO0lBSWpCLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0gsU0FBUztRQUNMLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxRQUE2QyxDQUFDO1FBQ25FLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUU7WUFDcEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7WUFDakMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUM1QjtJQUNMLENBQUM7O21IQXRCUSxzQkFBc0I7dUdBQXRCLHNCQUFzQiw0SUFGcEIsQ0FBQyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLDBCQUEwQixFQUFFLENBQUM7MkZBRXBFLHNCQUFzQjtrQkFUbEMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsdUJBQXVCO29CQUNqQyxJQUFJLEVBQUU7d0JBQ0YsUUFBUSxFQUFFLE1BQU07d0JBQ2hCLFlBQVksRUFBRSxVQUFVO3FCQUMzQjtvQkFDRCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUM7b0JBQ2hCLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsMEJBQTBCLEVBQUUsQ0FBQztpQkFDaEY7O0FBbUNELE1BQU0sT0FBTywwQkFBMkIsU0FBUSxrQkFBa0I7SUFDOUQsWUFBWSxRQUFvQjtRQUM1QixLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEIsQ0FBQztJQUVELElBQUksT0FBTztRQUNQLE9BQU8sSUFBSSxDQUFDLFFBQXNDLENBQUM7SUFDdkQsQ0FBQzs7dUhBUFEsMEJBQTBCOzJHQUExQiwwQkFBMEIsNEpBRnhCLENBQUMsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSwwQkFBMEIsRUFBRSxDQUFDOzJGQUVwRSwwQkFBMEI7a0JBVHRDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLDJCQUEyQjtvQkFDckMsSUFBSSxFQUFFO3dCQUNGLFFBQVEsRUFBRSxNQUFNO3dCQUNoQixZQUFZLEVBQUUsc0JBQXNCO3FCQUN2QztvQkFDRCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUM7b0JBQ2hCLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsMEJBQTBCLEVBQUUsQ0FBQztpQkFDaEYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDZGtTdGVwcGVyLCBDZGtTdGVwcGVyTmV4dCwgQ2RrU3RlcHBlclByZXZpb3VzIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3N0ZXBwZXInO1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIERpcmVjdGl2ZSwgRG9DaGVjayB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBOeFByb2dyZXNzU3RlcHBlckRpcmVjdGl2ZSB9IGZyb20gJy4vcHJvZ3Jlc3Mtc3RlcHBlci5jb21wb25lbnQnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ2J1dHRvbltueFN0ZXBwZXJOZXh0XScsXG4gICAgaG9zdDoge1xuICAgICAgICAnW3R5cGVdJzogJ3R5cGUnLFxuICAgICAgICAnW2Rpc2FibGVkXSc6ICdkaXNhYmxlZCcsXG4gICAgfSxcbiAgICBpbnB1dHM6IFsndHlwZSddLFxuICAgIHByb3ZpZGVyczogW3sgcHJvdmlkZTogQ2RrU3RlcHBlciwgdXNlRXhpc3Rpbmc6IE54UHJvZ3Jlc3NTdGVwcGVyRGlyZWN0aXZlIH1dLFxufSlcbmV4cG9ydCBjbGFzcyBOeFN0ZXBwZXJOZXh0RGlyZWN0aXZlIGV4dGVuZHMgQ2RrU3RlcHBlck5leHQgaW1wbGVtZW50cyBEb0NoZWNrIHtcbiAgICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICAgIGRpc2FibGVkID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3Rvcihfc3RlcHBlcjogQ2RrU3RlcHBlciwgcHJpdmF0ZSBfY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICAgICAgICBzdXBlcihfc3RlcHBlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW1wbGVtZW50ZWQgdG8gcHJldmVudCBjaGFuZ2VkIGFmdGVyIGNoZWNrZWQgZXJyb3IgYWZ0ZXIgc3RlcHBlciBpbml0LlxuICAgICAqIFdoZW4gdGhlIHN0ZXBwZXIgaW5pdGlhbGl6ZXMgdGhlIGRpcmVjdGl2ZSBpcyBjaGVja2VkIGZpcnN0IGJlZm9yZVxuICAgICAqIHRoZSBzdGVwcGVyIGNhbiBjaGVjayBpdHMgY29udGVudCB0aHVzIGl0IGRvZXNuJ3Qga25vdyBhYm91dCBpdCdzIGNoaWxkcmVuIHlldFxuICAgICAqIHNvIF9zdGVwcGVyLmhhc05leHQgcmV0dXJucyBmYWxzZSBhbmQgZGlzYWJsZXMgdGhlIGJ1dHRvbnMuIEluIHRoZSBzYW1lIENEIGN5Y2xlXG4gICAgICogYWZ0ZXIgdGhlIHN0ZXBwZXIgaGFzIGNoZWNrZWQgaXRzIGNvbnRlbnRzIHRoZSBidXR0b24gbmVlZHMgdG8gYmUgZW5hYmxlZCByZXN1bHRpbmdcbiAgICAgKiBpbiB0aGUgZXJyb3IuXG4gICAgICovXG4gICAgbmdEb0NoZWNrKCkge1xuICAgICAgICBjb25zdCBzdGVwcGVyID0gdGhpcy5fc3RlcHBlciBhcyBhbnkgYXMgTnhQcm9ncmVzc1N0ZXBwZXJEaXJlY3RpdmU7XG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkICE9PSAhc3RlcHBlci5oYXNOZXh0KSB7XG4gICAgICAgICAgICB0aGlzLmRpc2FibGVkID0gIXN0ZXBwZXIuaGFzTmV4dDtcbiAgICAgICAgICAgIHRoaXMuX2Nkci5tYXJrRm9yQ2hlY2soKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdidXR0b25bbnhTdGVwcGVyUHJldmlvdXNdJyxcbiAgICBob3N0OiB7XG4gICAgICAgICdbdHlwZV0nOiAndHlwZScsXG4gICAgICAgICdbZGlzYWJsZWRdJzogJyFzdGVwcGVyLmhhc1ByZXZpb3VzJyxcbiAgICB9LFxuICAgIGlucHV0czogWyd0eXBlJ10sXG4gICAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBDZGtTdGVwcGVyLCB1c2VFeGlzdGluZzogTnhQcm9ncmVzc1N0ZXBwZXJEaXJlY3RpdmUgfV0sXG59KVxuZXhwb3J0IGNsYXNzIE54U3RlcHBlclByZXZpb3VzRGlyZWN0aXZlIGV4dGVuZHMgQ2RrU3RlcHBlclByZXZpb3VzIHtcbiAgICBjb25zdHJ1Y3Rvcihfc3RlcHBlcjogQ2RrU3RlcHBlcikge1xuICAgICAgICBzdXBlcihfc3RlcHBlcik7XG4gICAgfVxuXG4gICAgZ2V0IHN0ZXBwZXIoKTogTnhQcm9ncmVzc1N0ZXBwZXJEaXJlY3RpdmUge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RlcHBlciBhcyBOeFByb2dyZXNzU3RlcHBlckRpcmVjdGl2ZTtcbiAgICB9XG59XG4iXX0=