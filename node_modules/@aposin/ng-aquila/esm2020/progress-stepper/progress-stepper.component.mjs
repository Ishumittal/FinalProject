import { CdkStep, CdkStepper } from '@angular/cdk/stepper';
import { ChangeDetectionStrategy, Component, ContentChildren, Directive, forwardRef, Inject, Input, Optional, QueryList, SkipSelf, } from '@angular/core';
import { ErrorStateMatcher } from '@aposin/ng-aquila/utils';
import { Subject } from 'rxjs';
import { takeUntil, takeWhile } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@aposin/ng-aquila/utils";
import * as i2 from "@angular/cdk/bidi";
// We need to reference steps in stepper and stepper in steps. To prevent circular depenedency errors
// Provide both components in a single file. Otherwise we would have to introduce interface/abstract classes
// shared between both implementations.
export class NxStepComponent extends CdkStep {
    constructor(stepper, _errorStateMatcher) {
        super(stepper);
        this.stepper = stepper;
        this._errorStateMatcher = _errorStateMatcher;
        this._destroyed = new Subject();
        this.interacted = false;
    }
    /** Custom error state matcher that checks for validity of the step form. */
    isErrorState(control, form) {
        const originalErrorState = this._errorStateMatcher.isErrorState(control, form);
        // Checks for the validity of a step form that is not submitted or touched,
        // e.g when the user directly clicks the "next" button or directly on the step
        const customErrorState = !!(control?.invalid && this.interacted);
        return originalErrorState || customErrorState;
    }
    ngOnChanges() {
        // We can't use the `changes: SimpleChanges` as a parameter here
        // because CdkStep only defines the ngOnChanges() method.
        super.ngOnChanges();
        if (this.stepControl !== this._stepControl) {
            this._stepControl = this.stepControl;
            // If a step control changes its state, the stepper needs to update.
            if (this._stepControl) {
                this._stepControl.statusChanges
                    .pipe(takeWhile(() => this._stepControl === this.stepControl), takeUntil(this._destroyed))
                    .subscribe(() => {
                    this.stepper._stateChanged();
                });
            }
        }
        if (this.interacted !== this._interacted) {
            this._interacted = this.interacted;
            if (this.stepper) {
                this.stepper._stateChanged();
            }
        }
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
}
NxStepComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxStepComponent, deps: [{ token: forwardRef(() => NxProgressStepperDirective) }, { token: i1.ErrorStateMatcher, skipSelf: true }], target: i0.ɵɵFactoryTarget.Component });
NxStepComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxStepComponent, selector: "nx-step", providers: [{ provide: ErrorStateMatcher, useExisting: NxStepComponent }], exportAs: ["nxStep"], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<ng-template><ng-content></ng-content></ng-template>\n", changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxStepComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-step', exportAs: 'nxStep', providers: [{ provide: ErrorStateMatcher, useExisting: NxStepComponent }], changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-template><ng-content></ng-content></ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: NxProgressStepperDirective, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => NxProgressStepperDirective)]
                }] }, { type: i1.ErrorStateMatcher, decorators: [{
                    type: SkipSelf
                }] }]; } });
/** @docs-private */
export class NxProgressStepperDirective extends CdkStepper {
    constructor(_cdr, _dir, _elementRef) {
        super(_dir, _cdr, _elementRef, null);
        this._cdr = _cdr;
        /** Steps that belong to the current stepper, excluding ones from nested steppers. */
        this.steps = new QueryList();
        this._stepHeader = new QueryList();
    }
    ngAfterContentInit() {
        super.ngAfterContentInit();
        // Mark the component for change detection whenever the content children query changes
        this.steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => {
            this._stateChanged();
        });
        // If a step control changes its state, the stepper needs to update.
        this.steps
            .filter(s => !!s.stepControl)
            .forEach(step => {
            step.stepControl.statusChanges.pipe(takeUntil(step._destroyed)).subscribe(() => {
                this._stateChanged();
            });
        });
        // we need to defer change detection that the nxStepperNext and NxStepperPrevious buttons
        // can run change detection again, because they are initialized before the stepper content
        Promise.resolve().then(() => {
            this._cdr.detectChanges();
        });
    }
    /** @docs-private */
    get hasPrevious() {
        return this.selectedIndex - 1 >= 0;
    }
    /** @docs-private */
    get hasNext() {
        return this.selectedIndex + 1 < this.count;
    }
    /** @docs-private */
    get count() {
        return this.steps ? this.steps.length : 0;
    }
    /** @docs-private */
    get currentStep() {
        if (this.count === 0 || this.selectedIndex === -1 || !this.steps) {
            return null;
        }
        const steps = this.steps.toArray();
        return steps[this.selectedIndex];
    }
    /** @docs-private */
    get nextStep() {
        if (this.selectedIndex + 1 >= this.steps.length) {
            return null;
        }
        return this.steps.toArray()[this.selectedIndex + 1];
    }
    /** @docs-private */
    get currentLabel() {
        const step = this.currentStep;
        if (!step) {
            return '';
        }
        const label = step.stepLabel || step.label;
        return this.currentStepLabel && label ? `${this.currentStepLabel} ${this.selectedIndex + 1}/${this.count}: ${label}` : '';
    }
}
NxProgressStepperDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxProgressStepperDirective, deps: [{ token: i0.ChangeDetectorRef }, { token: i2.Directionality, optional: true }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
NxProgressStepperDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxProgressStepperDirective, selector: "[nxProgressStepper]", inputs: { currentStepLabel: "currentStepLabel" }, queries: [{ propertyName: "_steps", predicate: NxStepComponent, descendants: true }], exportAs: ["nxProgressStepper"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxProgressStepperDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[nxProgressStepper]',
                    exportAs: 'nxProgressStepper',
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i2.Directionality, decorators: [{
                    type: Optional
                }] }, { type: i0.ElementRef }]; }, propDecorators: { _steps: [{
                type: ContentChildren,
                args: [NxStepComponent, { descendants: true }]
            }], currentStepLabel: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,