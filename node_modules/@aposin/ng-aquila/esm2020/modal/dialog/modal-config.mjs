/**
 * Configuration for opening a modal  with the NxDialogService.
 */
export class NxModalConfig {
    constructor() {
        /** The ARIA role of the modal element. */
        this.role = 'dialog';
        /** Custom class for the overlay pane. */
        this.panelClass = '';
        /** Whether the modal has a backdrop. */
        this.hasBackdrop = true;
        /** Custom class for the backdrop. */
        this.backdropClass = '';
        /** Whether the user can use escape or clicking on the backdrop to close the modal. */
        this.disableClose = false;
        /** Width of the modal. */
        this.width = '736px';
        /** Height of the modal. */
        this.height = '';
        /** Max-width of the modal. If a number is provided, assumes pixel units. Defaults to 100vw. */
        this.maxWidth = '736px';
        /** Data being injected into the child component. */
        this.data = null;
        /** ID of the element that describes the modal. */
        this.ariaDescribedBy = null;
        /** ID of the element that labels the modal. */
        this.ariaLabelledBy = null;
        /** Aria label to assign to the modal element. */
        this.ariaLabel = null;
        /** Whether the modal should focus the first focusable element on open. */
        this.autoFocus = true;
        /**
         * Whether the modal should restore focus to the
         * previously-focused element, after it's closed.
         */
        this.restoreFocus = true;
        /**
         * Whether the modal should close when the user goes backwards/forwards in history.
         * Note that this usually doesn't include clicking on links (unless the user is using
         * the `HashLocationStrategy`).
         */
        this.closeOnNavigation = true;
        /** Whether a close button with icon should be displayed in the top right corner of the modal.
         *
         * Default value is `false`.
         */
        this.showCloseIcon = false;
        /** Sets the 'aria-label' of the modal close button needed for accessibility.
         *
         * Default value is `'Close dialog'`.
         */
        this.closeIconButtonLabel = 'Close dialog';
        /** Sets locale direction for the modal
         *
         * Default value is `'ltr'`
         */
        this.direction = 'ltr';
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctYXF1aWxhL3NyYy9tb2RhbC9kaWFsb2cvbW9kYWwtY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNCQTs7R0FFRztBQUNILE1BQU0sT0FBTyxhQUFhO0lBQTFCO1FBWUksMENBQTBDO1FBQzFDLFNBQUksR0FBaUIsUUFBUSxDQUFDO1FBRTlCLHlDQUF5QztRQUN6QyxlQUFVLEdBQXVCLEVBQUUsQ0FBQztRQUVwQyx3Q0FBd0M7UUFDeEMsZ0JBQVcsR0FBYSxJQUFJLENBQUM7UUFFN0IscUNBQXFDO1FBQ3JDLGtCQUFhLEdBQVksRUFBRSxDQUFDO1FBRTVCLHNGQUFzRjtRQUN0RixpQkFBWSxHQUFhLEtBQUssQ0FBQztRQUUvQiwwQkFBMEI7UUFDMUIsVUFBSyxHQUFZLE9BQU8sQ0FBQztRQUV6QiwyQkFBMkI7UUFDM0IsV0FBTSxHQUFZLEVBQUUsQ0FBQztRQVFyQiwrRkFBK0Y7UUFDL0YsYUFBUSxHQUFxQixPQUFPLENBQUM7UUFRckMsb0RBQW9EO1FBQ3BELFNBQUksR0FBYyxJQUFJLENBQUM7UUFFdkIsa0RBQWtEO1FBQ2xELG9CQUFlLEdBQW1CLElBQUksQ0FBQztRQUV2QywrQ0FBK0M7UUFDL0MsbUJBQWMsR0FBbUIsSUFBSSxDQUFDO1FBRXRDLGlEQUFpRDtRQUNqRCxjQUFTLEdBQW1CLElBQUksQ0FBQztRQUVqQywwRUFBMEU7UUFDMUUsY0FBUyxHQUFhLElBQUksQ0FBQztRQUUzQjs7O1dBR0c7UUFDSCxpQkFBWSxHQUFhLElBQUksQ0FBQztRQUs5Qjs7OztXQUlHO1FBQ0gsc0JBQWlCLEdBQWEsSUFBSSxDQUFDO1FBS25DOzs7V0FHRztRQUNILGtCQUFhLEdBQWEsS0FBSyxDQUFDO1FBRWhDOzs7V0FHRztRQUNILHlCQUFvQixHQUFZLGNBQWMsQ0FBQztRQUUvQzs7O1dBR0c7UUFDSCxjQUFTLEdBQWUsS0FBSyxDQUFDO0lBQ2xDLENBQUM7Q0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9iaWRpJztcbmltcG9ydCB7IFNjcm9sbFN0cmF0ZWd5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKiBWYWxpZCBBUklBIHJvbGVzIGZvciBhIG1vZGFsIGVsZW1lbnQuICovXG5leHBvcnQgdHlwZSBOeE1vZGFsUm9sZSA9ICdkaWFsb2cnIHwgJ2FsZXJ0ZGlhbG9nJztcblxuLyoqIFBvc3NpYmxlIG92ZXJyaWRlcyBmb3IgYSBtb2RhbCdzIHBvc2l0aW9uLiAqL1xuZXhwb3J0IGludGVyZmFjZSBOeERpYWxvZ1Bvc2l0aW9uIHtcbiAgICAvKiogT3ZlcnJpZGUgZm9yIHRoZSBtb2RhbCdzIHRvcCBwb3NpdGlvbi4gKi9cbiAgICB0b3A/OiBzdHJpbmc7XG5cbiAgICAvKiogT3ZlcnJpZGUgZm9yIHRoZSBtb2RhbCdzIGJvdHRvbSBwb3NpdGlvbi4gKi9cbiAgICBib3R0b20/OiBzdHJpbmc7XG5cbiAgICAvKiogT3ZlcnJpZGUgZm9yIHRoZSBtb2RhbCdzIGxlZnQgcG9zaXRpb24uICovXG4gICAgbGVmdD86IHN0cmluZztcblxuICAgIC8qKiBPdmVycmlkZSBmb3IgdGhlIG1vZGFsJ3MgcmlnaHQgcG9zaXRpb24uICovXG4gICAgcmlnaHQ/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBmb3Igb3BlbmluZyBhIG1vZGFsICB3aXRoIHRoZSBOeERpYWxvZ1NlcnZpY2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBOeE1vZGFsQ29uZmlnPEQgPSBhbnk+IHtcbiAgICAvKipcbiAgICAgKiBXaGVyZSB0aGUgYXR0YWNoZWQgY29tcG9uZW50IHNob3VsZCBsaXZlIGluIEFuZ3VsYXIncyAqbG9naWNhbCogY29tcG9uZW50IHRyZWUuXG4gICAgICogVGhpcyBhZmZlY3RzIHdoYXQgaXMgYXZhaWxhYmxlIGZvciBpbmplY3Rpb24gYW5kIHRoZSBjaGFuZ2UgZGV0ZWN0aW9uIG9yZGVyIGZvciB0aGVcbiAgICAgKiBjb21wb25lbnQgaW5zdGFudGlhdGVkIGluc2lkZSBvZiB0aGUgbW9kYWwuIFRoaXMgZG9lcyBub3QgYWZmZWN0IHdoZXJlIHRoZSBtb2RhbFxuICAgICAqIGNvbnRlbnQgd2lsbCBiZSByZW5kZXJlZC5cbiAgICAgKi9cbiAgICB2aWV3Q29udGFpbmVyUmVmPzogVmlld0NvbnRhaW5lclJlZjtcblxuICAgIC8qKiBJRCBmb3IgdGhlIG1vZGFsLiBJZiBvbWl0dGVkLCBhIHVuaXF1ZSBvbmUgd2lsbCBiZSBnZW5lcmF0ZWQuICovXG4gICAgaWQ/OiBzdHJpbmc7XG5cbiAgICAvKiogVGhlIEFSSUEgcm9sZSBvZiB0aGUgbW9kYWwgZWxlbWVudC4gKi9cbiAgICByb2xlPzogTnhNb2RhbFJvbGUgPSAnZGlhbG9nJztcblxuICAgIC8qKiBDdXN0b20gY2xhc3MgZm9yIHRoZSBvdmVybGF5IHBhbmUuICovXG4gICAgcGFuZWxDbGFzcz86IHN0cmluZyB8IHN0cmluZ1tdID0gJyc7XG5cbiAgICAvKiogV2hldGhlciB0aGUgbW9kYWwgaGFzIGEgYmFja2Ryb3AuICovXG4gICAgaGFzQmFja2Ryb3A/OiBib29sZWFuID0gdHJ1ZTtcblxuICAgIC8qKiBDdXN0b20gY2xhc3MgZm9yIHRoZSBiYWNrZHJvcC4gKi9cbiAgICBiYWNrZHJvcENsYXNzPzogc3RyaW5nID0gJyc7XG5cbiAgICAvKiogV2hldGhlciB0aGUgdXNlciBjYW4gdXNlIGVzY2FwZSBvciBjbGlja2luZyBvbiB0aGUgYmFja2Ryb3AgdG8gY2xvc2UgdGhlIG1vZGFsLiAqL1xuICAgIGRpc2FibGVDbG9zZT86IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKiBXaWR0aCBvZiB0aGUgbW9kYWwuICovXG4gICAgd2lkdGg/OiBzdHJpbmcgPSAnNzM2cHgnO1xuXG4gICAgLyoqIEhlaWdodCBvZiB0aGUgbW9kYWwuICovXG4gICAgaGVpZ2h0Pzogc3RyaW5nID0gJyc7XG5cbiAgICAvKiogTWluLXdpZHRoIG9mIHRoZSBtb2RhbC4gSWYgYSBudW1iZXIgaXMgcHJvdmlkZWQsIGFzc3VtZXMgcGl4ZWwgdW5pdHMuICovXG4gICAgbWluV2lkdGg/OiBudW1iZXIgfCBzdHJpbmc7XG5cbiAgICAvKiogTWluLWhlaWdodCBvZiB0aGUgbW9kYWwuIElmIGEgbnVtYmVyIGlzIHByb3ZpZGVkLCBhc3N1bWVzIHBpeGVsIHVuaXRzLiAqL1xuICAgIG1pbkhlaWdodD86IG51bWJlciB8IHN0cmluZztcblxuICAgIC8qKiBNYXgtd2lkdGggb2YgdGhlIG1vZGFsLiBJZiBhIG51bWJlciBpcyBwcm92aWRlZCwgYXNzdW1lcyBwaXhlbCB1bml0cy4gRGVmYXVsdHMgdG8gMTAwdncuICovXG4gICAgbWF4V2lkdGg/OiBudW1iZXIgfCBzdHJpbmcgPSAnNzM2cHgnO1xuXG4gICAgLyoqIE1heC1oZWlnaHQgb2YgdGhlIG1vZGFsLiBJZiBhIG51bWJlciBpcyBwcm92aWRlZCwgYXNzdW1lcyBwaXhlbCB1bml0cy4gKi9cbiAgICBtYXhIZWlnaHQ/OiBudW1iZXIgfCBzdHJpbmc7XG5cbiAgICAvKiogUG9zaXRpb24gb3ZlcnJpZGVzLiAqL1xuICAgIHBvc2l0aW9uPzogTnhEaWFsb2dQb3NpdGlvbjtcblxuICAgIC8qKiBEYXRhIGJlaW5nIGluamVjdGVkIGludG8gdGhlIGNoaWxkIGNvbXBvbmVudC4gKi9cbiAgICBkYXRhPzogRCB8IG51bGwgPSBudWxsO1xuXG4gICAgLyoqIElEIG9mIHRoZSBlbGVtZW50IHRoYXQgZGVzY3JpYmVzIHRoZSBtb2RhbC4gKi9cbiAgICBhcmlhRGVzY3JpYmVkQnk/OiBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuICAgIC8qKiBJRCBvZiB0aGUgZWxlbWVudCB0aGF0IGxhYmVscyB0aGUgbW9kYWwuICovXG4gICAgYXJpYUxhYmVsbGVkQnk/OiBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuICAgIC8qKiBBcmlhIGxhYmVsIHRvIGFzc2lnbiB0byB0aGUgbW9kYWwgZWxlbWVudC4gKi9cbiAgICBhcmlhTGFiZWw/OiBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuICAgIC8qKiBXaGV0aGVyIHRoZSBtb2RhbCBzaG91bGQgZm9jdXMgdGhlIGZpcnN0IGZvY3VzYWJsZSBlbGVtZW50IG9uIG9wZW4uICovXG4gICAgYXV0b0ZvY3VzPzogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBtb2RhbCBzaG91bGQgcmVzdG9yZSBmb2N1cyB0byB0aGVcbiAgICAgKiBwcmV2aW91c2x5LWZvY3VzZWQgZWxlbWVudCwgYWZ0ZXIgaXQncyBjbG9zZWQuXG4gICAgICovXG4gICAgcmVzdG9yZUZvY3VzPzogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvKiogU2Nyb2xsIHN0cmF0ZWd5IHRvIGJlIHVzZWQgZm9yIHRoZSBtb2RhbC4gKi9cbiAgICBzY3JvbGxTdHJhdGVneT86IFNjcm9sbFN0cmF0ZWd5O1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgbW9kYWwgc2hvdWxkIGNsb3NlIHdoZW4gdGhlIHVzZXIgZ29lcyBiYWNrd2FyZHMvZm9yd2FyZHMgaW4gaGlzdG9yeS5cbiAgICAgKiBOb3RlIHRoYXQgdGhpcyB1c3VhbGx5IGRvZXNuJ3QgaW5jbHVkZSBjbGlja2luZyBvbiBsaW5rcyAodW5sZXNzIHRoZSB1c2VyIGlzIHVzaW5nXG4gICAgICogdGhlIGBIYXNoTG9jYXRpb25TdHJhdGVneWApLlxuICAgICAqL1xuICAgIGNsb3NlT25OYXZpZ2F0aW9uPzogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvKiogQWx0ZXJuYXRlIGBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXJgIHRvIHVzZSB3aGVuIHJlc29sdmluZyB0aGUgYXNzb2NpYXRlZCBjb21wb25lbnQuICovXG4gICAgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyPzogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyO1xuXG4gICAgLyoqIFdoZXRoZXIgYSBjbG9zZSBidXR0b24gd2l0aCBpY29uIHNob3VsZCBiZSBkaXNwbGF5ZWQgaW4gdGhlIHRvcCByaWdodCBjb3JuZXIgb2YgdGhlIG1vZGFsLlxuICAgICAqXG4gICAgICogRGVmYXVsdCB2YWx1ZSBpcyBgZmFsc2VgLlxuICAgICAqL1xuICAgIHNob3dDbG9zZUljb24/OiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKiogU2V0cyB0aGUgJ2FyaWEtbGFiZWwnIG9mIHRoZSBtb2RhbCBjbG9zZSBidXR0b24gbmVlZGVkIGZvciBhY2Nlc3NpYmlsaXR5LlxuICAgICAqXG4gICAgICogRGVmYXVsdCB2YWx1ZSBpcyBgJ0Nsb3NlIGRpYWxvZydgLlxuICAgICAqL1xuICAgIGNsb3NlSWNvbkJ1dHRvbkxhYmVsPzogc3RyaW5nID0gJ0Nsb3NlIGRpYWxvZyc7XG5cbiAgICAvKiogU2V0cyBsb2NhbGUgZGlyZWN0aW9uIGZvciB0aGUgbW9kYWxcbiAgICAgKlxuICAgICAqIERlZmF1bHQgdmFsdWUgaXMgYCdsdHInYFxuICAgICAqL1xuICAgIGRpcmVjdGlvbj86IERpcmVjdGlvbiA9ICdsdHInO1xufVxuIl19