import { _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';
import { BasePortalOutlet, CdkPortalOutlet } from '@angular/cdk/portal';
import { DOCUMENT } from '@angular/common';
import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Optional, ViewChild, } from '@angular/core';
import { NxModalAnimations } from './modal-animations';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/a11y";
import * as i2 from "./modal-config";
import * as i3 from "@aposin/ng-aquila/icon";
import * as i4 from "@angular/common";
import * as i5 from "@angular/cdk/portal";
/**
 * Throws an exception for the case when a ComponentPortal is
 * attached to a DomPortalOutlet without an origin.
 * @docs-private
 */
export function throwNxDialogContentAlreadyAttachedError() {
    throw Error('Attempting to attach modal content after content is already attached');
}
/**
 * Internal component that wraps user-provided modal content.
 * Animation is based on https://material.io/guidelines/motion/choreography.html.
 * @docs-private
 */
export class NxModalContainer extends BasePortalOutlet {
    constructor(_elementRef, _focusTrapFactory, _cdr, _document, 
    /** The modal configuration. */
    _config, _focusMonitor) {
        super();
        this._elementRef = _elementRef;
        this._focusTrapFactory = _focusTrapFactory;
        this._cdr = _cdr;
        this._document = _document;
        this._config = _config;
        this._focusMonitor = _focusMonitor;
        /** Element that was focused before the modal was opened. Save this to restore upon close. */
        this._elementFocusedBeforeDialogWasOpened = null;
        /** State of the modal animation. */
        this._state = 'enter';
        /** Emits when an animation state changes. */
        this._animationStateChanged = new EventEmitter();
        /** Emits when the close button (X) is clicked. */
        this._closeButtonClicked = new EventEmitter();
        /**
         * Attaches a DOM portal to the modal container.
         * @param portal Portal to be attached.
         * @deprecated To be turned into a method when changed in the CDK.
         */
        this.attachDomPortal = (portal) => {
            if (this._portalOutlet.hasAttached()) {
                throwNxDialogContentAlreadyAttachedError();
            }
            this._savePreviouslyFocusedElement();
            return this._portalOutlet.attachDomPortal(portal);
        };
        this._ariaLabelledBy = _config.ariaLabelledBy || null;
    }
    ngAfterViewInit() {
        if (this._config.showCloseIcon) {
            this._focusMonitor.monitor(this._closeButton);
        }
    }
    ngOnDestroy() {
        this._focusMonitor.stopMonitoring(this._closeButton);
    }
    /**
     * Attach a ComponentPortal as content to this modal container.
     * @param portal Portal to be attached as the modal content.
     */
    attachComponentPortal(portal) {
        if (this._portalOutlet.hasAttached()) {
            throwNxDialogContentAlreadyAttachedError();
        }
        this._savePreviouslyFocusedElement();
        return this._portalOutlet.attachComponentPortal(portal);
    }
    /**
     * Attach a TemplatePortal as content to this modal container.
     * @param portal Portal to be attached as the modal content.
     */
    attachTemplatePortal(portal) {
        if (this._portalOutlet.hasAttached()) {
            throwNxDialogContentAlreadyAttachedError();
        }
        this._savePreviouslyFocusedElement();
        return this._portalOutlet.attachTemplatePortal(portal);
    }
    /** Moves the focus inside the focus trap. */
    _trapFocus() {
        const element = this._elementRef.nativeElement;
        if (!this._focusTrap) {
            this._focusTrap = this._focusTrapFactory.create(element);
        }
        // If we were to attempt to focus immediately, then the content of the modal would not yet be
        // ready in instances where change detection has to run first. To deal with this, we simply
        // wait for the microtask queue to be empty.
        if (this._config.autoFocus) {
            this._focusTrap.focusInitialElementWhenReady();
        }
        else {
            const activeElement = this._document?.activeElement;
            // Otherwise ensure that focus is on the modal container. It's possible that a different
            // component tried to move focus while the open animation was running. See:
            // https://github.com/angular/components/issues/16215. Note that we only want to do this
            // if the focus isn't inside the modal already, because it's possible that the consumer
            // turned off `autoFocus` in order to move focus themselves.
            if (activeElement !== element && !element.contains(activeElement)) {
                element.focus();
            }
        }
    }
    /** Restores focus to the element that was focused before the modal opened. */
    _restoreFocus() {
        const toFocus = this._elementFocusedBeforeDialogWasOpened;
        // We need the extra check, because IE can set the `activeElement` to null in some cases.
        if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {
            const activeElement = _getFocusedElementPierceShadowDom();
            const element = this._elementRef.nativeElement;
            // Make sure that focus is still inside the modal or is on the body (usually because a
            // non-focusable element like the backdrop was clicked) before moving it. It's possible that
            // the consumer moved it themselves before the animation was done, in which case we shouldn't
            // do anything.
            if (!activeElement || activeElement === this._document?.body || activeElement === element || element.contains(activeElement)) {
                this._focusMonitor.focusVia(toFocus, 'keyboard');
            }
        }
        if (this._focusTrap) {
            this._focusTrap.destroy();
        }
    }
    /** Saves a reference to the element that was focused before the modal was opened. */
    _savePreviouslyFocusedElement() {
        if (!this._document) {
            return;
        }
        this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();
        // Note that there is no focus method when rendering on the server.
        if (this._elementRef.nativeElement.focus) {
            // Move focus onto the modal immediately in order to prevent the user from accidentally
            // opening multiple modals at the same time. Needs to be async, because the element
            // may not be focusable immediately.
            Promise.resolve().then(() => this._elementRef.nativeElement.focus());
        }
    }
    /** Callback, invoked whenever an animation on the host completes. */
    _onAnimationDone(event) {
        if (event.toState === 'enter') {
            this._trapFocus();
        }
        else if (event.toState === 'exit') {
            this._restoreFocus();
        }
        this._animationStateChanged.emit(event);
    }
    /** Callback, invoked when an animation on the host starts. */
    _onAnimationStart(event) {
        this._animationStateChanged.emit(event);
    }
    /** Starts the modal exit animation. */
    _startExitAnimation() {
        this._state = 'exit';
        // Mark the container for check so it can react if the
        // view container is using OnPush change detection.
        this._cdr.markForCheck();
    }
    _closeButtonClick() {
        this._closeButtonClicked.emit();
    }
}
NxModalContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxModalContainer, deps: [{ token: i0.ElementRef }, { token: i1.FocusTrapFactory }, { token: i0.ChangeDetectorRef }, { token: DOCUMENT, optional: true }, { token: i2.NxModalConfig }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });
NxModalContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxModalContainer, selector: "nx-modal-container", host: { attributes: { "tabindex": "-1", "aria-modal": "true" }, listeners: { "@modalContainer.start": "_onAnimationStart($event)", "@modalContainer.done": "_onAnimationDone($event)" }, properties: { "attr.id": "_id", "attr.role": "_config.role", "attr.aria-labelledby": "_config.ariaLabel ? null : _ariaLabelledBy", "attr.aria-label": "_config.ariaLabel", "attr.aria-describedby": "_config.ariaDescribedBy || null", "@modalContainer": "_state" }, classAttribute: "nx-modal__container" }, viewQueries: [{ propertyName: "_portalOutlet", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }, { propertyName: "_closeButton", first: true, predicate: ["closeButton"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<button\n    #closeButton\n    *ngIf=\"_config.showCloseIcon\"\n    [attr.aria-label]=\"_config.closeIconButtonLabel\"\n    (click)=\"_closeButtonClick()\"\n    class=\"nx-modal__close\"\n    type=\"button\"\n>\n    <nx-icon name=\"close\"></nx-icon>\n</button>\n<ng-template cdkPortalOutlet></ng-template>\n", styles: [":host{background:var(--modal-background-color);color:var(--modal-text-color);margin:0 32px;padding:40px;border-radius:4px;box-shadow:var(--shadow-large);display:block;position:relative;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}@media (max-width: 703px){:host{margin:0 8px;padding:40px 32px 48px}}@media screen and (-ms-high-contrast: active){:host{border:2px solid windowText}}::ng-deep .nx-modal__content{display:block;margin:0 -40px;padding:0 40px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}@media (max-width: 703px){::ng-deep .nx-modal__content{margin:0 -32px;padding:0 32px}}::ng-deep .nx-modal__actions{margin-bottom:-48px;margin-left:-40px;margin-right:-40px;height:72px;border-top:1px solid var(--modal-actions-border-color);display:flex;align-items:center;justify-content:flex-end;padding:0 40px;border-bottom-left-radius:4px;border-bottom-right-radius:4px}@media (max-width: 703px){::ng-deep .nx-modal__actions{margin-left:-32px;margin-right:-32px;padding:0 32px}}.nx-modal__close{background-color:transparent;border:none;cursor:pointer;position:absolute;top:16px;right:16px;height:24px;outline:none;padding:0;color:var(--modal-close-icon-color)}.nx-modal__close nx-icon{font-size:24px}:host-context([dir=rtl]) .nx-modal__close{right:auto;left:16px}.nx-modal__close::-moz-focus-inner{border:0}.nx-modal__close.cdk-keyboard-focused{box-shadow:var(--focus-box-shadow);border-radius:4px}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-modal__close.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}\n"], components: [{ type: i3.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.CdkPortalOutlet, selector: "[cdkPortalOutlet]", inputs: ["cdkPortalOutlet"], outputs: ["attached"], exportAs: ["cdkPortalOutlet"] }], animations: [NxModalAnimations.modalContainer], changeDetection: i0.ChangeDetectionStrategy.Default });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxModalContainer, decorators: [{
            type: Component,
            args: [{ selector: 'nx-modal-container', changeDetection: ChangeDetectionStrategy.Default, animations: [NxModalAnimations.modalContainer], host: {
                        class: 'nx-modal__container',
                        tabindex: '-1',
                        'aria-modal': 'true',
                        '[attr.id]': '_id',
                        '[attr.role]': '_config.role',
                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',
                        '[attr.aria-label]': '_config.ariaLabel',
                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',
                        '[@modalContainer]': '_state',
                        '(@modalContainer.start)': '_onAnimationStart($event)',
                        '(@modalContainer.done)': '_onAnimationDone($event)',
                    }, template: "<button\n    #closeButton\n    *ngIf=\"_config.showCloseIcon\"\n    [attr.aria-label]=\"_config.closeIconButtonLabel\"\n    (click)=\"_closeButtonClick()\"\n    class=\"nx-modal__close\"\n    type=\"button\"\n>\n    <nx-icon name=\"close\"></nx-icon>\n</button>\n<ng-template cdkPortalOutlet></ng-template>\n", styles: [":host{background:var(--modal-background-color);color:var(--modal-text-color);margin:0 32px;padding:40px;border-radius:4px;box-shadow:var(--shadow-large);display:block;position:relative;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}@media (max-width: 703px){:host{margin:0 8px;padding:40px 32px 48px}}@media screen and (-ms-high-contrast: active){:host{border:2px solid windowText}}::ng-deep .nx-modal__content{display:block;margin:0 -40px;padding:0 40px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}@media (max-width: 703px){::ng-deep .nx-modal__content{margin:0 -32px;padding:0 32px}}::ng-deep .nx-modal__actions{margin-bottom:-48px;margin-left:-40px;margin-right:-40px;height:72px;border-top:1px solid var(--modal-actions-border-color);display:flex;align-items:center;justify-content:flex-end;padding:0 40px;border-bottom-left-radius:4px;border-bottom-right-radius:4px}@media (max-width: 703px){::ng-deep .nx-modal__actions{margin-left:-32px;margin-right:-32px;padding:0 32px}}.nx-modal__close{background-color:transparent;border:none;cursor:pointer;position:absolute;top:16px;right:16px;height:24px;outline:none;padding:0;color:var(--modal-close-icon-color)}.nx-modal__close nx-icon{font-size:24px}:host-context([dir=rtl]) .nx-modal__close{right:auto;left:16px}.nx-modal__close::-moz-focus-inner{border:0}.nx-modal__close.cdk-keyboard-focused{box-shadow:var(--focus-box-shadow);border-radius:4px}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-modal__close.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: i0.ChangeDetectorRef }, { type: Document, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i2.NxModalConfig }, { type: i1.FocusMonitor }]; }, propDecorators: { _portalOutlet: [{
                type: ViewChild,
                args: [CdkPortalOutlet, { static: true }]
            }], _closeButton: [{
                type: ViewChild,
                args: ['closeButton']
            }] } });
//# sourceMappingURL=data:application/json;base64,