import { Overlay, OverlayConfig } from '@angular/cdk/overlay';
import { ComponentPortal, TemplatePortal } from '@angular/cdk/portal';
import { Inject, Injectable, InjectionToken, Injector, Optional, SkipSelf, TemplateRef } from '@angular/core';
import { defer, Subject } from 'rxjs';
import { startWith, takeUntil } from 'rxjs/operators';
import { NxModalConfig } from './modal-config';
import { NxModalContainer } from './modal-container.component';
import { NxModalRef } from './modal-ref';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
import * as i2 from "./modal-config";
/** Injection token that can be used to access the data that was passed in to a modal. */
export const NX_MODAL_DATA = new InjectionToken('NxModalData');
/** Injection token that can be used to specify default modal options. */
export const NX_MODAL_DEFAULT_OPTIONS = new InjectionToken('nx-modal-default-options');
/** Injection token that determines the scroll handling while a modal is open. */
export const NX_MODAL_SCROLL_STRATEGY = new InjectionToken('nx-modal-scroll-strategy');
/** @docs-private */
export function NX_MODAL_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {
    return () => overlay.scrollStrategies.block();
}
/** @docs-private */
export const NX_MODAL_SCROLL_STRATEGY_PROVIDER = {
    provide: NX_MODAL_SCROLL_STRATEGY,
    useFactory: NX_MODAL_SCROLL_STRATEGY_PROVIDER_FACTORY,
    deps: [Overlay],
};
/**
 * Service to open Material Design modal modals.
 */
export class NxDialogService {
    constructor(_overlay, _injector, _defaultOptions, _parentDialogService, _overlayContainer, _defaultScrollStrategyFactory) {
        this._overlay = _overlay;
        this._injector = _injector;
        this._defaultOptions = _defaultOptions;
        this._parentDialogService = _parentDialogService;
        this._overlayContainer = _overlayContainer;
        this._defaultScrollStrategyFactory = _defaultScrollStrategyFactory;
        this._openModalsAtThisLevel = [];
        this._afterAllClosedAtThisLevel = new Subject();
        this._afterOpenedAtThisLevel = new Subject();
        this._ariaHiddenElements = new Map();
        /**
         * Stream that emits when all open modal have finished closing.
         * Will emit on subscribe if there are no open modals to begin with.
         */
        this.afterAllClosed = defer(() => this.openModals.length ? this._afterAllClosed : this._afterAllClosed.pipe(startWith(undefined)));
        this._destroyed = new Subject();
        /** Strategy factory that will be used to handle scrolling while the modal panel is open. */
        this._scrollStrategyFactory = this._defaultScrollStrategyFactory;
    }
    /** Keeps track of the currently-open modals. */
    get openModals() {
        return this._parentDialogService ? this._parentDialogService.openModals : this._openModalsAtThisLevel;
    }
    /** Stream that emits when a modal has been opened. */
    get afterOpened() {
        return this._parentDialogService ? this._parentDialogService.afterOpened : this._afterOpenedAtThisLevel;
    }
    get _afterAllClosed() {
        const parent = this._parentDialogService;
        return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;
    }
    /**
     * Opens a modal modal containing the given component.
     * @param componentOrTemplateRef Type of the component to load into the dialog,
     *     or a TemplateRef to instantiate as the modal content.
     * @param config Extra configuration options.
     * @returns Reference to the newly-opened modal.
     */
    open(componentOrTemplateRef, config) {
        config = _applyConfigDefaults(config, this._defaultOptions || new NxModalConfig());
        if (config.id && this.getModalById(config.id)) {
            throw Error(`Modal with id "${config.id}" exists already. The modal id must be unique.`);
        }
        const overlayRef = this._createOverlay(config);
        const modalContainer = this._attachModalContainer(overlayRef, config);
        const modalRef = this._attachModalContent(componentOrTemplateRef, modalContainer, overlayRef, config);
        // If this is the first modal that we're opening, hide all the non-overlay content.
        if (!this.openModals.length) {
            this._hideNonModalContentFromAssistiveTechnology();
        }
        this.openModals.push(modalRef);
        modalRef.afterClosed().subscribe(() => this._removeOpenModal(modalRef));
        this.afterOpened.next(modalRef);
        return modalRef;
    }
    /**
     * Closes all of the currently-open modals.
     */
    closeAll() {
        this._closeModals(this.openModals);
    }
    /**
     * Finds an open modal by its id.
     * @param id ID to use when looking up the modal.
     */
    getModalById(id) {
        return this.openModals.find(modal => modal.id === id);
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        // Only close the modals at this level on destroy
        // since the parent service may still be active.
        this._closeModals(this._openModalsAtThisLevel);
        this._afterAllClosedAtThisLevel.complete();
        this._afterOpenedAtThisLevel.complete();
    }
    /**
     * Creates the overlay into which the modal will be loaded.
     * @param config The modal configuration.
     * @returns A promise resolving to the OverlayRef for the created overlay.
     */
    _createOverlay(config) {
        const overlayConfig = this._getOverlayConfig(config);
        return this._overlay.create(overlayConfig);
    }
    /**
     * Creates an overlay config from a modal config.
     * @param modalConfig The modal configuration.
     * @returns The overlay configuration.
     */
    _getOverlayConfig(modalConfig) {
        const state = new OverlayConfig({
            positionStrategy: this._overlay.position().global(),
            scrollStrategy: modalConfig.scrollStrategy || this._scrollStrategyFactory(),
            panelClass: modalConfig.panelClass,
            hasBackdrop: modalConfig.hasBackdrop,
            minWidth: modalConfig.minWidth,
            minHeight: modalConfig.minHeight,
            maxWidth: modalConfig.maxWidth,
            maxHeight: modalConfig.maxHeight,
            disposeOnNavigation: modalConfig.closeOnNavigation,
            direction: modalConfig.direction,
        });
        if (modalConfig.backdropClass) {
            state.backdropClass = modalConfig.backdropClass;
        }
        return state;
    }
    /**
     * Attaches an NxModalContainer to a dialog's already-created overlay.
     * @param overlay Reference to the dialog's underlying overlay.
     * @param config The modal configuration.
     * @returns A promise resolving to a ComponentRef for the attached container.
     */
    _attachModalContainer(overlay, config) {
        const userInjector = config?.viewContainerRef?.injector;
        const injector = Injector.create({
            parent: userInjector || this._injector,
            providers: [{ provide: NxModalConfig, useValue: config }],
        });
        const containerPortal = new ComponentPortal(NxModalContainer, config.viewContainerRef, injector, config.componentFactoryResolver);
        const containerRef = overlay.attach(containerPortal);
        return containerRef.instance;
    }
    /**
     * Attaches the user-provided component to the already-created NxModalContainer.
     * @param componentOrTemplateRef The type of component being loaded into the dialog,
     *     or a TemplateRef to instantiate as the content.
     * @param modalContainer Reference to the wrapping NxModalContainer.
     * @param overlayRef Reference to the overlay in which the modal resides.
     * @param config The modal configuration.
     * @returns A promise resolving to the NxModalRef that should be returned to the user.
     */
    _attachModalContent(componentOrTemplateRef, modalContainer, overlayRef, config) {
        // Create a reference to the modal we're creating in order to give the user a handle
        // to modify and close it.
        const modalRef = new NxModalRef(overlayRef, modalContainer, config.id);
        // When the modal backdrop is clicked, we want to close it.
        if (config.hasBackdrop) {
            overlayRef
                .backdropClick()
                .pipe(takeUntil(this._destroyed))
                .subscribe(() => {
                if (!modalRef.disableClose) {
                    modalRef.close();
                }
            });
        }
        if (componentOrTemplateRef instanceof TemplateRef) {
            modalContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, { $implicit: config.data, modalRef }));
        }
        else {
            const injector = this._createInjector(config, modalRef, modalContainer);
            const contentRef = modalContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));
            modalRef.componentInstance = contentRef.instance;
        }
        modalRef.updateSize(config.width, config.height).updatePosition(config.position);
        return modalRef;
    }
    /**
     * Creates a custom injector to be used inside the modal. This allows a component loaded inside
     * of a modal to close itself and, optionally, to return a value.
     * @param config Config object that is used to construct the modal.
     * @param modalRef Reference to the modal.
     * @param container Modal container element that wraps all of the contents.
     * @returns The custom injector that can be used inside the modal.
     */
    _createInjector(config, modalRef, modalContainer) {
        const userInjector = config?.viewContainerRef?.injector;
        // The NxModalContainer is injected in the portal as the NxModalContainer and the dialog's
        // content are created out of the same ViewContainerRef and as such, are siblings for injector
        // purposes. To allow the hierarchy that is expected, the NxModalContainer is explicitly
        // added to the injection tokens.
        const providers = [
            { provide: NxModalContainer, useValue: modalContainer },
            { provide: NX_MODAL_DATA, useValue: config.data },
            { provide: NxModalRef, useValue: modalRef },
        ];
        return Injector.create({ parent: userInjector || this._injector, providers });
    }
    /**
     * Removes a modal from the array of open modals.
     * @param modalRef Modal to be removed.
     */
    _removeOpenModal(modalRef) {
        const index = this.openModals.indexOf(modalRef);
        if (index > -1) {
            this.openModals.splice(index, 1);
            // If all the modals were closed, remove/restore the `aria-hidden`
            // to a the siblings and emit to the `afterAllClosed` stream.
            if (!this.openModals.length) {
                this._ariaHiddenElements.forEach((previousValue, element) => {
                    if (previousValue) {
                        element.setAttribute('aria-hidden', previousValue);
                    }
                    else {
                        element.removeAttribute('aria-hidden');
                    }
                });
                this._ariaHiddenElements.clear();
                this._afterAllClosed.next();
            }
        }
    }
    /**
     * Hides all of the content that isn't an overlay from assistive technology.
     */
    _hideNonModalContentFromAssistiveTechnology() {
        const overlayContainer = this._overlayContainer.getContainerElement();
        // Ensure that the overlay container is attached to the DOM.
        if (overlayContainer.parentElement) {
            const siblings = overlayContainer.parentElement.children;
            for (let i = siblings.length - 1; i > -1; i--) {
                const sibling = siblings[i];
                if (sibling !== overlayContainer && sibling.nodeName !== 'SCRIPT' && sibling.nodeName !== 'STYLE' && !sibling.hasAttribute('aria-live')) {
                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));
                    sibling.setAttribute('aria-hidden', 'true');
                }
            }
        }
    }
    /** Closes all of the modals in an array. */
    _closeModals(modals) {
        let i = modals.length;
        while (i--) {
            // The `_openModals` property isn't updated after close until the rxjs subscription
            // runs on the next microtask, in addition to modifying the array as we're going
            // through it. We loop through all of them and call close without assuming that
            // they'll be removed from the list instantaneously.
            modals[i].close();
        }
    }
}
NxDialogService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDialogService, deps: [{ token: i1.Overlay }, { token: i0.Injector }, { token: NX_MODAL_DEFAULT_OPTIONS, optional: true }, { token: NxDialogService, optional: true, skipSelf: true }, { token: i1.OverlayContainer }, { token: NX_MODAL_SCROLL_STRATEGY }], target: i0.ɵɵFactoryTarget.Injectable });
NxDialogService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDialogService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDialogService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Overlay }, { type: i0.Injector }, { type: i2.NxModalConfig, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [NX_MODAL_DEFAULT_OPTIONS]
                }] }, { type: NxDialogService, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.OverlayContainer }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NX_MODAL_SCROLL_STRATEGY]
                }] }]; } });
/**
 * Applies default options to the modal config.
 * @param config Config to be modified.
 * @param defaultOptions Default options provided.
 * @returns The new configuration object.
 */
function _applyConfigDefaults(config, defaultOptions) {
    return { ...defaultOptions, ...config };
}
//# sourceMappingURL=data:application/json;base64,