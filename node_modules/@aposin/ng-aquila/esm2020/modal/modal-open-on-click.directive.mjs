import { Directive, Input } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./modal.service";
export class NxOpenModalOnClickDirective {
    constructor(templateRef, viewContainer, modalService) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.modalService = modalService;
        this._destroyed = new Subject();
        /** @docs-private */
        this.clickHandler = (event) => {
            this.viewContainer.clear();
            // instantiate the template onto which this directive is applied
            const viewRef = this.viewContainer.createEmbeddedView(this.templateRef);
            // we need to mark the viewRef explicitly if the modal is used inside another
            // component that is using onPush change detection
            viewRef.markForCheck();
            event.preventDefault();
            event.stopPropagation();
        };
    }
    ngOnInit() {
        this.modalService.close$.pipe(takeUntil(this._destroyed)).subscribe(() => this.viewContainer.clear());
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this.elements.forEach(el => {
            if (el.removeEventListener) {
                el.removeEventListener('click', this.clickHandler);
            }
        });
    }
    /**
     * One or multiple template reference variables pointing to elements
     * which should trigger opening the modal on click.
     *
     * Value: A single template reference variable or an array of template reference variables.
     */
    set nxOpenModalOnClick(elements) {
        // also support the case where only one element is passed, check for the length property to be sure elements is an array
        if (Array.isArray(elements)) {
            this.elements = elements;
        }
        else {
            this.elements = [elements];
        }
        // add a click event listener to any element passed as property to this directive
        this.elements.forEach(el => {
            if (el.addEventListener) {
                el.addEventListener('click', this.clickHandler);
                // workaround until refactoring: if the reference is a component
                // reference the component has to implement a getter to its own elementRef
            }
            else if (el.elementRef) {
                el.elementRef.nativeElement.addEventListener('click', this.clickHandler);
            }
            else {
                console.warn(`nxOpenModalOnClick: Given Element doesn't appear to be an ElementRef.`, el);
            }
        });
    }
}
NxOpenModalOnClickDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxOpenModalOnClickDirective, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: i1.NxModalService }], target: i0.ɵɵFactoryTarget.Directive });
NxOpenModalOnClickDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxOpenModalOnClickDirective, selector: "[nxOpenModalOnClick]", inputs: { nxOpenModalOnClick: "nxOpenModalOnClick" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxOpenModalOnClickDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[nxOpenModalOnClick]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: i1.NxModalService }]; }, propDecorators: { nxOpenModalOnClick: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtb3Blbi1vbi1jbGljay5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1hcXVpbGEvc3JjL21vZGFsL21vZGFsLW9wZW4tb24tY2xpY2suZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFvRCxNQUFNLGVBQWUsQ0FBQztBQUVuRyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBSzNDLE1BQU0sT0FBTywyQkFBMkI7SUFNcEMsWUFBb0IsV0FBNkIsRUFBVSxhQUErQixFQUFVLFlBQTRCO1FBQTVHLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtRQUFVLGtCQUFhLEdBQWIsYUFBYSxDQUFrQjtRQUFVLGlCQUFZLEdBQVosWUFBWSxDQUFnQjtRQUYvRyxlQUFVLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQW1CbEQsb0JBQW9CO1FBQ3BCLGlCQUFZLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtZQUM1QixJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzNCLGdFQUFnRTtZQUNoRSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUN4RSw2RUFBNkU7WUFDN0Usa0RBQWtEO1lBQ2xELE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUN2QixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDdkIsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQzVCLENBQUMsQ0FBQztJQTNCaUksQ0FBQztJQUVwSSxRQUFRO1FBQ0osSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzFHLENBQUM7SUFFRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRTNCLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3ZCLElBQUksRUFBRSxDQUFDLG1CQUFtQixFQUFFO2dCQUN4QixFQUFFLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQzthQUN0RDtRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQWNEOzs7OztPQUtHO0lBQ0gsSUFDSSxrQkFBa0IsQ0FBQyxRQUF1QztRQUMxRCx3SEFBd0g7UUFDeEgsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3pCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1NBQzVCO2FBQU07WUFDSCxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDOUI7UUFDRCxpRkFBaUY7UUFDakYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDdkIsSUFBSSxFQUFFLENBQUMsZ0JBQWdCLEVBQUU7Z0JBQ3JCLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUNoRCxnRUFBZ0U7Z0JBQ2hFLDBFQUEwRTthQUM3RTtpQkFBTSxJQUFJLEVBQUUsQ0FBQyxVQUFVLEVBQUU7Z0JBQ3RCLEVBQUUsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDNUU7aUJBQU07Z0JBQ0gsT0FBTyxDQUFDLElBQUksQ0FBQyx1RUFBdUUsRUFBRSxFQUFFLENBQUMsQ0FBQzthQUM3RjtRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7d0hBN0RRLDJCQUEyQjs0R0FBM0IsMkJBQTJCOzJGQUEzQiwyQkFBMkI7a0JBRHZDLFNBQVM7bUJBQUMsRUFBRSxRQUFRLEVBQUUsc0JBQXNCLEVBQUU7OEpBMkN2QyxrQkFBa0I7c0JBRHJCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE54QnV0dG9uQmFzZSB9IGZyb20gJ0BhcG9zaW4vbmctYXF1aWxhL2J1dHRvbic7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IE54TW9kYWxTZXJ2aWNlIH0gZnJvbSAnLi9tb2RhbC5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW254T3Blbk1vZGFsT25DbGlja10nIH0pXG5leHBvcnQgY2xhc3MgTnhPcGVuTW9kYWxPbkNsaWNrRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIC8qKiBAZG9jcy1wcml2YXRlICovXG4gICAgZWxlbWVudHMhOiBhbnlbXTtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2Rlc3Ryb3llZCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LCBwcml2YXRlIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsIHByaXZhdGUgbW9kYWxTZXJ2aWNlOiBOeE1vZGFsU2VydmljZSkge31cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLm1vZGFsU2VydmljZS5jbG9zZSQucGlwZSh0YWtlVW50aWwodGhpcy5fZGVzdHJveWVkKSkuc3Vic2NyaWJlKCgpID0+IHRoaXMudmlld0NvbnRhaW5lci5jbGVhcigpKTtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5fZGVzdHJveWVkLm5leHQoKTtcbiAgICAgICAgdGhpcy5fZGVzdHJveWVkLmNvbXBsZXRlKCk7XG5cbiAgICAgICAgdGhpcy5lbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgICAgIGlmIChlbC5yZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsaWNrSGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKiBAZG9jcy1wcml2YXRlICovXG4gICAgY2xpY2tIYW5kbGVyID0gKGV2ZW50OiBFdmVudCkgPT4ge1xuICAgICAgICB0aGlzLnZpZXdDb250YWluZXIuY2xlYXIoKTtcbiAgICAgICAgLy8gaW5zdGFudGlhdGUgdGhlIHRlbXBsYXRlIG9udG8gd2hpY2ggdGhpcyBkaXJlY3RpdmUgaXMgYXBwbGllZFxuICAgICAgICBjb25zdCB2aWV3UmVmID0gdGhpcy52aWV3Q29udGFpbmVyLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlUmVmKTtcbiAgICAgICAgLy8gd2UgbmVlZCB0byBtYXJrIHRoZSB2aWV3UmVmIGV4cGxpY2l0bHkgaWYgdGhlIG1vZGFsIGlzIHVzZWQgaW5zaWRlIGFub3RoZXJcbiAgICAgICAgLy8gY29tcG9uZW50IHRoYXQgaXMgdXNpbmcgb25QdXNoIGNoYW5nZSBkZXRlY3Rpb25cbiAgICAgICAgdmlld1JlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIE9uZSBvciBtdWx0aXBsZSB0ZW1wbGF0ZSByZWZlcmVuY2UgdmFyaWFibGVzIHBvaW50aW5nIHRvIGVsZW1lbnRzXG4gICAgICogd2hpY2ggc2hvdWxkIHRyaWdnZXIgb3BlbmluZyB0aGUgbW9kYWwgb24gY2xpY2suXG4gICAgICpcbiAgICAgKiBWYWx1ZTogQSBzaW5nbGUgdGVtcGxhdGUgcmVmZXJlbmNlIHZhcmlhYmxlIG9yIGFuIGFycmF5IG9mIHRlbXBsYXRlIHJlZmVyZW5jZSB2YXJpYWJsZXMuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBzZXQgbnhPcGVuTW9kYWxPbkNsaWNrKGVsZW1lbnRzOiBOeEJ1dHRvbkJhc2UgfCBOeEJ1dHRvbkJhc2VbXSkge1xuICAgICAgICAvLyBhbHNvIHN1cHBvcnQgdGhlIGNhc2Ugd2hlcmUgb25seSBvbmUgZWxlbWVudCBpcyBwYXNzZWQsIGNoZWNrIGZvciB0aGUgbGVuZ3RoIHByb3BlcnR5IHRvIGJlIHN1cmUgZWxlbWVudHMgaXMgYW4gYXJyYXlcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZWxlbWVudHMpKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzID0gZWxlbWVudHM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzID0gW2VsZW1lbnRzXTtcbiAgICAgICAgfVxuICAgICAgICAvLyBhZGQgYSBjbGljayBldmVudCBsaXN0ZW5lciB0byBhbnkgZWxlbWVudCBwYXNzZWQgYXMgcHJvcGVydHkgdG8gdGhpcyBkaXJlY3RpdmVcbiAgICAgICAgdGhpcy5lbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgICAgIGlmIChlbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsaWNrSGFuZGxlcik7XG4gICAgICAgICAgICAgICAgLy8gd29ya2Fyb3VuZCB1bnRpbCByZWZhY3RvcmluZzogaWYgdGhlIHJlZmVyZW5jZSBpcyBhIGNvbXBvbmVudFxuICAgICAgICAgICAgICAgIC8vIHJlZmVyZW5jZSB0aGUgY29tcG9uZW50IGhhcyB0byBpbXBsZW1lbnQgYSBnZXR0ZXIgdG8gaXRzIG93biBlbGVtZW50UmVmXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVsLmVsZW1lbnRSZWYpIHtcbiAgICAgICAgICAgICAgICBlbC5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsaWNrSGFuZGxlcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgbnhPcGVuTW9kYWxPbkNsaWNrOiBHaXZlbiBFbGVtZW50IGRvZXNuJ3QgYXBwZWFyIHRvIGJlIGFuIEVsZW1lbnRSZWYuYCwgZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=