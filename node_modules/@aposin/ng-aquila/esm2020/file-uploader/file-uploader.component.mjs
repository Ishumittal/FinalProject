import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { DOWN_ARROW, UP_ARROW } from '@angular/cdk/keycodes';
import { ChangeDetectionStrategy, Component, ContentChild, ContentChildren, EventEmitter, Input, Optional, Output, Self, ViewChild, ViewChildren, } from '@angular/core';
import { NxErrorComponent, NxLabelComponent } from '@aposin/ng-aquila/base';
import { Subject } from 'rxjs';
import { startWith, takeUntil } from 'rxjs/operators';
import { FileItem } from './file-uploader.model';
import { isFileTypeValid, NxFileUploaderValidators } from './file-uploader.validations';
import { NxFileUploaderButtonDirective } from './file-uploader-button.directive';
import { NxFileUploaderDropZoneComponent } from './file-uploader-drop-zone.component';
import { NxFileUploaderHintDirective } from './file-uploader-hint.directive';
import * as i0 from "@angular/core";
import * as i1 from "@aposin/ng-aquila/utils";
import * as i2 from "./file-uploader-intl";
import * as i3 from "@angular/forms";
import * as i4 from "@angular/cdk/a11y";
import * as i5 from "./item/file-uploader-name.component";
import * as i6 from "./item/file-uploader-size.component";
import * as i7 from "./item/file-uploader-status.component";
import * as i8 from "./item/file-uploader-delete.component";
import * as i9 from "@angular/common";
let nextId = 0;
export class NxFileUploaderComponent {
    constructor(_cdr, _errorStateMatcher, _intl, _parentForm, _parentFormGroup, 
    /** @docs-private */ ngControl, _focusMonitor) {
        this._cdr = _cdr;
        this._errorStateMatcher = _errorStateMatcher;
        this._intl = _intl;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this.ngControl = ngControl;
        this._focusMonitor = _focusMonitor;
        this._filesSubscriptions = [];
        /** An event emitted when queue is changed.
         *
         * Emits the changed array of FileItems.
         * @docs-private */
        this.valueChange = new EventEmitter();
        /** An event emitted when a file is deleted from the queue
         *
         * Emits the deleted FileItem.
         */
        this.fileDeleted = new EventEmitter();
        /**
         * An event emitted when one or more files were added to the file input.
         *
         * Emits the selected FileItem | FileItem[]
         */
        this.filesSelected = new EventEmitter();
        this._id = `nx-file-uploader-${nextId++}`;
        this._maxFileSize = 0;
        this._required = false;
        this._disabled = false;
        this._multiple = false;
        this._controlValidators = null;
        this._maxFileNumber = null;
        this._inputId = `${this.id}-input`;
        this._labelId = `${this.id}-label`;
        /** @docs-private */
        this.errorState = false;
        /** @docs-private */
        this.stateChanges = new Subject();
        /** @docs-private */
        this.validatorFnArray = [];
        this._destroyed = new Subject();
        /** @docs-private */
        this.onChangeCallback = (_) => { };
        /** @docs-private */
        this.onTouchedCallback = () => { };
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
        this._templateContext = this;
    }
    /** Sets the id of the file uploader. */
    set id(value) {
        this._id = value;
        this._cdr.markForCheck();
    }
    get id() {
        return this._id;
    }
    /** Whether the file uploader is required. */
    set required(value) {
        this._required = coerceBooleanProperty(value);
    }
    get required() {
        return this._required;
    }
    /** The value of the file upload. */
    set value(value) {
        this.writeValue(value);
    }
    get value() {
        return this._value;
    }
    /** Name that is used for accessibility. */
    set name(value) {
        this._name = value;
    }
    get name() {
        return this._name;
    }
    /** Whether the file uploader is disabled. */
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        if (this.button) {
            this.button.disabled = this._disabled;
        }
        if (this._dropZone) {
            this._dropZone.disabled = this._disabled;
        }
        this._cdr.markForCheck();
    }
    get disabled() {
        return this._disabled;
    }
    /** Whether the file uploader accepts multiple files to be added. */
    set multiple(value) {
        this._multiple = coerceBooleanProperty(value);
    }
    get multiple() {
        return this._multiple;
    }
    /** The accepted file types */
    set accept(value) {
        this._accept = value;
    }
    get accept() {
        return this._accept;
    }
    /** The max file size in bytes used for validation */
    set maxFileSize(value) {
        this._maxFileSize = coerceNumberProperty(value);
    }
    get maxFileSize() {
        return this._maxFileSize;
    }
    /** Sets the file uploader for the component. */
    set uploader(newUploader) {
        if (this._uploader !== newUploader) {
            this._uploader = newUploader;
        }
    }
    get uploader() {
        return this._uploader;
    }
    /** The max number of files that is accepted. */
    set maxFileNumber(value) {
        this._maxFileNumber = coerceNumberProperty(value);
    }
    get maxFileNumber() {
        return this._maxFileNumber;
    }
    /** Sets the template for the file items. */
    set itemTemplate(template) {
        if (this._itemTemplate !== template) {
            this._itemTemplate = template;
        }
    }
    get itemTemplate() {
        return this._itemTemplate;
    }
    ngOnInit() {
        if (this.ngControl?.control) {
            // we need to save the control validators.
            this._controlValidators = this.ngControl.control.validator;
        }
        this._intl.changes.pipe(takeUntil(this._destroyed)).subscribe(() => {
            this._cdr.markForCheck();
            this.stateChanges.next();
        });
        this._resetValidators();
    }
    ngAfterViewInit() {
        this._fileRowElements.forEach(row => this._focusMonitor.monitor(row));
        this._fileRowElementsPrevious = this._fileRowElements;
        this._fileRowElements.changes.pipe(takeUntil(this._destroyed)).subscribe(rowElements => {
            this._fileRowElementsPrevious.forEach(row => this._focusMonitor.stopMonitoring(row));
            this._fileRowElementsPrevious = rowElements;
            rowElements.forEach((row) => this._focusMonitor.monitor(row));
        });
    }
    ngOnChanges() {
        this.stateChanges.next();
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this.stateChanges.complete();
        this._filesSubscriptions.forEach((subscription) => subscription.unsubscribe());
        this._fileRowElements.forEach(row => this._focusMonitor.stopMonitoring(row));
    }
    /** @docs-private */
    updateErrorState() {
        const oldState = this.errorState;
        const parent = this._parentFormGroup || this._parentForm;
        const control = this.ngControl ? this.ngControl.control : null;
        const newState = this._errorStateMatcher.isErrorState(control, parent);
        if (newState !== oldState) {
            this.errorState = newState;
            this.stateChanges.next();
        }
    }
    registerOnChange(callback) {
        this.onChangeCallback = callback;
    }
    registerOnTouched(callback) {
        this.onTouchedCallback = callback;
    }
    writeValue(value) {
        if (this._value !== value) {
            if (value) {
                if (this._filesSubscriptions) {
                    this._filesSubscriptions.forEach((fileSubscription) => fileSubscription.unsubscribe());
                    this._filesSubscriptions = [];
                }
            }
            this._resetValidators();
            this._value = value;
            this._subscribeToFileChanges();
        }
    }
    _resetValidators(clear = false) {
        if (this.ngControl?.control) {
            if (clear) {
                this.ngControl.control.clearValidators();
            }
            const validators = this._controlValidators
                ? [this._controlValidators, NxFileUploaderValidators.maxFileNumber(this.value, this.maxFileNumber), ...this.validatorFnArray]
                : [NxFileUploaderValidators.maxFileNumber(this.value, this.maxFileNumber), ...this.validatorFnArray];
            this.ngControl.control.setValidators(validators);
            this.ngControl.control.updateValueAndValidity();
        }
    }
    ngAfterContentInit() {
        if (!this.button) {
            return;
        }
        this.button._clicked.pipe(takeUntil(this._destroyed)).subscribe(() => {
            this.nativeInputFile.nativeElement.click();
        });
        this.button.disabled = this.disabled;
        if (this._dropZone) {
            this._dropZone.fileDropped.pipe(takeUntil(this._destroyed)).subscribe(files => {
                this._addFilesToQueue(files);
            });
            this._dropZone.disabled = this.disabled;
        }
        if (this._label) {
            this._label.for = this._inputId;
            this._label.id = this._labelId;
        }
        this.stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {
            this._syncDescribedByIds();
            this._cdr.markForCheck();
        });
        // Re-validate when the number of hints changes.
        this._hintChildren.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {
            this._syncDescribedByIds();
            this._cdr.markForCheck();
        });
        // Re-validate when the number of hints changes.
        this._errorList.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {
            this._syncDescribedByIds();
            this._cdr.markForCheck();
        });
    }
    _addFilesToQueue(files) {
        if (!this.multiple) {
            this.value = [];
        }
        this._setFileListFromValue(files);
        this._resetValidators(true);
        this.onChangeCallback(this.value);
        this.onTouchedCallback();
        this.valueChange.emit(this.value);
        this.filesSelected.emit(this.value);
    }
    _setFileListFromValue(files) {
        // we need to set max file size errors to false
        this.validatorFnArray = [];
        if (files === null) {
            this.value = undefined;
        }
        else {
            files.forEach((file) => {
                if (this.isValidOnSelection(file)) {
                    const tmp = new FileItem(file);
                    if (this.value) {
                        this.value.push(tmp);
                    }
                    else {
                        this.value = [tmp];
                    }
                    this._cdr.markForCheck();
                }
            });
            this._subscribeToFileChanges();
        }
    }
    /** Removes a file from the value list of the file upload input. */
    removeFile(file) {
        this.value = this.value.filter(item => file !== item);
        if (this._filesSubscriptions) {
            this._filesSubscriptions.forEach((fileSubscription) => fileSubscription.unsubscribe());
            this._filesSubscriptions = [];
        }
        this._subscribeToFileChanges();
        this.validatorFnArray = []; // bugfix: kick invalid type error on file remove
        this._resetValidators(true);
        this._cdr.markForCheck();
        this.valueChange.emit(this.value);
        this.fileDeleted.emit(file);
        this.onTouchedCallback();
        this.onChangeCallback(this.value);
        // resets the value of the file input, so that if a file is deleted and added again. otherwise there is no change detected
        this.nativeInputFile.nativeElement.value = '';
    }
    /** Uploads the files via the defined uploader. */
    uploadFiles() {
        if (!this.uploader) {
            console.warn('No uploader found. Please define a NxFileUpload to use the uploading mechanism.');
            return;
        }
        if (this.uploader) {
            this.uploader.uploadFiles(this.value);
        }
    }
    ngDoCheck() {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this.updateErrorState();
        }
    }
    isValidOnSelection(file) {
        let isValid = false;
        this.validatorFnArray.push(NxFileUploaderValidators.maxFileSize(this.maxFileSize, file));
        this.validatorFnArray.push(NxFileUploaderValidators.fileType(file, this.accept));
        if ((!this.maxFileSize || file.size <= this.maxFileSize) && isFileTypeValid(file, this.accept)) {
            isValid = true;
        }
        return isValid;
    }
    /**
     * @docs-private
     * The label for the uploading state used in the queue.
     */
    get uploadingLabel() {
        return this._intl.uploadingLabel;
    }
    /**
     * @docs-private
     * The label for the uploading state used in the queue.
     */
    get deleteLabel() {
        return this._intl.deleteLabel;
    }
    /**
     * @docs-private
     * The label for the uploading state used in the queue.
     */
    get uploadedLabel() {
        return this._intl.uploadedStateLabel;
    }
    /**
     * Sets the list of element IDs that describe the child control. This allows the trigger element (button) to update
     * its `aria-describedby` attribute accordingly.
     */
    _syncDescribedByIds() {
        let ids = [];
        ids = this._hintChildren.map(hint => hint.id);
        ids = this._label ? [this._label.id, ...ids] : ids;
        ids = [...this._errorList.map(error => error.id), ...ids];
        this.button?.setDescribedByIds(ids);
    }
    _handleKeydownListRow(event) {
        if (event.keyCode === DOWN_ARROW) {
            const nextFileItemRow = event.target.nextSibling;
            if (nextFileItemRow?.classList?.contains('nx-file-uploader--file-row')) {
                event.preventDefault();
                nextFileItemRow.focus();
            }
        }
        else if (event.keyCode === UP_ARROW) {
            const previousFileItemRow = event.target.previousSibling;
            if (previousFileItemRow?.classList?.contains('nx-file-uploader--file-row')) {
                event.preventDefault();
                previousFileItemRow.focus();
            }
        }
    }
    /**
     * Triggered when the input[type=file] is changed
     */
    _onFileChange(event) {
        if (this.disabled) {
            return;
        }
        const target = event.target;
        const files = Array.from(target.files ?? []);
        this._addFilesToQueue(files);
        this.stateChanges.next();
        this._cdr.markForCheck();
        this.nativeInputFile.nativeElement.value = '';
    }
    /** Listens to changes in each file. */
    _subscribeToFileChanges() {
        if (this.value?.length) {
            let subscription;
            this.value.map(file => {
                subscription = file.onChange.subscribe(() => {
                    this._cdr.markForCheck();
                });
                this._filesSubscriptions.push(subscription);
            });
        }
    }
}
NxFileUploaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.ErrorStateMatcher }, { token: i2.NxFileUploaderIntl }, { token: i3.NgForm, optional: true }, { token: i3.FormGroupDirective, optional: true }, { token: i3.NgControl, optional: true, self: true }, { token: i4.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });
NxFileUploaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxFileUploaderComponent, selector: "nx-file-uploader", inputs: { id: "id", required: "required", value: "value", name: "name", disabled: "disabled", multiple: "multiple", accept: "accept", maxFileSize: "maxFileSize", uploader: "uploader", maxFileNumber: "maxFileNumber", itemTemplate: "itemTemplate" }, outputs: { valueChange: "valueChange", fileDeleted: "fileDeleted", filesSelected: "filesSelected" }, host: { properties: { "attr.aria-invalid": "errorState", "class.has-error": "errorState" } }, queries: [{ propertyName: "button", first: true, predicate: NxFileUploaderButtonDirective, descendants: true }, { propertyName: "_dropZone", first: true, predicate: NxFileUploaderDropZoneComponent, descendants: true, static: true }, { propertyName: "_label", first: true, predicate: NxLabelComponent, descendants: true }, { propertyName: "_hintChildren", predicate: NxFileUploaderHintDirective }, { propertyName: "_errorList", predicate: NxErrorComponent }], viewQueries: [{ propertyName: "nativeInputFile", first: true, predicate: ["nativeInputFile"], descendants: true }, { propertyName: "_fileRowElements", predicate: ["fileRowElement"], descendants: true }], exportAs: ["NxFileUploaderComponent"], usesOnChanges: true, ngImport: i0, template: "<ng-content select=\"nx-label\"></ng-content>\n<ng-content select=\"[nxFileUploadHint]\"></ng-content>\n<ng-content select=\"nx-file-uploader-drop-zone\"></ng-content>\n<ng-content select=\"[nxFileUploadButton]\"></ng-content>\n<input\n    #nativeInputFile\n    type=\"file\"\n    [attr.multiple]=\"multiple || null\"\n    [attr.disabled]=\"disabled || null\"\n    [attr.accept]=\"accept\"\n    (change)=\"_onFileChange($event)\"\n    [id]=\"_inputId\"\n/>\n<ng-container *ngIf=\"value\">\n    <div class=\"nx-file-uploader--file-list nx-margin-bottom-m\" role=\"list\" [attr.aria-labelledby]=\"_labelId\">\n        <div\n            #fileRowElement\n            class=\"nx-file-uploader--file-row\"\n            [class.nx-file-uploader--file-state-uploading]=\"file.isUploading\"\n            [class.nx-file-uploader--default-template]=\"!_itemTemplate\"\n            *ngFor=\"let file of value\"\n            role=\"listitem\"\n            (keydown)=\"_handleKeydownListRow($event)\"\n        >\n            <ng-container\n                *ngTemplateOutlet=\"_itemTemplate ? _itemTemplate : defaultFileRow; context: { templateContext: _templateContext, file: file }\"\n            ></ng-container>\n        </div>\n    </div>\n</ng-container>\n\n<ng-content select=\"nx-error\" *ngIf=\"errorState\"></ng-content>\n\n<ng-template #defaultFileRow let-templateContext=\"templateContext\" let-file=\"file\">\n    <nx-file-upload-name [name]=\"file?.name\"></nx-file-upload-name>\n\n    <nx-file-upload-size [size]=\"file?.size\" [isUploading]=\"file.isUploading\" [uploadingLabel]=\"templateContext.uploadingLabel\"></nx-file-upload-size>\n\n    <div class=\"nx-file-uploader--file-row-actions\">\n        <nx-file-upload-status\n            [isUploading]=\"file.isUploading\"\n            [isUploaded]=\"file.isUploaded\"\n            [uploadedLabel]=\"templateContext.uploadedLabel\"\n        ></nx-file-upload-status>\n\n        <nx-file-upload-delete [deleteLabel]=\"templateContext.deleteLabel\" [isUploading]=\"file.isUploading\" (click)=\"removeFile(file)\"></nx-file-upload-delete>\n    </div>\n</ng-template>\n", styles: [":host{display:block}:host ::ng-deep nx-error.nx-error--message{margin:12px 0}.nx-file-uploader--file-row{display:flex;flex-wrap:wrap;align-items:center;border-bottom-width:1px;border-bottom-style:solid;padding:8px 12px;border-bottom-color:var(--file-uploader-file-row-border-bottom-color);color:var(--file-uploader-file-row-text-color)}.nx-file-uploader--file-row:hover{background-color:var(--file-uploader-file-row-hover-background-color)}.nx-file-uploader--file-row:focus{outline:none}.nx-file-uploader--file-row ::ng-deep .nx-file-uploader--file-row-actions{margin-left:auto;display:flex;align-items:center;justify-content:flex-end;min-width:120px;flex:none}:host-context([dir=rtl]) .nx-file-uploader--file-row ::ng-deep .nx-file-uploader--file-row-actions{margin-left:0;margin-left:initial;margin-right:auto}.nx-file-uploader--file-row.nx-file-uploader--default-template nx-file-upload-name{flex:1}@media (max-width: 703px){.nx-file-uploader--file-row.nx-file-uploader--default-template nx-file-upload-name{flex:100%}}.nx-file-uploader--file-row.nx-file-uploader--default-template nx-file-upload-size{flex:none}.nx-file-uploader--file-row.nx-file-uploader--default-template nx-file-upload-status{flex:0 1 auto;padding:0 16px}.nx-file-uploader--file-row.nx-file-uploader--default-template nx-file-upload-delete{flex:0 1 auto}.nx-file-uploader--file-row.nx-file-uploader--file-state-uploading .file-name{color:var(--file-uploader-file-row-uploading-file-name-color)}::ng-deep input[type=file]{display:none}::ng-deep .nx-file-upload-button{display:block}::ng-deep .nx-file-upload-hint{font-size:var(--file-uploader-hint-font-size);line-height:var(--file-uploader-hint-line-height);font-weight:var(--file-uploader-hint-font-weight);letter-spacing:var(--file-uploader-hint-letter-spacing);display:block}.nx-file-uploader--file-row.cdk-keyboard-focused{box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-file-uploader--file-row.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}\n"], components: [{ type: i5.NxFileUploaderItemName, selector: "nx-file-upload-name", inputs: ["name"] }, { type: i6.NxFileUploaderItemSize, selector: "nx-file-upload-size", inputs: ["size", "isUploading", "uploadingLabel"] }, { type: i7.NxFileUploaderItemStatus, selector: "nx-file-upload-status", inputs: ["isUploading", "isUploaded", "uploadedLabel"] }, { type: i8.NxFileUploaderItemDelete, selector: "nx-file-upload-delete", inputs: ["isUploading", "deleteLabel"] }], directives: [{ type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i9.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i9.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-file-uploader', exportAs: 'NxFileUploaderComponent', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[attr.aria-invalid]': 'errorState',
                        '[class.has-error]': 'errorState',
                    }, template: "<ng-content select=\"nx-label\"></ng-content>\n<ng-content select=\"[nxFileUploadHint]\"></ng-content>\n<ng-content select=\"nx-file-uploader-drop-zone\"></ng-content>\n<ng-content select=\"[nxFileUploadButton]\"></ng-content>\n<input\n    #nativeInputFile\n    type=\"file\"\n    [attr.multiple]=\"multiple || null\"\n    [attr.disabled]=\"disabled || null\"\n    [attr.accept]=\"accept\"\n    (change)=\"_onFileChange($event)\"\n    [id]=\"_inputId\"\n/>\n<ng-container *ngIf=\"value\">\n    <div class=\"nx-file-uploader--file-list nx-margin-bottom-m\" role=\"list\" [attr.aria-labelledby]=\"_labelId\">\n        <div\n            #fileRowElement\n            class=\"nx-file-uploader--file-row\"\n            [class.nx-file-uploader--file-state-uploading]=\"file.isUploading\"\n            [class.nx-file-uploader--default-template]=\"!_itemTemplate\"\n            *ngFor=\"let file of value\"\n            role=\"listitem\"\n            (keydown)=\"_handleKeydownListRow($event)\"\n        >\n            <ng-container\n                *ngTemplateOutlet=\"_itemTemplate ? _itemTemplate : defaultFileRow; context: { templateContext: _templateContext, file: file }\"\n            ></ng-container>\n        </div>\n    </div>\n</ng-container>\n\n<ng-content select=\"nx-error\" *ngIf=\"errorState\"></ng-content>\n\n<ng-template #defaultFileRow let-templateContext=\"templateContext\" let-file=\"file\">\n    <nx-file-upload-name [name]=\"file?.name\"></nx-file-upload-name>\n\n    <nx-file-upload-size [size]=\"file?.size\" [isUploading]=\"file.isUploading\" [uploadingLabel]=\"templateContext.uploadingLabel\"></nx-file-upload-size>\n\n    <div class=\"nx-file-uploader--file-row-actions\">\n        <nx-file-upload-status\n            [isUploading]=\"file.isUploading\"\n            [isUploaded]=\"file.isUploaded\"\n            [uploadedLabel]=\"templateContext.uploadedLabel\"\n        ></nx-file-upload-status>\n\n        <nx-file-upload-delete [deleteLabel]=\"templateContext.deleteLabel\" [isUploading]=\"file.isUploading\" (click)=\"removeFile(file)\"></nx-file-upload-delete>\n    </div>\n</ng-template>\n", styles: [":host{display:block}:host ::ng-deep nx-error.nx-error--message{margin:12px 0}.nx-file-uploader--file-row{display:flex;flex-wrap:wrap;align-items:center;border-bottom-width:1px;border-bottom-style:solid;padding:8px 12px;border-bottom-color:var(--file-uploader-file-row-border-bottom-color);color:var(--file-uploader-file-row-text-color)}.nx-file-uploader--file-row:hover{background-color:var(--file-uploader-file-row-hover-background-color)}.nx-file-uploader--file-row:focus{outline:none}.nx-file-uploader--file-row ::ng-deep .nx-file-uploader--file-row-actions{margin-left:auto;display:flex;align-items:center;justify-content:flex-end;min-width:120px;flex:none}:host-context([dir=rtl]) .nx-file-uploader--file-row ::ng-deep .nx-file-uploader--file-row-actions{margin-left:0;margin-left:initial;margin-right:auto}.nx-file-uploader--file-row.nx-file-uploader--default-template nx-file-upload-name{flex:1}@media (max-width: 703px){.nx-file-uploader--file-row.nx-file-uploader--default-template nx-file-upload-name{flex:100%}}.nx-file-uploader--file-row.nx-file-uploader--default-template nx-file-upload-size{flex:none}.nx-file-uploader--file-row.nx-file-uploader--default-template nx-file-upload-status{flex:0 1 auto;padding:0 16px}.nx-file-uploader--file-row.nx-file-uploader--default-template nx-file-upload-delete{flex:0 1 auto}.nx-file-uploader--file-row.nx-file-uploader--file-state-uploading .file-name{color:var(--file-uploader-file-row-uploading-file-name-color)}::ng-deep input[type=file]{display:none}::ng-deep .nx-file-upload-button{display:block}::ng-deep .nx-file-upload-hint{font-size:var(--file-uploader-hint-font-size);line-height:var(--file-uploader-hint-line-height);font-weight:var(--file-uploader-hint-font-weight);letter-spacing:var(--file-uploader-hint-letter-spacing);display:block}.nx-file-uploader--file-row.cdk-keyboard-focused{box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-file-uploader--file-row.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.ErrorStateMatcher }, { type: i2.NxFileUploaderIntl }, { type: i3.NgForm, decorators: [{
                    type: Optional
                }] }, { type: i3.FormGroupDirective, decorators: [{
                    type: Optional
                }] }, { type: i3.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }, { type: i4.FocusMonitor }]; }, propDecorators: { button: [{
                type: ContentChild,
                args: [NxFileUploaderButtonDirective, { static: false }]
            }], _dropZone: [{
                type: ContentChild,
                args: [NxFileUploaderDropZoneComponent, { static: true }]
            }], nativeInputFile: [{
                type: ViewChild,
                args: ['nativeInputFile', { static: false }]
            }], _label: [{
                type: ContentChild,
                args: [NxLabelComponent, { static: false }]
            }], _hintChildren: [{
                type: ContentChildren,
                args: [NxFileUploaderHintDirective]
            }], _errorList: [{
                type: ContentChildren,
                args: [NxErrorComponent]
            }], _fileRowElements: [{
                type: ViewChildren,
                args: ['fileRowElement']
            }], valueChange: [{
                type: Output
            }], fileDeleted: [{
                type: Output
            }], filesSelected: [{
                type: Output
            }], id: [{
                type: Input
            }], required: [{
                type: Input
            }], value: [{
                type: Input
            }], name: [{
                type: Input
            }], disabled: [{
                type: Input
            }], multiple: [{
                type: Input
            }], accept: [{
                type: Input
            }], maxFileSize: [{
                type: Input
            }], uploader: [{
                type: Input
            }], maxFileNumber: [{
                type: Input
            }], itemTemplate: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,