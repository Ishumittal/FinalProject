import { Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
/** Shows a file size in Megabyte (MB) or an alternative label while the file is uploading. */
export class NxFileUploaderItemSize {
}
NxFileUploaderItemSize.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderItemSize, deps: [], target: i0.ɵɵFactoryTarget.Component });
NxFileUploaderItemSize.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxFileUploaderItemSize, selector: "nx-file-upload-size", inputs: { size: "size", isUploading: "isUploading", uploadingLabel: "uploadingLabel" }, ngImport: i0, template: `
        <span *ngIf="isUploading; else uploaded">{{ uploadingLabel }}</span>
        <ng-template #uploaded>
            <span>{{ size / 1024 / 1024 | number: '.2' }} MB</span>
        </ng-template>
    `, isInline: true, styles: [":host{white-space:nowrap}\n"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "number": i1.DecimalPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderItemSize, decorators: [{
            type: Component,
            args: [{ selector: 'nx-file-upload-size', template: `
        <span *ngIf="isUploading; else uploaded">{{ uploadingLabel }}</span>
        <ng-template #uploaded>
            <span>{{ size / 1024 / 1024 | number: '.2' }} MB</span>
        </ng-template>
    `, styles: [":host{white-space:nowrap}\n"] }]
        }], propDecorators: { size: [{
                type: Input
            }], isUploading: [{
                type: Input
            }], uploadingLabel: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS11cGxvYWRlci1zaXplLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWFxdWlsYS9zcmMvZmlsZS11cGxvYWRlci9pdGVtL2ZpbGUtdXBsb2FkZXItc2l6ZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7OztBQUVqRCw4RkFBOEY7QUFXOUYsTUFBTSxPQUFPLHNCQUFzQjs7bUhBQXRCLHNCQUFzQjt1R0FBdEIsc0JBQXNCLG1KQVByQjs7Ozs7S0FLVDsyRkFFUSxzQkFBc0I7a0JBVmxDLFNBQVM7K0JBQ0kscUJBQXFCLFlBRXJCOzs7OztLQUtUOzhCQUtELElBQUk7c0JBREgsS0FBSztnQkFLTixXQUFXO3NCQURWLEtBQUs7Z0JBS04sY0FBYztzQkFEYixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKiogU2hvd3MgYSBmaWxlIHNpemUgaW4gTWVnYWJ5dGUgKE1CKSBvciBhbiBhbHRlcm5hdGl2ZSBsYWJlbCB3aGlsZSB0aGUgZmlsZSBpcyB1cGxvYWRpbmcuICovXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ254LWZpbGUtdXBsb2FkLXNpemUnLFxuICAgIHN0eWxlVXJsczogWycuL2ZpbGUtdXBsb2FkZXItc2l6ZS5jb21wb25lbnQuc2NzcyddLFxuICAgIHRlbXBsYXRlOiBgXG4gICAgICAgIDxzcGFuICpuZ0lmPVwiaXNVcGxvYWRpbmc7IGVsc2UgdXBsb2FkZWRcIj57eyB1cGxvYWRpbmdMYWJlbCB9fTwvc3Bhbj5cbiAgICAgICAgPG5nLXRlbXBsYXRlICN1cGxvYWRlZD5cbiAgICAgICAgICAgIDxzcGFuPnt7IHNpemUgLyAxMDI0IC8gMTAyNCB8IG51bWJlcjogJy4yJyB9fSBNQjwvc3Bhbj5cbiAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICBgLFxufSlcbmV4cG9ydCBjbGFzcyBOeEZpbGVVcGxvYWRlckl0ZW1TaXplIHtcbiAgICAvKiogVGhlIHNpemUgb2YgdGhlIGZpbGUgaW4gYnl0ZXMuKi9cbiAgICBASW5wdXQoKVxuICAgIHNpemUhOiBudW1iZXI7XG5cbiAgICAvKiogV2hldGhlciB0aGUgZmlsZSBpcyB1cGxvYWRpbmcgYXQgdGhlIG1vbWVudC4gRGVmYXVsdDogZmFsc2UuKi9cbiAgICBASW5wdXQoKVxuICAgIGlzVXBsb2FkaW5nITogYm9vbGVhbjtcblxuICAgIC8qKiBUaGUgbGFiZWwgdGhhdCBpcyBzaG93biB3aGlsZSB1cGxvYWRpbmcgdGhlIGZpbGUuKi9cbiAgICBASW5wdXQoKVxuICAgIHVwbG9hZGluZ0xhYmVsITogc3RyaW5nO1xufVxuIl19