/**
 * Verifies the file type against the accepted types
 */
export function isFileTypeValid(file, accept) {
    if (!accept || !file.type) {
        return true;
    }
    return (accept
        .replace(/\s/g, '')
        .split(',')
        .filter(acc => {
        const testExp = new RegExp(acc);
        return testExp.test(file.type) || testExp.test(file.name);
    }).length > 0);
}
/**
 * Provides a set of file uploader validators that can be used by form controls.
 *
 * Currently `maxFileSize` and `fileType` are available.
 * @dynamic
 */
export class NxFileUploaderValidators {
    /** The form control validator for the max file size. */
    static maxFileSize(max, file) {
        return (control) => {
            if (!max || max > file.size) {
                return null;
            }
            return { NxFileUploadMaxFileSize: { max, fileName: file.name, actual: file.size } };
        };
    }
    /** The form control validator for the accepted file type. */
    static fileType(file, accept) {
        return (control) => {
            if (isFileTypeValid(file, accept)) {
                return null;
            }
            return { NxFileUploadFileTypeNotAccepted: { fileName: file.name } };
        };
    }
    /** The form control validator for the max file number that is accepted. */
    static maxFileNumber(files, max) {
        return (control) => {
            if (!files || !files.length || !max || files.length <= max) {
                return null;
            }
            return { NxFileUploadMaxFileNumber: { max, actual: files.length } };
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS11cGxvYWRlci52YWxpZGF0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWFxdWlsYS9zcmMvZmlsZS11cGxvYWRlci9maWxlLXVwbG9hZGVyLnZhbGlkYXRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBOztHQUVHO0FBQ0gsTUFBTSxVQUFVLGVBQWUsQ0FBQyxJQUFVLEVBQUUsTUFBYztJQUN0RCxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUN2QixPQUFPLElBQUksQ0FBQztLQUNmO0lBRUQsT0FBTyxDQUNILE1BQU07U0FDRCxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQztTQUNsQixLQUFLLENBQUMsR0FBRyxDQUFDO1NBQ1YsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ1YsTUFBTSxPQUFPLEdBQUcsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDaEMsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5RCxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUNwQixDQUFDO0FBQ04sQ0FBQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxPQUFPLHdCQUF3QjtJQUNqQyx3REFBd0Q7SUFDeEQsTUFBTSxDQUFDLFdBQVcsQ0FBSSxHQUF1QixFQUFFLElBQVU7UUFDckQsT0FBTyxDQUFDLE9BQXdCLEVBQTJCLEVBQUU7WUFDekQsSUFBSSxDQUFDLEdBQUcsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDekIsT0FBTyxJQUFJLENBQUM7YUFDZjtZQUNELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUM7UUFDeEYsQ0FBQyxDQUFDO0lBQ04sQ0FBQztJQUVELDZEQUE2RDtJQUM3RCxNQUFNLENBQUMsUUFBUSxDQUFJLElBQVUsRUFBRSxNQUEwQjtRQUNyRCxPQUFPLENBQUMsT0FBd0IsRUFBMkIsRUFBRTtZQUN6RCxJQUFJLGVBQWUsQ0FBQyxJQUFJLEVBQUUsTUFBZ0IsQ0FBQyxFQUFFO2dCQUN6QyxPQUFPLElBQUksQ0FBQzthQUNmO1lBQ0QsT0FBTyxFQUFFLCtCQUErQixFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDO1FBQ3hFLENBQUMsQ0FBQztJQUNOLENBQUM7SUFFRCwyRUFBMkU7SUFDM0UsTUFBTSxDQUFDLGFBQWEsQ0FBSSxLQUFpQixFQUFFLEdBQXVCO1FBQzlELE9BQU8sQ0FBQyxPQUF3QixFQUEyQixFQUFFO1lBQ3pELElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxNQUFNLElBQUksR0FBRyxFQUFFO2dCQUN4RCxPQUFPLElBQUksQ0FBQzthQUNmO1lBQ0QsT0FBTyxFQUFFLHlCQUF5QixFQUFFLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQztRQUN4RSxDQUFDLENBQUM7SUFDTixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wsIFZhbGlkYXRpb25FcnJvcnMsIFZhbGlkYXRvckZuIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBGaWxlSXRlbSB9IGZyb20gJy4vZmlsZS11cGxvYWRlci5tb2RlbCc7XG5cbi8qKlxuICogVmVyaWZpZXMgdGhlIGZpbGUgdHlwZSBhZ2FpbnN0IHRoZSBhY2NlcHRlZCB0eXBlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gaXNGaWxlVHlwZVZhbGlkKGZpbGU6IEZpbGUsIGFjY2VwdDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgaWYgKCFhY2NlcHQgfHwgIWZpbGUudHlwZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICBhY2NlcHRcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXHMvZywgJycpXG4gICAgICAgICAgICAuc3BsaXQoJywnKVxuICAgICAgICAgICAgLmZpbHRlcihhY2MgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRlc3RFeHAgPSBuZXcgUmVnRXhwKGFjYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRlc3RFeHAudGVzdChmaWxlLnR5cGUpIHx8IHRlc3RFeHAudGVzdChmaWxlLm5hbWUpO1xuICAgICAgICAgICAgfSkubGVuZ3RoID4gMFxuICAgICk7XG59XG5cbi8qKlxuICogUHJvdmlkZXMgYSBzZXQgb2YgZmlsZSB1cGxvYWRlciB2YWxpZGF0b3JzIHRoYXQgY2FuIGJlIHVzZWQgYnkgZm9ybSBjb250cm9scy5cbiAqXG4gKiBDdXJyZW50bHkgYG1heEZpbGVTaXplYCBhbmQgYGZpbGVUeXBlYCBhcmUgYXZhaWxhYmxlLlxuICogQGR5bmFtaWNcbiAqL1xuZXhwb3J0IGNsYXNzIE54RmlsZVVwbG9hZGVyVmFsaWRhdG9ycyB7XG4gICAgLyoqIFRoZSBmb3JtIGNvbnRyb2wgdmFsaWRhdG9yIGZvciB0aGUgbWF4IGZpbGUgc2l6ZS4gKi9cbiAgICBzdGF0aWMgbWF4RmlsZVNpemU8RD4obWF4OiBudW1iZXIgfCB1bmRlZmluZWQsIGZpbGU6IEZpbGUpOiBWYWxpZGF0b3JGbiB7XG4gICAgICAgIHJldHVybiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwgPT4ge1xuICAgICAgICAgICAgaWYgKCFtYXggfHwgbWF4ID4gZmlsZS5zaXplKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBOeEZpbGVVcGxvYWRNYXhGaWxlU2l6ZTogeyBtYXgsIGZpbGVOYW1lOiBmaWxlLm5hbWUsIGFjdHVhbDogZmlsZS5zaXplIH0gfTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKiogVGhlIGZvcm0gY29udHJvbCB2YWxpZGF0b3IgZm9yIHRoZSBhY2NlcHRlZCBmaWxlIHR5cGUuICovXG4gICAgc3RhdGljIGZpbGVUeXBlPEQ+KGZpbGU6IEZpbGUsIGFjY2VwdDogc3RyaW5nIHwgdW5kZWZpbmVkKTogVmFsaWRhdG9yRm4ge1xuICAgICAgICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsID0+IHtcbiAgICAgICAgICAgIGlmIChpc0ZpbGVUeXBlVmFsaWQoZmlsZSwgYWNjZXB0IGFzIHN0cmluZykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IE54RmlsZVVwbG9hZEZpbGVUeXBlTm90QWNjZXB0ZWQ6IHsgZmlsZU5hbWU6IGZpbGUubmFtZSB9IH07XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqIFRoZSBmb3JtIGNvbnRyb2wgdmFsaWRhdG9yIGZvciB0aGUgbWF4IGZpbGUgbnVtYmVyIHRoYXQgaXMgYWNjZXB0ZWQuICovXG4gICAgc3RhdGljIG1heEZpbGVOdW1iZXI8RD4oZmlsZXM6IEZpbGVJdGVtW10sIG1heDogbnVtYmVyIHwgdW5kZWZpbmVkKTogVmFsaWRhdG9yRm4ge1xuICAgICAgICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsID0+IHtcbiAgICAgICAgICAgIGlmICghZmlsZXMgfHwgIWZpbGVzLmxlbmd0aCB8fCAhbWF4IHx8IGZpbGVzLmxlbmd0aCA8PSBtYXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IE54RmlsZVVwbG9hZE1heEZpbGVOdW1iZXI6IHsgbWF4LCBhY3R1YWw6IGZpbGVzLmxlbmd0aCB9IH07XG4gICAgICAgIH07XG4gICAgfVxufVxuIl19