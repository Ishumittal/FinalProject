import { forkJoin, of, Subject } from 'rxjs';
import { catchError } from 'rxjs/operators';
export class NxFileUploadSuccess {
    constructor(
    /** The files that were successfully uploaded. */
    files, 
    /** The results of the request(s). */
    requests) {
        this.files = files;
        this.requests = requests;
    }
}
export class NxFileUploadError {
    constructor(
    /** The files that had an error while uploading. */
    files, 
    /** The returned errors of the request(s). */
    requests) {
        this.files = files;
        this.requests = requests;
    }
}
export class NxFileUploader {
    constructor(config, http) {
        /** Stream that emits the result of an upload request. */
        this.response = new Subject();
        this._config = config;
        this._httpClient = http;
    }
    /** Sets the config options for http requests for uploading the files. */
    set config(options) {
        if (this._config !== options) {
            this._config = options;
        }
    }
    get config() {
        return this._config;
    }
    /** Uploads the files to the url specified in config. */
    uploadFiles(files) {
        if (this.config['uploadSeparately']) {
            this._uploadFilesSeparately(files);
        }
        else {
            this._uploadFilesCollectively(files);
        }
    }
    /** Uploads all files with a POST request to the url specified in config. */
    _uploadFilesCollectively(files) {
        // get a list of all files; if there is no one: return
        if (!files || files.length === 0) {
            return;
        }
        const formData = new FormData();
        // save value here in case that it changes while request is running
        const valuesToUpload = files.filter(file => !file.isUploaded);
        valuesToUpload.forEach((file) => {
            file.setUploadingState();
            formData.append('uploads[]', file.file, file.name);
        });
        this._httpClient.post(this.config['requestUrl'], formData, this.config['options']).subscribe(data => {
            valuesToUpload.forEach((file) => file.setUploadedState());
            this.response.next({ allSucessful: true, success: new NxFileUploadSuccess(valuesToUpload, [data]) });
        }, error => {
            valuesToUpload.forEach((file) => file.setErrorState());
            this.response.next({ error: new NxFileUploadError(valuesToUpload, [error]) });
        });
    }
    /**
     * Uploads all files with a POST request to the url specified in config.
     *
     * Each file is uploaded with an individual request.
     */
    _uploadFilesSeparately(files) {
        // get a list of all files; if there is no one: return
        if (!files) {
            return;
        }
        const responses = [];
        const filesToUpload = files.filter(file => !file.isUploaded);
        filesToUpload.forEach((file) => {
            responses.push(this._uploadFile(file).pipe(catchError(error => of(error))));
        });
        forkJoin(responses).subscribe(results => {
            const mergedResults = results.reduce((acc, result) => {
                if (result.success) {
                    if (!acc.success) {
                        acc.success = new NxFileUploadSuccess([], []);
                    }
                    acc.success.files.push(...result.success.files);
                    acc.success.requests.push(...result.success.requests);
                }
                else if (result.error) {
                    if (!acc.error) {
                        acc.error = new NxFileUploadError([], []);
                    }
                    acc.error.files.push(...result.error.files);
                    acc.error.requests.push(...result.error.requests);
                }
                return acc;
            }, {});
            if (!mergedResults.error) {
                mergedResults.allSucessful = true;
            }
            this.response.next(mergedResults);
        });
    }
    /** Uploads one file with a POST request to the url specified in config. */
    _uploadFile(file) {
        const fileReturnVal = new Subject();
        const formData = new FormData();
        if (!file.isUploaded) {
            file.setUploadingState();
            formData.append('uploads[]', file.file, file.name);
        }
        this._httpClient.post(this.config['requestUrl'], formData, this.config['options']).subscribe(data => {
            file.setUploadedState();
            fileReturnVal.next({ success: new NxFileUploadSuccess([file], [data]) });
            fileReturnVal.complete();
        }, error => {
            file.setErrorState();
            fileReturnVal.next({ error: new NxFileUploadError([file], [error]) });
            fileReturnVal.complete();
        });
        return fileReturnVal;
    }
}
//# sourceMappingURL=data:application/json;base64,