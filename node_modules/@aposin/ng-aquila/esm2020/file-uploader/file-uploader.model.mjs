import { EventEmitter } from '@angular/core';
/**
 * Class used to keep track of the current states of the file
 */
export class FileItem {
    constructor(file, index = 0) {
        /** Whether the file is being uploaded at the moment. */
        this.isUploading = false;
        /** Whether the file was successfully uploaded. */
        this.isUploaded = false;
        /** Whether an error occured when uploading the file. */
        this.isError = false;
        /** Sets the index of the file. */
        this.index = 0;
        /**
         * emits the FileItem on changed
         */
        this.onChange = new EventEmitter();
        this.file = file;
        this.name = file.name;
        this._size = file.size;
        this._type = file.type;
        this.index = index;
    }
    /** Returns the file size in bytes */
    get size() {
        return this._size;
    }
    /** Returns the file type */
    get type() {
        return this._type;
    }
    /**
     * sets the file to a uploaded state
     */
    setUploadedState() {
        this.isUploaded = true;
        this.isUploading = false;
        this.isError = false;
        this.onChange.emit(this);
    }
    /**
     * sets the file to a 'upload-in-progress' state
     */
    setUploadingState() {
        this.isUploaded = false;
        this.isUploading = true;
        this.isError = false;
        this.onChange.emit(this);
    }
    /**
     * sets the file to an error state
     */
    setErrorState() {
        this.isUploaded = false;
        this.isUploading = false;
        this.isError = true;
        this.onChange.emit(this);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS11cGxvYWRlci5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWFxdWlsYS9zcmMvZmlsZS11cGxvYWRlci9maWxlLXVwbG9hZGVyLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFN0M7O0dBRUc7QUFFSCxNQUFNLE9BQU8sUUFBUTtJQTJCakIsWUFBWSxJQUFVLEVBQUUsS0FBSyxHQUFHLENBQUM7UUFqQmpDLHdEQUF3RDtRQUN4RCxnQkFBVyxHQUFHLEtBQUssQ0FBQztRQUVwQixrREFBa0Q7UUFDbEQsZUFBVSxHQUFHLEtBQUssQ0FBQztRQUVuQix3REFBd0Q7UUFDeEQsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUVoQixrQ0FBa0M7UUFDbEMsVUFBSyxHQUFHLENBQUMsQ0FBQztRQUVWOztXQUVHO1FBQ0gsYUFBUSxHQUEyQixJQUFJLFlBQVksRUFBWSxDQUFDO1FBRzVELElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxxQ0FBcUM7SUFDckMsSUFBSSxJQUFJO1FBQ0osT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFFRCw0QkFBNEI7SUFDNUIsSUFBSSxJQUFJO1FBQ0osT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFFRDs7T0FFRztJQUNILGdCQUFnQjtRQUNaLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRDs7T0FFRztJQUNILGlCQUFpQjtRQUNiLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRDs7T0FFRztJQUNILGFBQWE7UUFDVCxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztRQUN4QixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztRQUN6QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBDbGFzcyB1c2VkIHRvIGtlZXAgdHJhY2sgb2YgdGhlIGN1cnJlbnQgc3RhdGVzIG9mIHRoZSBmaWxlXG4gKi9cblxuZXhwb3J0IGNsYXNzIEZpbGVJdGVtIHtcbiAgICAvKiogVGhlIGFjdHVhbCBmaWxlIGRhdGEuICovXG4gICAgZmlsZTogRmlsZSB8IG51bGw7XG5cbiAgICAvKiogU2V0cyB0aGUgbmFtZSBvZiB0aGUgZmlsZS4gKi9cbiAgICBuYW1lOiBzdHJpbmc7XG5cbiAgICBwcml2YXRlIF9zaXplOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBfdHlwZTogc3RyaW5nO1xuXG4gICAgLyoqIFdoZXRoZXIgdGhlIGZpbGUgaXMgYmVpbmcgdXBsb2FkZWQgYXQgdGhlIG1vbWVudC4gKi9cbiAgICBpc1VwbG9hZGluZyA9IGZhbHNlO1xuXG4gICAgLyoqIFdoZXRoZXIgdGhlIGZpbGUgd2FzIHN1Y2Nlc3NmdWxseSB1cGxvYWRlZC4gKi9cbiAgICBpc1VwbG9hZGVkID0gZmFsc2U7XG5cbiAgICAvKiogV2hldGhlciBhbiBlcnJvciBvY2N1cmVkIHdoZW4gdXBsb2FkaW5nIHRoZSBmaWxlLiAqL1xuICAgIGlzRXJyb3IgPSBmYWxzZTtcblxuICAgIC8qKiBTZXRzIHRoZSBpbmRleCBvZiB0aGUgZmlsZS4gKi9cbiAgICBpbmRleCA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBlbWl0cyB0aGUgRmlsZUl0ZW0gb24gY2hhbmdlZFxuICAgICAqL1xuICAgIG9uQ2hhbmdlOiBFdmVudEVtaXR0ZXI8RmlsZUl0ZW0+ID0gbmV3IEV2ZW50RW1pdHRlcjxGaWxlSXRlbT4oKTtcblxuICAgIGNvbnN0cnVjdG9yKGZpbGU6IEZpbGUsIGluZGV4ID0gMCkge1xuICAgICAgICB0aGlzLmZpbGUgPSBmaWxlO1xuICAgICAgICB0aGlzLm5hbWUgPSBmaWxlLm5hbWU7XG4gICAgICAgIHRoaXMuX3NpemUgPSBmaWxlLnNpemU7XG4gICAgICAgIHRoaXMuX3R5cGUgPSBmaWxlLnR5cGU7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICB9XG5cbiAgICAvKiogUmV0dXJucyB0aGUgZmlsZSBzaXplIGluIGJ5dGVzICovXG4gICAgZ2V0IHNpemUoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpemU7XG4gICAgfVxuXG4gICAgLyoqIFJldHVybnMgdGhlIGZpbGUgdHlwZSAqL1xuICAgIGdldCB0eXBlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl90eXBlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHNldHMgdGhlIGZpbGUgdG8gYSB1cGxvYWRlZCBzdGF0ZVxuICAgICAqL1xuICAgIHNldFVwbG9hZGVkU3RhdGUoKSB7XG4gICAgICAgIHRoaXMuaXNVcGxvYWRlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuaXNVcGxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc0Vycm9yID0gZmFsc2U7XG4gICAgICAgIHRoaXMub25DaGFuZ2UuZW1pdCh0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzZXRzIHRoZSBmaWxlIHRvIGEgJ3VwbG9hZC1pbi1wcm9ncmVzcycgc3RhdGVcbiAgICAgKi9cbiAgICBzZXRVcGxvYWRpbmdTdGF0ZSgpIHtcbiAgICAgICAgdGhpcy5pc1VwbG9hZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNVcGxvYWRpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLmlzRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZS5lbWl0KHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHNldHMgdGhlIGZpbGUgdG8gYW4gZXJyb3Igc3RhdGVcbiAgICAgKi9cbiAgICBzZXRFcnJvclN0YXRlKCkge1xuICAgICAgICB0aGlzLmlzVXBsb2FkZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc1VwbG9hZGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzRXJyb3IgPSB0cnVlO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlLmVtaXQodGhpcyk7XG4gICAgfVxufVxuIl19