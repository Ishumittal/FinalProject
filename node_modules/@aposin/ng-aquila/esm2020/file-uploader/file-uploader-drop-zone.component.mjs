import { ChangeDetectionStrategy, Component, EventEmitter, HostListener, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
function exists(item) {
    return item != null;
}
export class NxFileUploaderDropZoneComponent {
    constructor(_cdr) {
        this._cdr = _cdr;
        /** An event emitted when files were dropped. */
        this.fileDropped = new EventEmitter();
        // flag when the drop zone is hovered
        this._active = false;
        this._disabled = false;
    }
    /** Whether the file uploader is disabled. */
    set disabled(value) {
        this._disabled = value;
        this._cdr.markForCheck();
    }
    get disabled() {
        return this._disabled;
    }
    /** @docs-private */
    onDrop(event) {
        event.preventDefault();
        if (this.disabled) {
            if (!event.dataTransfer) {
                return;
            }
            event.dataTransfer.dropEffect = 'no-drop'; // TODO wrog type: why do we do this? can we skip this?
        }
        else {
            if (!event.dataTransfer) {
                this.fileDropped.emit([]); // TODO shall we still emit if no data was transfered?
                return;
            }
            const { dataTransfer } = event;
            if (dataTransfer.items) {
                const files = Array.from(dataTransfer.items)
                    .map(item => item.getAsFile())
                    .filter(exists);
                dataTransfer.items.clear();
                this.fileDropped.emit(files);
            }
            else {
                const files = Array.from(dataTransfer.files);
                dataTransfer.clearData();
                this.fileDropped.emit(files);
            }
            this._active = false;
        }
    }
    /** @docs-private */
    onDragOver(event) {
        event.stopPropagation();
        event.preventDefault();
        if (this.disabled) {
            event.dataTransfer.dropEffect = 'none';
        }
        else {
            event.dataTransfer.dropEffect = 'copy';
            this._active = true;
            this._cdr.markForCheck();
        }
    }
    /** @docs-private */
    onDragLeave(event) {
        this._active = false;
        event.dataTransfer.dropEffect = 'none';
        this._cdr.markForCheck();
    }
    /** @docs-private */
    onDragEnd(event) {
        event.dataTransfer.dropEffect = 'none';
    }
    /** @docs-private */
    onDragStart(event) {
        if (this.disabled) {
            event.dataTransfer.dropEffect = 'none';
        }
        else {
            event.dataTransfer.dropEffect = 'copy';
        }
    }
    /** @docs-private */
    get active() {
        return this._active;
    }
}
NxFileUploaderDropZoneComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderDropZoneComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NxFileUploaderDropZoneComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxFileUploaderDropZoneComponent, selector: "nx-file-uploader-drop-zone", inputs: { disabled: "disabled" }, outputs: { fileDropped: "fileDropped" }, host: { listeners: { "drop": "onDrop($event)", "dragover": "onDragOver($event)", "dragleave": "onDragLeave($event)", "dragend": "onDragEnd($event)", "dragstart": "onDragStart($event)" }, properties: { "class.is-active": "active", "class.is-disabled": "disabled" } }, ngImport: i0, template: "<ng-content></ng-content>\n", styles: [":host ::ng-deep button{margin-bottom:16px}@media (min-width: 704px){:host{height:104px;border:1px dashed var(--file-uploader-drop-zone-border-color);align-items:center;justify-content:center;display:flex;color:var(--file-uploader-drop-zone-text-color)}:host.is-active{border-style:solid}:host.is-disabled{cursor:no-drop}:host ::ng-deep button{margin-bottom:0}}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxFileUploaderDropZoneComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-file-uploader-drop-zone', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[class.is-active]': 'active',
                        '[class.is-disabled]': 'disabled',
                    }, template: "<ng-content></ng-content>\n", styles: [":host ::ng-deep button{margin-bottom:16px}@media (min-width: 704px){:host{height:104px;border:1px dashed var(--file-uploader-drop-zone-border-color);align-items:center;justify-content:center;display:flex;color:var(--file-uploader-drop-zone-text-color)}:host.is-active{border-style:solid}:host.is-disabled{cursor:no-drop}:host ::ng-deep button{margin-bottom:0}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { fileDropped: [{
                type: Output
            }], disabled: [{
                type: Input
            }], onDrop: [{
                type: HostListener,
                args: ['drop', ['$event']]
            }], onDragOver: [{
                type: HostListener,
                args: ['dragover', ['$event']]
            }], onDragLeave: [{
                type: HostListener,
                args: ['dragleave', ['$event']]
            }], onDragEnd: [{
                type: HostListener,
                args: ['dragend', ['$event']]
            }], onDragStart: [{
                type: HostListener,
                args: ['dragstart', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,