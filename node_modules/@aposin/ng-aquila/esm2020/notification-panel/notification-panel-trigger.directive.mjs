import { Overlay } from '@angular/cdk/overlay';
import { Directive, Inject, InjectionToken, Input, Optional, Self } from '@angular/core';
import { take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@aposin/ng-aquila/overlay";
/** Injection token that determines the scroll handling while a notification-panel is open. */
export const NX_NOTIFICATION_PANEL_SCROLL_STRATEGY = new InjectionToken('nx-notification-panel-scroll-strategy');
/** @docs-private */
export function NX_NOTIFICATION_PANEL_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {
    return () => overlay.scrollStrategies.reposition();
}
/** @docs-private */
export const NX_NOTIFICATION_PANEL_SCROLL_STRATEGY_PROVIDER = {
    provide: NX_NOTIFICATION_PANEL_SCROLL_STRATEGY,
    useFactory: NX_NOTIFICATION_PANEL_SCROLL_STRATEGY_PROVIDER_FACTORY,
    deps: [Overlay],
};
const DEFAULT_CONFIG = {
    direction: 'bottom-start',
    fallbackOrientation: 'vertical',
    autoFocus: true,
    offset: 8,
};
export class NxNotificationPanelTriggerDirective {
    constructor(_nxOverlay, _element, _triggerButton, _defaultScrollStrategyFactory) {
        this._nxOverlay = _nxOverlay;
        this._element = _element;
        this._triggerButton = _triggerButton;
        this._defaultScrollStrategyFactory = _defaultScrollStrategyFactory;
        /** Strategy factory that will be used to handle scrolling while the notification-panel panel is open. */
        this._scrollStrategyFactory = this._defaultScrollStrategyFactory;
    }
    set notificationPanel(value) {
        this._panelTemplate = value;
    }
    get notificationPanel() {
        return this._panelTemplate;
    }
    open() {
        if (this._overlayRef) {
            return;
        }
        const config = { ...DEFAULT_CONFIG, scrollStrategy: this._scrollStrategyFactory(), triggerButton: this._triggerButton ?? undefined };
        this._overlayRef = this._nxOverlay.open(this._panelTemplate, this._element, config);
        this._overlayRef
            .afterClosed()
            .pipe(take(1))
            .subscribe(() => this.close());
    }
    close() {
        if (this._overlayRef) {
            this._overlayRef.close();
            this._overlayRef = null;
        }
    }
}
NxNotificationPanelTriggerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNotificationPanelTriggerDirective, deps: [{ token: i1.NxOverlayService }, { token: i0.ElementRef }, { token: i1.NxTriggerButton, optional: true, self: true }, { token: NX_NOTIFICATION_PANEL_SCROLL_STRATEGY }], target: i0.ɵɵFactoryTarget.Directive });
NxNotificationPanelTriggerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxNotificationPanelTriggerDirective, selector: "[nxNotificationPanelTriggerFor]", inputs: { notificationPanel: ["nxNotificationPanelTriggerFor", "notificationPanel"] }, host: { listeners: { "click": "open()" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNotificationPanelTriggerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[nxNotificationPanelTriggerFor]',
                    host: {
                        '(click)': 'open()',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i1.NxOverlayService }, { type: i0.ElementRef }, { type: i1.NxTriggerButton, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NX_NOTIFICATION_PANEL_SCROLL_STRATEGY]
                }] }]; }, propDecorators: { notificationPanel: [{
                type: Input,
                args: ['nxNotificationPanelTriggerFor']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLXBhbmVsLXRyaWdnZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctYXF1aWxhL3NyYy9ub3RpZmljYXRpb24tcGFuZWwvbm90aWZpY2F0aW9uLXBhbmVsLXRyaWdnZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQWtCLE1BQU0sc0JBQXNCLENBQUM7QUFDL0QsT0FBTyxFQUFFLFNBQVMsRUFBYyxNQUFNLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFlLE1BQU0sZUFBZSxDQUFDO0FBRWxILE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBRXRDLDhGQUE4RjtBQUM5RixNQUFNLENBQUMsTUFBTSxxQ0FBcUMsR0FBRyxJQUFJLGNBQWMsQ0FBdUIsdUNBQXVDLENBQUMsQ0FBQztBQUV2SSxvQkFBb0I7QUFDcEIsTUFBTSxVQUFVLHNEQUFzRCxDQUFDLE9BQWdCO0lBQ25GLE9BQU8sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxDQUFDO0FBQ3ZELENBQUM7QUFFRCxvQkFBb0I7QUFDcEIsTUFBTSxDQUFDLE1BQU0sOENBQThDLEdBQUc7SUFDMUQsT0FBTyxFQUFFLHFDQUFxQztJQUM5QyxVQUFVLEVBQUUsc0RBQXNEO0lBQ2xFLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQztDQUNsQixDQUFDO0FBRUYsTUFBTSxjQUFjLEdBQW9CO0lBQ3BDLFNBQVMsRUFBRSxjQUFjO0lBQ3pCLG1CQUFtQixFQUFFLFVBQVU7SUFDL0IsU0FBUyxFQUFFLElBQUk7SUFDZixNQUFNLEVBQUUsQ0FBQztDQUNaLENBQUM7QUFRRixNQUFNLE9BQU8sbUNBQW1DO0lBZTVDLFlBQ1ksVUFBNEIsRUFDNUIsUUFBaUMsRUFDYixjQUFzQyxFQUNYLDZCQUFtRDtRQUhsRyxlQUFVLEdBQVYsVUFBVSxDQUFrQjtRQUM1QixhQUFRLEdBQVIsUUFBUSxDQUF5QjtRQUNiLG1CQUFjLEdBQWQsY0FBYyxDQUF3QjtRQUNYLGtDQUE2QixHQUE3Qiw2QkFBNkIsQ0FBc0I7UUFQOUcseUdBQXlHO1FBQ2pHLDJCQUFzQixHQUFHLElBQUksQ0FBQyw2QkFBNkIsQ0FBQztJQU9qRSxDQUFDO0lBaEJKLElBQ0ksaUJBQWlCLENBQUMsS0FBdUI7UUFDekMsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7SUFDaEMsQ0FBQztJQUNELElBQUksaUJBQWlCO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUMvQixDQUFDO0lBWUQsSUFBSTtRQUNBLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNsQixPQUFPO1NBQ1Y7UUFDRCxNQUFNLE1BQU0sR0FBb0IsRUFBRSxHQUFHLGNBQWMsRUFBRSxjQUFjLEVBQUUsSUFBSSxDQUFDLHNCQUFzQixFQUFFLEVBQUUsYUFBYSxFQUFFLElBQUksQ0FBQyxjQUFjLElBQUksU0FBUyxFQUFFLENBQUM7UUFDdEosSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFdBQVc7YUFDWCxXQUFXLEVBQUU7YUFDYixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2IsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxLQUFLO1FBQ0QsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDekIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7U0FDM0I7SUFDTCxDQUFDOztnSUF2Q1EsbUNBQW1DLHVJQW1CaEMscUNBQXFDO29IQW5CeEMsbUNBQW1DOzJGQUFuQyxtQ0FBbUM7a0JBTi9DLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGlDQUFpQztvQkFDM0MsSUFBSSxFQUFFO3dCQUNGLFNBQVMsRUFBRSxRQUFRO3FCQUN0QjtpQkFDSjs7MEJBbUJRLFFBQVE7OzBCQUFJLElBQUk7OzBCQUNoQixNQUFNOzJCQUFDLHFDQUFxQzs0Q0FkN0MsaUJBQWlCO3NCQURwQixLQUFLO3VCQUFDLCtCQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE92ZXJsYXksIFNjcm9sbFN0cmF0ZWd5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbmplY3QsIEluamVjdGlvblRva2VuLCBJbnB1dCwgT3B0aW9uYWwsIFNlbGYsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOeE92ZXJsYXlDb25maWcsIE54T3ZlcmxheVJlZiwgTnhPdmVybGF5U2VydmljZSwgTnhUcmlnZ2VyQnV0dG9uIH0gZnJvbSAnQGFwb3Npbi9uZy1hcXVpbGEvb3ZlcmxheSc7XG5pbXBvcnQgeyB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG4vKiogSW5qZWN0aW9uIHRva2VuIHRoYXQgZGV0ZXJtaW5lcyB0aGUgc2Nyb2xsIGhhbmRsaW5nIHdoaWxlIGEgbm90aWZpY2F0aW9uLXBhbmVsIGlzIG9wZW4uICovXG5leHBvcnQgY29uc3QgTlhfTk9USUZJQ0FUSU9OX1BBTkVMX1NDUk9MTF9TVFJBVEVHWSA9IG5ldyBJbmplY3Rpb25Ub2tlbjwoKSA9PiBTY3JvbGxTdHJhdGVneT4oJ254LW5vdGlmaWNhdGlvbi1wYW5lbC1zY3JvbGwtc3RyYXRlZ3knKTtcblxuLyoqIEBkb2NzLXByaXZhdGUgKi9cbmV4cG9ydCBmdW5jdGlvbiBOWF9OT1RJRklDQVRJT05fUEFORUxfU0NST0xMX1NUUkFURUdZX1BST1ZJREVSX0ZBQ1RPUlkob3ZlcmxheTogT3ZlcmxheSk6ICgpID0+IFNjcm9sbFN0cmF0ZWd5IHtcbiAgICByZXR1cm4gKCkgPT4gb3ZlcmxheS5zY3JvbGxTdHJhdGVnaWVzLnJlcG9zaXRpb24oKTtcbn1cblxuLyoqIEBkb2NzLXByaXZhdGUgKi9cbmV4cG9ydCBjb25zdCBOWF9OT1RJRklDQVRJT05fUEFORUxfU0NST0xMX1NUUkFURUdZX1BST1ZJREVSID0ge1xuICAgIHByb3ZpZGU6IE5YX05PVElGSUNBVElPTl9QQU5FTF9TQ1JPTExfU1RSQVRFR1ksXG4gICAgdXNlRmFjdG9yeTogTlhfTk9USUZJQ0FUSU9OX1BBTkVMX1NDUk9MTF9TVFJBVEVHWV9QUk9WSURFUl9GQUNUT1JZLFxuICAgIGRlcHM6IFtPdmVybGF5XSxcbn07XG5cbmNvbnN0IERFRkFVTFRfQ09ORklHOiBOeE92ZXJsYXlDb25maWcgPSB7XG4gICAgZGlyZWN0aW9uOiAnYm90dG9tLXN0YXJ0JyxcbiAgICBmYWxsYmFja09yaWVudGF0aW9uOiAndmVydGljYWwnLFxuICAgIGF1dG9Gb2N1czogdHJ1ZSxcbiAgICBvZmZzZXQ6IDgsXG59O1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tueE5vdGlmaWNhdGlvblBhbmVsVHJpZ2dlckZvcl0nLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgJyhjbGljayknOiAnb3BlbigpJyxcbiAgICB9LFxufSlcbmV4cG9ydCBjbGFzcyBOeE5vdGlmaWNhdGlvblBhbmVsVHJpZ2dlckRpcmVjdGl2ZSB7XG4gICAgcHJpdmF0ZSBfcGFuZWxUZW1wbGF0ZSE6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgcHJpdmF0ZSBfb3ZlcmxheVJlZiE6IE54T3ZlcmxheVJlZjxhbnk+IHwgbnVsbDtcblxuICAgIEBJbnB1dCgnbnhOb3RpZmljYXRpb25QYW5lbFRyaWdnZXJGb3InKVxuICAgIHNldCBub3RpZmljYXRpb25QYW5lbCh2YWx1ZTogVGVtcGxhdGVSZWY8YW55Pikge1xuICAgICAgICB0aGlzLl9wYW5lbFRlbXBsYXRlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBub3RpZmljYXRpb25QYW5lbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhbmVsVGVtcGxhdGU7XG4gICAgfVxuXG4gICAgLyoqIFN0cmF0ZWd5IGZhY3RvcnkgdGhhdCB3aWxsIGJlIHVzZWQgdG8gaGFuZGxlIHNjcm9sbGluZyB3aGlsZSB0aGUgbm90aWZpY2F0aW9uLXBhbmVsIHBhbmVsIGlzIG9wZW4uICovXG4gICAgcHJpdmF0ZSBfc2Nyb2xsU3RyYXRlZ3lGYWN0b3J5ID0gdGhpcy5fZGVmYXVsdFNjcm9sbFN0cmF0ZWd5RmFjdG9yeTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIF9ueE92ZXJsYXk6IE54T3ZlcmxheVNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgX2VsZW1lbnQ6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICAgICBAT3B0aW9uYWwoKSBAU2VsZigpIHByaXZhdGUgX3RyaWdnZXJCdXR0b246IE54VHJpZ2dlckJ1dHRvbiB8IG51bGwsXG4gICAgICAgIEBJbmplY3QoTlhfTk9USUZJQ0FUSU9OX1BBTkVMX1NDUk9MTF9TVFJBVEVHWSkgcHJpdmF0ZSBfZGVmYXVsdFNjcm9sbFN0cmF0ZWd5RmFjdG9yeTogKCkgPT4gU2Nyb2xsU3RyYXRlZ3ksXG4gICAgKSB7fVxuXG4gICAgb3BlbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX292ZXJsYXlSZWYpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb25maWc6IE54T3ZlcmxheUNvbmZpZyA9IHsgLi4uREVGQVVMVF9DT05GSUcsIHNjcm9sbFN0cmF0ZWd5OiB0aGlzLl9zY3JvbGxTdHJhdGVneUZhY3RvcnkoKSwgdHJpZ2dlckJ1dHRvbjogdGhpcy5fdHJpZ2dlckJ1dHRvbiA/PyB1bmRlZmluZWQgfTtcbiAgICAgICAgdGhpcy5fb3ZlcmxheVJlZiA9IHRoaXMuX254T3ZlcmxheS5vcGVuKHRoaXMuX3BhbmVsVGVtcGxhdGUsIHRoaXMuX2VsZW1lbnQsIGNvbmZpZyk7XG4gICAgICAgIHRoaXMuX292ZXJsYXlSZWZcbiAgICAgICAgICAgIC5hZnRlckNsb3NlZCgpXG4gICAgICAgICAgICAucGlwZSh0YWtlKDEpKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB0aGlzLmNsb3NlKCkpO1xuICAgIH1cblxuICAgIGNsb3NlKCkge1xuICAgICAgICBpZiAodGhpcy5fb3ZlcmxheVJlZikge1xuICAgICAgICAgICAgdGhpcy5fb3ZlcmxheVJlZi5jbG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5fb3ZlcmxheVJlZiA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=