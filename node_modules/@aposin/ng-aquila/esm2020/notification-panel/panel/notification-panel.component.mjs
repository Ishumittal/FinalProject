import { FocusKeyManager } from '@angular/cdk/a11y';
import { Component, ContentChildren, TemplateRef, ViewChild } from '@angular/core';
import { merge, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { NxNotificationPanelItemComponent } from './../notification-item/notification-item.component';
import * as i0 from "@angular/core";
export class NxNotificationPanelComponent {
    constructor() {
        this._destroyed = new Subject();
    }
    ngAfterContentInit() {
        this._initKeyManager();
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
    _initKeyManager() {
        this._keyManager = new FocusKeyManager(this.items).withVerticalOrientation().withHorizontalOrientation('ltr');
        if (this.items.length > 0) {
            merge(...this.items.map(item => item.focused))
                .pipe(takeUntil(this._destroyed))
                .subscribe(item => {
                this._keyManager.updateActiveItem(item);
            });
        }
    }
    _handleKeydown(event) {
        this._keyManager.onKeydown(event);
    }
}
NxNotificationPanelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNotificationPanelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
NxNotificationPanelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxNotificationPanelComponent, selector: "nx-notification-panel", host: { listeners: { "keydown": "_handleKeydown($event)" }, properties: { "class.nx-notification-panel": "true" } }, queries: [{ propertyName: "items", predicate: NxNotificationPanelItemComponent, descendants: true }], viewQueries: [{ propertyName: "templateRef", first: true, predicate: TemplateRef, descendants: true }], exportAs: ["nxNotificationPanel"], ngImport: i0, template: "<ng-content></ng-content>\n", styles: [":host{padding:16px 24px;display:flex;flex-direction:column;background-color:var(--notification-panel-background-color);max-height:740px;height:100%;width:400px;overflow-y:auto;box-shadow:var(--shadow-large);border-radius:8px}:host:focus{outline:none}::ng-deep nx-notification-header{display:flex;justify-content:space-between;padding:16px 0 8px}::ng-deep nx-notification-header:first-child{padding-top:0}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNotificationPanelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-notification-panel', exportAs: 'nxNotificationPanel', host: {
                        '[class.nx-notification-panel]': 'true',
                        '(keydown)': '_handleKeydown($event)',
                    }, template: "<ng-content></ng-content>\n", styles: [":host{padding:16px 24px;display:flex;flex-direction:column;background-color:var(--notification-panel-background-color);max-height:740px;height:100%;width:400px;overflow-y:auto;box-shadow:var(--shadow-large);border-radius:8px}:host:focus{outline:none}::ng-deep nx-notification-header{display:flex;justify-content:space-between;padding:16px 0 8px}::ng-deep nx-notification-header:first-child{padding-top:0}\n"] }]
        }], propDecorators: { templateRef: [{
                type: ViewChild,
                args: [TemplateRef]
            }], items: [{
                type: ContentChildren,
                args: [NxNotificationPanelItemComponent, { descendants: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLXBhbmVsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWFxdWlsYS9zcmMvbm90aWZpY2F0aW9uLXBhbmVsL3BhbmVsL25vdGlmaWNhdGlvbi1wYW5lbC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1hcXVpbGEvc3JjL25vdGlmaWNhdGlvbi1wYW5lbC9wYW5lbC9ub3RpZmljYXRpb24tcGFuZWwuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3BELE9BQU8sRUFBb0IsU0FBUyxFQUFFLGVBQWUsRUFBd0IsV0FBVyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzSCxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0MsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sb0RBQW9ELENBQUM7O0FBWXRHLE1BQU0sT0FBTyw0QkFBNEI7SUFWekM7UUFrQnFCLGVBQVUsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO0tBMEJyRDtJQXhCRyxrQkFBa0I7UUFDZCxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVELFdBQVc7UUFDUCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUVPLGVBQWU7UUFDbkIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLGVBQWUsQ0FBbUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLHVCQUF1QixFQUFFLENBQUMseUJBQXlCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFaEosSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDdkIsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQ3pDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2lCQUNoQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM1QyxDQUFDLENBQUMsQ0FBQztTQUNWO0lBQ0wsQ0FBQztJQUVELGNBQWMsQ0FBQyxLQUFvQjtRQUMvQixJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QyxDQUFDOzt5SEFqQ1EsNEJBQTRCOzZHQUE1Qiw0QkFBNEIsd01BSXBCLGdDQUFnQyw2RkFIdEMsV0FBVyxtRkNsQjFCLDZCQUNBOzJGRGdCYSw0QkFBNEI7a0JBVnhDLFNBQVM7K0JBQ0ksdUJBQXVCLFlBR3ZCLHFCQUFxQixRQUN6Qjt3QkFDRiwrQkFBK0IsRUFBRSxNQUFNO3dCQUN2QyxXQUFXLEVBQUUsd0JBQXdCO3FCQUN4Qzs4QkFJRCxXQUFXO3NCQURWLFNBQVM7dUJBQUMsV0FBVztnQkFHb0QsS0FBSztzQkFBOUUsZUFBZTt1QkFBQyxnQ0FBZ0MsRUFBRSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb2N1c0tleU1hbmFnZXIgfSBmcm9tICdAYW5ndWxhci9jZGsvYTExeSc7XG5pbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBDb21wb25lbnQsIENvbnRlbnRDaGlsZHJlbiwgT25EZXN0cm95LCBRdWVyeUxpc3QsIFRlbXBsYXRlUmVmLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IG1lcmdlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IE54Tm90aWZpY2F0aW9uUGFuZWxJdGVtQ29tcG9uZW50IH0gZnJvbSAnLi8uLi9ub3RpZmljYXRpb24taXRlbS9ub3RpZmljYXRpb24taXRlbS5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ254LW5vdGlmaWNhdGlvbi1wYW5lbCcsXG4gICAgdGVtcGxhdGVVcmw6ICdub3RpZmljYXRpb24tcGFuZWwuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL25vdGlmaWNhdGlvbi1wYW5lbC5jb21wb25lbnQuc2NzcyddLFxuICAgIGV4cG9ydEFzOiAnbnhOb3RpZmljYXRpb25QYW5lbCcsXG4gICAgaG9zdDoge1xuICAgICAgICAnW2NsYXNzLm54LW5vdGlmaWNhdGlvbi1wYW5lbF0nOiAndHJ1ZScsXG4gICAgICAgICcoa2V5ZG93biknOiAnX2hhbmRsZUtleWRvd24oJGV2ZW50KScsXG4gICAgfSxcbn0pXG5leHBvcnQgY2xhc3MgTnhOb3RpZmljYXRpb25QYW5lbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSwgQWZ0ZXJDb250ZW50SW5pdCB7XG4gICAgQFZpZXdDaGlsZChUZW1wbGF0ZVJlZilcbiAgICB0ZW1wbGF0ZVJlZiE6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgICBAQ29udGVudENoaWxkcmVuKE54Tm90aWZpY2F0aW9uUGFuZWxJdGVtQ29tcG9uZW50LCB7IGRlc2NlbmRhbnRzOiB0cnVlIH0pIGl0ZW1zITogUXVlcnlMaXN0PE54Tm90aWZpY2F0aW9uUGFuZWxJdGVtQ29tcG9uZW50PjtcblxuICAgIHByaXZhdGUgX2tleU1hbmFnZXIhOiBGb2N1c0tleU1hbmFnZXI8TnhOb3RpZmljYXRpb25QYW5lbEl0ZW1Db21wb25lbnQ+O1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBfZGVzdHJveWVkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICAgICAgdGhpcy5faW5pdEtleU1hbmFnZXIoKTtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fZGVzdHJveWVkLm5leHQoKTtcbiAgICAgICAgdGhpcy5fZGVzdHJveWVkLmNvbXBsZXRlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfaW5pdEtleU1hbmFnZXIoKSB7XG4gICAgICAgIHRoaXMuX2tleU1hbmFnZXIgPSBuZXcgRm9jdXNLZXlNYW5hZ2VyPE54Tm90aWZpY2F0aW9uUGFuZWxJdGVtQ29tcG9uZW50Pih0aGlzLml0ZW1zKS53aXRoVmVydGljYWxPcmllbnRhdGlvbigpLndpdGhIb3Jpem9udGFsT3JpZW50YXRpb24oJ2x0cicpO1xuXG4gICAgICAgIGlmICh0aGlzLml0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIG1lcmdlKC4uLnRoaXMuaXRlbXMubWFwKGl0ZW0gPT4gaXRlbS5mb2N1c2VkKSlcbiAgICAgICAgICAgICAgICAucGlwZSh0YWtlVW50aWwodGhpcy5fZGVzdHJveWVkKSlcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKGl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXlNYW5hZ2VyLnVwZGF0ZUFjdGl2ZUl0ZW0oaXRlbSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfaGFuZGxlS2V5ZG93bihldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICB0aGlzLl9rZXlNYW5hZ2VyLm9uS2V5ZG93bihldmVudCk7XG4gICAgfVxufVxuIiwiPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuIl19