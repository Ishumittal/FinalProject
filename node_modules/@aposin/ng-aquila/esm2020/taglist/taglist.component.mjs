import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, forwardRef, Input, Output, ViewChildren, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { NxTagComponent } from './tag.component';
import * as i0 from "@angular/core";
import * as i1 from "./tag.component";
import * as i2 from "@angular/common";
export class NxTaglistComponent {
    constructor(_cdr) {
        this._cdr = _cdr;
        /** An event is dispatched each time when the list of tags changed. */
        this.tagsChange = new EventEmitter();
        /** An event is dispatched each time when a tag is clicked. */
        this.tagClickEvent = new EventEmitter();
        this._tags = [];
        this._tabindex = -1;
        this._allowTagDeletion = true;
        this._isKeywordList = false;
        this._labelProperty = 'nxTaglistLabel';
        this._valueFormatterFn = value => value;
        this._onChange = () => { };
        this._onTouched = () => { };
    }
    /** Sets the list of tags. */
    set tags(value) {
        this._tags = value;
        this._cdr.markForCheck();
    }
    get tags() {
        return this._tags;
    }
    /** Sets the tabindex of the contained tags. Default value: -1. */
    set tabindex(value) {
        this._tabindex = coerceNumberProperty(value);
        this._cdr.markForCheck();
    }
    get tabindex() {
        return this.allowTagDeletion ? 0 : this._tabindex;
    }
    /** Whether the tags can be removed from the list. Default: true. */
    set allowTagDeletion(value) {
        this._allowTagDeletion = coerceBooleanProperty(value);
        this._cdr.markForCheck();
    }
    get allowTagDeletion() {
        return this._allowTagDeletion;
    }
    /** Whether the tags can be styled as keywords. */
    set isKeywordList(value) {
        this._isKeywordList = coerceBooleanProperty(value);
        this._cdr.markForCheck();
    }
    get isKeywordList() {
        return this._isKeywordList;
    }
    /** Sets the label property, in case tags represent objects. */
    set labelProp(value) {
        if (this._labelProperty !== value) {
            this._labelProperty = value;
            this._cdr.markForCheck();
        }
    }
    get labelProp() {
        return this._labelProperty;
    }
    /** Sets the label property to improve accessibility. */
    set labelledby(value) {
        if (this._ariaLabelledBy !== value) {
            this._ariaLabelledBy = value;
            this._cdr.markForCheck();
        }
    }
    get labelledby() {
        return this._ariaLabelledBy;
    }
    /** Sets the customization function for tag value.  */
    set valueFormatter(fn) {
        this._valueFormatterFn = fn;
        this._cdr.markForCheck();
    }
    get valueFormatter() {
        return this._valueFormatterFn;
    }
    /** Allows to delete a tag given index. Takes index of the tag to be deleted as a parameter */
    delete(index, value) {
        if (this.allowTagDeletion) {
            this.tags = [...this.tags.slice(0, index), ...this.tags.slice(index + 1)];
            // focus next element after deletion
            if (this.tagChildren.toArray()[index + 1]) {
                this.tagChildren.toArray()[index + 1].nativeElement.focus();
            }
            this._onChange(this.tags);
            this.tagsChange.emit(this.tags);
        }
    }
    /** Allows to add a tag. Takes tag object as an input */
    addTag(tag) {
        if (!tag) {
            return;
        }
        // make sure tag is either string or has the configured label prop and is not yet in the list
        if ((typeof tag === 'string' && !this.tags.includes(tag)) ||
            (tag[this.labelProp] && this.tags.filter(t => t[this.labelProp] === tag[this.labelProp]).length < 1)) {
            this.tags = [...this.tags, tag];
            this._onChange(this.tags);
            this.tagsChange.emit(this.tags);
        }
    }
    /** Allows to clear the tag list. */
    clearTags() {
        this.tags = [];
        this._onChange(this.tags);
        this.tagsChange.emit(this.tags);
    }
    /** @docs-private */
    writeValue(tags) {
        this.tags = tags;
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /** @docs-private */
    renderTag(tag) {
        const tagStr = typeof tag === 'string' ? tag : tag[this.labelProp];
        return this.valueFormatter(tagStr);
    }
    /** @docs-private */
    tagClick(index, value) {
        this.tagClickEvent.emit(this.tags[index]);
    }
}
NxTaglistComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTaglistComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NxTaglistComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxTaglistComponent, selector: "nx-taglist", inputs: { tags: ["nxTags", "tags"], tabindex: "tabindex", allowTagDeletion: ["nxAllowTagDeletion", "allowTagDeletion"], isKeywordList: ["nxIsKeywordList", "isKeywordList"], labelProp: ["nxLabelProperty", "labelProp"], labelledby: ["aria-labelledby", "labelledby"], valueFormatter: ["nxValueFormatter", "valueFormatter"] }, outputs: { tagsChange: "nxTagsChange", tagClickEvent: "nxTagClick" }, host: { properties: { "class.nx-taglist--keyword": "isKeywordList", "attr.aria-labelledby": "labelledby || null", "attr.tabindex": "-1" } }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => NxTaglistComponent),
            multi: true,
        },
    ], viewQueries: [{ propertyName: "tagChildren", predicate: NxTagComponent, descendants: true, read: ElementRef }], ngImport: i0, template: "<ul class=\"nx-taglist\" *ngIf=\"tags.length > 0\">\n    <li class=\"nx-taglist__list-item\" tabindex=\"-1\" *ngFor=\"let tag of tags; let i = index\">\n        <nx-tag\n            [value]=\"renderTag(tag)\"\n            [removable]=\"allowTagDeletion\"\n            [tabindex]=\"tabindex\"\n            (clicked)=\"tagClick(i, $event)\"\n            (removed)=\"delete(i, $event)\"\n        ></nx-tag>\n    </li>\n</ul>\n<ng-content *ngIf=\"tags.length < 1\"></ng-content>\n", styles: [":host{position:relative;min-height:32px;display:flex;justify-content:space-between}:host:focus{outline:none}.nx-taglist{display:flex;flex-wrap:wrap}.nx-taglist__list-item{list-style:none;margin-right:12px;margin-bottom:12px;flex-wrap:wrap;display:flex}:host-context([dir=rtl]) .nx-taglist__list-item{margin-right:0;margin-right:initial;margin-left:12px}@media (max-width: 703px){.nx-taglist--keyword{justify-content:center}}\n"], components: [{ type: i1.NxTagComponent, selector: "nx-tag", inputs: ["removable", "tabindex", "value"], outputs: ["clicked", "removed"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTaglistComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-taglist', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => NxTaglistComponent),
                            multi: true,
                        },
                    ], host: {
                        '[class.nx-taglist--keyword]': 'isKeywordList',
                        '[attr.aria-labelledby]': 'labelledby || null',
                        '[attr.tabindex]': '-1',
                    }, template: "<ul class=\"nx-taglist\" *ngIf=\"tags.length > 0\">\n    <li class=\"nx-taglist__list-item\" tabindex=\"-1\" *ngFor=\"let tag of tags; let i = index\">\n        <nx-tag\n            [value]=\"renderTag(tag)\"\n            [removable]=\"allowTagDeletion\"\n            [tabindex]=\"tabindex\"\n            (clicked)=\"tagClick(i, $event)\"\n            (removed)=\"delete(i, $event)\"\n        ></nx-tag>\n    </li>\n</ul>\n<ng-content *ngIf=\"tags.length < 1\"></ng-content>\n", styles: [":host{position:relative;min-height:32px;display:flex;justify-content:space-between}:host:focus{outline:none}.nx-taglist{display:flex;flex-wrap:wrap}.nx-taglist__list-item{list-style:none;margin-right:12px;margin-bottom:12px;flex-wrap:wrap;display:flex}:host-context([dir=rtl]) .nx-taglist__list-item{margin-right:0;margin-right:initial;margin-left:12px}@media (max-width: 703px){.nx-taglist--keyword{justify-content:center}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { tagsChange: [{
                type: Output,
                args: ['nxTagsChange']
            }], tagClickEvent: [{
                type: Output,
                args: ['nxTagClick']
            }], tagChildren: [{
                type: ViewChildren,
                args: [NxTagComponent, { read: ElementRef }]
            }], tags: [{
                type: Input,
                args: ['nxTags']
            }], tabindex: [{
                type: Input
            }], allowTagDeletion: [{
                type: Input,
                args: ['nxAllowTagDeletion']
            }], isKeywordList: [{
                type: Input,
                args: ['nxIsKeywordList']
            }], labelProp: [{
                type: Input,
                args: ['nxLabelProperty']
            }], labelledby: [{
                type: Input,
                args: ['aria-labelledby']
            }], valueFormatter: [{
                type: Input,
                args: ['nxValueFormatter']
            }] } });
//# sourceMappingURL=data:application/json;base64,