import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ChangeDetectionStrategy, Component, ContentChildren, HostListener, Input, } from '@angular/core';
import { merge, Subject } from 'rxjs';
import { delay, takeUntil, throttleTime } from 'rxjs/operators';
import { NxWordComponent } from './word.component';
import * as i0 from "@angular/core";
const DEFAULT_SIZE = 'large';
export class NxNaturalLanguageFormComponent {
    constructor(_cdr, _ngZone) {
        this._cdr = _cdr;
        this._ngZone = _ngZone;
        this._negative = false;
        /** @docs-private */
        this.resizeEvent$ = new Subject();
        /** @docs-private */
        this._size = DEFAULT_SIZE;
        this._destroyed = new Subject();
        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however
        // if the consumer is using `zone-patch-rxjs`, the call throws `Maximum call stack size exceeded` error.
        this._ngZone.runOutsideAngular(() => {
            this._ngZone.onStable.pipe(takeUntil(this._destroyed)).subscribe(() => {
                // wait until all elements are stable for repositioning popovers
                this.updatePositionPopovers();
            });
        });
    }
    /** Whether the negative set of stylings should be used. */
    set negative(value) {
        this._negative = coerceBooleanProperty(value);
    }
    get negative() {
        return this._negative;
    }
    /**
     * Sets the size of the NLF. Default value: large
     */
    set size(value) {
        this._size = value;
        this._cdr.markForCheck();
    }
    get size() {
        return this._size;
    }
    /** @docs-private */
    onResize(event) {
        this.resizeEvent$.next();
    }
    ngAfterContentInit() {
        // Collect all words and listen for changes so we can update any open error popover
        // which would otherwise get wrongly positioned.
        const subjects = this._words.map((word) => word.inputChanges);
        const source = merge(...subjects);
        source.pipe(takeUntil(this._destroyed)).subscribe(() => {
            this.updatePositionPopovers();
        });
        this.resizeObservable = this.resizeEvent$.pipe(throttleTime(500), delay(100));
        this.resizeObservable.pipe(takeUntil(this._destroyed)).subscribe(() => this.resizeWords());
    }
    /** @docs-private */
    resizeWords() {
        this._words.forEach((word) => {
            word.updateCurrentTextWidth();
        });
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
    /** @docs-private */
    updatePositionPopovers() {
        if (this._words) {
            this._words.forEach((word) => {
                word.repositionError();
            });
        }
    }
}
NxNaturalLanguageFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNaturalLanguageFormComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
NxNaturalLanguageFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxNaturalLanguageFormComponent, selector: "nx-natural-language-form", inputs: { negative: ["nxNegative", "negative"], size: "size" }, host: { listeners: { "window:orientationchange": "onResize($event)", "window:resize": "onResize($event)" }, properties: { "class.is-negative": "negative", "class.nx-natural-language-form--small": "size === \"small\"", "class.nx-natural-language-form--large": "size === \"large\"" } }, queries: [{ propertyName: "_words", predicate: NxWordComponent }], ngImport: i0, template: "<div class=\"nx-natural-language-form__wrapper\">\n    <ng-content></ng-content>\n</div>\n", styles: [":host{display:block;font-size:var(--natural-language-form-large-font-size);line-height:var(--natural-language-form-large-line-height);font-weight:var(--natural-language-form-large-font-weight);letter-spacing:var(--natural-language-form-large-letter-spacing);color:var(--natural-language-form-text-color);padding-top:72px;padding-bottom:80px}:host ::ng-deep .c-input{font-size:inherit;line-height:inherit}:host ::ng-deep nx-word+nx-word{margin-left:2px}[dir=rtl] :host ::ng-deep nx-word+nx-word{margin-right:2px;margin-left:0;margin-left:initial}:host.is-negative{color:var(--negative)}@media (max-width: 991px){:host{font-size:var(--natural-language-form-small-font-size);line-height:var(--natural-language-form-small-line-height);font-weight:var(--natural-language-form-small-font-weight);letter-spacing:var(--natural-language-form-small-letter-spacing)}}.nx-natural-language-form__wrapper{display:flex;flex-wrap:wrap}.nx-natural-language-form__wrapper>::ng-deep *{margin-bottom:8px}:host(.nx-natural-language-form--small){font-size:var(--natural-language-form-small-font-size);line-height:var(--natural-language-form-small-line-height);font-weight:var(--natural-language-form-small-font-weight);letter-spacing:var(--natural-language-form-small-letter-spacing)}:host(.nx-natural-language-form--small) ::ng-deep .c-input{font-size:inherit;line-height:inherit}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxNaturalLanguageFormComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-natural-language-form', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[class.is-negative]': 'negative',
                        '[class.nx-natural-language-form--small]': 'size === "small"',
                        '[class.nx-natural-language-form--large]': 'size === "large"',
                    }, template: "<div class=\"nx-natural-language-form__wrapper\">\n    <ng-content></ng-content>\n</div>\n", styles: [":host{display:block;font-size:var(--natural-language-form-large-font-size);line-height:var(--natural-language-form-large-line-height);font-weight:var(--natural-language-form-large-font-weight);letter-spacing:var(--natural-language-form-large-letter-spacing);color:var(--natural-language-form-text-color);padding-top:72px;padding-bottom:80px}:host ::ng-deep .c-input{font-size:inherit;line-height:inherit}:host ::ng-deep nx-word+nx-word{margin-left:2px}[dir=rtl] :host ::ng-deep nx-word+nx-word{margin-right:2px;margin-left:0;margin-left:initial}:host.is-negative{color:var(--negative)}@media (max-width: 991px){:host{font-size:var(--natural-language-form-small-font-size);line-height:var(--natural-language-form-small-line-height);font-weight:var(--natural-language-form-small-font-weight);letter-spacing:var(--natural-language-form-small-letter-spacing)}}.nx-natural-language-form__wrapper{display:flex;flex-wrap:wrap}.nx-natural-language-form__wrapper>::ng-deep *{margin-bottom:8px}:host(.nx-natural-language-form--small){font-size:var(--natural-language-form-small-font-size);line-height:var(--natural-language-form-small-line-height);font-weight:var(--natural-language-form-small-font-weight);letter-spacing:var(--natural-language-form-small-letter-spacing)}:host(.nx-natural-language-form--small) ::ng-deep .c-input{font-size:inherit;line-height:inherit}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.NgZone }]; }, propDecorators: { _words: [{
                type: ContentChildren,
                args: [NxWordComponent]
            }], negative: [{
                type: Input,
                args: ['nxNegative']
            }], size: [{
                type: Input
            }], onResize: [{
                type: HostListener,
                args: ['window:orientationchange', ['$event']]
            }, {
                type: HostListener,
                args: ['window:resize', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,