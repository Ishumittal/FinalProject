import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
const DEFAULT_TYPE = 'normal';
export class NxCopytextComponent {
    constructor() {
        this._classNames = '';
        /** @docs-private */
        this.type = DEFAULT_TYPE;
        /** @docs-private */
        this.negative = false;
    }
    /**
     * Sets the type and whether the negative set of styling should be used.
     *
     * You can combine the values of type NxCopytextType and 'negative'.
     *
     * Default type: 'normal'
     */
    set classNames(value) {
        if (this._classNames === value) {
            return;
        }
        this._classNames = value;
        // TODO kick null safe-guards after setter value or any calling input values are properly coerced as string
        const [type = null] = this._classNames?.match(/small|medium|normal|large/) ?? [DEFAULT_TYPE];
        this.type = type;
        this.negative = !!this._classNames?.match(/negative/);
    }
    get classNames() {
        return this._classNames;
    }
}
NxCopytextComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxCopytextComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
NxCopytextComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxCopytextComponent, selector: "[nxCopytext]", inputs: { classNames: ["nxCopytext", "classNames"] }, host: { properties: { "class.nx-copy": "true", "class.nx-copy--small": "type === \"small\"", "class.nx-copy--medium": "type === \"medium\"", "class.nx-copy--normal": "type === \"normal\"", "class.nx-copy--large": "type === \"large\"", "class.nx-copy--negative": "negative" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, styles: [":host{margin:0;font-size:var(--paragraph-03-font-size);line-height:var(--paragraph-03-line-height);font-weight:var(--paragraph-03-font-weight);letter-spacing:var(--paragraph-03-letter-spacing)}:host.nx-copy.nx-copy{font-weight:400}:host(.nx-copy--negative){color:var(--negative)}:host(.nx-copy--small){font-size:var(--paragraph-05-font-size);line-height:var(--paragraph-05-line-height);font-weight:var(--paragraph-05-font-weight);letter-spacing:var(--paragraph-05-letter-spacing)}:host(.nx-copy--medium){font-size:var(--paragraph-04-font-size);line-height:var(--paragraph-04-line-height);font-weight:var(--paragraph-04-font-weight);letter-spacing:var(--paragraph-04-letter-spacing)}:host(.nx-copy--large){font-size:var(--paragraph-02-font-size);line-height:var(--paragraph-02-line-height);font-weight:var(--paragraph-02-font-weight);letter-spacing:var(--paragraph-02-letter-spacing)}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxCopytextComponent, decorators: [{
            type: Component,
            args: [{ selector: '[nxCopytext]', template: `<ng-content></ng-content>`, changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[class.nx-copy]': 'true',
                        '[class.nx-copy--small]': 'type === "small"',
                        '[class.nx-copy--medium]': 'type === "medium"',
                        '[class.nx-copy--normal]': 'type === "normal"',
                        '[class.nx-copy--large]': 'type === "large"',
                        '[class.nx-copy--negative]': 'negative',
                    }, styles: [":host{margin:0;font-size:var(--paragraph-03-font-size);line-height:var(--paragraph-03-line-height);font-weight:var(--paragraph-03-font-weight);letter-spacing:var(--paragraph-03-letter-spacing)}:host.nx-copy.nx-copy{font-weight:400}:host(.nx-copy--negative){color:var(--negative)}:host(.nx-copy--small){font-size:var(--paragraph-05-font-size);line-height:var(--paragraph-05-line-height);font-weight:var(--paragraph-05-font-weight);letter-spacing:var(--paragraph-05-letter-spacing)}:host(.nx-copy--medium){font-size:var(--paragraph-04-font-size);line-height:var(--paragraph-04-line-height);font-weight:var(--paragraph-04-font-weight);letter-spacing:var(--paragraph-04-letter-spacing)}:host(.nx-copy--large){font-size:var(--paragraph-02-font-size);line-height:var(--paragraph-02-line-height);font-weight:var(--paragraph-02-font-weight);letter-spacing:var(--paragraph-02-letter-spacing)}\n"] }]
        }], propDecorators: { classNames: [{
                type: Input,
                args: ['nxCopytext']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29weXRleHQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctYXF1aWxhL3NyYy9jb3B5dGV4dC9jb3B5dGV4dC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSzFFLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQztBQWdCOUIsTUFBTSxPQUFPLG1CQUFtQjtJQWRoQztRQWVZLGdCQUFXLEdBQUcsRUFBRSxDQUFDO1FBRXpCLG9CQUFvQjtRQUNwQixTQUFJLEdBQW1CLFlBQVksQ0FBQztRQUVwQyxvQkFBb0I7UUFDcEIsYUFBUSxHQUFHLEtBQUssQ0FBQztLQTBCcEI7SUF4Qkc7Ozs7OztPQU1HO0lBQ0gsSUFDSSxVQUFVLENBQUMsS0FBYTtRQUN4QixJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssS0FBSyxFQUFFO1lBQzVCLE9BQU87U0FDVjtRQUNELElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBRXpCLDJHQUEyRztRQUMzRyxNQUFNLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLDJCQUEyQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUM3RixJQUFJLENBQUMsSUFBSSxHQUFHLElBQXNCLENBQUM7UUFFbkMsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVELElBQUksVUFBVTtRQUNWLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUM1QixDQUFDOztnSEFoQ1EsbUJBQW1CO29HQUFuQixtQkFBbUIsZ1lBWGxCLDJCQUEyQjsyRkFXNUIsbUJBQW1CO2tCQWQvQixTQUFTOytCQUNJLGNBQWMsWUFFZCwyQkFBMkIsbUJBQ3BCLHVCQUF1QixDQUFDLE1BQU0sUUFDekM7d0JBQ0YsaUJBQWlCLEVBQUUsTUFBTTt3QkFDekIsd0JBQXdCLEVBQUUsa0JBQWtCO3dCQUM1Qyx5QkFBeUIsRUFBRSxtQkFBbUI7d0JBQzlDLHlCQUF5QixFQUFFLG1CQUFtQjt3QkFDOUMsd0JBQXdCLEVBQUUsa0JBQWtCO3dCQUM1QywyQkFBMkIsRUFBRSxVQUFVO3FCQUMxQzs4QkFtQkcsVUFBVTtzQkFEYixLQUFLO3VCQUFDLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKiogQSB0eXBlIHRoYXQgc3BlY2lmaWVzIHRoZSBmb250IHNpemUgb2YgYSBjb3B5dGV4dC4gKi9cbmV4cG9ydCB0eXBlIE54Q29weXRleHRUeXBlID0gJ3NtYWxsJyB8ICdtZWRpdW0nIHwgJ25vcm1hbCcgfCAnbGFyZ2UnO1xuXG5jb25zdCBERUZBVUxUX1RZUEUgPSAnbm9ybWFsJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdbbnhDb3B5dGV4dF0nLFxuICAgIHN0eWxlVXJsczogWydjb3B5dGV4dC5jb21wb25lbnQuc2NzcyddLFxuICAgIHRlbXBsYXRlOiBgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PmAsXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgaG9zdDoge1xuICAgICAgICAnW2NsYXNzLm54LWNvcHldJzogJ3RydWUnLFxuICAgICAgICAnW2NsYXNzLm54LWNvcHktLXNtYWxsXSc6ICd0eXBlID09PSBcInNtYWxsXCInLFxuICAgICAgICAnW2NsYXNzLm54LWNvcHktLW1lZGl1bV0nOiAndHlwZSA9PT0gXCJtZWRpdW1cIicsXG4gICAgICAgICdbY2xhc3MubngtY29weS0tbm9ybWFsXSc6ICd0eXBlID09PSBcIm5vcm1hbFwiJyxcbiAgICAgICAgJ1tjbGFzcy5ueC1jb3B5LS1sYXJnZV0nOiAndHlwZSA9PT0gXCJsYXJnZVwiJyxcbiAgICAgICAgJ1tjbGFzcy5ueC1jb3B5LS1uZWdhdGl2ZV0nOiAnbmVnYXRpdmUnLFxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIE54Q29weXRleHRDb21wb25lbnQge1xuICAgIHByaXZhdGUgX2NsYXNzTmFtZXMgPSAnJztcblxuICAgIC8qKiBAZG9jcy1wcml2YXRlICovXG4gICAgdHlwZTogTnhDb3B5dGV4dFR5cGUgPSBERUZBVUxUX1RZUEU7XG5cbiAgICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICAgIG5lZ2F0aXZlID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB0eXBlIGFuZCB3aGV0aGVyIHRoZSBuZWdhdGl2ZSBzZXQgb2Ygc3R5bGluZyBzaG91bGQgYmUgdXNlZC5cbiAgICAgKlxuICAgICAqIFlvdSBjYW4gY29tYmluZSB0aGUgdmFsdWVzIG9mIHR5cGUgTnhDb3B5dGV4dFR5cGUgYW5kICduZWdhdGl2ZScuXG4gICAgICpcbiAgICAgKiBEZWZhdWx0IHR5cGU6ICdub3JtYWwnXG4gICAgICovXG4gICAgQElucHV0KCdueENvcHl0ZXh0JylcbiAgICBzZXQgY2xhc3NOYW1lcyh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIGlmICh0aGlzLl9jbGFzc05hbWVzID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NsYXNzTmFtZXMgPSB2YWx1ZTtcblxuICAgICAgICAvLyBUT0RPIGtpY2sgbnVsbCBzYWZlLWd1YXJkcyBhZnRlciBzZXR0ZXIgdmFsdWUgb3IgYW55IGNhbGxpbmcgaW5wdXQgdmFsdWVzIGFyZSBwcm9wZXJseSBjb2VyY2VkIGFzIHN0cmluZ1xuICAgICAgICBjb25zdCBbdHlwZSA9IG51bGxdID0gdGhpcy5fY2xhc3NOYW1lcz8ubWF0Y2goL3NtYWxsfG1lZGl1bXxub3JtYWx8bGFyZ2UvKSA/PyBbREVGQVVMVF9UWVBFXTtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZSBhcyBOeENvcHl0ZXh0VHlwZTtcblxuICAgICAgICB0aGlzLm5lZ2F0aXZlID0gISF0aGlzLl9jbGFzc05hbWVzPy5tYXRjaCgvbmVnYXRpdmUvKTtcbiAgICB9XG5cbiAgICBnZXQgY2xhc3NOYW1lcygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xhc3NOYW1lcztcbiAgICB9XG59XG4iXX0=