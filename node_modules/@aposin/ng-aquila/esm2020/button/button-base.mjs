import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Directive, HostBinding, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/a11y";
const DEFAULT_SIZE = 'medium';
const DEFAULT_TYPE = 'primary';
/** @docs-private */
export class NxButtonBase {
    constructor(_cdr, _elementRef, _focusMonitor) {
        this._cdr = _cdr;
        this._elementRef = _elementRef;
        this._focusMonitor = _focusMonitor;
        this._classNames = '';
        /** @docs-private */
        this.type = DEFAULT_TYPE;
        /** @docs-private */
        this.size = DEFAULT_SIZE;
        this.danger = false;
        this.negative = false;
        this.block = false;
        this.active = false;
        this._disabled = false;
        this._focusMonitor.monitor(this._elementRef);
    }
    /** @docs-private */
    get isPrimary() {
        return this.type === 'primary';
    }
    /** @docs-private */
    get isSecondary() {
        return this.type === 'secondary';
    }
    /** @docs-private */
    get isTertiary() {
        return this.type === 'tertiary';
    }
    /** @docs-private */
    get isCta() {
        return this.type === 'cta';
    }
    /** @docs-private */
    get isEmphasis() {
        return this.type === 'emphasis';
    }
    /** @docs-private */
    get isLarge() {
        return this.size === 'large';
    }
    /** @docs-private */
    get isMedium() {
        return this.size === 'medium';
    }
    /** @docs-private */
    get isSmallMedium() {
        return this.size === 'small-medium';
    }
    /** @docs-private */
    get isSmall() {
        return this.size === 'small';
    }
    /** @docs-private */
    get isDanger() {
        return this.danger;
    }
    /** @docs-private */
    get isBlock() {
        return this.block;
    }
    /** @docs-private */
    get isNegative() {
        return this.negative;
    }
    /** @docs-private */
    get isDisabled() {
        return this.disabled || null;
    }
    /** @docs-private */
    get isAriaDisabled() {
        return this.disabled.toString();
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
    }
    get disabled() {
        return this._disabled;
    }
    ngOnDestroy() {
        this._focusMonitor.stopMonitoring(this._elementRef);
    }
    set classNames(value) {
        if (this._classNames === value) {
            return;
        }
        this._classNames = value;
        // TODO kick null safeguards after setter value is properly coerced
        const [type = null] = this._classNames?.match(/primary|secondary|tertiary|cta|emphasis/) ?? [DEFAULT_TYPE];
        this.type = type;
        const [size = null] = this._classNames?.match(/small-medium|small|medium|large/) ?? [DEFAULT_SIZE];
        this.size = size;
        this.danger = !!this._classNames?.includes('danger');
        this.negative = !!this._classNames?.includes('negative');
        this.block = !!this._classNames?.includes('block');
        this._cdr.markForCheck();
    }
    get classNames() {
        return this._classNames;
    }
    /**
     * @docs-private
     * getter used for the modal component as a quickfix
     * since button got changed from directive to component the reference used by the ngOpenModelOnClick directive
     * for nxButtons is a reference to component instance instead of an element reference. As a workaround we need a
     * way to reach the elementRef of the component until the modal gets refactored.
     */
    get elementRef() {
        return this._elementRef;
    }
    setTriggerActive() {
        this.active = true;
        this._cdr.markForCheck();
    }
    setTriggerInactive() {
        this.active = false;
        this._cdr.markForCheck();
    }
}
NxButtonBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxButtonBase, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Directive });
NxButtonBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxButtonBase, inputs: { disabled: "disabled" }, host: { properties: { "class.nx-button--primary": "this.isPrimary", "class.nx-button--secondary": "this.isSecondary", "class.nx-button--tertiary": "this.isTertiary", "class.nx-button--cta": "this.isCta", "class.nx-button--emphasis": "this.isEmphasis", "class.nx-button--large": "this.isLarge", "class.nx-button--medium": "this.isMedium", "class.nx-button--small-medium": "this.isSmallMedium", "class.nx-button--small": "this.isSmall", "class.nx-button--danger": "this.isDanger", "class.nx-button--block": "this.isBlock", "class.nx-button--negative": "this.isNegative", "attr.disabled": "this.isDisabled", "attr.aria-disabled": "this.isAriaDisabled", "class.nx-button--active": "this.active" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxButtonBase, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i1.FocusMonitor }]; }, propDecorators: { isPrimary: [{
                type: HostBinding,
                args: ['class.nx-button--primary']
            }], isSecondary: [{
                type: HostBinding,
                args: ['class.nx-button--secondary']
            }], isTertiary: [{
                type: HostBinding,
                args: ['class.nx-button--tertiary']
            }], isCta: [{
                type: HostBinding,
                args: ['class.nx-button--cta']
            }], isEmphasis: [{
                type: HostBinding,
                args: ['class.nx-button--emphasis']
            }], isLarge: [{
                type: HostBinding,
                args: ['class.nx-button--large']
            }], isMedium: [{
                type: HostBinding,
                args: ['class.nx-button--medium']
            }], isSmallMedium: [{
                type: HostBinding,
                args: ['class.nx-button--small-medium']
            }], isSmall: [{
                type: HostBinding,
                args: ['class.nx-button--small']
            }], isDanger: [{
                type: HostBinding,
                args: ['class.nx-button--danger']
            }], isBlock: [{
                type: HostBinding,
                args: ['class.nx-button--block']
            }], isNegative: [{
                type: HostBinding,
                args: ['class.nx-button--negative']
            }], isDisabled: [{
                type: HostBinding,
                args: ['attr.disabled']
            }], isAriaDisabled: [{
                type: HostBinding,
                args: ['attr.aria-disabled']
            }], active: [{
                type: HostBinding,
                args: ['class.nx-button--active']
            }], disabled: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,