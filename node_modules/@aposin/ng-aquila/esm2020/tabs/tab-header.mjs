import { FocusKeyManager } from '@angular/cdk/a11y';
import { END, ENTER, HOME, SPACE } from '@angular/cdk/keycodes';
import { ChangeDetectionStrategy, Component, ContentChildren, EventEmitter, Input, Optional, Output, ViewChild, } from '@angular/core';
import { NxScrollableTabBar } from './scrollable-tab-bar';
import { NxTabLabelWrapperDirective } from './tab-label-wrapper';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/bidi";
import * as i2 from "./tab-group-base";
import * as i3 from "./scroll-indicator/scroll-indicator";
import * as i4 from "@angular/common";
/** @docs-private */
export class NxTabHeaderComponent extends NxScrollableTabBar {
    constructor(_cdr, _dir, _tabGroup, _element) {
        super(_cdr, _dir, _element);
        this._cdr = _cdr;
        this._tabGroup = _tabGroup;
        this._selectedIndex = 0;
        this._autoselect = true;
        this.selectFocusedIndex = new EventEmitter();
        this.indexFocused = new EventEmitter();
    }
    get selectedIndex() {
        return this._selectedIndex;
    }
    set selectedIndex(value) {
        this._selectedIndex = value;
        if (this._keyManager) {
            this._keyManager.updateActiveItem(value);
        }
    }
    get focusIndex() {
        return this._keyManager ? this._keyManager.activeItemIndex : 0;
    }
    set focusIndex(value) {
        if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {
            return;
        }
        this._keyManager.setActiveItem(value);
    }
    get autoselect() {
        return this._autoselect;
    }
    set autoselect(value) {
        this._autoselect = value;
    }
    ngAfterContentInit() {
        super.ngAfterContentInit();
        this._keyManager = new FocusKeyManager(this.labels).withHorizontalOrientation('ltr').withWrap();
        this._keyManager.updateActiveItem(0);
        this._cdr.markForCheck();
    }
    _isValidIndex(idx) {
        if (!this.labels) {
            return true;
        }
        const tab = this.labels.toArray()[idx] || null;
        return !!tab && !tab.disabled;
    }
    /**
     * Handles keyboard inputs on the labels
     * If autoselect is enabled the tab gets changed immediately
     * If autoselect is disabled only the focus changes but the user still has to select the item
     * by himself
     */
    handleKeydown(event) {
        switch (event.keyCode) {
            case HOME:
                this._keyManager.setFirstItemActive();
                event.preventDefault();
                break;
            case END:
                this._keyManager.setLastItemActive();
                event.preventDefault();
                break;
            case ENTER:
            case SPACE:
                this.selectFocusedIndex.emit(this._keyManager.activeItemIndex);
                event.preventDefault();
                break;
            default:
                this._keyManager.onKeydown(event);
        }
        if (this.autoselect) {
            this.selectFocusedIndex.emit(this._keyManager.activeItemIndex);
        }
        else if (event.keyCode !== ENTER && event.keyCode !== SPACE) {
            this.indexFocused.emit(this._keyManager.activeItemIndex);
        }
    }
}
NxTabHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTabHeaderComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.Directionality, optional: true }, { token: i2.NxTabGroupBase, optional: true }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
NxTabHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxTabHeaderComponent, selector: "nx-tab-header", inputs: { selectedIndex: "selectedIndex", autoselect: "autoselect" }, outputs: { selectFocusedIndex: "selectFocusedIndex", indexFocused: "indexFocused" }, host: { properties: { "class.at-start": "_isScrolledToStart", "class.scrollable": "scrollable" } }, queries: [{ propertyName: "tabButtons", predicate: ["tabButton"] }, { propertyName: "labels", predicate: NxTabLabelWrapperDirective }], viewQueries: [{ propertyName: "scrollableTabsList", first: true, predicate: ["tabsList"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<nx-tab-scroll-indicator *ngIf=\"scrollable\" scrollDirection=\"start\" [isScrolledToStart]=\"_isScrolledToStart\" (buttonClicked)=\"scrollToStart()\">\n</nx-tab-scroll-indicator>\n<div #tabsList class=\"nx-tab-header\" (keydown)=\"handleKeydown($event)\" role=\"tablist\" tabindex=\"-1\">\n    <ng-content></ng-content>\n</div>\n<nx-tab-scroll-indicator *ngIf=\"scrollable\" scrollDirection=\"end\" [isScrolledToEnd]=\"_isScrolledToEnd\" (buttonClicked)=\"scrollToEnd()\">\n</nx-tab-scroll-indicator>\n", styles: [":host{display:flex;justify-content:center}:host .nx-tab-header{display:flex;align-items:flex-end;overflow-x:scroll;position:relative;outline:none;-ms-overflow-style:none;scrollbar-width:none}:host .nx-tab-header::-webkit-scrollbar{display:none}:host.at-start .nx-tab-header{margin-left:-8px;padding-left:8px}[dir=rtl] :host.at-start .nx-tab-header{margin-left:0;padding-left:0;margin-right:-8px;padding-right:8px}:host:not(.scrollable) .nx-tab-header{margin-right:-8px;padding-right:8px}[dir=rtl] :host:not(.scrollable) .nx-tab-header{margin-right:0;padding-right:0;margin-left:-8px;padding-left:8px}:host-context(nx-tab-group.is-expert){justify-content:flex-start;border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:var(--tab-expert-bottom-border-color)}:host-context(nx-tab-group.is-expert) .nx-tab-header{width:100%}\n"], components: [{ type: i3.NxTabScrollIndicator, selector: "nx-tab-scroll-indicator", inputs: ["scrollDirection", "isScrolledToStart", "isScrolledToEnd"], outputs: ["buttonClicked"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTabHeaderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-tab-header', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[class.at-start]': '_isScrolledToStart',
                        '[class.scrollable]': 'scrollable',
                    }, template: "<nx-tab-scroll-indicator *ngIf=\"scrollable\" scrollDirection=\"start\" [isScrolledToStart]=\"_isScrolledToStart\" (buttonClicked)=\"scrollToStart()\">\n</nx-tab-scroll-indicator>\n<div #tabsList class=\"nx-tab-header\" (keydown)=\"handleKeydown($event)\" role=\"tablist\" tabindex=\"-1\">\n    <ng-content></ng-content>\n</div>\n<nx-tab-scroll-indicator *ngIf=\"scrollable\" scrollDirection=\"end\" [isScrolledToEnd]=\"_isScrolledToEnd\" (buttonClicked)=\"scrollToEnd()\">\n</nx-tab-scroll-indicator>\n", styles: [":host{display:flex;justify-content:center}:host .nx-tab-header{display:flex;align-items:flex-end;overflow-x:scroll;position:relative;outline:none;-ms-overflow-style:none;scrollbar-width:none}:host .nx-tab-header::-webkit-scrollbar{display:none}:host.at-start .nx-tab-header{margin-left:-8px;padding-left:8px}[dir=rtl] :host.at-start .nx-tab-header{margin-left:0;padding-left:0;margin-right:-8px;padding-right:8px}:host:not(.scrollable) .nx-tab-header{margin-right:-8px;padding-right:8px}[dir=rtl] :host:not(.scrollable) .nx-tab-header{margin-right:0;padding-right:0;margin-left:-8px;padding-left:8px}:host-context(nx-tab-group.is-expert){justify-content:flex-start;border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:var(--tab-expert-bottom-border-color)}:host-context(nx-tab-group.is-expert) .nx-tab-header{width:100%}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.Directionality, decorators: [{
                    type: Optional
                }] }, { type: i2.NxTabGroupBase, decorators: [{
                    type: Optional
                }] }, { type: i0.ElementRef }]; }, propDecorators: { scrollableTabsList: [{
                type: ViewChild,
                args: ['tabsList']
            }], tabButtons: [{
                type: ContentChildren,
                args: ['tabButton']
            }], selectedIndex: [{
                type: Input
            }], autoselect: [{
                type: Input
            }], selectFocusedIndex: [{
                type: Output
            }], indexFocused: [{
                type: Output
            }], labels: [{
                type: ContentChildren,
                args: [NxTabLabelWrapperDirective]
            }] } });
//# sourceMappingURL=data:application/json;base64,