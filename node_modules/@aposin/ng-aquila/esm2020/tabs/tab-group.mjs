import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { ChangeDetectionStrategy, Component, ContentChildren, EventEmitter, Inject, Input, Optional, Output, ViewChild, ViewChildren, } from '@angular/core';
import { NxAccordionDirective, NxExpansionPanelComponent } from '@aposin/ng-aquila/accordion';
import { NxBreakpoints } from '@aposin/ng-aquila/utils';
import { merge, Subject, Subscription } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { NxTabComponent } from './tab';
import { NxTabBodyComponent } from './tab-body';
import { NxTabGroupBase } from './tab-group-base';
import { TAB_GROUP_DEFAULT_OPTIONS } from './tabs.models';
import * as i0 from "@angular/core";
import * as i1 from "@aposin/ng-aquila/utils";
import * as i2 from "@angular/cdk/a11y";
import * as i3 from "./tab-header";
import * as i4 from "./tab-header-outlet";
import * as i5 from "./tab-body";
import * as i6 from "@aposin/ng-aquila/accordion";
import * as i7 from "@angular/common";
import * as i8 from "./tab-label-wrapper";
export class NxTabChangeEvent {
}
let nextId = 0;
export class NxTabGroupComponent {
    constructor(viewportService, _cdr, _defaultOptions, _focusMonitor) {
        this.viewportService = viewportService;
        this._cdr = _cdr;
        this._defaultOptions = _defaultOptions;
        this._focusMonitor = _focusMonitor;
        this._selectedIndex = null;
        this._negative = false;
        this._disabled = false;
        this._indexToSelect = 0;
        this._autoselect = true;
        this._mobileAccordion = true;
        this._showAccordion = false;
        /** An event emitted when the selected tab has changed. */
        this.selectedIndexChange = new EventEmitter();
        /** An event emitted when the selected tab has changed. */
        this.selectedTabChange = new EventEmitter();
        /**
         * An event emitted when focus has changed within a tab group.
         *
         * **Note:** is not supported in mobile view.
         */
        this.focusChange = new EventEmitter();
        /** Subscription to changes in the tab labels. */
        this._tabLabelSubscription = Subscription.EMPTY;
        this._disabledTabsCache = [];
        this._appearanceChange = new Subject();
        this._destroyed = new Subject();
        this._groupId = nextId++;
        this.viewportService
            .max(NxBreakpoints.BREAKPOINT_MEDIUM)
            .pipe(takeUntil(this._destroyed))
            .subscribe(isSmallTablet => this._switchAppearance(isSmallTablet));
    }
    /** Sets the selected tab. */
    get selectedIndex() {
        return this._selectedIndex;
    }
    set selectedIndex(value) {
        this._indexToSelect = coerceNumberProperty(value, null);
    }
    /** Whether the negative set of styling should be used. */
    get negative() {
        return this._negative;
    }
    set negative(value) {
        if (value !== this._negative) {
            this._negative = coerceBooleanProperty(value);
            this._cdr.markForCheck();
        }
    }
    /** Whether the tab group is disabled. Default: false. */
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        if (value !== this._disabled) {
            this._disabled = coerceBooleanProperty(value);
            this._cdr.markForCheck();
        }
    }
    /** Whether the tab should be immediately selected on focus. */
    get autoselect() {
        return this._autoselect;
    }
    set autoselect(value) {
        this._autoselect = coerceBooleanProperty(value);
    }
    /** Whether the tabs should to accordion on mobile viewports. */
    get mobileAccordion() {
        return this._mobileAccordion;
    }
    set mobileAccordion(value) {
        this._mobileAccordion = coerceBooleanProperty(value);
    }
    /**
     * **Expert option**
     *
     * Sets the appearance of the tab group. Default: 'default'.
     */
    set appearance(value) {
        if (this._appearance !== value) {
            this._appearance = value;
            this._cdr.markForCheck();
        }
    }
    get appearance() {
        return this._appearance || this._defaultOptions?.appearance || 'default';
    }
    ngAfterContentInit() {
        this._subscribeToTabLabels();
        // Subscribe to changes in the amount of tabs, in order to be
        // able to re-render the content as new tabs are added or removed.
        this.tabs.changes.pipe(takeUntil(this._destroyed)).subscribe(() => {
            const indexToSelect = this._clampTabIndex(this._indexToSelect);
            // Maintain the previously-selected tab if a new tab is added or removed and there is no
            // explicit change that selects a different tab.
            if (indexToSelect === this._selectedIndex) {
                const tabs = this.tabs.toArray();
                for (let i = 0; i < tabs.length; i++) {
                    if (tabs[i].isActive) {
                        // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed
                        // event, otherwise the consumer may end up in an infinite loop in some edge cases like
                        // adding a tab within the `selectedIndexChange` event.
                        this._indexToSelect = this._selectedIndex = i;
                        break;
                    }
                }
            }
            this._cdr.markForCheck();
        });
    }
    /**
     * After the content is checked, this component knows what tabs have been defined
     * and what the selected index should be.
     */
    ngAfterContentChecked() {
        // Don't clamp the `indexToSelect` immediately in the setter because it can happen that
        // the amount of tabs changes before the actual change detection runs.
        let indexToSelect = (this._indexToSelect = this._clampTabIndex(this._indexToSelect));
        // If the active tab is disabled select the next focusable tab
        // if all tabs are disabled, allow selection of disabled active tab.
        if (!this.disabled && this.tabs.toArray()[indexToSelect].disabled) {
            const nextFocusable = this.tabs
                .toArray()
                .map((tab, index) => ({ tab, index }))
                .find(item => !item.tab.disabled);
            indexToSelect = nextFocusable ? nextFocusable.index : indexToSelect;
        }
        // If the index to select was disabled previously leave the selection on the current
        // so that the selection does not jump from one to another tab.
        if (this._disabledTabsCache[this._indexToSelect]) {
            this._indexToSelect = this.selectedIndex;
        }
        // If there is a change in selected index, emit a change event. Should not trigger if
        // the selected index has not yet been initialized.
        if (this._selectedIndex !== indexToSelect) {
            const isFirstRun = this._selectedIndex == null;
            if (!isFirstRun) {
                this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));
            }
            // Changing these values after change detection has run
            // since the checked content may contain references to them.
            Promise.resolve().then(() => {
                this.tabs.forEach((tab, index) => (tab.isActive = index === indexToSelect));
                if (!isFirstRun) {
                    this.selectedIndexChange.emit(indexToSelect);
                }
            });
        }
        if (this._selectedIndex !== indexToSelect) {
            this._selectedIndex = indexToSelect;
            this._cdr.markForCheck();
        }
        // cache the previous disabled status of all tabs
        if (!this.disabled) {
            this.tabs.toArray().forEach((tab, index) => (this._disabledTabsCache[index] = tab.disabled));
        }
    }
    ngAfterViewInit() {
        this._tabButtons.forEach(button => this._focusMonitor.monitor(button));
        this._tabButtonsPrevious = this._tabButtons;
        this._tabButtons.changes.subscribe(tabButtons => {
            this._tabButtonsPrevious.forEach(button => this._focusMonitor.stopMonitoring(button));
            this._tabButtonsPrevious = tabButtons;
            tabButtons.forEach((button) => this._focusMonitor.monitor(button));
        });
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this._tabLabelSubscription.unsubscribe();
        this._tabButtons.forEach(button => {
            this._focusMonitor.stopMonitoring(button);
        });
    }
    /**
     * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is
     * on the NxTab component, whereas the data binding is inside the NxTabGroup. In order for the
     * binding to be updated, we need to subscribe to changes in it and trigger change detection
     * manually.
     */
    _subscribeToTabLabels() {
        if (this._tabLabelSubscription) {
            this._tabLabelSubscription.unsubscribe();
        }
        this._tabLabelSubscription = merge(...this.tabs.map(tab => tab._stateChanges)).subscribe(() => this._cdr.markForCheck());
    }
    /** Clamps the given index to the bounds of 0 and the tabs length. */
    _clampTabIndex(index) {
        // Note the `|| 0`, which ensures that values like NaN can't get through
        // and which would otherwise throw the component into an infinite loop
        // (since Math.max(NaN, 0) === NaN).
        return Math.min(this.tabs.length - 1, Math.max(index || 0, 0));
    }
    /** @docs-private */
    focusChanged(index) {
        this.focusChange.emit(this._createChangeEvent(index));
    }
    _createChangeEvent(index) {
        const event = new NxTabChangeEvent();
        event.index = index;
        if (this.tabs?.length) {
            event.tab = this.tabs.toArray()[index];
        }
        return event;
    }
    /** @docs-private */
    handleClick(index) {
        const clickedTab = this.tabs.toArray()[index];
        if (!this.disabled && !clickedTab.disabled) {
            this.selectedIndex = this.tabHeader.focusIndex = index;
        }
    }
    /**
     * @docs-private
     * Returns the tabindex for a tab label
     */
    getTabIndex(tab, idx) {
        return this.selectedIndex === idx && !tab.disabled && !this.disabled ? 0 : -1;
    }
    /** Returns a unique id for each tab label element */
    _getTabLabelId(i) {
        return `nx-tab-label-${this._groupId}-${i}`;
    }
    /** Returns a unique id for each tab content element */
    _getTabContentId(i) {
        return `nx-tab-content-${this._groupId}-${i}`;
    }
    _switchAppearance(isSmallTablet) {
        if (!this._mobileAccordion) {
            return;
        }
        // trigger a change only when there is value difference
        // otherwise a switch is triggered by tablet <-> desktop change
        if (this._showAccordion !== isSmallTablet) {
            // notify the outlets to detach the viewrefs for header and body before
            // we switch the appearance. this way we only instantiate the templates
            // once so that they do not get destroyed during the switch
            this._appearanceChange.next();
            this._showAccordion = isSmallTablet;
            this._cdr.markForCheck();
        }
    }
    /**
     * Emulate the tab change event when an accordion panel is opened in
     * mobile viewports.
     */
    _panelOpened(index) {
        this.selectedIndex = index;
    }
}
NxTabGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTabGroupComponent, deps: [{ token: i1.NxViewportService }, { token: i0.ChangeDetectorRef }, { token: TAB_GROUP_DEFAULT_OPTIONS, optional: true }, { token: i2.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });
NxTabGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxTabGroupComponent, selector: "nx-tab-group", inputs: { selectedIndex: "selectedIndex", negative: "negative", disabled: "disabled", autoselect: "autoselect", mobileAccordion: "mobileAccordion", appearance: "appearance" }, outputs: { selectedIndexChange: "selectedIndexChange", selectedTabChange: "selectedTabChange", focusChange: "focusChange" }, host: { properties: { "class.is-negative": "negative", "class.is-disabled": "disabled", "class.is-expert": "appearance === \"expert\"" } }, providers: [{ provide: NxTabGroupBase, useExisting: NxTabGroupComponent }], queries: [{ propertyName: "tabs", predicate: NxTabComponent }], viewQueries: [{ propertyName: "tabHeader", first: true, predicate: ["tabHeader"], descendants: true }, { propertyName: "accordion", first: true, predicate: ["accordion"], descendants: true, read: NxAccordionDirective }, { propertyName: "tabBodyChildren", predicate: NxTabBodyComponent, descendants: true }, { propertyName: "panels", predicate: NxExpansionPanelComponent, descendants: true }, { propertyName: "_tabButtons", predicate: ["tabButton"], descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"!_showAccordion\">\n    <nx-tab-header\n        #tabHeader\n        [selectedIndex]=\"selectedIndex\"\n        (selectFocusedIndex)=\"selectedIndex = $event\"\n        (indexFocused)=\"focusChanged($event)\"\n        [autoselect]=\"autoselect\"\n    >\n        <button\n            #tabButton\n            type=\"button\"\n            nxTabLabelWrapper\n            *ngFor=\"let tab of tabs; let i = index\"\n            role=\"tab\"\n            (click)=\"handleClick(i)\"\n            class=\"nx-tab-header__item\"\n            [id]=\"_getTabLabelId(i)\"\n            [attr.aria-controls]=\"_getTabContentId(i)\"\n            [attr.aria-selected]=\"selectedIndex === i\"\n            [attr.tabindex]=\"getTabIndex(tab, i)\"\n            [disabled]=\"tab.disabled\"\n            [class.nx-tab-header__item--disabled]=\"tab.disabled\"\n            [class.nx-tab-header__item--active]=\"selectedIndex === i\"\n        >\n            <div class=\"nx-tab-label__content\">\n                <nx-tab-header-outlet *ngIf=\"tab.templateLabel\" [content]=\"tab.headerViewRef\"></nx-tab-header-outlet>\n                <ng-container *ngIf=\"!tab.templateLabel\">{{tab.label}}</ng-container>\n            </div>\n        </button>\n    </nx-tab-header>\n\n    <div class=\"nx-tab-body__container\">\n        <nx-tab-body\n            *ngFor=\"let tab of tabs; let i = index\"\n            [id]=\"_getTabContentId(i)\"\n            role=\"tabpanel\"\n            class=\"nx-tab__body\"\n            [attr.aria-labelledby]=\"_getTabContentId(i)\"\n            [class.nx-tab__body--active]=\"selectedIndex === i\"\n            [tab]=\"tab\"\n            [active]=\"selectedIndex === i\"\n        ></nx-tab-body>\n    </div>\n</ng-container>\n\n<ng-template [ngIf]=\"_showAccordion\">\n    <nx-accordion #accordion [negative]=\"negative\">\n        <nx-expansion-panel *ngFor=\"let tab of tabs; let i = index\" [expanded]=\"selectedIndex === i\" (opened)=\"_panelOpened(i)\" [disabled]=\"tab.disabled\">\n            <nx-expansion-panel-header>\n                <nx-expansion-panel-title>\n                    <nx-tab-header-outlet *ngIf=\"tab.templateLabel\" [content]=\"tab.headerViewRef\"></nx-tab-header-outlet>\n                    <ng-container *ngIf=\"!tab.templateLabel\">{{tab.label}}</ng-container>\n                </nx-expansion-panel-title>\n            </nx-expansion-panel-header>\n            <!-- this is not lazy loading this is a trick because the portal gets added here -->\n            <!-- so we could rewrite the tab-body component that it takes care of \"lazy loading\" and the\n    accordion wouldn't know about it -->\n            <!-- active=true is a trick because we want to keep the content attached for better user experience along with expansion panel animation.  -->\n            <nx-tab-body [active]=\"true\" [tab]=\"tab\"></nx-tab-body>\n        </nx-expansion-panel>\n    </nx-accordion>\n</ng-template>\n", styles: [":host{display:block}.nx-tab-header__item{font-size:var(--tab-item-font-size);line-height:var(--tab-item-line-height);font-weight:var(--tab-item-font-weight);letter-spacing:var(--tab-item-letter-spacing);text-decoration:none;border:none;background:transparent;color:var(--tab-item-color);padding:4px 0 12px;margin:4px 16px 0;outline:none;position:relative;cursor:pointer;flex:0 0 auto}@media screen and (-ms-high-contrast: active){.nx-tab-header__item{background-color:buttonFace;border-color:buttonText;color:buttonText;-ms-high-contrast-adjust:none}}.nx-tab-header__item:hover{color:var(--tab-item-hover-color)}.nx-tab-header__item:active{color:var(--tab-item-active-color)}.nx-tab-header__item::-moz-focus-inner{border:0}:host .nx-tab-header__item{overflow:visible}:host .nx-tab-header__item:first-child{margin-left:0}[dir=rtl] :host .nx-tab-header__item:first-child{margin-right:0;margin-left:16px}:host .nx-tab-header__item:last-child{margin-right:0}[dir=rtl] :host .nx-tab-header__item:last-child{margin-right:16px;margin-left:0}.nx-tab-header__item:before{content:\"\";position:absolute;width:calc(100% + 64px);height:1px;bottom:0;left:-32px;background-color:var(--tab-item-border-color)}.nx-tab-header__item:first-child:before{left:0;width:calc(100% + 32px)}[dir=rtl] .nx-tab-header__item:first-child:before{left:auto;left:initial;right:0}.nx-tab-header__item:last-child:before{width:calc(100% + 32px)}[dir=rtl] .nx-tab-header__item:last-child:before{left:auto;left:initial;right:-32px}:host(.is-expert) .nx-tab-header__item:before{display:none}:host(.is-expert) .nx-tab-header__item:not(.nx-tab-header__item--active){border-color:transparent}:host(.is-expert) .nx-tab-header__item{padding-bottom:8px}:host(.is-expert) .nx-tab-header__item.nx-tab-header__item--active{padding-bottom:4px}:host(.is-expert):not(.is-negative) .nx-tab-header__item:not(.nx-tab-header__item--active):not(.nx-tab-header__item--disabled){color:var(--tab-expert-color)}:host(.is-expert):not(.is-negative) .nx-tab-header__item:not(.nx-tab-header__item--active):not(.nx-tab-header__item--disabled):hover{color:var(--tab-item-hover-color)}:host(.is-expert):not(.is-negative) .nx-tab-header__item:not(.nx-tab-header__item--active):not(.nx-tab-header__item--disabled):active{color:var(--tab-item-active-color)}@media screen and (-ms-high-contrast: active){:host(.is-expert):not(.is-negative) .nx-tab-header__item:not(.nx-tab-header__item--active):not(.nx-tab-header__item--disabled){color:buttonText}}.nx-tab-header__item--active{border-width:4px;font-weight:700;border-bottom-style:solid;border-color:var(--tab-item-active-border-color);padding-bottom:8px;cursor:default}.nx-tab-header__item--active:hover,.nx-tab-header__item--active:active{color:var(--tab-item-color)}@media screen and (-ms-high-contrast: active){.nx-tab-header__item--active{background-color:highlight;color:highlightText;border-color:highlight}}.nx-tab-header__item--active:before{display:none}.nx-tab-header__item--disabled{border-color:var(--tab-item-disabled-border-color);color:var(--tab-item-disabled-color);cursor:not-allowed}.nx-tab-header__item--disabled:hover,.nx-tab-header__item--disabled:active{color:var(--tab-item-disabled-color)}@media screen and (-ms-high-contrast: active){.nx-tab-header__item--disabled{border-color:GrayText;background-color:buttonFace;color:GrayText}}.nx-tab-label__content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}.nx-tab-header__item.cdk-keyboard-focused .nx-tab-label__content{box-shadow:var(--focus-box-shadow);border-radius:4px}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-tab-header__item.cdk-keyboard-focused .nx-tab-label__content{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}:host(.is-negative){color:var(--negative)}:host(.is-negative) .nx-tab-header__item{color:var(--negative);border-bottom-color:var(--negative)}:host(.is-negative) .nx-tab-header__item:hover,:host(.is-negative) .nx-tab-header__item:active{font-weight:700}:host(.is-negative) .nx-tab-header__item.nx-tab-header__item--disabled{border-color:var(--tab-item-disabled-border-color);color:var(--tab-item-disabled-color);cursor:not-allowed;color:var(--tab-item-disabled-negative-color);border-color:var(--tab-item-disabled-negative-color)}:host(.is-negative) .nx-tab-header__item.nx-tab-header__item--disabled:hover,:host(.is-negative) .nx-tab-header__item.nx-tab-header__item--disabled:active{color:var(--tab-item-disabled-color)}@media screen and (-ms-high-contrast: active){:host(.is-negative) .nx-tab-header__item.nx-tab-header__item--disabled{border-color:GrayText;background-color:buttonFace;color:GrayText}}:host(.is-negative.is-expert) .nx-tab-header__item.nx-tab-header__item--disabled:not(.nx-tab-header__item--active){border-bottom-color:transparent}:host(.is-disabled){cursor:not-allowed}:host(.is-disabled.is-negative) .nx-tab-header__item{color:var(--tab-item-disabled-negative-color);border-color:var(--tab-item-disabled-negative-color)}@media screen and (-ms-high-contrast: active){:host(.is-negative){color:buttonText}:host(.is-negative) .nx-tab-header__item{color:buttonText;border-bottom-color:buttonText}:host(.is-negative) .nx-tab-header__item--active{background-color:highlight;color:highlightText;border-color:highlight;-ms-high-contrast-adjust:none}:host(.is-disabled.is-negative) .nx-tab-header__item{color:GrayText;border-bottom-color:GrayText}}\n"], components: [{ type: i3.NxTabHeaderComponent, selector: "nx-tab-header", inputs: ["selectedIndex", "autoselect"], outputs: ["selectFocusedIndex", "indexFocused"] }, { type: i4.NxTabHeaderOutletComponent, selector: "nx-tab-header-outlet", inputs: ["content"] }, { type: i5.NxTabBodyComponent, selector: "nx-tab-body", inputs: ["tab", "active"] }, { type: i6.NxExpansionPanelComponent, selector: "nx-expansion-panel", inputs: ["negative", "nxStyle"], exportAs: ["NxExpansionPanelComponent"] }, { type: i6.NxExpansionPanelHeaderComponent, selector: "nx-expansion-panel-header" }], directives: [{ type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8.NxTabLabelWrapperDirective, selector: "[nxTabLabelWrapper]", inputs: ["disabled"] }, { type: i6.NxAccordionDirective, selector: "nx-accordion", inputs: ["nxStyle", "negative"] }, { type: i6.NxExpansionPanelTitleDirective, selector: "nx-expansion-panel-title" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTabGroupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-tab-group', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[class.is-negative]': 'negative',
                        '[class.is-disabled]': 'disabled',
                        '[class.is-expert]': 'appearance === "expert"',
                    }, providers: [{ provide: NxTabGroupBase, useExisting: NxTabGroupComponent }], template: "<ng-container *ngIf=\"!_showAccordion\">\n    <nx-tab-header\n        #tabHeader\n        [selectedIndex]=\"selectedIndex\"\n        (selectFocusedIndex)=\"selectedIndex = $event\"\n        (indexFocused)=\"focusChanged($event)\"\n        [autoselect]=\"autoselect\"\n    >\n        <button\n            #tabButton\n            type=\"button\"\n            nxTabLabelWrapper\n            *ngFor=\"let tab of tabs; let i = index\"\n            role=\"tab\"\n            (click)=\"handleClick(i)\"\n            class=\"nx-tab-header__item\"\n            [id]=\"_getTabLabelId(i)\"\n            [attr.aria-controls]=\"_getTabContentId(i)\"\n            [attr.aria-selected]=\"selectedIndex === i\"\n            [attr.tabindex]=\"getTabIndex(tab, i)\"\n            [disabled]=\"tab.disabled\"\n            [class.nx-tab-header__item--disabled]=\"tab.disabled\"\n            [class.nx-tab-header__item--active]=\"selectedIndex === i\"\n        >\n            <div class=\"nx-tab-label__content\">\n                <nx-tab-header-outlet *ngIf=\"tab.templateLabel\" [content]=\"tab.headerViewRef\"></nx-tab-header-outlet>\n                <ng-container *ngIf=\"!tab.templateLabel\">{{tab.label}}</ng-container>\n            </div>\n        </button>\n    </nx-tab-header>\n\n    <div class=\"nx-tab-body__container\">\n        <nx-tab-body\n            *ngFor=\"let tab of tabs; let i = index\"\n            [id]=\"_getTabContentId(i)\"\n            role=\"tabpanel\"\n            class=\"nx-tab__body\"\n            [attr.aria-labelledby]=\"_getTabContentId(i)\"\n            [class.nx-tab__body--active]=\"selectedIndex === i\"\n            [tab]=\"tab\"\n            [active]=\"selectedIndex === i\"\n        ></nx-tab-body>\n    </div>\n</ng-container>\n\n<ng-template [ngIf]=\"_showAccordion\">\n    <nx-accordion #accordion [negative]=\"negative\">\n        <nx-expansion-panel *ngFor=\"let tab of tabs; let i = index\" [expanded]=\"selectedIndex === i\" (opened)=\"_panelOpened(i)\" [disabled]=\"tab.disabled\">\n            <nx-expansion-panel-header>\n                <nx-expansion-panel-title>\n                    <nx-tab-header-outlet *ngIf=\"tab.templateLabel\" [content]=\"tab.headerViewRef\"></nx-tab-header-outlet>\n                    <ng-container *ngIf=\"!tab.templateLabel\">{{tab.label}}</ng-container>\n                </nx-expansion-panel-title>\n            </nx-expansion-panel-header>\n            <!-- this is not lazy loading this is a trick because the portal gets added here -->\n            <!-- so we could rewrite the tab-body component that it takes care of \"lazy loading\" and the\n    accordion wouldn't know about it -->\n            <!-- active=true is a trick because we want to keep the content attached for better user experience along with expansion panel animation.  -->\n            <nx-tab-body [active]=\"true\" [tab]=\"tab\"></nx-tab-body>\n        </nx-expansion-panel>\n    </nx-accordion>\n</ng-template>\n", styles: [":host{display:block}.nx-tab-header__item{font-size:var(--tab-item-font-size);line-height:var(--tab-item-line-height);font-weight:var(--tab-item-font-weight);letter-spacing:var(--tab-item-letter-spacing);text-decoration:none;border:none;background:transparent;color:var(--tab-item-color);padding:4px 0 12px;margin:4px 16px 0;outline:none;position:relative;cursor:pointer;flex:0 0 auto}@media screen and (-ms-high-contrast: active){.nx-tab-header__item{background-color:buttonFace;border-color:buttonText;color:buttonText;-ms-high-contrast-adjust:none}}.nx-tab-header__item:hover{color:var(--tab-item-hover-color)}.nx-tab-header__item:active{color:var(--tab-item-active-color)}.nx-tab-header__item::-moz-focus-inner{border:0}:host .nx-tab-header__item{overflow:visible}:host .nx-tab-header__item:first-child{margin-left:0}[dir=rtl] :host .nx-tab-header__item:first-child{margin-right:0;margin-left:16px}:host .nx-tab-header__item:last-child{margin-right:0}[dir=rtl] :host .nx-tab-header__item:last-child{margin-right:16px;margin-left:0}.nx-tab-header__item:before{content:\"\";position:absolute;width:calc(100% + 64px);height:1px;bottom:0;left:-32px;background-color:var(--tab-item-border-color)}.nx-tab-header__item:first-child:before{left:0;width:calc(100% + 32px)}[dir=rtl] .nx-tab-header__item:first-child:before{left:auto;left:initial;right:0}.nx-tab-header__item:last-child:before{width:calc(100% + 32px)}[dir=rtl] .nx-tab-header__item:last-child:before{left:auto;left:initial;right:-32px}:host(.is-expert) .nx-tab-header__item:before{display:none}:host(.is-expert) .nx-tab-header__item:not(.nx-tab-header__item--active){border-color:transparent}:host(.is-expert) .nx-tab-header__item{padding-bottom:8px}:host(.is-expert) .nx-tab-header__item.nx-tab-header__item--active{padding-bottom:4px}:host(.is-expert):not(.is-negative) .nx-tab-header__item:not(.nx-tab-header__item--active):not(.nx-tab-header__item--disabled){color:var(--tab-expert-color)}:host(.is-expert):not(.is-negative) .nx-tab-header__item:not(.nx-tab-header__item--active):not(.nx-tab-header__item--disabled):hover{color:var(--tab-item-hover-color)}:host(.is-expert):not(.is-negative) .nx-tab-header__item:not(.nx-tab-header__item--active):not(.nx-tab-header__item--disabled):active{color:var(--tab-item-active-color)}@media screen and (-ms-high-contrast: active){:host(.is-expert):not(.is-negative) .nx-tab-header__item:not(.nx-tab-header__item--active):not(.nx-tab-header__item--disabled){color:buttonText}}.nx-tab-header__item--active{border-width:4px;font-weight:700;border-bottom-style:solid;border-color:var(--tab-item-active-border-color);padding-bottom:8px;cursor:default}.nx-tab-header__item--active:hover,.nx-tab-header__item--active:active{color:var(--tab-item-color)}@media screen and (-ms-high-contrast: active){.nx-tab-header__item--active{background-color:highlight;color:highlightText;border-color:highlight}}.nx-tab-header__item--active:before{display:none}.nx-tab-header__item--disabled{border-color:var(--tab-item-disabled-border-color);color:var(--tab-item-disabled-color);cursor:not-allowed}.nx-tab-header__item--disabled:hover,.nx-tab-header__item--disabled:active{color:var(--tab-item-disabled-color)}@media screen and (-ms-high-contrast: active){.nx-tab-header__item--disabled{border-color:GrayText;background-color:buttonFace;color:GrayText}}.nx-tab-label__content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}.nx-tab-header__item.cdk-keyboard-focused .nx-tab-label__content{box-shadow:var(--focus-box-shadow);border-radius:4px}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-tab-header__item.cdk-keyboard-focused .nx-tab-label__content{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}:host(.is-negative){color:var(--negative)}:host(.is-negative) .nx-tab-header__item{color:var(--negative);border-bottom-color:var(--negative)}:host(.is-negative) .nx-tab-header__item:hover,:host(.is-negative) .nx-tab-header__item:active{font-weight:700}:host(.is-negative) .nx-tab-header__item.nx-tab-header__item--disabled{border-color:var(--tab-item-disabled-border-color);color:var(--tab-item-disabled-color);cursor:not-allowed;color:var(--tab-item-disabled-negative-color);border-color:var(--tab-item-disabled-negative-color)}:host(.is-negative) .nx-tab-header__item.nx-tab-header__item--disabled:hover,:host(.is-negative) .nx-tab-header__item.nx-tab-header__item--disabled:active{color:var(--tab-item-disabled-color)}@media screen and (-ms-high-contrast: active){:host(.is-negative) .nx-tab-header__item.nx-tab-header__item--disabled{border-color:GrayText;background-color:buttonFace;color:GrayText}}:host(.is-negative.is-expert) .nx-tab-header__item.nx-tab-header__item--disabled:not(.nx-tab-header__item--active){border-bottom-color:transparent}:host(.is-disabled){cursor:not-allowed}:host(.is-disabled.is-negative) .nx-tab-header__item{color:var(--tab-item-disabled-negative-color);border-color:var(--tab-item-disabled-negative-color)}@media screen and (-ms-high-contrast: active){:host(.is-negative){color:buttonText}:host(.is-negative) .nx-tab-header__item{color:buttonText;border-bottom-color:buttonText}:host(.is-negative) .nx-tab-header__item--active{background-color:highlight;color:highlightText;border-color:highlight;-ms-high-contrast-adjust:none}:host(.is-disabled.is-negative) .nx-tab-header__item{color:GrayText;border-bottom-color:GrayText}}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.NxViewportService }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TAB_GROUP_DEFAULT_OPTIONS]
                }] }, { type: i2.FocusMonitor }]; }, propDecorators: { tabs: [{
                type: ContentChildren,
                args: [NxTabComponent]
            }], tabBodyChildren: [{
                type: ViewChildren,
                args: [NxTabBodyComponent]
            }], tabHeader: [{
                type: ViewChild,
                args: ['tabHeader']
            }], panels: [{
                type: ViewChildren,
                args: [NxExpansionPanelComponent]
            }], accordion: [{
                type: ViewChild,
                args: ['accordion', { read: NxAccordionDirective }]
            }], _tabButtons: [{
                type: ViewChildren,
                args: ['tabButton']
            }], selectedIndex: [{
                type: Input
            }], negative: [{
                type: Input
            }], disabled: [{
                type: Input
            }], autoselect: [{
                type: Input
            }], mobileAccordion: [{
                type: Input
            }], appearance: [{
                type: Input
            }], selectedIndexChange: [{
                type: Output
            }], selectedTabChange: [{
                type: Output
            }], focusChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,