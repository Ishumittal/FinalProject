import { ChangeDetectionStrategy, Component, EventEmitter, Input, Optional, Output } from '@angular/core';
import { NxBreakpoints } from '@aposin/ng-aquila/utils';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@aposin/ng-aquila/utils";
import * as i2 from "@angular/cdk/bidi";
import * as i3 from "@aposin/ng-aquila/button";
import * as i4 from "@aposin/ng-aquila/icon";
import * as i5 from "@angular/common";
export class NxTabScrollIndicator {
    constructor(_cdr, _viewportService, _dir) {
        this._cdr = _cdr;
        this._viewportService = _viewportService;
        this._dir = _dir;
        this._view = 'desktop';
        this.buttonClicked = new EventEmitter();
        this._destroyed = new Subject();
        this._viewportService
            .min(NxBreakpoints.BREAKPOINT_MEDIUM)
            .pipe(takeUntil(this._destroyed))
            .subscribe(isGreaterThanMedium => {
            if (isGreaterThanMedium) {
                this._view = 'desktop';
            }
            else if (!isGreaterThanMedium) {
                this._view = 'mobile';
            }
            this._cdr.markForCheck();
        });
        this._dir?.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._cdr.markForCheck());
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
    get direction() {
        return this._dir?.value || 'ltr';
    }
    getChevronName() {
        if ((this.scrollDirection === 'start' && this.direction === 'ltr') || (this.scrollDirection === 'end' && this.direction === 'rtl')) {
            return 'chevron-left';
        }
        return 'chevron-right';
    }
    scroll() {
        this.buttonClicked.emit();
    }
}
NxTabScrollIndicator.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTabScrollIndicator, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.NxViewportService }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NxTabScrollIndicator.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxTabScrollIndicator, selector: "nx-tab-scroll-indicator", inputs: { scrollDirection: "scrollDirection", isScrolledToStart: "isScrolledToStart", isScrolledToEnd: "isScrolledToEnd" }, outputs: { buttonClicked: "buttonClicked" }, host: { properties: { "class.start-button": "scrollDirection === \"start\"", "class.end-button": "scrollDirection === \"end\"", "class.is-desktop-button": "_view === \"desktop\"", "class.is-mobile": "_view === \"mobile\"", "class.is-scrolled-to-start": "isScrolledToStart", "class.is-scrolled-to-end": "isScrolledToEnd" } }, ngImport: i0, template: "<div class=\"nx-tab-scroll-indicator__divider\"></div>\n<button nxPlainButton aria-hidden=\"true\" type=\"button\" *ngIf=\"_view === 'desktop'\" (click)=\"scroll()\">\n    <nx-icon [name]=\"getChevronName()\"></nx-icon>\n</button>\n", styles: [":host{position:relative;border-color:var(--tab-item-border-color);border-bottom-width:1px;border-bottom-style:solid;flex:0 0 auto;height:44px}:host .nx-tab-scroll-indicator__divider{width:1px;height:32px;background:var(--tab-item-border-color);position:absolute;top:4px}:host.start-button.is-scrolled-to-start .nx-tab-scroll-indicator__divider,:host.end-button.is-scrolled-to-end .nx-tab-scroll-indicator__divider{display:none}:host.start-button.is-scrolled-to-start button,:host.end-button.is-scrolled-to-end button{display:none}:host.is-desktop-button{padding:8px 8px 10px;width:40px}:host.is-desktop-button.start-button.is-scrolled-to-start{display:none}:host.is-desktop-button button{vertical-align:bottom}:host.is-desktop-button.start-button .nx-tab-scroll-indicator__divider{right:0}[dir=rtl] :host.is-desktop-button.start-button .nx-tab-scroll-indicator__divider{right:auto;right:initial;left:0}:host.is-desktop-button.end-button .nx-tab-scroll-indicator__divider{left:0}[dir=rtl] :host.is-desktop-button.end-button .nx-tab-scroll-indicator__divider{left:auto;left:initial;right:0}:host.is-mobile{width:16px}:host.is-mobile.start-button:not(.is-scrolled-to-start) .nx-tab-scroll-indicator__divider{right:0}[dir=rtl] :host.is-mobile.start-button:not(.is-scrolled-to-start) .nx-tab-scroll-indicator__divider{right:auto;right:initial;left:0}:host.is-mobile.end-button:not(.is-scrolled-to-end) .nx-tab-scroll-indicator__divider{left:0}[dir=rtl] :host.is-mobile.end-button:not(.is-scrolled-to-end) .nx-tab-scroll-indicator__divider{left:auto;left:initial;right:0}:host-context(nx-tab-group.is-expert),:host-context(nx-tab-nav-bar.is-expert){border-bottom:none;height:40px}:host-context(nx-tab-group.is-expert) .nx-tab-scroll-indicator__divider,:host-context(nx-tab-nav-bar.is-expert) .nx-tab-scroll-indicator__divider{height:24px;top:8px}:host-context(nx-tab-group.is-negative) button,:host-context(nx-tab-nav-bar.is-negative) button{color:var(--negative)}\n"], components: [{ type: i3.NxPlainButtonComponent, selector: "button[nxPlainButton]", inputs: ["nxPlainButton", "disabled"] }, { type: i4.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTabScrollIndicator, decorators: [{
            type: Component,
            args: [{ selector: 'nx-tab-scroll-indicator', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[class.start-button]': 'scrollDirection === "start"',
                        '[class.end-button]': 'scrollDirection === "end"',
                        '[class.is-desktop-button]': '_view === "desktop"',
                        '[class.is-mobile]': '_view === "mobile"',
                        '[class.is-scrolled-to-start]': 'isScrolledToStart',
                        '[class.is-scrolled-to-end]': 'isScrolledToEnd',
                    }, template: "<div class=\"nx-tab-scroll-indicator__divider\"></div>\n<button nxPlainButton aria-hidden=\"true\" type=\"button\" *ngIf=\"_view === 'desktop'\" (click)=\"scroll()\">\n    <nx-icon [name]=\"getChevronName()\"></nx-icon>\n</button>\n", styles: [":host{position:relative;border-color:var(--tab-item-border-color);border-bottom-width:1px;border-bottom-style:solid;flex:0 0 auto;height:44px}:host .nx-tab-scroll-indicator__divider{width:1px;height:32px;background:var(--tab-item-border-color);position:absolute;top:4px}:host.start-button.is-scrolled-to-start .nx-tab-scroll-indicator__divider,:host.end-button.is-scrolled-to-end .nx-tab-scroll-indicator__divider{display:none}:host.start-button.is-scrolled-to-start button,:host.end-button.is-scrolled-to-end button{display:none}:host.is-desktop-button{padding:8px 8px 10px;width:40px}:host.is-desktop-button.start-button.is-scrolled-to-start{display:none}:host.is-desktop-button button{vertical-align:bottom}:host.is-desktop-button.start-button .nx-tab-scroll-indicator__divider{right:0}[dir=rtl] :host.is-desktop-button.start-button .nx-tab-scroll-indicator__divider{right:auto;right:initial;left:0}:host.is-desktop-button.end-button .nx-tab-scroll-indicator__divider{left:0}[dir=rtl] :host.is-desktop-button.end-button .nx-tab-scroll-indicator__divider{left:auto;left:initial;right:0}:host.is-mobile{width:16px}:host.is-mobile.start-button:not(.is-scrolled-to-start) .nx-tab-scroll-indicator__divider{right:0}[dir=rtl] :host.is-mobile.start-button:not(.is-scrolled-to-start) .nx-tab-scroll-indicator__divider{right:auto;right:initial;left:0}:host.is-mobile.end-button:not(.is-scrolled-to-end) .nx-tab-scroll-indicator__divider{left:0}[dir=rtl] :host.is-mobile.end-button:not(.is-scrolled-to-end) .nx-tab-scroll-indicator__divider{left:auto;left:initial;right:0}:host-context(nx-tab-group.is-expert),:host-context(nx-tab-nav-bar.is-expert){border-bottom:none;height:40px}:host-context(nx-tab-group.is-expert) .nx-tab-scroll-indicator__divider,:host-context(nx-tab-nav-bar.is-expert) .nx-tab-scroll-indicator__divider{height:24px;top:8px}:host-context(nx-tab-group.is-negative) button,:host-context(nx-tab-nav-bar.is-negative) button{color:var(--negative)}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.NxViewportService }, { type: i2.Directionality, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { scrollDirection: [{
                type: Input
            }], isScrolledToStart: [{
                type: Input
            }], isScrolledToEnd: [{
                type: Input
            }], buttonClicked: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLWluZGljYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWFxdWlsYS9zcmMvdGFicy9zY3JvbGwtaW5kaWNhdG9yL3Njcm9sbC1pbmRpY2F0b3IudHMiLCIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1hcXVpbGEvc3JjL3RhYnMvc2Nyb2xsLWluZGljYXRvci9zY3JvbGwtaW5kaWNhdG9yLmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLHVCQUF1QixFQUFxQixTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBYSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hJLE9BQU8sRUFBRSxhQUFhLEVBQXFCLE1BQU0seUJBQXlCLENBQUM7QUFDM0UsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7Ozs7QUFrQjNDLE1BQU0sT0FBTyxvQkFBb0I7SUFhN0IsWUFBb0IsSUFBdUIsRUFBVSxnQkFBbUMsRUFBc0IsSUFBMkI7UUFBckgsU0FBSSxHQUFKLElBQUksQ0FBbUI7UUFBVSxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQW1CO1FBQXNCLFNBQUksR0FBSixJQUFJLENBQXVCO1FBWnpJLFVBQUssR0FBRyxTQUFTLENBQUM7UUFRUixrQkFBYSxHQUF1QixJQUFJLFlBQVksRUFBUSxDQUFDO1FBRXRELGVBQVUsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO1FBRzlDLElBQUksQ0FBQyxnQkFBZ0I7YUFDaEIsR0FBRyxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQzthQUNwQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUNoQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsRUFBRTtZQUM3QixJQUFJLG1CQUFtQixFQUFFO2dCQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQzthQUMxQjtpQkFBTSxJQUFJLENBQUMsbUJBQW1CLEVBQUU7Z0JBQzdCLElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDO2FBQ3pCO1lBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUM3QixDQUFDLENBQUMsQ0FBQztRQUNQLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUNqRyxDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRUQsSUFBSSxTQUFTO1FBQ1QsT0FBTyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssSUFBSSxLQUFLLENBQUM7SUFDckMsQ0FBQztJQUVELGNBQWM7UUFDVixJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsS0FBSyxPQUFPLElBQUksSUFBSSxDQUFDLFNBQVMsS0FBSyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEtBQUssS0FBSyxJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssS0FBSyxDQUFDLEVBQUU7WUFDaEksT0FBTyxjQUFjLENBQUM7U0FDekI7UUFDRCxPQUFPLGVBQWUsQ0FBQztJQUMzQixDQUFDO0lBRUQsTUFBTTtRQUNGLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDOUIsQ0FBQzs7aUhBOUNRLG9CQUFvQjtxR0FBcEIsb0JBQW9CLDZpQkN0QmpDLDBPQUlBOzJGRGtCYSxvQkFBb0I7a0JBZGhDLFNBQVM7K0JBQ0kseUJBQXlCLG1CQUdsQix1QkFBdUIsQ0FBQyxNQUFNLFFBQ3pDO3dCQUNGLHNCQUFzQixFQUFFLDZCQUE2Qjt3QkFDckQsb0JBQW9CLEVBQUUsMkJBQTJCO3dCQUNqRCwyQkFBMkIsRUFBRSxxQkFBcUI7d0JBQ2xELG1CQUFtQixFQUFFLG9CQUFvQjt3QkFDekMsOEJBQThCLEVBQUUsbUJBQW1CO3dCQUNuRCw0QkFBNEIsRUFBRSxpQkFBaUI7cUJBQ2xEOzswQkFlMEYsUUFBUTs0Q0FWMUYsZUFBZTtzQkFBdkIsS0FBSztnQkFFRyxpQkFBaUI7c0JBQXpCLEtBQUs7Z0JBRUcsZUFBZTtzQkFBdkIsS0FBSztnQkFFSSxhQUFhO3NCQUF0QixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aW9uLCBEaXJlY3Rpb25hbGl0eSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9iaWRpJztcbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkRlc3Ryb3ksIE9wdGlvbmFsLCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE54QnJlYWtwb2ludHMsIE54Vmlld3BvcnRTZXJ2aWNlIH0gZnJvbSAnQGFwb3Npbi9uZy1hcXVpbGEvdXRpbHMnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5leHBvcnQgdHlwZSBOeFNjcm9sbERpcmVjdGlvbiA9ICdzdGFydCcgfCAnZW5kJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdueC10YWItc2Nyb2xsLWluZGljYXRvcicsXG4gICAgdGVtcGxhdGVVcmw6ICdzY3JvbGwtaW5kaWNhdG9yLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL3Njcm9sbC1pbmRpY2F0b3Iuc2NzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgJ1tjbGFzcy5zdGFydC1idXR0b25dJzogJ3Njcm9sbERpcmVjdGlvbiA9PT0gXCJzdGFydFwiJyxcbiAgICAgICAgJ1tjbGFzcy5lbmQtYnV0dG9uXSc6ICdzY3JvbGxEaXJlY3Rpb24gPT09IFwiZW5kXCInLFxuICAgICAgICAnW2NsYXNzLmlzLWRlc2t0b3AtYnV0dG9uXSc6ICdfdmlldyA9PT0gXCJkZXNrdG9wXCInLFxuICAgICAgICAnW2NsYXNzLmlzLW1vYmlsZV0nOiAnX3ZpZXcgPT09IFwibW9iaWxlXCInLFxuICAgICAgICAnW2NsYXNzLmlzLXNjcm9sbGVkLXRvLXN0YXJ0XSc6ICdpc1Njcm9sbGVkVG9TdGFydCcsXG4gICAgICAgICdbY2xhc3MuaXMtc2Nyb2xsZWQtdG8tZW5kXSc6ICdpc1Njcm9sbGVkVG9FbmQnLFxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIE54VGFiU2Nyb2xsSW5kaWNhdG9yIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBfdmlldyA9ICdkZXNrdG9wJztcblxuICAgIEBJbnB1dCgpIHNjcm9sbERpcmVjdGlvbiE6IE54U2Nyb2xsRGlyZWN0aW9uO1xuXG4gICAgQElucHV0KCkgaXNTY3JvbGxlZFRvU3RhcnQhOiBib29sZWFuO1xuXG4gICAgQElucHV0KCkgaXNTY3JvbGxlZFRvRW5kITogYm9vbGVhbjtcblxuICAgIEBPdXRwdXQoKSBidXR0b25DbGlja2VkOiBFdmVudEVtaXR0ZXI8dm9pZD4gPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IF9kZXN0cm95ZWQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfY2RyOiBDaGFuZ2VEZXRlY3RvclJlZiwgcHJpdmF0ZSBfdmlld3BvcnRTZXJ2aWNlOiBOeFZpZXdwb3J0U2VydmljZSwgQE9wdGlvbmFsKCkgcHJpdmF0ZSBfZGlyOiBEaXJlY3Rpb25hbGl0eSB8IG51bGwpIHtcbiAgICAgICAgdGhpcy5fdmlld3BvcnRTZXJ2aWNlXG4gICAgICAgICAgICAubWluKE54QnJlYWtwb2ludHMuQlJFQUtQT0lOVF9NRURJVU0pXG4gICAgICAgICAgICAucGlwZSh0YWtlVW50aWwodGhpcy5fZGVzdHJveWVkKSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoaXNHcmVhdGVyVGhhbk1lZGl1bSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGlzR3JlYXRlclRoYW5NZWRpdW0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmlldyA9ICdkZXNrdG9wJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFpc0dyZWF0ZXJUaGFuTWVkaXVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZpZXcgPSAnbW9iaWxlJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2Rpcj8uY2hhbmdlLnBpcGUodGFrZVVudGlsKHRoaXMuX2Rlc3Ryb3llZCkpLnN1YnNjcmliZSgoKSA9PiB0aGlzLl9jZHIubWFya0ZvckNoZWNrKCkpO1xuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLl9kZXN0cm95ZWQubmV4dCgpO1xuICAgICAgICB0aGlzLl9kZXN0cm95ZWQuY29tcGxldGUoKTtcbiAgICB9XG5cbiAgICBnZXQgZGlyZWN0aW9uKCk6IERpcmVjdGlvbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kaXI/LnZhbHVlIHx8ICdsdHInO1xuICAgIH1cblxuICAgIGdldENoZXZyb25OYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIGlmICgodGhpcy5zY3JvbGxEaXJlY3Rpb24gPT09ICdzdGFydCcgJiYgdGhpcy5kaXJlY3Rpb24gPT09ICdsdHInKSB8fCAodGhpcy5zY3JvbGxEaXJlY3Rpb24gPT09ICdlbmQnICYmIHRoaXMuZGlyZWN0aW9uID09PSAncnRsJykpIHtcbiAgICAgICAgICAgIHJldHVybiAnY2hldnJvbi1sZWZ0JztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ2NoZXZyb24tcmlnaHQnO1xuICAgIH1cblxuICAgIHNjcm9sbCgpIHtcbiAgICAgICAgdGhpcy5idXR0b25DbGlja2VkLmVtaXQoKTtcbiAgICB9XG59XG4iLCI8ZGl2IGNsYXNzPVwibngtdGFiLXNjcm9sbC1pbmRpY2F0b3JfX2RpdmlkZXJcIj48L2Rpdj5cbjxidXR0b24gbnhQbGFpbkJ1dHRvbiBhcmlhLWhpZGRlbj1cInRydWVcIiB0eXBlPVwiYnV0dG9uXCIgKm5nSWY9XCJfdmlldyA9PT0gJ2Rlc2t0b3AnXCIgKGNsaWNrKT1cInNjcm9sbCgpXCI+XG4gICAgPG54LWljb24gW25hbWVdPVwiZ2V0Q2hldnJvbk5hbWUoKVwiPjwvbngtaWNvbj5cbjwvYnV0dG9uPlxuIl19