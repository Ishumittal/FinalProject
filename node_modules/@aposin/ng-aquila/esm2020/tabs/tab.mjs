import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ChangeDetectionStrategy, Component, ContentChild, Host, Inject, Input, Optional, TemplateRef, ViewChild, } from '@angular/core';
import { Subject } from 'rxjs';
import { NxTabContentDirective } from './tab-content';
import { NxTabGroupBase } from './tab-group-base';
import { NxTabLabelDirective } from './tab-label';
import * as i0 from "@angular/core";
import * as i1 from "./tab-group-base";
export class NxTabComponent {
    constructor(_tabGroup) {
        this._tabGroup = _tabGroup;
        this._disabled = false;
        /** Emits whenever the internal state of the tab changes. */
        this._stateChanges = new Subject();
        /**
         * Whether the tab is currently active.
         */
        this.isActive = false;
        if (!this._tabGroup) {
            throw Error(`The nx-tab element has to be wrapped in a nx-tab-group to work.
      Please provide a nx-tab-group element and place your tabs inside it.`);
        }
    }
    /**
     * Content for the tab label given by `<ng-template nxTabLabel>`.
     * @docs-private
     * */
    get templateLabel() {
        return this._templateLabel;
    }
    set templateLabel(value) {
        // Only update the templateLabel via query if there is actually
        // a nxTabLabel found. This works around an issue where a user may have
        // manually set `templateLabel` during creation mode, which would then get clobbered
        // by `undefined` when this query resolves.
        if (value) {
            this._templateLabel = value;
        }
    }
    /** Sets the label of the tab shown in the tablist. */
    get label() {
        return this._label;
    }
    set label(value) {
        if (this._label !== value) {
            this._label = value;
        }
    }
    /** Sets the tab to disabled. */
    get disabled() {
        return this._tabGroup?.disabled || this._disabled;
    }
    set disabled(value) {
        const coercedValue = coerceBooleanProperty(value);
        if (this._disabled !== coercedValue) {
            this._disabled = coercedValue;
        }
    }
    /** @docs-private */
    get headerViewRef() {
        return this._headerViewRef;
    }
    /** @docs-private */
    get contentViewRef() {
        // for lazy loading we only create the viewref when it is asked for
        if (!this._contentViewRef) {
            const contentTemplate = this._explicitContent || this._implicitContent;
            this._contentViewRef = contentTemplate.createEmbeddedView({});
        }
        return this._contentViewRef;
    }
    ngOnChanges(changes) {
        if ({}.hasOwnProperty.call(changes, 'label') || {}.hasOwnProperty.call(changes, 'disabled')) {
            this._stateChanges.next();
        }
    }
    ngAfterContentInit() {
        if (this.templateLabel) {
            this._headerViewRef = this.templateLabel.createEmbeddedView({});
        }
    }
    ngOnDestroy() {
        this._stateChanges.complete();
        this._contentViewRef.destroy();
        if (this._headerViewRef) {
            this._headerViewRef.destroy();
        }
    }
}
NxTabComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTabComponent, deps: [{ token: NxTabGroupBase, host: true, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NxTabComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxTabComponent, selector: "nx-tab", inputs: { label: "label", disabled: "disabled" }, queries: [{ propertyName: "templateLabel", first: true, predicate: NxTabLabelDirective, descendants: true, read: TemplateRef, static: true }, { propertyName: "_explicitContent", first: true, predicate: NxTabContentDirective, descendants: true, read: TemplateRef, static: true }], viewQueries: [{ propertyName: "_implicitContent", first: true, predicate: TemplateRef, descendants: true, static: true }], exportAs: ["nxTab"], usesOnChanges: true, ngImport: i0, template: "<ng-template><ng-content></ng-content></ng-template>\n", changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTabComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-tab', exportAs: 'nxTab', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-template><ng-content></ng-content></ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.NxTabGroupBase, decorators: [{
                    type: Inject,
                    args: [NxTabGroupBase]
                }, {
                    type: Optional
                }, {
                    type: Host
                }] }]; }, propDecorators: { templateLabel: [{
                type: ContentChild,
                args: [NxTabLabelDirective, { read: TemplateRef, static: true }]
            }], _implicitContent: [{
                type: ViewChild,
                args: [TemplateRef, { static: true }]
            }], _explicitContent: [{
                type: ContentChild,
                args: [NxTabContentDirective, { read: TemplateRef, static: true }]
            }], label: [{
                type: Input
            }], disabled: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,