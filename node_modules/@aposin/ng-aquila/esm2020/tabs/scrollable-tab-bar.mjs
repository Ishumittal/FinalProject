import { Directive, Optional } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/bidi";
const SPACE_BETWEEN_TABS = 32;
const START_BUTTON_WIDTH = 40;
/** @docs-private */
export class NxScrollableTabBar {
    constructor(_cdr, _dir, _element) {
        this._cdr = _cdr;
        this._dir = _dir;
        this._element = _element;
        this._isScrolledToStart = true;
        this._isScrolledToEnd = true;
        this._destroyed = new Subject();
        this._scrollHandler = (event) => {
            this._updateScrollButtons();
        };
        this._dir?.change.pipe(takeUntil(this._destroyed)).subscribe(() => {
            if (this.scrollableTabsList?.nativeElement.scrollLeft !== 0) {
                const absoluteScrollLeft = Math.abs(this.scrollableTabsList?.nativeElement.scrollLeft);
                setTimeout(() => {
                    this.scrollableTabsList.nativeElement.scrollLeft = this.direction === 'ltr' ? absoluteScrollLeft : -absoluteScrollLeft;
                });
            }
        });
    }
    ngAfterContentInit() {
        this.tabButtons.changes.pipe(takeUntil(this._destroyed)).subscribe(() => setTimeout(() => this._updateScrollButtons()));
        setTimeout(() => {
            this.scrollableTabsList.nativeElement.addEventListener('scroll', this._scrollHandler);
            this._updateScrollButtons();
        });
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
    get direction() {
        return this._dir?.value || 'ltr';
    }
    get scrollable() {
        return !this._isScrolledToStart || !this._isScrolledToEnd;
    }
    scrollToStart() {
        const scrollListElement = this.scrollableTabsList.nativeElement;
        const tabsListWidth = scrollListElement.getBoundingClientRect().width;
        const headerScrollPosition = Math.abs(scrollListElement.scrollLeft);
        let lastVisiblePosition = 0;
        let itemToScrollTo;
        for (let i = 0; i < scrollListElement.children.length; i++) {
            const currentChildWidth = scrollListElement.children[i].getBoundingClientRect().width;
            const currentChildStartsBeforeLeftEdge = lastVisiblePosition < headerScrollPosition;
            const currentChildFullyVisible = currentChildStartsBeforeLeftEdge && lastVisiblePosition + currentChildWidth >= headerScrollPosition;
            const currentChildNotFullyVisible = currentChildStartsBeforeLeftEdge && lastVisiblePosition + currentChildWidth < headerScrollPosition;
            const nextChildFullyVisible = lastVisiblePosition + currentChildWidth + SPACE_BETWEEN_TABS >= headerScrollPosition;
            if (currentChildFullyVisible || (currentChildNotFullyVisible && nextChildFullyVisible)) {
                // add width of current child. This is now the point which has to be visible on the right side:
                lastVisiblePosition += currentChildWidth;
                itemToScrollTo = i;
                break;
            }
            else {
                // current and next child are fully visible: continue
                lastVisiblePosition += currentChildWidth + SPACE_BETWEEN_TABS;
            }
        }
        // now go back to start one by one and find the item most to the start where the lastVisibleItem is still fully visible
        let newPosition = lastVisiblePosition;
        for (let i = itemToScrollTo; i >= 0; i--) {
            const currentChildWidth = scrollListElement.children[i].getBoundingClientRect().width;
            const previousChildWidth = i > 0 ? scrollListElement.children[i - 1].getBoundingClientRect().width : 0;
            const currentChildFitsInWidth = lastVisiblePosition - (newPosition - currentChildWidth) <= tabsListWidth;
            const previousChildFitsInWidth = lastVisiblePosition - (newPosition - currentChildWidth - SPACE_BETWEEN_TABS - previousChildWidth) <= tabsListWidth;
            if (!previousChildWidth) {
                this._scrollTabListTo(0);
                return;
            }
            else if (currentChildWidth > tabsListWidth || (currentChildFitsInWidth && !previousChildFitsInWidth)) {
                // found item where scrolling should be starting: beginning of currentChild
                newPosition -= currentChildWidth;
                this._scrollTabListTo(this.direction === 'ltr' ? newPosition : -newPosition);
                return;
            }
            // current and previous child fit: continue
            newPosition -= currentChildWidth + SPACE_BETWEEN_TABS;
        }
    }
    scrollToEnd() {
        const scrollListElement = this.scrollableTabsList.nativeElement;
        const tabsListWidth = scrollListElement.getBoundingClientRect().width;
        const headerScrollPosition = Math.abs(scrollListElement.scrollLeft);
        let newPosition = 0;
        for (let i = 0; i < scrollListElement.children.length; i++) {
            const currentChildWidth = scrollListElement.children[i].getBoundingClientRect().width;
            const nextChildWidth = i < scrollListElement.children.length - 1 ? scrollListElement.children[i + 1].getBoundingClientRect().width : 0;
            const currentChildFullyVisible = newPosition + currentChildWidth <= headerScrollPosition + tabsListWidth;
            const nextChildFullyVisible = newPosition + currentChildWidth + SPACE_BETWEEN_TABS + nextChildWidth <= headerScrollPosition + tabsListWidth;
            const currentChildHalfVisible = currentChildWidth - START_BUTTON_WIDTH + SPACE_BETWEEN_TABS + nextChildWidth > tabsListWidth;
            if (currentChildFullyVisible && !nextChildFullyVisible) {
                // current item is the one to scroll to (minus space for scrollStartButton)
                // calculate: if nextChild is too long and does not fit fully in header, then the next child should be the first one visible
                if (Math.abs(headerScrollPosition - Math.round(newPosition + currentChildWidth + SPACE_BETWEEN_TABS)) <= 2) {
                    // it is already scrolled to the nextChild, but nextChild is longer than whole tabsListWidth => scroll to nextNextChild
                    // this is done if the current scrollLeft Position is ~ the start of nextChild
                    newPosition += currentChildWidth + SPACE_BETWEEN_TABS + nextChildWidth + SPACE_BETWEEN_TABS;
                }
                else if (currentChildHalfVisible) {
                    // if currentItem is half visible, the nextItem would be not fully visible
                    // => new scroll position: show nextItem right after scrollToStart button
                    newPosition += currentChildWidth + SPACE_BETWEEN_TABS;
                }
                else {
                    // else: currentItem should be half visible, scrollToStart button is covering half of it
                    newPosition += START_BUTTON_WIDTH;
                }
                this._scrollTabListTo(this.direction === 'ltr' ? newPosition : -newPosition);
                return;
            }
            // current and next element are fully visible: add width of current element and continue
            newPosition += currentChildWidth + SPACE_BETWEEN_TABS;
        }
    }
    _updateScrollButtons() {
        const scrollListElement = this.scrollableTabsList.nativeElement;
        if (Math.round(this._element.nativeElement.getBoundingClientRect().width) >= scrollListElement.scrollWidth) {
            // not scrollable
            if (!this._isScrolledToStart || !this._isScrolledToEnd) {
                this._isScrolledToStart = true;
                this._isScrolledToEnd = true;
                this._cdr.markForCheck();
            }
            return;
        }
        // scrollable
        if (this.scrollableTabsList?.nativeElement.scrollLeft === 0 && !this._isScrolledToStart) {
            this._isScrolledToStart = true;
            this._cdr.markForCheck();
        }
        else if (this.scrollableTabsList?.nativeElement.scrollLeft !== 0 && this._isScrolledToStart) {
            this._isScrolledToStart = false;
            this._cdr.markForCheck();
        }
        const scrollRight = Math.round(Math.abs(scrollListElement.scrollLeft) + scrollListElement.getBoundingClientRect().width);
        if (scrollRight === scrollListElement.scrollWidth && !this._isScrolledToEnd) {
            this._isScrolledToEnd = true;
            this._cdr.markForCheck();
        }
        else if (scrollRight !== scrollListElement.scrollWidth && this._isScrolledToEnd) {
            this._isScrolledToEnd = false;
            this._cdr.markForCheck();
        }
    }
    _scrollTabListTo(scrollLeft) {
        if (typeof this.scrollableTabsList?.nativeElement.scrollTo === 'function') {
            this.scrollableTabsList?.nativeElement.scrollTo({ left: scrollLeft, behavior: 'smooth' });
        }
        else {
            // scrollTo() is not defined on IE
            this.scrollableTabsList.nativeElement.scrollLeft = scrollLeft;
        }
    }
}
NxScrollableTabBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxScrollableTabBar, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.Directionality, optional: true }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
NxScrollableTabBar.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxScrollableTabBar, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxScrollableTabBar, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.Directionality, decorators: [{
                    type: Optional
                }] }, { type: i0.ElementRef }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsYWJsZS10YWItYmFyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctYXF1aWxhL3NyYy90YWJzL3Njcm9sbGFibGUtdGFiLWJhci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQXVDLFNBQVMsRUFBeUIsUUFBUSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQzNILE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7QUFFM0MsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUM7QUFDOUIsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUM7QUFFOUIsb0JBQW9CO0FBRXBCLE1BQU0sT0FBZ0Isa0JBQWtCO0lBVXBDLFlBQW1CLElBQXVCLEVBQXNCLElBQTJCLEVBQVUsUUFBb0I7UUFBdEcsU0FBSSxHQUFKLElBQUksQ0FBbUI7UUFBc0IsU0FBSSxHQUFKLElBQUksQ0FBdUI7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFZO1FBTHpILHVCQUFrQixHQUFHLElBQUksQ0FBQztRQUMxQixxQkFBZ0IsR0FBRyxJQUFJLENBQUM7UUFFUCxlQUFVLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQTBCbEQsbUJBQWMsR0FBRyxDQUFDLEtBQVksRUFBUSxFQUFFO1lBQ3BDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1FBQ2hDLENBQUMsQ0FBQztRQXpCRSxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDOUQsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUUsYUFBYSxDQUFDLFVBQVUsS0FBSyxDQUFDLEVBQUU7Z0JBQ3pELE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFD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QUN2QyxJQUFJLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixFQUFFLGFBQWEsQ0FBQyxRQUFRLEtBQUssVUFBVSxFQUFFO1lBQ3ZFLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztTQUM3RjthQUFNO1lBQ0gsa0NBQWtDO1lBQ2xDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxhQUFhLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztTQUNqRTtJQUNMLENBQUM7OytHQTFLaUIsa0JBQWtCO21HQUFsQixrQkFBa0I7MkZBQWxCLGtCQUFrQjtrQkFEdkMsU0FBUzs7MEJBV3VDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3Rpb24sIERpcmVjdGlvbmFsaXR5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2JpZGknO1xuaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgT25EZXN0cm95LCBPcHRpb25hbCwgUXVlcnlMaXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmNvbnN0IFNQQUNFX0JFVFdFRU5fVEFCUyA9IDMyO1xuY29uc3QgU1RBUlRfQlVUVE9OX1dJRFRIID0gNDA7XG5cbi8qKiBAZG9jcy1wcml2YXRlICovXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBOeFNjcm9sbGFibGVUYWJCYXIgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuICAgIHRhYkhlYWRlckNvbnRhaW5lciE6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+O1xuICAgIHNjcm9sbGFibGVUYWJzTGlzdCE6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+O1xuICAgIHRhYkJ1dHRvbnMhOiBRdWVyeUxpc3Q8SFRNTEVsZW1lbnQ+O1xuXG4gICAgX2lzU2Nyb2xsZWRUb1N0YXJ0ID0gdHJ1ZTtcbiAgICBfaXNTY3JvbGxlZFRvRW5kID0gdHJ1ZTtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2Rlc3Ryb3llZCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgX2NkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIEBPcHRpb25hbCgpIHByaXZhdGUgX2RpcjogRGlyZWN0aW9uYWxpdHkgfCBudWxsLCBwcml2YXRlIF9lbGVtZW50OiBFbGVtZW50UmVmKSB7XG4gICAgICAgIHRoaXMuX2Rpcj8uY2hhbmdlLnBpcGUodGFrZVVudGlsKHRoaXMuX2Rlc3Ryb3llZCkpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5zY3JvbGxhYmxlVGFic0xpc3Q/Lm5hdGl2ZUVsZW1lbnQuc2Nyb2xsTGVmdCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFic29sdXRlU2Nyb2xsTGVmdCA9IE1hdGguYWJzKHRoaXMuc2Nyb2xsYWJsZVRhYnNMaXN0Py5uYXRpdmVFbGVtZW50LnNjcm9sbExlZnQpO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbGFibGVUYWJzTGlzdC5uYXRpdmVFbGVtZW50LnNjcm9sbExlZnQgPSB0aGlzLmRpcmVjdGlvbiA9PT0gJ2x0cicgPyBhYnNvbHV0ZVNjcm9sbExlZnQgOiAtYWJzb2x1dGVTY3JvbGxMZWZ0O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgICAgIHRoaXMudGFiQnV0dG9ucy5jaGFuZ2VzLnBpcGUodGFrZVVudGlsKHRoaXMuX2Rlc3Ryb3llZCkpLnN1YnNjcmliZSgoKSA9PiBzZXRUaW1lb3V0KCgpID0+IHRoaXMuX3VwZGF0ZVNjcm9sbEJ1dHRvbnMoKSkpO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsYWJsZVRhYnNMaXN0Lm5hdGl2ZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5fc2Nyb2xsSGFuZGxlcik7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVTY3JvbGxCdXR0b25zKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLl9kZXN0cm95ZWQubmV4dCgpO1xuICAgICAgICB0aGlzLl9kZXN0cm95ZWQuY29tcGxldGUoKTtcbiAgICB9XG5cbiAgICBfc2Nyb2xsSGFuZGxlciA9IChldmVudDogRXZlbnQpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5fdXBkYXRlU2Nyb2xsQnV0dG9ucygpO1xuICAgIH07XG5cbiAgICBnZXQgZGlyZWN0aW9uKCk6IERpcmVjdGlvbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kaXI/LnZhbHVlIHx8ICdsdHInO1xuICAgIH1cblxuICAgIGdldCBzY3JvbGxhYmxlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gIXRoaXMuX2lzU2Nyb2xsZWRUb1N0YXJ0IHx8ICF0aGlzLl9pc1Njcm9sbGVkVG9FbmQ7XG4gICAgfVxuXG4gICAgc2Nyb2xsVG9TdGFydCgpIHtcbiAgICAgICAgY29uc3Qgc2Nyb2xsTGlzdEVsZW1lbnQgPSB0aGlzLnNjcm9sbGFibGVUYWJzTGlzdC5uYXRpdmVFbGVtZW50O1xuICAgICAgICBjb25zdCB0YWJzTGlzdFdpZHRoID0gc2Nyb2xsTGlzdEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gICAgICAgIGNvbnN0IGhlYWRlclNjcm9sbFBvc2l0aW9uID0gTWF0aC5hYnMoc2Nyb2xsTGlzdEVsZW1lbnQuc2Nyb2xsTGVmdCk7XG4gICAgICAgIGxldCBsYXN0VmlzaWJsZVBvc2l0aW9uID0gMDtcbiAgICAgICAgbGV0IGl0ZW1Ub1Njcm9sbFRvITogbnVtYmVyO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2Nyb2xsTGlzdEVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDaGlsZFdpZHRoID0gc2Nyb2xsTGlzdEVsZW1lbnQuY2hpbGRyZW5baV0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Q2hpbGRTdGFydHNCZWZvcmVMZWZ0RWRnZSA9IGxhc3RWaXNpYmxlUG9zaXRpb24gPCBoZWFkZXJTY3JvbGxQb3NpdGlvbjtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDaGlsZEZ1bGx5VmlzaWJsZSA9IGN1cnJlbnRDaGlsZFN0YXJ0c0JlZm9yZUxlZnRFZGdlICYmIGxhc3RWaXNpYmxlUG9zaXRpb24gKyBjdXJyZW50Q2hpbGRXaWR0aCA+PSBoZWFkZXJTY3JvbGxQb3NpdGlvbjtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDaGlsZE5vdEZ1bGx5VmlzaWJsZSA9IGN1cnJlbnRDaGlsZFN0YXJ0c0JlZm9yZUxlZnRFZGdlICYmIGxhc3RWaXNpYmxlUG9zaXRpb24gKyBjdXJyZW50Q2hpbGRXaWR0aCA8IGhlYWRlclNjcm9sbFBvc2l0aW9uO1xuICAgICAgICAgICAgY29uc3QgbmV4dENoaWxkRnVsbHlWaXNpYmxlID0gbGFzdFZpc2libGVQb3NpdGlvbiArIGN1cnJlbnRDaGlsZFdpZHRoICsgU1BBQ0VfQkVUV0VFTl9UQUJTID49IGhlYWRlclNjcm9sbFBvc2l0aW9uO1xuXG4gICAgICAgICAgICBpZiAoY3VycmVudENoaWxkRnVsbHlWaXNpYmxlIHx8IChjdXJyZW50Q2hpbGROb3RGdWxseVZpc2libGUgJiYgbmV4dENoaWxkRnVsbHlWaXNpYmxlKSkge1xuICAgICAgICAgICAgICAgIC8vIGFkZCB3aWR0aCBvZiBjdXJyZW50IGNoaWxkLiBUaGlzIGlzIG5vdyB0aGUgcG9pbnQgd2hpY2ggaGFzIHRvIGJlIHZpc2libGUgb24gdGhlIHJpZ2h0IHNpZGU6XG4gICAgICAgICAgICAgICAgbGFzdFZpc2libGVQb3NpdGlvbiArPSBjdXJyZW50Q2hpbGRXaWR0aDtcbiAgICAgICAgICAgICAgICBpdGVtVG9TY3JvbGxUbyA9IGk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGN1cnJlbnQgYW5kIG5leHQgY2hpbGQgYXJlIGZ1bGx5IHZpc2libGU6IGNvbnRpbnVlXG4gICAgICAgICAgICAgICAgbGFzdFZpc2libGVQb3NpdGlvbiArPSBjdXJyZW50Q2hpbGRXaWR0aCArIFNQQUNFX0JFVFdFRU5fVEFCUztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG5vdyBnbyBiYWNrIHRvIHN0YXJ0IG9uZSBieSBvbmUgYW5kIGZpbmQgdGhlIGl0ZW0gbW9zdCB0byB0aGUgc3RhcnQgd2hlcmUgdGhlIGxhc3RWaXNpYmxlSXRlbSBpcyBzdGlsbCBmdWxseSB2aXNpYmxlXG4gICAgICAgIGxldCBuZXdQb3NpdGlvbiA9IGxhc3RWaXNpYmxlUG9zaXRpb247XG4gICAgICAgIGZvciAobGV0IGkgPSBpdGVtVG9TY3JvbGxUbzsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDaGlsZFdpZHRoID0gc2Nyb2xsTGlzdEVsZW1lbnQuY2hpbGRyZW5baV0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gICAgICAgICAgICBjb25zdCBwcmV2aW91c0NoaWxkV2lkdGggPSBpID4gMCA/IHNjcm9sbExpc3RFbGVtZW50LmNoaWxkcmVuW2kgLSAxXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCA6IDA7XG5cbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDaGlsZEZpdHNJbldpZHRoID0gbGFzdFZpc2libGVQb3NpdGlvbiAtIChuZXdQb3NpdGlvbiAtIGN1cnJlbnRDaGlsZFdpZHRoKSA8PSB0YWJzTGlzdFdpZHRoO1xuICAgICAgICAgICAgY29uc3QgcHJldmlvdXNDaGlsZEZpdHNJbldpZHRoID0gbGFzdFZpc2libGVQb3NpdGlvbiAtIChuZXdQb3NpdGlvbiAtIGN1cnJlbnRDaGlsZFdpZHRoIC0gU1BBQ0VfQkVUV0VFTl9UQUJTIC0gcHJldmlvdXNDaGlsZFdpZHRoKSA8PSB0YWJzTGlzdFdpZHRoO1xuXG4gICAgICAgICAgICBpZiAoIXByZXZpb3VzQ2hpbGRXaWR0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Njcm9sbFRhYkxpc3RUbygwKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRDaGlsZFdpZHRoID4gdGFic0xpc3RXaWR0aCB8fCAoY3VycmVudENoaWxkRml0c0luV2lkdGggJiYgIXByZXZpb3VzQ2hpbGRGaXRzSW5XaWR0aCkpIHtcbiAgICAgICAgICAgICAgICAvLyBmb3VuZCBpdGVtIHdoZXJlIHNjcm9sbGluZyBzaG91bGQgYmUgc3RhcnRpbmc6IGJlZ2lubmluZyBvZiBjdXJyZW50Q2hpbGRcbiAgICAgICAgICAgICAgICBuZXdQb3NpdGlvbiAtPSBjdXJyZW50Q2hpbGRXaWR0aDtcbiAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGxUYWJMaXN0VG8odGhpcy5kaXJlY3Rpb24gPT09ICdsdHInID8gbmV3UG9zaXRpb24gOiAtbmV3UG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGN1cnJlbnQgYW5kIHByZXZpb3VzIGNoaWxkIGZpdDogY29udGludWVcbiAgICAgICAgICAgIG5ld1Bvc2l0aW9uIC09IGN1cnJlbnRDaGlsZFdpZHRoICsgU1BBQ0VfQkVUV0VFTl9UQUJTO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2Nyb2xsVG9FbmQoKSB7XG4gICAgICAgIGNvbnN0IHNjcm9sbExpc3RFbGVtZW50ID0gdGhpcy5zY3JvbGxhYmxlVGFic0xpc3QubmF0aXZlRWxlbWVudDtcbiAgICAgICAgY29uc3QgdGFic0xpc3RXaWR0aCA9IHNjcm9sbExpc3RFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xuICAgICAgICBjb25zdCBoZWFkZXJTY3JvbGxQb3NpdGlvbiA9IE1hdGguYWJzKHNjcm9sbExpc3RFbGVtZW50LnNjcm9sbExlZnQpO1xuICAgICAgICBsZXQgbmV3UG9zaXRpb24gPSAwO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2Nyb2xsTGlzdEVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDaGlsZFdpZHRoID0gc2Nyb2xsTGlzdEVsZW1lbnQuY2hpbGRyZW5baV0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gICAgICAgICAgICBjb25zdCBuZXh0Q2hpbGRXaWR0aCA9IGkgPCBzY3JvbGxMaXN0RWxlbWVudC5jaGlsZHJlbi5sZW5ndGggLSAxID8gc2Nyb2xsTGlzdEVsZW1lbnQuY2hpbGRyZW5baSArIDFdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIDogMDtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDaGlsZEZ1bGx5VmlzaWJsZSA9IG5ld1Bvc2l0aW9uICsgY3VycmVudENoaWxkV2lkdGggPD0gaGVhZGVyU2Nyb2xsUG9zaXRpb24gKyB0YWJzTGlzdFdpZHRoO1xuICAgICAgICAgICAgY29uc3QgbmV4dENoaWxkRnVsbHlWaXNpYmxlID0gbmV3UG9zaXRpb24gKyBjdXJyZW50Q2hpbGRXaWR0aCArIFNQQUNFX0JFVFdFRU5fVEFCUyArIG5leHRDaGlsZFdpZHRoIDw9IGhlYWRlclNjcm9sbFBvc2l0aW9uICsgdGFic0xpc3RXaWR0aDtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDaGlsZEhhbGZWaXNpYmxlID0gY3VycmVudENoaWxkV2lkdGggLSBTVEFSVF9CVVRUT05fV0lEVEggKyBTUEFDRV9CRVRXRUVOX1RBQlMgKyBuZXh0Q2hpbGRXaWR0aCA+IHRhYnNMaXN0V2lkdGg7XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50Q2hpbGRGdWxseVZpc2libGUgJiYgIW5leHRDaGlsZEZ1bGx5VmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIC8vIGN1cnJlbnQgaXRlbSBpcyB0aGUgb25lIHRvIHNjcm9sbCB0byAobWludXMgc3BhY2UgZm9yIHNjcm9sbFN0YXJ0QnV0dG9uKVxuICAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZTogaWYgbmV4dENoaWxkIGlzIHRvbyBsb25nIGFuZCBkb2VzIG5vdCBmaXQgZnVsbHkgaW4gaGVhZGVyLCB0aGVuIHRoZSBuZXh0IGNoaWxkIHNob3VsZCBiZSB0aGUgZmlyc3Qgb25lIHZpc2libGVcblxuICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhoZWFkZXJTY3JvbGxQb3NpdGlvbiAtIE1hdGgucm91bmQobmV3UG9zaXRpb24gKyBjdXJyZW50Q2hpbGRXaWR0aCArIFNQQUNFX0JFVFdFRU5fVEFCUykpIDw9IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaXQgaXMgYWxyZWFkeSBzY3JvbGxlZCB0byB0aGUgbmV4dENoaWxkLCBidXQgbmV4dENoaWxkIGlzIGxvbmdlciB0aGFuIHdob2xlIHRhYnNMaXN0V2lkdGggPT4gc2Nyb2xsIHRvIG5leHROZXh0Q2hpbGRcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBkb25lIGlmIHRoZSBjdXJyZW50IHNjcm9sbExlZnQgUG9zaXRpb24gaXMgfiB0aGUgc3RhcnQgb2YgbmV4dENoaWxkXG4gICAgICAgICAgICAgICAgICAgIG5ld1Bvc2l0aW9uICs9IGN1cnJlbnRDaGlsZFdpZHRoICsgU1BBQ0VfQkVUV0VFTl9UQUJTICsgbmV4dENoaWxkV2lkdGggKyBTUEFDRV9CRVRXRUVOX1RBQlM7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50Q2hpbGRIYWxmVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiBjdXJyZW50SXRlbSBpcyBoYWxmIHZpc2libGUsIHRoZSBuZXh0SXRlbSB3b3VsZCBiZSBub3QgZnVsbHkgdmlzaWJsZVxuICAgICAgICAgICAgICAgICAgICAvLyA9PiBuZXcgc2Nyb2xsIHBvc2l0aW9uOiBzaG93IG5leHRJdGVtIHJpZ2h0IGFmdGVyIHNjcm9sbFRvU3RhcnQgYnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIG5ld1Bvc2l0aW9uICs9IGN1cnJlbnRDaGlsZFdpZHRoICsgU1BBQ0VfQkVUV0VFTl9UQUJTO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVsc2U6IGN1cnJlbnRJdGVtIHNob3VsZCBiZSBoYWxmIHZpc2libGUsIHNjcm9sbFRvU3RhcnQgYnV0dG9uIGlzIGNvdmVyaW5nIGhhbGYgb2YgaXRcbiAgICAgICAgICAgICAgICAgICAgbmV3UG9zaXRpb24gKz0gU1RBUlRfQlVUVE9OX1dJRFRIO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGxUYWJMaXN0VG8odGhpcy5kaXJlY3Rpb24gPT09ICdsdHInID8gbmV3UG9zaXRpb24gOiAtbmV3UG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGN1cnJlbnQgYW5kIG5leHQgZWxlbWVudCBhcmUgZnVsbHkgdmlzaWJsZTogYWRkIHdpZHRoIG9mIGN1cnJlbnQgZWxlbWVudCBhbmQgY29udGludWVcbiAgICAgICAgICAgIG5ld1Bvc2l0aW9uICs9IGN1cnJlbnRDaGlsZFdpZHRoICsgU1BBQ0VfQkVUV0VFTl9UQUJTO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3VwZGF0ZVNjcm9sbEJ1dHRvbnMoKSB7XG4gICAgICAgIGNvbnN0IHNjcm9sbExpc3RFbGVtZW50ID0gdGhpcy5zY3JvbGxhYmxlVGFic0xpc3QubmF0aXZlRWxlbWVudDtcbiAgICAgICAgaWYgKE1hdGgucm91bmQodGhpcy5fZWxlbWVudC5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoKSA+PSBzY3JvbGxMaXN0RWxlbWVudC5zY3JvbGxXaWR0aCkge1xuICAgICAgICAgICAgLy8gbm90IHNjcm9sbGFibGVcbiAgICAgICAgICAgIGlmICghdGhpcy5faXNTY3JvbGxlZFRvU3RhcnQgfHwgIXRoaXMuX2lzU2Nyb2xsZWRUb0VuZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2lzU2Nyb2xsZWRUb1N0YXJ0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9pc1Njcm9sbGVkVG9FbmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Nkci5tYXJrRm9yQ2hlY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNjcm9sbGFibGVcbiAgICAgICAgaWYgKHRoaXMuc2Nyb2xsYWJsZVRhYnNMaXN0Py5uYXRpdmVFbGVtZW50LnNjcm9sbExlZnQgPT09IDAgJiYgIXRoaXMuX2lzU2Nyb2xsZWRUb1N0YXJ0KSB7XG4gICAgICAgICAgICB0aGlzLl9pc1Njcm9sbGVkVG9TdGFydCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zY3JvbGxhYmxlVGFic0xpc3Q/Lm5hdGl2ZUVsZW1lbnQuc2Nyb2xsTGVmdCAhPT0gMCAmJiB0aGlzLl9pc1Njcm9sbGVkVG9TdGFydCkge1xuICAgICAgICAgICAgdGhpcy5faXNTY3JvbGxlZFRvU3RhcnQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuX2Nkci5tYXJrRm9yQ2hlY2soKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNjcm9sbFJpZ2h0ID0gTWF0aC5yb3VuZChNYXRoLmFicyhzY3JvbGxMaXN0RWxlbWVudC5zY3JvbGxMZWZ0KSArIHNjcm9sbExpc3RFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoKTtcblxuICAgICAgICBpZiAoc2Nyb2xsUmlnaHQgPT09IHNjcm9sbExpc3RFbGVtZW50LnNjcm9sbFdpZHRoICYmICF0aGlzLl9pc1Njcm9sbGVkVG9FbmQpIHtcbiAgICAgICAgICAgIHRoaXMuX2lzU2Nyb2xsZWRUb0VuZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2Nyb2xsUmlnaHQgIT09IHNjcm9sbExpc3RFbGVtZW50LnNjcm9sbFdpZHRoICYmIHRoaXMuX2lzU2Nyb2xsZWRUb0VuZCkge1xuICAgICAgICAgICAgdGhpcy5faXNTY3JvbGxlZFRvRW5kID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIF9zY3JvbGxUYWJMaXN0VG8oc2Nyb2xsTGVmdDogbnVtYmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5zY3JvbGxhYmxlVGFic0xpc3Q/Lm5hdGl2ZUVsZW1lbnQuc2Nyb2xsVG8gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsYWJsZVRhYnNMaXN0Py5uYXRpdmVFbGVtZW50LnNjcm9sbFRvKHsgbGVmdDogc2Nyb2xsTGVmdCwgYmVoYXZpb3I6ICdzbW9vdGgnIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gc2Nyb2xsVG8oKSBpcyBub3QgZGVmaW5lZCBvbiBJRVxuICAgICAgICAgICAgdGhpcy5zY3JvbGxhYmxlVGFic0xpc3QubmF0aXZlRWxlbWVudC5zY3JvbGxMZWZ0ID0gc2Nyb2xsTGVmdDtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==