import { Directive, forwardRef, Inject } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import * as IBAN from 'iban';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { NxMaskDirective } from './mask.directive';
import * as i0 from "@angular/core";
import * as i1 from "./mask.directive";
export const NX_IBAN_MASK_VALIDATORS = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(() => NxIbanMaskDirective),
    multi: true,
};
/**
 * To use the `NxIbanMaskDirective`, you have to install the **peer dependency** `iban.js`.
 */
export class NxIbanMaskDirective {
    constructor(_elementRef, maskDirective) {
        this._elementRef = _elementRef;
        this.maskDirective = maskDirective;
        this._destroyed = new Subject();
        this._afterInputHook = (event) => {
            const input = event.target;
            this._setCountryCode(input.value.substr(0, 2));
        };
        this._beforePasteHook = (event) => {
            // change the country code here if necessary
            const input = event.target;
            const pastedData = (event.clipboardData || window.clipboardData).getData('text');
            const enteredCountryCode = (this.maskDirective.elementRefValue.substr(0, input.selectionStart) +
                this.maskDirective.getMaskedString(pastedData, input.selectionStart)).substr(0, 2);
            this._setCountryCode(enteredCountryCode);
        };
        this.maskDirective.registerAfterInputHook(this._afterInputHook);
        this.maskDirective.registerBeforePasteHook(this._beforePasteHook);
        this.maskDirective.cvaModelChange.pipe(takeUntil(this._destroyed)).subscribe((value) => {
            const enteredCountryCode = this.maskDirective.getMaskedString(value).substr(0, 2);
            this._setCountryCode(enteredCountryCode);
        });
    }
    _setCountryCode(code) {
        code = code.toUpperCase();
        if (code.length === 2 && this._countryCode !== code) {
            if (IBAN.countries[code]) {
                this._countryCode = code;
                this.maskDirective.setMask(this._getMask(this._countryCode));
            }
            else {
                this._countryCode = null;
                this.maskDirective.setMask('SS');
            }
        }
    }
    ngOnInit() {
        // set only first two letters as I don't know a country yet
        this.maskDirective.mask = 'SS';
        this.maskDirective.convertTo = 'upper';
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
    _getMask(countryCode) {
        // the countrySpecs of a country contain: countryCode ("DE"), length (22), structure ("F08F10")
        // and an example belonging to each country
        const countrySpecs = IBAN.countries[countryCode];
        // 'SS' for country code + '00' for IBAN checksum
        let mask = 'SS00';
        // split up after every third character
        const characterDefs = countrySpecs.structure.match(/.{1,3}/g);
        characterDefs.forEach((charDef) => {
            const character = charDef[0];
            const count = Number(charDef.substring(1, 3));
            switch (character) {
                // [0-9]
                case 'F':
                    mask += '0'.repeat(count);
                    break;
                // [0-9A-Za-z]
                case 'A':
                    mask += 'A'.repeat(count);
                    break;
                // [A-Z]
                // 'S' in nxMask does accept also [a-z].
                // There is no option for only accepting capital letters at the moment.
                case 'U':
                    mask += 'S'.repeat(count);
                    break;
            }
        });
        // insert whitespaces after every 4 characters
        mask = mask.match(/.{1,4}/g).join(' ');
        return mask;
    }
    _validateFn() {
        if (this._countryCodeValid()) {
            return { nxIbanInvalidCountryError: 'no valid country code' };
        }
        if (!IBAN.isValid(this.maskDirective.getUnmaskedValue())) {
            return { nxIbanParseError: 'no valid iban' };
        }
        return null;
    }
    /** @docs-private */
    validate() {
        return this.maskDirective.validateMask ? this._validateFn() : null;
    }
    _touch() {
        this.maskDirective._touch();
    }
    _countryCodeValid() {
        const enteredCountryCode = this._elementRef.nativeElement.value.substr(0, 2);
        return enteredCountryCode.length === 2 && !IBAN.countries[enteredCountryCode];
    }
}
NxIbanMaskDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxIbanMaskDirective, deps: [{ token: i0.ElementRef }, { token: forwardRef(() => NxMaskDirective) }], target: i0.ɵɵFactoryTarget.Directive });
NxIbanMaskDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxIbanMaskDirective, selector: "input[nxIbanMask]", host: { listeners: { "input": "_countryCodeValid() && _touch()" } }, providers: [NX_IBAN_MASK_VALIDATORS], exportAs: ["nxIbanMaskDirective"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxIbanMaskDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[nxIbanMask]',
                    exportAs: 'nxIbanMaskDirective',
                    providers: [NX_IBAN_MASK_VALIDATORS],
                    host: {
                        '(input)': '_countryCodeValid() && _touch()',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.NxMaskDirective, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => NxMaskDirective)]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,