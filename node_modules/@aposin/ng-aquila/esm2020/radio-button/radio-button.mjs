import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ChangeDetectionStrategy, Component, ContentChild, ContentChildren, EventEmitter, forwardRef, Input, Optional, Output, Self, ViewChild, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { NxLabelComponent } from '@aposin/ng-aquila/base';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@aposin/ng-aquila/utils";
import * as i3 from "@angular/common";
import * as i4 from "@angular/cdk/a11y";
import * as i5 from "@angular/cdk/observers";
/** The change event object emitted by the radio group and radio button. */
export class NxRadioChange {
    /** The NxRadioComponent that emits the change event. NxRadioChange object can be instantiated with source radio component and a value. */
    constructor(source, value) {
        this.source = source;
        this.value = value;
    }
}
let nextId = 0;
export class NxRadioGroupComponent {
    constructor(_cdr, ngControl, _parentForm, _parentFormGroup, _errorStateMatcher) {
        this._cdr = _cdr;
        this.ngControl = ngControl;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this._errorStateMatcher = _errorStateMatcher;
        /** @docs-private */
        this.errorState = false;
        // emits when the internal state changes on properties which are relevant
        // for the radio buttons so that they can mark themself for check
        this._stateChanges = new Subject();
        this._id = `nx-radio-group-${nextId++}`;
        this._disabled = false;
        this._negative = false;
        this._required = false;
        /** An event is dispatched on each group value change. */
        this.groupValueChange = new EventEmitter();
        this._name = `nx-radio-group-${nextId++}`;
        this._value = null;
        // The currently selected radio button; should match _value
        this._selected = null;
        this._onChange = () => { };
        this._onTouched = () => { };
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
    }
    /** Sets the Id of the radio group. */
    set id(value) {
        if (this._id !== value) {
            this._id = value;
            this._cdr.markForCheck();
        }
    }
    get id() {
        return this._id;
    }
    /** Whether every radio button in this group should be disabled. */
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        // inform childs about the change where CD should be triggered
        this._stateChanges.next();
    }
    get disabled() {
        return this._disabled;
    }
    /** Whether the radio group should have negative styling. */
    set negative(value) {
        this._negative = coerceBooleanProperty(value);
        this._cdr.markForCheck();
    }
    get negative() {
        return this._negative;
    }
    /** Sets if at least an option should be selected. */
    set required(value) {
        this._required = coerceBooleanProperty(value);
        this._stateChanges.next();
    }
    get required() {
        return this._required;
    }
    get name() {
        return this._name;
    }
    // this is also the name attribute, which is mandatory in conjunction with ngModel, hence no nx prefix
    /** Sets the name of this radio group, which is mandatory in conjunction with ngModel (Default: null). */
    set name(value) {
        this._name = value;
        this._stateChanges.next();
    }
    get value() {
        return this._value;
    }
    /** Sets the value of the selected radion button in this group (Default: null). */
    set value(newValue) {
        if (this._value !== newValue) {
            // Set this before proceeding to ensure no circular loop occurs with selection.
            this._value = newValue;
            this._updateSelectedRadioFromValue();
            this._checkSelectedRadioButton();
        }
    }
    ngAfterContentInit() {
        this._updateSelectedRadioFromValue();
        this._checkSelectedRadioButton();
    }
    ngDoCheck() {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this.updateErrorState();
        }
    }
    ngOnDestroy() {
        this._stateChanges.complete();
    }
    writeValue(value) {
        this.value = value;
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /** @docs-private this is meant to be called by the radio buttons in this group */
    change(value) {
        this.value = value;
        this._onChange(value);
        this.groupValueChange.emit(new NxRadioChange(this._selected, this._value));
    }
    /** @docs-private this is meant to be called by the radio buttons in this group. */
    touch() {
        if (this._onTouched) {
            this._onTouched();
        }
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    _updateSelectedRadioFromValue() {
        // If the value already matches the selected radio, do nothing.
        const isAlreadySelected = this._selected != null && this._selected.value === this._value;
        if (this._radios != null && !isAlreadySelected) {
            this._selected = null;
            this._radios.forEach(radio => {
                radio.checked = this.value === radio.value;
                if (radio.checked) {
                    this._selected = radio;
                }
            });
        }
    }
    _checkSelectedRadioButton() {
        if (this._selected && !this._selected.checked) {
            this._selected.checked = true;
        }
    }
    /** @docs-private */
    updateErrorState() {
        const oldState = this.errorState;
        const parent = this._parentFormGroup || this._parentForm;
        const control = this.ngControl ? this.ngControl.control : null;
        const newState = this._errorStateMatcher.isErrorState(control, parent);
        if (newState !== oldState) {
            this.errorState = newState;
            this._cdr.markForCheck();
        }
    }
}
NxRadioGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxRadioGroupComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.NgControl, optional: true, self: true }, { token: i1.NgForm, optional: true }, { token: i1.FormGroupDirective, optional: true }, { token: i2.ErrorStateMatcher }], target: i0.ɵɵFactoryTarget.Component });
NxRadioGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxRadioGroupComponent, selector: "nx-radio-group", inputs: { id: "id", disabled: ["nxDisabled", "disabled"], negative: "negative", required: "required", name: "name", value: ["nxValue", "value"] }, outputs: { groupValueChange: "nxGroupValueChange" }, host: { attributes: { "role": "radiogroup" }, properties: { "attr.id": "id", "attr.required": "required", "class.nx-radio-group--negative": "negative", "attr.aria-labelledby": "this._label?.id  || null" } }, queries: [{ propertyName: "_label", first: true, predicate: i0.forwardRef(function () { return NxLabelComponent; }), descendants: true }, { propertyName: "_radios", predicate: i0.forwardRef(function () { return NxRadioComponent; }), descendants: true }], ngImport: i0, template: "<ng-content select=\"nx-label\"></ng-content>\n<ng-content></ng-content>\n<ng-container *ngIf=\"errorState\">\n    <ng-content select=\"nx-error\"></ng-content>\n</ng-container>\n", styles: [":host ::ng-deep nx-error{margin-bottom:8px}:host ::ng-deep nx-label{margin-bottom:16px;display:block}\n"], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxRadioGroupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-radio-group', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        role: 'radiogroup',
                        '[attr.id]': 'id',
                        '[attr.required]': 'required',
                        '[class.nx-radio-group--negative]': 'negative',
                        '[attr.aria-labelledby]': 'this._label?.id  || null',
                    }, template: "<ng-content select=\"nx-label\"></ng-content>\n<ng-content></ng-content>\n<ng-container *ngIf=\"errorState\">\n    <ng-content select=\"nx-error\"></ng-content>\n</ng-container>\n", styles: [":host ::ng-deep nx-error{margin-bottom:8px}:host ::ng-deep nx-label{margin-bottom:16px;display:block}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }, { type: i1.NgForm, decorators: [{
                    type: Optional
                }] }, { type: i1.FormGroupDirective, decorators: [{
                    type: Optional
                }] }, { type: i2.ErrorStateMatcher }]; }, propDecorators: { _label: [{
                type: ContentChild,
                args: [forwardRef(() => NxLabelComponent)]
            }], id: [{
                type: Input,
                args: ['id']
            }], disabled: [{
                type: Input,
                args: ['nxDisabled']
            }], negative: [{
                type: Input
            }], required: [{
                type: Input
            }], groupValueChange: [{
                type: Output,
                args: ['nxGroupValueChange']
            }], _radios: [{
                type: ContentChildren,
                args: [forwardRef(() => NxRadioComponent), { descendants: true }]
            }], name: [{
                type: Input
            }], value: [{
                type: Input,
                args: ['nxValue']
            }] } });
export class NxRadioComponent {
    constructor(radioGroup, _cdr, _focusMonitor) {
        this.radioGroup = radioGroup;
        this._cdr = _cdr;
        this._focusMonitor = _focusMonitor;
        this._id = `nx-radio-${nextId++}`;
        this._name = null;
        this._labelSize = 'big';
        this._negative = false;
        /** An event is dispatched on each value change. */
        this.valueChange = new EventEmitter();
        this._value = null;
        this._checked = false;
        this._disabled = false;
        this._required = false;
        this._destroyed = new Subject();
        this.onChangeCallback = () => { };
        this.onTouchedCallback = () => { };
    }
    /** Sets the id of the radio component. */
    set id(value) {
        if (this._id !== value) {
            this._id = value;
            this._cdr.markForCheck();
        }
    }
    get id() {
        return this._id;
    }
    /** @docs-private */
    get inputId() {
        return `${this.id}-input`;
    }
    /** @docs-private */
    get labelId() {
        return `${this.id}-label`;
    }
    // this is also the name attribute, which is mandatory in conjunction with ngModel, hence no nx prefix
    /** Sets the name of this radio component, which is mandatory in conjunction with ngModel (Default: null). */
    set name(value) {
        if (this._name !== value) {
            this._name = value;
            this._cdr.markForCheck();
        }
    }
    get name() {
        return this.radioGroup?.name || this._name;
    }
    /** Sets the label size of the radio button.
     * The default value is `big`.
     */
    set labelSize(value) {
        if (this._labelSize !== value) {
            this._labelSize = value;
            this._cdr.markForCheck();
        }
    }
    get labelSize() {
        return this._labelSize;
    }
    /**
     * Whether the negative set of styles should be used.
     *
     * If the radio button is placed in a radio group, the negative value
     * is overwritten by the group's negative value.
     */
    set negative(value) {
        const newValue = coerceBooleanProperty(value);
        if (this._negative !== newValue) {
            this._negative = newValue;
            this._cdr.markForCheck();
        }
    }
    get negative() {
        return this.radioGroup ? this.radioGroup.negative : this._negative;
    }
    /** @docs-private */
    get labelHasContent() {
        return !!this._radioLabelWrapper.nativeElement.innerHTML.trim();
    }
    /** Sets the value of the form control element (Default: null). */
    set value(value) {
        if (value !== this._value) {
            this._value = value;
            this.onChangeCallback(value);
        }
    }
    get value() {
        return this._value;
    }
    /** @docs-private */
    get checked() {
        return this._checked;
    }
    /** Whether the radio component is selected. */
    set checked(value) {
        if (this._checked !== value) {
            this._checked = value;
            this._cdr.markForCheck();
        }
    }
    /** @docs-private */
    get disabled() {
        return this._disabled || !!this.radioGroup?.disabled;
    }
    /** Whether the radio button should be disabled or not. */
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        this._cdr.markForCheck();
    }
    /** @docs-private */
    get required() {
        return this._required || !!this.radioGroup?.required;
    }
    /** Sets if at least a radio button should be selected. */
    set required(value) {
        this._required = value;
        // needed when the outer component is set to onPush because it is a native property
        // on the host element
        this._cdr.markForCheck();
    }
    ngOnInit() {
        if (this.radioGroup) {
            this.name = this.radioGroup.name;
            // when relevant properties of the parent like name and disabled change
            // we need to let change detection know that the template needs an update
            this.radioGroup._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {
                this._cdr.markForCheck();
            });
            if (this.radioGroup.value === this._value) {
                this._checked = true;
            }
        }
    }
    ngAfterViewInit() {
        this._focusMonitor.monitor(this._nativeInput);
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this._focusMonitor.stopMonitoring(this._nativeInput);
    }
    /** @docs-private
     * Callback for when the content of the label has changed.
     */
    labelContentChanged() {
        this._cdr.detectChanges();
    }
    writeValue(value) {
        if (value === this._value) {
            this._checked = true;
            this._cdr.markForCheck();
        }
    }
    registerOnChange(onChange) {
        this.onChangeCallback = onChange;
    }
    registerOnTouched(onTouched) {
        this.onTouchedCallback = onTouched;
    }
    /** Focuses the radio button element. */
    focus(focusOrigin) {
        this._focusMonitor.focusVia(this._nativeInput, focusOrigin);
    }
    /** @docs-private */
    touch() {
        this.onTouchedCallback();
        if (this.radioGroup) {
            this.radioGroup.touch();
        }
    }
    _onInputChange(event) {
        event.stopPropagation();
        this._checked = true;
        this.valueChange.emit(new NxRadioChange(this, this._value));
        this.onChangeCallback(this.value);
        if (this.radioGroup && this.value !== this.radioGroup.value) {
            this.radioGroup.change(this.value);
        }
    }
    _onInputClick(event) {
        // make sure click event propagation on the visually hidden input
        // are stopped to prevent multiple events bubbling up.
        event.stopPropagation();
    }
    /** @docs-private */
    _controlInvalid() {
        const form = this.radioGroup && (this.radioGroup._parentFormGroup || this.radioGroup._parentForm);
        this._cdr.markForCheck();
        return !!(this.radioGroup?.ngControl?.invalid && (this.radioGroup.ngControl.touched || form?.submitted));
    }
}
NxRadioComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxRadioComponent, deps: [{ token: NxRadioGroupComponent, optional: true }, { token: i0.ChangeDetectorRef }, { token: i4.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });
NxRadioComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxRadioComponent, selector: "nx-radio", inputs: { id: "id", name: "name", labelSize: "labelSize", negative: "negative", value: ["nxValue", "value"], checked: ["nxChecked", "checked"], disabled: ["nxDisabled", "disabled"], required: "required" }, outputs: { valueChange: "nxValueChange" }, host: { properties: { "attr.required": "required", "class.nx-radio-button--small-label": "labelSize === \"small\"", "class.nx-radio-button--big-label": "labelSize === \"big\"", "class.nx-radio--negative": "negative", "class.has-error": "_controlInvalid() || null", "attr.aria-invalid": "_controlInvalid() || null" } }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => NxRadioComponent),
            multi: true,
        },
    ], viewQueries: [{ propertyName: "_radioLabelWrapper", first: true, predicate: ["radioLabelWrapper"], descendants: true, static: true }, { propertyName: "_nativeInput", first: true, predicate: ["input"], descendants: true }], ngImport: i0, template: "<input\n    #input\n    type=\"radio\"\n    [id]=\"inputId\"\n    [attr.name]=\"name\"\n    [disabled]=\"disabled\"\n    (blur)=\"touch()\"\n    (change)=\"_onInputChange($event)\"\n    (click)=\"_onInputClick($event)\"\n    [checked]=\"checked\"\n    [attr.aria-labelledby]=\"labelId\"\n    [attr.aria-invalid]=\"_controlInvalid() || null\"\n    class=\"nx-radio__input\"\n/>\n<label [id]=\"labelId\" [attr.for]=\"inputId\" class=\"nx-radio__label\" [class.has-label]=\"labelHasContent\">\n    <div class=\"nx-radio__circle\">\n        <div *ngIf=\"checked\" class=\"nx-radio__dot\"></div>\n    </div>\n    <span class=\"nx-radio__label--text\" #radioLabelWrapper (cdkObserveContent)=\"labelContentChanged()\">\n        <ng-content></ng-content>\n    </span>\n</label>\n", styles: [":host{display:block;position:relative}.nx-radio__input{opacity:0;position:absolute}:host(.nx-radio-button--small-label) .nx-radio__label{font-size:var(--radio-button-small-label-font-size);line-height:var(--radio-button-small-label-line-height);font-weight:var(--radio-button-small-label-font-weight);letter-spacing:var(--radio-button-small-label-letter-spacing)}:host(.nx-radio-button--small-label) .nx-radio__label.has-label .nx-radio__circle{margin-top:var(--radio-button-small-circle-margin-top)}:host(.nx-radio-button--small-label) .nx-radio__label--text:not(:empty){margin-left:var(--radio-button-small-label-margin-left);margin-top:var(--radio-button-small-label-margin-top)}[dir=rtl] :host(.nx-radio-button--small-label) .nx-radio__label--text:not(:empty){margin-right:var(--radio-button-small-label-margin-left);margin-left:0;margin-left:initial}:host(.nx-radio-button--big-label) .nx-radio__label{font-size:var(--radio-button-large-label-font-size);line-height:var(--radio-button-large-label-line-height);font-weight:var(--radio-button-large-label-font-weight);letter-spacing:var(--radio-button-large-label-letter-spacing)}:host(.nx-radio-button--big-label) .nx-radio__label.has-label .nx-radio__circle{margin-top:var(--radio-button-large-circle-margin-top)}:host(.nx-radio-button--big-label) .nx-radio__label--text:not(:empty){margin-left:var(--radio-button-large-label-margin-left);margin-top:var(--radio-button-large-label-margin-top)}[dir=rtl] :host(.nx-radio-button--big-label) .nx-radio__label--text:not(:empty){margin-right:var(--radio-button-large-label-margin-left);margin-left:0;margin-left:initial}:host.nx-radio--negative .nx-radio__label--text{color:var(--negative)}:host.nx-radio--negative .nx-radio__circle{border-color:var(--negative)}:host.nx-radio--negative .nx-radio__input:checked+.nx-radio__label .nx-radio__circle{border-color:var(--negative);background-color:transparent}:host.nx-radio--negative .nx-radio__input:checked+.nx-radio__label .nx-radio__dot{background:var(--negative)}:host.nx-radio--negative .nx-radio__input:disabled+.nx-radio__label{opacity:.4}.nx-radio__label{color:var(--radio-button-label-color);cursor:pointer;display:flex;position:relative}.nx-radio__circle{border-width:2px;border-style:solid;border-color:var(--radio-button-circle-color);border-radius:50%;width:24px;min-width:24px;height:24px;position:relative;display:flex;justify-content:center;align-items:center}.nx-radio__dot{width:var(--radio-button-dot-size);height:var(--radio-button-dot-size);background-color:var(--radio-button-dot-background-color);border-radius:50%;transition:background-color .2s ease}.nx-radio__input:checked+.nx-radio__label .nx-radio__circle{border-color:var(--radio-button-selected-circle-color);background-color:var(--radio-button-selected-background-color)}.nx-radio__input:checked+.nx-radio__label .nx-radio__dot{background-color:var(--radio-button-selected-dot-color)}.nx-radio__input:disabled+.nx-radio__label{cursor:not-allowed;color:var(--radio-button-disabled-text-color)}.nx-radio__input:disabled+.nx-radio__label .nx-radio__circle{border-color:var(--radio-button-disabled-border-color)}.nx-radio__input:checked:disabled+.nx-radio__label .nx-radio__circle{background-color:var(--radio-button-disabled-selected-background-color)}.nx-radio__input:checked:disabled+.nx-radio__label .nx-radio__dot{background-color:var(--radio-button-disabled-selected-dot-color)}:host.has-error .nx-radio__input+.nx-radio__label .nx-radio__circle{border-color:var(--danger)}:host.has-error .nx-radio__input+.nx-radio__label .nx-radio__dot{background-color:var(--danger)}.nx-radio__input.cdk-keyboard-focused+.nx-radio__label .nx-radio__circle{box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-radio__input.cdk-keyboard-focused+.nx-radio__label .nx-radio__circle{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}:host:not(.nx-radio--negative):not(.has-error) .nx-radio__input:not(:disabled)+.nx-radio__label:hover .nx-radio__circle{border-color:var(--radio-button-hover-circle-color)}:host:not(.nx-radio--negative):not(.has-error) .nx-radio__input:not(:disabled):checked+.nx-radio__label:hover .nx-radio__dot{background-color:var(--radio-button-hover-dot-color)}:host:not(.nx-radio--negative):not(.has-error) .nx-radio__input:not(:disabled)+.nx-radio__label:active .nx-radio__circle{border-color:var(--radio-button-hover-circle-color)}:host:not(.nx-radio--negative):not(.has-error) .nx-radio__input:not(:disabled):checked+.nx-radio__label:active .nx-radio__dot{background-color:var(--radio-button-hover-dot-color)}@media screen and (-ms-high-contrast: active){:host .nx-radio__label{color:buttonText!important}:host .nx-radio__circle{forced-color-adjust:none;border-color:buttonText!important;background-color:buttonFace!important}:host .nx-radio__input:checked+.nx-radio__label .nx-radio__circle{border-color:highlight!important}:host .nx-radio__input:checked+.nx-radio__label .nx-radio__dot{background-color:highlight!important}:host .nx-radio__input:disabled+.nx-radio__label{color:GrayText!important;opacity:1}:host .nx-radio__input:disabled+.nx-radio__label .nx-radio__circle{border-color:GrayText!important}:host .nx-radio__input:checked:disabled+.nx-radio__label .nx-radio__dot{background-color:GrayText!important}}\n"], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.CdkObserveContent, selector: "[cdkObserveContent]", inputs: ["cdkObserveContentDisabled", "debounce"], outputs: ["cdkObserveContent"], exportAs: ["cdkObserveContent"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxRadioComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-radio', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => NxRadioComponent),
                            multi: true,
                        },
                    ], host: {
                        '[attr.required]': 'required',
                        '[class.nx-radio-button--small-label]': 'labelSize === "small"',
                        '[class.nx-radio-button--big-label]': 'labelSize === "big"',
                        '[class.nx-radio--negative]': 'negative',
                        '[class.has-error]': '_controlInvalid() || null',
                        '[attr.aria-invalid]': '_controlInvalid() || null',
                    }, template: "<input\n    #input\n    type=\"radio\"\n    [id]=\"inputId\"\n    [attr.name]=\"name\"\n    [disabled]=\"disabled\"\n    (blur)=\"touch()\"\n    (change)=\"_onInputChange($event)\"\n    (click)=\"_onInputClick($event)\"\n    [checked]=\"checked\"\n    [attr.aria-labelledby]=\"labelId\"\n    [attr.aria-invalid]=\"_controlInvalid() || null\"\n    class=\"nx-radio__input\"\n/>\n<label [id]=\"labelId\" [attr.for]=\"inputId\" class=\"nx-radio__label\" [class.has-label]=\"labelHasContent\">\n    <div class=\"nx-radio__circle\">\n        <div *ngIf=\"checked\" class=\"nx-radio__dot\"></div>\n    </div>\n    <span class=\"nx-radio__label--text\" #radioLabelWrapper (cdkObserveContent)=\"labelContentChanged()\">\n        <ng-content></ng-content>\n    </span>\n</label>\n", styles: [":host{display:block;position:relative}.nx-radio__input{opacity:0;position:absolute}:host(.nx-radio-button--small-label) .nx-radio__label{font-size:var(--radio-button-small-label-font-size);line-height:var(--radio-button-small-label-line-height);font-weight:var(--radio-button-small-label-font-weight);letter-spacing:var(--radio-button-small-label-letter-spacing)}:host(.nx-radio-button--small-label) .nx-radio__label.has-label .nx-radio__circle{margin-top:var(--radio-button-small-circle-margin-top)}:host(.nx-radio-button--small-label) .nx-radio__label--text:not(:empty){margin-left:var(--radio-button-small-label-margin-left);margin-top:var(--radio-button-small-label-margin-top)}[dir=rtl] :host(.nx-radio-button--small-label) .nx-radio__label--text:not(:empty){margin-right:var(--radio-button-small-label-margin-left);margin-left:0;margin-left:initial}:host(.nx-radio-button--big-label) .nx-radio__label{font-size:var(--radio-button-large-label-font-size);line-height:var(--radio-button-large-label-line-height);font-weight:var(--radio-button-large-label-font-weight);letter-spacing:var(--radio-button-large-label-letter-spacing)}:host(.nx-radio-button--big-label) .nx-radio__label.has-label .nx-radio__circle{margin-top:var(--radio-button-large-circle-margin-top)}:host(.nx-radio-button--big-label) .nx-radio__label--text:not(:empty){margin-left:var(--radio-button-large-label-margin-left);margin-top:var(--radio-button-large-label-margin-top)}[dir=rtl] :host(.nx-radio-button--big-label) .nx-radio__label--text:not(:empty){margin-right:var(--radio-button-large-label-margin-left);margin-left:0;margin-left:initial}:host.nx-radio--negative .nx-radio__label--text{color:var(--negative)}:host.nx-radio--negative .nx-radio__circle{border-color:var(--negative)}:host.nx-radio--negative .nx-radio__input:checked+.nx-radio__label .nx-radio__circle{border-color:var(--negative);background-color:transparent}:host.nx-radio--negative .nx-radio__input:checked+.nx-radio__label .nx-radio__dot{background:var(--negative)}:host.nx-radio--negative .nx-radio__input:disabled+.nx-radio__label{opacity:.4}.nx-radio__label{color:var(--radio-button-label-color);cursor:pointer;display:flex;position:relative}.nx-radio__circle{border-width:2px;border-style:solid;border-color:var(--radio-button-circle-color);border-radius:50%;width:24px;min-width:24px;height:24px;position:relative;display:flex;justify-content:center;align-items:center}.nx-radio__dot{width:var(--radio-button-dot-size);height:var(--radio-button-dot-size);background-color:var(--radio-button-dot-background-color);border-radius:50%;transition:background-color .2s ease}.nx-radio__input:checked+.nx-radio__label .nx-radio__circle{border-color:var(--radio-button-selected-circle-color);background-color:var(--radio-button-selected-background-color)}.nx-radio__input:checked+.nx-radio__label .nx-radio__dot{background-color:var(--radio-button-selected-dot-color)}.nx-radio__input:disabled+.nx-radio__label{cursor:not-allowed;color:var(--radio-button-disabled-text-color)}.nx-radio__input:disabled+.nx-radio__label .nx-radio__circle{border-color:var(--radio-button-disabled-border-color)}.nx-radio__input:checked:disabled+.nx-radio__label .nx-radio__circle{background-color:var(--radio-button-disabled-selected-background-color)}.nx-radio__input:checked:disabled+.nx-radio__label .nx-radio__dot{background-color:var(--radio-button-disabled-selected-dot-color)}:host.has-error .nx-radio__input+.nx-radio__label .nx-radio__circle{border-color:var(--danger)}:host.has-error .nx-radio__input+.nx-radio__label .nx-radio__dot{background-color:var(--danger)}.nx-radio__input.cdk-keyboard-focused+.nx-radio__label .nx-radio__circle{box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-radio__input.cdk-keyboard-focused+.nx-radio__label .nx-radio__circle{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}:host:not(.nx-radio--negative):not(.has-error) .nx-radio__input:not(:disabled)+.nx-radio__label:hover .nx-radio__circle{border-color:var(--radio-button-hover-circle-color)}:host:not(.nx-radio--negative):not(.has-error) .nx-radio__input:not(:disabled):checked+.nx-radio__label:hover .nx-radio__dot{background-color:var(--radio-button-hover-dot-color)}:host:not(.nx-radio--negative):not(.has-error) .nx-radio__input:not(:disabled)+.nx-radio__label:active .nx-radio__circle{border-color:var(--radio-button-hover-circle-color)}:host:not(.nx-radio--negative):not(.has-error) .nx-radio__input:not(:disabled):checked+.nx-radio__label:active .nx-radio__dot{background-color:var(--radio-button-hover-dot-color)}@media screen and (-ms-high-contrast: active){:host .nx-radio__label{color:buttonText!important}:host .nx-radio__circle{forced-color-adjust:none;border-color:buttonText!important;background-color:buttonFace!important}:host .nx-radio__input:checked+.nx-radio__label .nx-radio__circle{border-color:highlight!important}:host .nx-radio__input:checked+.nx-radio__label .nx-radio__dot{background-color:highlight!important}:host .nx-radio__input:disabled+.nx-radio__label{color:GrayText!important;opacity:1}:host .nx-radio__input:disabled+.nx-radio__label .nx-radio__circle{border-color:GrayText!important}:host .nx-radio__input:checked:disabled+.nx-radio__label .nx-radio__dot{background-color:GrayText!important}}\n"] }]
        }], ctorParameters: function () { return [{ type: NxRadioGroupComponent, decorators: [{
                    type: Optional
                }] }, { type: i0.ChangeDetectorRef }, { type: i4.FocusMonitor }]; }, propDecorators: { _radioLabelWrapper: [{
                type: ViewChild,
                args: ['radioLabelWrapper', { static: true }]
            }], _nativeInput: [{
                type: ViewChild,
                args: ['input']
            }], id: [{
                type: Input,
                args: ['id']
            }], name: [{
                type: Input,
                args: ['name']
            }], labelSize: [{
                type: Input
            }], negative: [{
                type: Input
            }], valueChange: [{
                type: Output,
                args: ['nxValueChange']
            }], value: [{
                type: Input,
                args: ['nxValue']
            }], checked: [{
                type: Input,
                args: ['nxChecked']
            }], disabled: [{
                type: Input,
                args: ['nxDisabled']
            }], required: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8tYnV0dG9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctYXF1aWxhL3NyYy9yYWRpby1idXR0b24vcmFkaW8tYnV0dG9uLnRzIiwiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctYXF1aWxhL3NyYy9yYWRpby1idXR0b24vcmFkaW8tZ3JvdXAuaHRtbCIsIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWFxdWlsYS9zcmMvcmFkaW8tYnV0dG9uL3JhZGlvLWJ1dHRvbi5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBZ0IscUJBQXFCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM1RSxPQUFPLEVBR0gsdUJBQXVCLEVBRXZCLFNBQVMsRUFDVCxZQUFZLEVBQ1osZUFBZSxFQUdmLFlBQVksRUFDWixVQUFVLEVBQ1YsS0FBSyxFQUdMLFFBQVEsRUFDUixNQUFNLEVBRU4sSUFBSSxFQUNKLFNBQVMsR0FDWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQXlELGlCQUFpQixFQUFxQixNQUFNLGdCQUFnQixDQUFDO0FBQzdILE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRTFELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7O0FBRTNDLDJFQUEyRTtBQUMzRSxNQUFNLE9BQU8sYUFBYTtJQUl0QiwwSUFBMEk7SUFDMUksWUFBWSxNQUF3QixFQUFFLEtBQVU7UUFDNUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDdkIsQ0FBQztDQUNKO0FBS0QsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBZWYsTUFBTSxPQUFPLHFCQUFxQjtJQW1HOUIsWUFDWSxJQUF1QixFQUNKLFNB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Q0ksT0FBTyxFQUFFLGlCQUFpQjs0QkFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLENBQUM7NEJBQy9DLEtBQUssRUFBRSxJQUFJO3lCQUNkO3FCQUNKLFFBQ0s7d0JBQ0YsaUJBQWlCLEVBQUUsVUFBVTt3QkFDN0Isc0NBQXNDLEVBQUUsdUJBQXVCO3dCQUMvRCxvQ0FBb0MsRUFBRSxxQkFBcUI7d0JBQzNELDRCQUE0QixFQUFFLFVBQVU7d0JBQ3hDLG1CQUFtQixFQUFFLDJCQUEyQjt3QkFDaEQscUJBQXFCLEVBQUUsMkJBQTJCO3FCQUNyRDswREFrSjBDLHFCQUFxQjswQkFBbkQsUUFBUTt1R0E5STZCLGtCQUFrQjtzQkFBbkUsU0FBUzt1QkFBQyxtQkFBbUIsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7Z0JBQzVCLFlBQVk7c0JBQS9CLFNBQVM7dUJBQUMsT0FBTztnQkFLZCxFQUFFO3NCQURMLEtBQUs7dUJBQUMsSUFBSTtnQkF5QlAsSUFBSTtzQkFEUCxLQUFLO3VCQUFDLE1BQU07Z0JBZ0JULFNBQVM7c0JBRFosS0FBSztnQkFtQkYsUUFBUTtzQkFEWCxLQUFLO2dCQWFtQixXQUFXO3NCQUFuQyxNQUFNO3VCQUFDLGVBQWU7Z0JBY25CLEtBQUs7c0JBRFIsS0FBSzt1QkFBQyxTQUFTO2dCQW1CWixPQUFPO3NCQURWLEtBQUs7dUJBQUMsV0FBVztnQkFlZCxRQUFRO3NCQURYLEtBQUs7dUJBQUMsWUFBWTtnQkFhZixRQUFRO3NCQURYLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb2N1c01vbml0b3IsIEZvY3VzT3JpZ2luIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2ExMXknO1xuaW1wb3J0IHsgQm9vbGVhbklucHV0LCBjb2VyY2VCb29sZWFuUHJvcGVydHkgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHtcbiAgICBBZnRlckNvbnRlbnRJbml0LFxuICAgIEFmdGVyVmlld0luaXQsXG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgQ29tcG9uZW50LFxuICAgIENvbnRlbnRDaGlsZCxcbiAgICBDb250ZW50Q2hpbGRyZW4sXG4gICAgRG9DaGVjayxcbiAgICBFbGVtZW50UmVmLFxuICAgIEV2ZW50RW1pdHRlcixcbiAgICBmb3J3YXJkUmVmLFxuICAgIElucHV0LFxuICAgIE9uRGVzdHJveSxcbiAgICBPbkluaXQsXG4gICAgT3B0aW9uYWwsXG4gICAgT3V0cHV0LFxuICAgIFF1ZXJ5TGlzdCxcbiAgICBTZWxmLFxuICAgIFZpZXdDaGlsZCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgRm9ybUNvbnRyb2wsIEZvcm1Hcm91cERpcmVjdGl2ZSwgTkdfVkFMVUVfQUNDRVNTT1IsIE5nQ29udHJvbCwgTmdGb3JtIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTnhMYWJlbENvbXBvbmVudCB9IGZyb20gJ0BhcG9zaW4vbmctYXF1aWxhL2Jhc2UnO1xuaW1wb3J0IHsgRXJyb3JTdGF0ZU1hdGNoZXIgfSBmcm9tICdAYXBvc2luL25nLWFxdWlsYS91dGlscyc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbi8qKiBUaGUgY2hhbmdlIGV2ZW50IG9iamVjdCBlbWl0dGVkIGJ5IHRoZSByYWRpbyBncm91cCBhbmQgcmFkaW8gYnV0dG9uLiAqL1xuZXhwb3J0IGNsYXNzIE54UmFkaW9DaGFuZ2Uge1xuICAgIHNvdXJjZTogTnhSYWRpb0NvbXBvbmVudDtcbiAgICB2YWx1ZTogYW55O1xuXG4gICAgLyoqIFRoZSBOeFJhZGlvQ29tcG9uZW50IHRoYXQgZW1pdHMgdGhlIGNoYW5nZSBldmVudC4gTnhSYWRpb0NoYW5nZSBvYmplY3QgY2FuIGJlIGluc3RhbnRpYXRlZCB3aXRoIHNvdXJjZSByYWRpbyBjb21wb25lbnQgYW5kIGEgdmFsdWUuICovXG4gICAgY29uc3RydWN0b3Ioc291cmNlOiBOeFJhZGlvQ29tcG9uZW50LCB2YWx1ZTogYW55KSB7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxufVxuXG4vKiogTGFiZWwgU2l6ZSBUeXBlcyAqL1xuZXhwb3J0IHR5cGUgTGFiZWxTaXplID0gJ3NtYWxsJyB8ICdiaWcnO1xuXG5sZXQgbmV4dElkID0gMDtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdueC1yYWRpby1ncm91cCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3JhZGlvLWdyb3VwLmh0bWwnLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgcm9sZTogJ3JhZGlvZ3JvdXAnLFxuICAgICAgICAnW2F0dHIuaWRdJzogJ2lkJyxcbiAgICAgICAgJ1thdHRyLnJlcXVpcmVkXSc6ICdyZXF1aXJlZCcsXG4gICAgICAgICdbY2xhc3MubngtcmFkaW8tZ3JvdXAtLW5lZ2F0aXZlXSc6ICduZWdhdGl2ZScsXG4gICAgICAgICdbYXR0ci5hcmlhLWxhYmVsbGVkYnldJzogJ3RoaXMuX2xhYmVsPy5pZCAgfHwgbnVsbCcsXG4gICAgfSxcbiAgICBzdHlsZVVybHM6IFsncmFkaW8tYnV0dG9uLWdyb3VwLnNjc3MnXSxcbn0pXG5leHBvcnQgY2xhc3MgTnhSYWRpb0dyb3VwQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSwgRG9DaGVjayB7XG4gICAgQENvbnRlbnRDaGlsZChmb3J3YXJkUmVmKCgpID0+IE54TGFiZWxDb21wb25lbnQpKVxuICAgIF9sYWJlbCE6IE54TGFiZWxDb21wb25lbnQ7XG5cbiAgICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICAgIGVycm9yU3RhdGUgPSBmYWxzZTtcblxuICAgIC8vIGVtaXRzIHdoZW4gdGhlIGludGVybmFsIHN0YXRlIGNoYW5nZXMgb24gcHJvcGVydGllcyB3aGljaCBhcmUgcmVsZXZhbnRcbiAgICAvLyBmb3IgdGhlIHJhZGlvIGJ1dHRvbnMgc28gdGhhdCB0aGV5IGNhbiBtYXJrIHRoZW1zZWxmIGZvciBjaGVja1xuICAgIHJlYWRvbmx5IF9zdGF0ZUNoYW5nZXMgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gICAgcHJpdmF0ZSBfaWQgPSBgbngtcmFkaW8tZ3JvdXAtJHtuZXh0SWQrK31gO1xuICAgIC8qKiBTZXRzIHRoZSBJZCBvZiB0aGUgcmFkaW8gZ3JvdXAuICovXG4gICAgQElucHV0KCdpZCcpXG4gICAgc2V0IGlkKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lkICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5faWQgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX2Nkci5tYXJrRm9yQ2hlY2soKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgaWQoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xuICAgIH1cbiAgICBwcml2YXRlIF9kaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgLyoqIFdoZXRoZXIgZXZlcnkgcmFkaW8gYnV0dG9uIGluIHRoaXMgZ3JvdXAgc2hvdWxkIGJlIGRpc2FibGVkLiAqL1xuICAgIEBJbnB1dCgnbnhEaXNhYmxlZCcpXG4gICAgc2V0IGRpc2FibGVkKHZhbHVlOiBCb29sZWFuSW5wdXQpIHtcbiAgICAgICAgdGhpcy5fZGlzYWJsZWQgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgICAgICAvLyBpbmZvcm0gY2hpbGRzIGFib3V0IHRoZSBjaGFuZ2Ugd2hlcmUgQ0Qgc2hvdWxkIGJlIHRyaWdnZXJlZFxuICAgICAgICB0aGlzLl9zdGF0ZUNoYW5nZXMubmV4dCgpO1xuICAgIH1cbiAgICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZDtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9uZWdhdGl2ZSA9IGZhbHNlO1xuICAgIC8qKiBXaGV0aGVyIHRoZSByYWRpbyBncm91cCBzaG91bGQgaGF2ZSBuZWdhdGl2ZSBzdHlsaW5nLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgc2V0IG5lZ2F0aXZlKHZhbHVlOiBCb29sZWFuSW5wdXQpIHtcbiAgICAgICAgdGhpcy5fbmVnYXRpdmUgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgICAgICB0aGlzLl9jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuICAgIGdldCBuZWdhdGl2ZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX25lZ2F0aXZlO1xuICAgIH1cblxuICAgIHByaXZhdGUgX3JlcXVpcmVkID0gZmFsc2U7XG4gICAgLyoqIFNldHMgaWYgYXQgbGVhc3QgYW4gb3B0aW9uIHNob3VsZCBiZSBzZWxlY3RlZC4gKi9cbiAgICBASW5wdXQoKVxuICAgIHNldCByZXF1aXJlZCh2YWx1ZTogQm9vbGVhbklucHV0KSB7XG4gICAgICAgIHRoaXMuX3JlcXVpcmVkID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcbiAgICAgICAgdGhpcy5fc3RhdGVDaGFuZ2VzLm5leHQoKTtcbiAgICB9XG4gICAgZ2V0IHJlcXVpcmVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWlyZWQ7XG4gICAgfVxuXG4gICAgLyoqIEFuIGV2ZW50IGlzIGRpc3BhdGNoZWQgb24gZWFjaCBncm91cCB2YWx1ZSBjaGFuZ2UuICovXG4gICAgQE91dHB1dCgnbnhHcm91cFZhbHVlQ2hhbmdlJykgZ3JvdXBWYWx1ZUNoYW5nZTogRXZlbnRFbWl0dGVyPE54UmFkaW9DaGFuZ2U+ID0gbmV3IEV2ZW50RW1pdHRlcjxOeFJhZGlvQ2hhbmdlPigpO1xuICAgIHByaXZhdGUgX25hbWUgPSBgbngtcmFkaW8tZ3JvdXAtJHtuZXh0SWQrK31gO1xuICAgIHByaXZhdGUgX3ZhbHVlOiBhbnkgPSBudWxsO1xuICAgIC8vIFRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgcmFkaW8gYnV0dG9uOyBzaG91bGQgbWF0Y2ggX3ZhbHVlXG4gICAgcHJpdmF0ZSBfc2VsZWN0ZWQ6IE54UmFkaW9Db21wb25lbnQgfCBudWxsID0gbnVsbDtcblxuICAgIEBDb250ZW50Q2hpbGRyZW4oZm9yd2FyZFJlZigoKSA9PiBOeFJhZGlvQ29tcG9uZW50KSwgeyBkZXNjZW5kYW50czogdHJ1ZSB9KVxuICAgIF9yYWRpb3MhOiBRdWVyeUxpc3Q8TnhSYWRpb0NvbXBvbmVudD47XG5cbiAgICBwcml2YXRlIF9vbkNoYW5nZTogKHZhbHVlOiBhbnkpID0+IHZvaWQgPSAoKSA9PiB7fTtcbiAgICBwcml2YXRlIF9vblRvdWNoZWQ6ICgpID0+IHZvaWQgPSAoKSA9PiB7fTtcblxuICAgIGdldCBuYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9uYW1lO1xuICAgIH1cblxuICAgIC8vIHRoaXMgaXMgYWxzbyB0aGUgbmFtZSBhdHRyaWJ1dGUsIHdoaWNoIGlzIG1hbmRhdG9yeSBpbiBjb25qdW5jdGlvbiB3aXRoIG5nTW9kZWwsIGhlbmNlIG5vIG54IHByZWZpeFxuICAgIC8qKiBTZXRzIHRoZSBuYW1lIG9mIHRoaXMgcmFkaW8gZ3JvdXAsIHdoaWNoIGlzIG1hbmRhdG9yeSBpbiBjb25qdW5jdGlvbiB3aXRoIG5nTW9kZWwgKERlZmF1bHQ6IG51bGwpLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgc2V0IG5hbWUodmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9uYW1lID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX3N0YXRlQ2hhbmdlcy5uZXh0KCk7XG4gICAgfVxuXG4gICAgZ2V0IHZhbHVlKCk6IGFueSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICB9XG5cbiAgICAvKiogU2V0cyB0aGUgdmFsdWUgb2YgdGhlIHNlbGVjdGVkIHJhZGlvbiBidXR0b24gaW4gdGhpcyBncm91cCAoRGVmYXVsdDogbnVsbCkuICovXG4gICAgQElucHV0KCdueFZhbHVlJylcbiAgICBzZXQgdmFsdWUobmV3VmFsdWU6IGFueSkge1xuICAgICAgICBpZiAodGhpcy5fdmFsdWUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAvLyBTZXQgdGhpcyBiZWZvcmUgcHJvY2VlZGluZyB0byBlbnN1cmUgbm8gY2lyY3VsYXIgbG9vcCBvY2N1cnMgd2l0aCBzZWxlY3Rpb24uXG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IG5ld1ZhbHVlO1xuXG4gICAgICAgICAgICB0aGlzLl91cGRhdGVTZWxlY3RlZFJhZGlvRnJvbVZhbHVlKCk7XG4gICAgICAgICAgICB0aGlzLl9jaGVja1NlbGVjdGVkUmFkaW9CdXR0b24oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIF9jZHI6IENoYW5nZURldGVjdG9yUmVmLFxuICAgICAgICBAT3B0aW9uYWwoKSBAU2VsZigpIHB1YmxpYyBuZ0NvbnRyb2w6IE5nQ29udHJvbCB8IG51bGwsXG4gICAgICAgIEBPcHRpb25hbCgpIHB1YmxpYyBfcGFyZW50Rm9ybTogTmdGb3JtIHwgbnVsbCxcbiAgICAgICAgQE9wdGlvbmFsKCkgcHVibGljIF9wYXJlbnRGb3JtR3JvdXA6IEZvcm1Hcm91cERpcmVjdGl2ZSB8IG51bGwsXG4gICAgICAgIHByaXZhdGUgX2Vycm9yU3RhdGVNYXRjaGVyOiBFcnJvclN0YXRlTWF0Y2hlcixcbiAgICApIHtcbiAgICAgICAgaWYgKHRoaXMubmdDb250cm9sKSB7XG4gICAgICAgICAgICAvLyBOb3RlOiB3ZSBwcm92aWRlIHRoZSB2YWx1ZSBhY2Nlc3NvciB0aHJvdWdoIGhlcmUsIGluc3RlYWQgb2ZcbiAgICAgICAgICAgIC8vIHRoZSBgcHJvdmlkZXJzYCB0byBhdm9pZCBydW5uaW5nIGludG8gYSBjaXJjdWxhciBpbXBvcnQuXG4gICAgICAgICAgICB0aGlzLm5nQ29udHJvbC52YWx1ZUFjY2Vzc29yID0gdGhpcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlU2VsZWN0ZWRSYWRpb0Zyb21WYWx1ZSgpO1xuICAgICAgICB0aGlzLl9jaGVja1NlbGVjdGVkUmFkaW9CdXR0b24oKTtcbiAgICB9XG5cbiAgICBuZ0RvQ2hlY2soKSB7XG4gICAgICAgIGlmICh0aGlzLm5nQ29udHJvbCkge1xuICAgICAgICAgICAgLy8gV2UgbmVlZCB0byByZS1ldmFsdWF0ZSB0aGlzIG9uIGV2ZXJ5IGNoYW5nZSBkZXRlY3Rpb24gY3ljbGUsIGJlY2F1c2UgdGhlcmUgYXJlIHNvbWVcbiAgICAgICAgICAgIC8vIGVycm9yIHRyaWdnZXJzIHRoYXQgd2UgY2FuJ3Qgc3Vic2NyaWJlIHRvIChlLmcuIHBhcmVudCBmb3JtIHN1Ym1pc3Npb25zKS4gVGhpcyBtZWFuc1xuICAgICAgICAgICAgLy8gdGhhdCB3aGF0ZXZlciBsb2dpYyBpcyBpbiBoZXJlIGhhcyB0byBiZSBzdXBlciBsZWFuIG9yIHdlIHJpc2sgZGVzdHJveWluZyB0aGUgcGVyZm9ybWFuY2UuXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUVycm9yU3RhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLl9zdGF0ZUNoYW5nZXMuY29tcGxldGUoKTtcbiAgICB9XG5cbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46ICh2YWx1ZTogYW55KSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMuX29uQ2hhbmdlID0gZm47XG4gICAgfVxuXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHZvaWQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fb25Ub3VjaGVkID0gZm47XG4gICAgfVxuXG4gICAgLyoqIEBkb2NzLXByaXZhdGUgdGhpcyBpcyBtZWFudCB0byBiZSBjYWxsZWQgYnkgdGhlIHJhZGlvIGJ1dHRvbnMgaW4gdGhpcyBncm91cCAqL1xuICAgIGNoYW5nZSh2YWx1ZTogYW55KSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fb25DaGFuZ2UodmFsdWUpO1xuICAgICAgICB0aGlzLmdyb3VwVmFsdWVDaGFuZ2UuZW1pdChuZXcgTnhSYWRpb0NoYW5nZSh0aGlzLl9zZWxlY3RlZCBhcyBOeFJhZGlvQ29tcG9uZW50LCB0aGlzLl92YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKiBAZG9jcy1wcml2YXRlIHRoaXMgaXMgbWVhbnQgdG8gYmUgY2FsbGVkIGJ5IHRoZSByYWRpbyBidXR0b25zIGluIHRoaXMgZ3JvdXAuICovXG4gICAgdG91Y2goKSB7XG4gICAgICAgIGlmICh0aGlzLl9vblRvdWNoZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX29uVG91Y2hlZCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBpc0Rpc2FibGVkO1xuICAgIH1cblxuICAgIHByaXZhdGUgX3VwZGF0ZVNlbGVjdGVkUmFkaW9Gcm9tVmFsdWUoKTogdm9pZCB7XG4gICAgICAgIC8vIElmIHRoZSB2YWx1ZSBhbHJlYWR5IG1hdGNoZXMgdGhlIHNlbGVjdGVkIHJhZGlvLCBkbyBub3RoaW5nLlxuICAgICAgICBjb25zdCBpc0FscmVhZHlTZWxlY3RlZCA9IHRoaXMuX3NlbGVjdGVkICE9IG51bGwgJiYgdGhpcy5fc2VsZWN0ZWQudmFsdWUgPT09IHRoaXMuX3ZhbHVlO1xuXG4gICAgICAgIGlmICh0aGlzLl9yYWRpb3MgIT0gbnVsbCAmJiAhaXNBbHJlYWR5U2VsZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3NlbGVjdGVkID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX3JhZGlvcy5mb3JFYWNoKHJhZGlvID0+IHtcbiAgICAgICAgICAgICAgICByYWRpby5jaGVja2VkID0gdGhpcy52YWx1ZSA9PT0gcmFkaW8udmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKHJhZGlvLmNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VsZWN0ZWQgPSByYWRpbztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgX2NoZWNrU2VsZWN0ZWRSYWRpb0J1dHRvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX3NlbGVjdGVkICYmICF0aGlzLl9zZWxlY3RlZC5jaGVja2VkKSB7XG4gICAgICAgICAgICB0aGlzLl9zZWxlY3RlZC5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBAZG9jcy1wcml2YXRlICovXG4gICAgdXBkYXRlRXJyb3JTdGF0ZSgpIHtcbiAgICAgICAgY29uc3Qgb2xkU3RhdGUgPSB0aGlzLmVycm9yU3RhdGU7XG4gICAgICAgIGNvbnN0IHBhcmVudCA9IHRoaXMuX3BhcmVudEZvcm1Hcm91cCB8fCB0aGlzLl9wYXJlbnRGb3JtO1xuICAgICAgICBjb25zdCBjb250cm9sID0gdGhpcy5uZ0NvbnRyb2wgPyAodGhpcy5uZ0NvbnRyb2wuY29udHJvbCBhcyBGb3JtQ29udHJvbCkgOiBudWxsO1xuICAgICAgICBjb25zdCBuZXdTdGF0ZSA9IHRoaXMuX2Vycm9yU3RhdGVNYXRjaGVyLmlzRXJyb3JTdGF0ZShjb250cm9sLCBwYXJlbnQpO1xuXG4gICAgICAgIGlmIChuZXdTdGF0ZSAhPT0gb2xkU3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3JTdGF0ZSA9IG5ld1N0YXRlO1xuICAgICAgICAgICAgdGhpcy5fY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ254LXJhZGlvJyxcbiAgICB0ZW1wbGF0ZVVybDogJ3JhZGlvLWJ1dHRvbi5odG1sJyxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBzdHlsZVVybHM6IFsncmFkaW8tYnV0dG9uLnNjc3MnXSxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBOeFJhZGlvQ29tcG9uZW50KSxcbiAgICAgICAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgaG9zdDoge1xuICAgICAgICAnW2F0dHIucmVxdWlyZWRdJzogJ3JlcXVpcmVkJyxcbiAgICAgICAgJ1tjbGFzcy5ueC1yYWRpby1idXR0b24tLXNtYWxsLWxhYmVsXSc6ICdsYWJlbFNpemUgPT09IFwic21hbGxcIicsXG4gICAgICAgICdbY2xhc3MubngtcmFkaW8tYnV0dG9uLS1iaWctbGFiZWxdJzogJ2xhYmVsU2l6ZSA9PT0gXCJiaWdcIicsXG4gICAgICAgICdbY2xhc3MubngtcmFkaW8tLW5lZ2F0aXZlXSc6ICduZWdhdGl2ZScsXG4gICAgICAgICdbY2xhc3MuaGFzLWVycm9yXSc6ICdfY29udHJvbEludmFsaWQoKSB8fCBudWxsJyxcbiAgICAgICAgJ1thdHRyLmFyaWEtaW52YWxpZF0nOiAnX2NvbnRyb2xJbnZhbGlkKCkgfHwgbnVsbCcsXG4gICAgfSxcbn0pXG5leHBvcnQgY2xhc3MgTnhSYWRpb0NvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBPbkluaXQsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG4gICAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgICBAVmlld0NoaWxkKCdyYWRpb0xhYmVsV3JhcHBlcicsIHsgc3RhdGljOiB0cnVlIH0pIF9yYWRpb0xhYmVsV3JhcHBlciE6IEVsZW1lbnRSZWY7XG4gICAgQFZpZXdDaGlsZCgnaW5wdXQnKSBfbmF0aXZlSW5wdXQhOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PjtcblxuICAgIHByaXZhdGUgX2lkID0gYG54LXJhZGlvLSR7bmV4dElkKyt9YDtcbiAgICAvKiogU2V0cyB0aGUgaWQgb2YgdGhlIHJhZGlvIGNvbXBvbmVudC4gKi9cbiAgICBASW5wdXQoJ2lkJylcbiAgICBzZXQgaWQodmFsdWU6IHN0cmluZykge1xuICAgICAgICBpZiAodGhpcy5faWQgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9pZCA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBpZCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XG4gICAgfVxuXG4gICAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgICBnZXQgaW5wdXRJZCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5pZH0taW5wdXRgO1xuICAgIH1cblxuICAgIC8qKiBAZG9jcy1wcml2YXRlICovXG4gICAgZ2V0IGxhYmVsSWQoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuaWR9LWxhYmVsYDtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9uYW1lOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgICAvLyB0aGlzIGlzIGFsc28gdGhlIG5hbWUgYXR0cmlidXRlLCB3aGljaCBpcyBtYW5kYXRvcnkgaW4gY29uanVuY3Rpb24gd2l0aCBuZ01vZGVsLCBoZW5jZSBubyBueCBwcmVmaXhcbiAgICAvKiogU2V0cyB0aGUgbmFtZSBvZiB0aGlzIHJhZGlvIGNvbXBvbmVudCwgd2hpY2ggaXMgbWFuZGF0b3J5IGluIGNvbmp1bmN0aW9uIHdpdGggbmdNb2RlbCAoRGVmYXVsdDogbnVsbCkuICovXG4gICAgQElucHV0KCduYW1lJylcbiAgICBzZXQgbmFtZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIGlmICh0aGlzLl9uYW1lICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fbmFtZSA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBuYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnJhZGlvR3JvdXA/Lm5hbWUgfHwgKHRoaXMuX25hbWUgYXMgc3RyaW5nKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9sYWJlbFNpemU6IExhYmVsU2l6ZSA9ICdiaWcnO1xuICAgIC8qKiBTZXRzIHRoZSBsYWJlbCBzaXplIG9mIHRoZSByYWRpbyBidXR0b24uXG4gICAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgYGJpZ2AuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBzZXQgbGFiZWxTaXplKHZhbHVlOiBMYWJlbFNpemUpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xhYmVsU2l6ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX2xhYmVsU2l6ZSA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBsYWJlbFNpemUoKTogTGFiZWxTaXplIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xhYmVsU2l6ZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9uZWdhdGl2ZSA9IGZhbHNlO1xuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIG5lZ2F0aXZlIHNldCBvZiBzdHlsZXMgc2hvdWxkIGJlIHVzZWQuXG4gICAgICpcbiAgICAgKiBJZiB0aGUgcmFkaW8gYnV0dG9uIGlzIHBsYWNlZCBpbiBhIHJhZGlvIGdyb3VwLCB0aGUgbmVnYXRpdmUgdmFsdWVcbiAgICAgKiBpcyBvdmVyd3JpdHRlbiBieSB0aGUgZ3JvdXAncyBuZWdhdGl2ZSB2YWx1ZS5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHNldCBuZWdhdGl2ZSh2YWx1ZTogQm9vbGVhbklucHV0KSB7XG4gICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcbiAgICAgICAgaWYgKHRoaXMuX25lZ2F0aXZlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fbmVnYXRpdmUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX2Nkci5tYXJrRm9yQ2hlY2soKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgbmVnYXRpdmUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnJhZGlvR3JvdXAgPyB0aGlzLnJhZGlvR3JvdXAubmVnYXRpdmUgOiB0aGlzLl9uZWdhdGl2ZTtcbiAgICB9XG5cbiAgICAvKiogQW4gZXZlbnQgaXMgZGlzcGF0Y2hlZCBvbiBlYWNoIHZhbHVlIGNoYW5nZS4gKi9cbiAgICBAT3V0cHV0KCdueFZhbHVlQ2hhbmdlJykgdmFsdWVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxOeFJhZGlvQ2hhbmdlPiA9IG5ldyBFdmVudEVtaXR0ZXI8TnhSYWRpb0NoYW5nZT4oKTtcblxuICAgIHByaXZhdGUgX3ZhbHVlOiBhbnkgPSBudWxsO1xuICAgIHByaXZhdGUgX2NoZWNrZWQgPSBmYWxzZTtcbiAgICBwcml2YXRlIF9kaXNhYmxlZCA9IGZhbHNlO1xuICAgIHByaXZhdGUgX3JlcXVpcmVkID0gZmFsc2U7XG5cbiAgICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICAgIGdldCBsYWJlbEhhc0NvbnRlbnQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX3JhZGlvTGFiZWxXcmFwcGVyLm5hdGl2ZUVsZW1lbnQuaW5uZXJIVE1MLnRyaW0oKTtcbiAgICB9XG5cbiAgICAvKiogU2V0cyB0aGUgdmFsdWUgb2YgdGhlIGZvcm0gY29udHJvbCBlbGVtZW50IChEZWZhdWx0OiBudWxsKS4gKi9cbiAgICBASW5wdXQoJ254VmFsdWUnKVxuICAgIHNldCB2YWx1ZSh2YWx1ZTogYW55KSB7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdGhpcy5fdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLm9uQ2hhbmdlQ2FsbGJhY2sodmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IHZhbHVlKCk6IGFueSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICB9XG5cbiAgICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICAgIGdldCBjaGVja2VkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2hlY2tlZDtcbiAgICB9XG5cbiAgICAvKiogV2hldGhlciB0aGUgcmFkaW8gY29tcG9uZW50IGlzIHNlbGVjdGVkLiAqL1xuICAgIEBJbnB1dCgnbnhDaGVja2VkJylcbiAgICBzZXQgY2hlY2tlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICBpZiAodGhpcy5fY2hlY2tlZCAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrZWQgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX2Nkci5tYXJrRm9yQ2hlY2soKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBAZG9jcy1wcml2YXRlICovXG4gICAgZ2V0IGRpc2FibGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWQgfHwgISF0aGlzLnJhZGlvR3JvdXA/LmRpc2FibGVkO1xuICAgIH1cblxuICAgIC8qKiBXaGV0aGVyIHRoZSByYWRpbyBidXR0b24gc2hvdWxkIGJlIGRpc2FibGVkIG9yIG5vdC4gKi9cbiAgICBASW5wdXQoJ254RGlzYWJsZWQnKVxuICAgIHNldCBkaXNhYmxlZCh2YWx1ZTogQm9vbGVhbklucHV0KSB7XG4gICAgICAgIHRoaXMuX2Rpc2FibGVkID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcbiAgICAgICAgdGhpcy5fY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgIH1cblxuICAgIC8qKiBAZG9jcy1wcml2YXRlICovXG4gICAgZ2V0IHJlcXVpcmVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWlyZWQgfHwgISF0aGlzLnJhZGlvR3JvdXA/LnJlcXVpcmVkO1xuICAgIH1cblxuICAgIC8qKiBTZXRzIGlmIGF0IGxlYXN0IGEgcmFkaW8gYnV0dG9uIHNob3VsZCBiZSBzZWxlY3RlZC4gKi9cbiAgICBASW5wdXQoKVxuICAgIHNldCByZXF1aXJlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLl9yZXF1aXJlZCA9IHZhbHVlO1xuICAgICAgICAvLyBuZWVkZWQgd2hlbiB0aGUgb3V0ZXIgY29tcG9uZW50IGlzIHNldCB0byBvblB1c2ggYmVjYXVzZSBpdCBpcyBhIG5hdGl2ZSBwcm9wZXJ0eVxuICAgICAgICAvLyBvbiB0aGUgaG9zdCBlbGVtZW50XG4gICAgICAgIHRoaXMuX2Nkci5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IF9kZXN0cm95ZWQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gICAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgcHVibGljIHJhZGlvR3JvdXA6IE54UmFkaW9Hcm91cENvbXBvbmVudCB8IG51bGwsIHByaXZhdGUgX2NkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIHByaXZhdGUgX2ZvY3VzTW9uaXRvcjogRm9jdXNNb25pdG9yKSB7fVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLnJhZGlvR3JvdXApIHtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IHRoaXMucmFkaW9Hcm91cC5uYW1lO1xuICAgICAgICAgICAgLy8gd2hlbiByZWxldmFudCBwcm9wZXJ0aWVzIG9mIHRoZSBwYXJlbnQgbGlrZSBuYW1lIGFuZCBkaXNhYmxlZCBjaGFuZ2VcbiAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gbGV0IGNoYW5nZSBkZXRlY3Rpb24ga25vdyB0aGF0IHRoZSB0ZW1wbGF0ZSBuZWVkcyBhbiB1cGRhdGVcbiAgICAgICAgICAgIHRoaXMucmFkaW9Hcm91cC5fc3RhdGVDaGFuZ2VzLnBpcGUodGFrZVVudGlsKHRoaXMuX2Rlc3Ryb3llZCkpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnJhZGlvR3JvdXAudmFsdWUgPT09IHRoaXMuX3ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgICAgIHRoaXMuX2ZvY3VzTW9uaXRvci5tb25pdG9yKHRoaXMuX25hdGl2ZUlucHV0KTtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5fZGVzdHJveWVkLm5leHQoKTtcbiAgICAgICAgdGhpcy5fZGVzdHJveWVkLmNvbXBsZXRlKCk7XG4gICAgICAgIHRoaXMuX2ZvY3VzTW9uaXRvci5zdG9wTW9uaXRvcmluZyh0aGlzLl9uYXRpdmVJbnB1dCk7XG4gICAgfVxuXG4gICAgLyoqIEBkb2NzLXByaXZhdGVcbiAgICAgKiBDYWxsYmFjayBmb3Igd2hlbiB0aGUgY29udGVudCBvZiB0aGUgbGFiZWwgaGFzIGNoYW5nZWQuXG4gICAgICovXG4gICAgbGFiZWxDb250ZW50Q2hhbmdlZCgpIHtcbiAgICAgICAgdGhpcy5fY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgICB9XG5cbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSB0aGlzLl92YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fY2hlY2tlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIG9uQ2hhbmdlQ2FsbGJhY2s6ICh2YWx1ZTogYW55KSA9PiB2b2lkID0gKCkgPT4ge307XG5cbiAgICByZWdpc3Rlck9uQ2hhbmdlKG9uQ2hhbmdlOiAodmFsdWU6IGFueSkgPT4gdm9pZCk6IHZvaWQge1xuICAgICAgICB0aGlzLm9uQ2hhbmdlQ2FsbGJhY2sgPSBvbkNoYW5nZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uVG91Y2hlZENhbGxiYWNrOiAoKSA9PiB2b2lkID0gKCkgPT4ge307XG5cbiAgICByZWdpc3Rlck9uVG91Y2hlZChvblRvdWNoZWQ6ICgpID0+IHZvaWQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5vblRvdWNoZWRDYWxsYmFjayA9IG9uVG91Y2hlZDtcbiAgICB9XG5cbiAgICAvKiogRm9jdXNlcyB0aGUgcmFkaW8gYnV0dG9uIGVsZW1lbnQuICovXG4gICAgZm9jdXMoZm9jdXNPcmlnaW4/OiBGb2N1c09yaWdpbikge1xuICAgICAgICB0aGlzLl9mb2N1c01vbml0b3IuZm9jdXNWaWEodGhpcy5fbmF0aXZlSW5wdXQsIGZvY3VzT3JpZ2luIGFzIEZvY3VzT3JpZ2luKTtcbiAgICB9XG5cbiAgICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICAgIHRvdWNoKCkge1xuICAgICAgICB0aGlzLm9uVG91Y2hlZENhbGxiYWNrKCk7XG5cbiAgICAgICAgaWYgKHRoaXMucmFkaW9Hcm91cCkge1xuICAgICAgICAgICAgdGhpcy5yYWRpb0dyb3VwLnRvdWNoKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfb25JbnB1dENoYW5nZShldmVudDogRXZlbnQpIHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHRoaXMuX2NoZWNrZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlLmVtaXQobmV3IE54UmFkaW9DaGFuZ2UodGhpcywgdGhpcy5fdmFsdWUpKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZUNhbGxiYWNrKHRoaXMudmFsdWUpO1xuXG4gICAgICAgIGlmICh0aGlzLnJhZGlvR3JvdXAgJiYgdGhpcy52YWx1ZSAhPT0gdGhpcy5yYWRpb0dyb3VwLnZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnJhZGlvR3JvdXAuY2hhbmdlKHRoaXMudmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX29uSW5wdXRDbGljayhldmVudDogRXZlbnQpIHtcbiAgICAgICAgLy8gbWFrZSBzdXJlIGNsaWNrIGV2ZW50IHByb3BhZ2F0aW9uIG9uIHRoZSB2aXN1YWxseSBoaWRkZW4gaW5wdXRcbiAgICAgICAgLy8gYXJlIHN0b3BwZWQgdG8gcHJldmVudCBtdWx0aXBsZSBldmVudHMgYnViYmxpbmcgdXAuXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cblxuICAgIC8qKiBAZG9jcy1wcml2YXRlICovXG4gICAgX2NvbnRyb2xJbnZhbGlkKCk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBmb3JtID0gdGhpcy5yYWRpb0dyb3VwICYmICh0aGlzLnJhZGlvR3JvdXAuX3BhcmVudEZvcm1Hcm91cCB8fCB0aGlzLnJhZGlvR3JvdXAuX3BhcmVudEZvcm0pO1xuICAgICAgICB0aGlzLl9jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgICAgIHJldHVybiAhISh0aGlzLnJhZGlvR3JvdXA/Lm5nQ29udHJvbD8uaW52YWxpZCAmJiAodGhpcy5yYWRpb0dyb3VwLm5nQ29udHJvbC50b3VjaGVkIHx8IGZvcm0/LnN1Ym1pdHRlZCkpO1xuICAgIH1cbn1cbiIsIjxuZy1jb250ZW50IHNlbGVjdD1cIm54LWxhYmVsXCI+PC9uZy1jb250ZW50PlxuPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuPG5nLWNvbnRhaW5lciAqbmdJZj1cImVycm9yU3RhdGVcIj5cbiAgICA8bmctY29udGVudCBzZWxlY3Q9XCJueC1lcnJvclwiPjwvbmctY29udGVudD5cbjwvbmctY29udGFpbmVyPlxuIiwiPGlucHV0XG4gICAgI2lucHV0XG4gICAgdHlwZT1cInJhZGlvXCJcbiAgICBbaWRdPVwiaW5wdXRJZFwiXG4gICAgW2F0dHIubmFtZV09XCJuYW1lXCJcbiAgICBbZGlzYWJsZWRdPVwiZGlzYWJsZWRcIlxuICAgIChibHVyKT1cInRvdWNoKClcIlxuICAgIChjaGFuZ2UpPVwiX29uSW5wdXRDaGFuZ2UoJGV2ZW50KVwiXG4gICAgKGNsaWNrKT1cIl9vbklucHV0Q2xpY2soJGV2ZW50KVwiXG4gICAgW2NoZWNrZWRdPVwiY2hlY2tlZFwiXG4gICAgW2F0dHIuYXJpYS1sYWJlbGxlZGJ5XT1cImxhYmVsSWRcIlxuICAgIFthdHRyLmFyaWEtaW52YWxpZF09XCJfY29udHJvbEludmFsaWQoKSB8fCBudWxsXCJcbiAgICBjbGFzcz1cIm54LXJhZGlvX19pbnB1dFwiXG4vPlxuPGxhYmVsIFtpZF09XCJsYWJlbElkXCIgW2F0dHIuZm9yXT1cImlucHV0SWRcIiBjbGFzcz1cIm54LXJhZGlvX19sYWJlbFwiIFtjbGFzcy5oYXMtbGFiZWxdPVwibGFiZWxIYXNDb250ZW50XCI+XG4gICAgPGRpdiBjbGFzcz1cIm54LXJhZGlvX19jaXJjbGVcIj5cbiAgICAgICAgPGRpdiAqbmdJZj1cImNoZWNrZWRcIiBjbGFzcz1cIm54LXJhZGlvX19kb3RcIj48L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8c3BhbiBjbGFzcz1cIm54LXJhZGlvX19sYWJlbC0tdGV4dFwiICNyYWRpb0xhYmVsV3JhcHBlciAoY2RrT2JzZXJ2ZUNvbnRlbnQpPVwibGFiZWxDb250ZW50Q2hhbmdlZCgpXCI+XG4gICAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgICA8L3NwYW4+XG48L2xhYmVsPlxuIl19