var _NxPhoneInputComponent_required;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ChangeDetectionStrategy, Component, Input, Optional, Self, ViewChild, } from '@angular/core';
import { NxDropdownComponent } from '@aposin/ng-aquila/dropdown';
import { NxFormfieldControl } from '@aposin/ng-aquila/formfield';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { getCountryCallingCodeFromNumber, getCountryCodeforCallingCode, getDialCodeByCountryCode, getSortedCountryCodes } from './country-data';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/a11y";
import * as i2 from "@aposin/ng-aquila/utils";
import * as i3 from "./phone-input-intl";
import * as i4 from "@aposin/ng-aquila/formfield";
import * as i5 from "@angular/forms";
import * as i6 from "@aposin/ng-aquila/dropdown";
import * as i7 from "@angular/common";
let next = 0;
export class NxPhoneInputComponent {
    constructor(_elementRef, _focusMonitor, _cdr, _errorStateMatcher, _intl, formFieldComponent, 
    /** @docs-private */ ngControl, _parentForm, _parentFormGroup) {
        this._elementRef = _elementRef;
        this._focusMonitor = _focusMonitor;
        this._cdr = _cdr;
        this._errorStateMatcher = _errorStateMatcher;
        this._intl = _intl;
        this.formFieldComponent = formFieldComponent;
        this.ngControl = ngControl;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this._inputValue = '';
        this._describedBy = '';
        this.stateChanges = new Subject();
        this.focused = false;
        this._uid = 'phone-input-' + next++;
        _NxPhoneInputComponent_required.set(this, false);
        this._disabled = false;
        this._readonly = false;
        this._countryCode = 'DE';
        this._initialCountryCode = 'DE';
        this._placeholder = '';
        // TODO we are disabling the floating label for now. the problem is: the label
        // is supposed to float next to the dropdown. we could introduce some changes to the
        // formfield that a control can also give something like an offset for the floating label
        // but for capacity reasons this has to be done at a later stage.
        this.shouldLabelFloat = true;
        /** @docs-private */
        this.errorState = false;
        this.controlType = 'nx-phone-input';
        this._countryCallingCode = getDialCodeByCountryCode(this.countryCode);
        this._destroyed = new Subject();
        this._inputFormatter = (inputValue, countryCode) => this._removeLeadingZero(inputValue);
        /** `View -> model callback called when value changes` */
        this._onChange = () => { };
        /** `View -> model callback called when select has been touched` */
        this._onTouched = () => { };
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
        _intl.changes.pipe(takeUntil(this._destroyed)).subscribe(_ => {
            this._sortCountries();
            this._cdr.detectChanges();
        });
    }
    get empty() {
        return !!this._inputValue;
    }
    /** Sets the id of the phone input component. */
    get id() {
        return this._id || this._uid;
    }
    set id(value) {
        this._id = value;
        this.stateChanges.next();
    }
    /** Whether the component should be required. */
    set required(value) {
        const coercedValue = coerceBooleanProperty(value);
        if (__classPrivateFieldGet(this, _NxPhoneInputComponent_required, "f") !== coercedValue) {
            __classPrivateFieldSet(this, _NxPhoneInputComponent_required, coercedValue, "f");
            this._cdr.markForCheck();
        }
    }
    get required() {
        return __classPrivateFieldGet(this, _NxPhoneInputComponent_required, "f");
    }
    /** Whether the component should be disabled. */
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = value; // TODO properly coerce input value
    }
    /** Whether the component should be read only. */
    get readonly() {
        return this._readonly;
    }
    set readonly(value) {
        this._readonly = coerceBooleanProperty(value);
        this.stateChanges.next();
    }
    /** Sets the initial country to be selected in the dropdown. Format is the international
     * country code like DE, US.
     * If there is already a number in the input field changing this property has no effect.
     */
    set countryCode(value) {
        if (this._inputValue) {
            return;
        }
        this._initialCountryCode = value;
        this._countryCode = value;
    }
    get countryCode() {
        return this._countryCode;
    }
    /** Set the text at the top of the dropdown. The default value is 'Area Code'. */
    get areaCodeLabel() {
        return this._areaCodeLabel || this._intl.areaCodeLabel;
    }
    set areaCodeLabel(value) {
        this._areaCodeLabel = value;
    }
    /** Set the translations of the countries. */
    get countryNames() {
        return this._countryNames || this._intl.countryNames;
    }
    set countryNames(value) {
        this._countryNames = value;
        this._sortCountries();
    }
    /** The placeholder to be shown in the input field. */
    get placeholder() {
        return this._placeholder;
    }
    set placeholder(value) {
        this._placeholder = value;
        this.stateChanges.next();
    }
    /**
     * Function to format the value in the input part of the component.
     * The function is called on blur. The default function removes leading zeros.
     * Please note: to determine the model value the component will remove parenthesis,
     * whitespace and dash characters from the formatted input.
     */
    get inputFormatter() {
        return this._inputFormatter;
    }
    set inputFormatter(formatFn) {
        this._inputFormatter = formatFn;
        this._inputValue = this._inputFormatter(this._inputValue, this._countryCallingCode);
    }
    ngDoCheck() {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this.updateErrorState();
        }
    }
    ngOnInit() {
        this._sortCountries();
    }
    ngAfterViewInit() {
        this._focusMonitor.monitor(this.dropdown.elementRef);
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
    setDescribedByIds(ids) {
        this._describedBy = ids.join(' ');
        this.dropdown.setDescribedByIds(ids);
    }
    get _ariaLabelledBy() {
        return this.formFieldComponent?.labelId;
    }
    get elementRef() {
        return this._elementRef;
    }
    writeValue(value) {
        if (typeof value === 'string') {
            const noWhitespaceNumber = value.replace(/\s/g, '');
            const { countryCallingCode, number } = getCountryCallingCodeFromNumber(noWhitespaceNumber || '+' + getDialCodeByCountryCode(this.countryCode)); // requires string starting with '+'
            this._countryCallingCode = countryCallingCode;
            this._inputValue = this.inputFormatter(number, countryCallingCode);
            this._countryCode = getCountryCodeforCallingCode(countryCallingCode);
        }
        else {
            this.value = '';
            this._inputValue = '';
            this._countryCode = this._initialCountryCode;
        }
        this._cdr.markForCheck();
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this._cdr.markForCheck();
        this.stateChanges.next();
    }
    updateErrorState() {
        const oldState = this.errorState;
        const parent = this._parentFormGroup || this._parentForm;
        const control = this.ngControl ? this.ngControl.control : null;
        const newState = this._errorStateMatcher.isErrorState(control, parent);
        if (newState !== oldState) {
            this.errorState = newState;
            this.stateChanges.next();
        }
    }
    _onInputBlur() {
        this._onTouched();
        this._inputValue = this.inputFormatter(this._inputValue, this._countryCallingCode);
    }
    _onInput() {
        this.updateModel();
    }
    _onCountryChange(countryCode) {
        this._countryCode = countryCode;
        this._countryCallingCode = getDialCodeByCountryCode(this.countryCode);
        this._inputValue = this.inputFormatter(this._inputValue, this._countryCallingCode);
        this._onInput();
    }
    updateModel() {
        const hasNumber = typeof this._inputValue === 'string' && this._removeLeadingZero(this._trimInputValue(this._inputValue)).length > 0;
        if (hasNumber) {
            this._onChange(this.getModelValue());
        }
        else {
            this._onChange('');
        }
    }
    _trimInputValue(value) {
        return value.replace(/[\s()\-/]/g, '');
    }
    _removeLeadingZero(value) {
        return value.replace(/^0/, '');
    }
    /** Returns the combined string of selected calling code + input number */
    getModelValue() {
        return '+' + this._getCallingCode(this.dropdown.value) + this._trimInputValue(this._removeLeadingZero(this._inputValue));
    }
    _getCallingCode(country) {
        return getDialCodeByCountryCode(country);
    }
    _sortCountries() {
        this._sortedCountries = getSortedCountryCodes(this.countryNames).map(country => this._getDropdownOption(country));
    }
    _getDropdownOption(country) {
        return {
            value: country,
            label: `${this._getCountryName(country)} (+${this._getCallingCode(country)})`,
        };
    }
    _getCountryName(countryCode) {
        const name = this.countryNames[countryCode];
        return Array.isArray(name) ? name[0] : name;
    }
    _getReadonlyValue() {
        return this.getModelValue();
    }
}
_NxPhoneInputComponent_required = new WeakMap();
NxPhoneInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxPhoneInputComponent, deps: [{ token: i0.ElementRef }, { token: i1.FocusMonitor }, { token: i0.ChangeDetectorRef }, { token: i2.ErrorStateMatcher }, { token: i3.NxPhoneInputIntl }, { token: i4.NxFormfieldComponent, optional: true }, { token: i5.NgControl, optional: true, self: true }, { token: i5.NgForm, optional: true }, { token: i5.FormGroupDirective, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NxPhoneInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxPhoneInputComponent, selector: "nx-phone-input", inputs: { id: "id", required: "required", disabled: "disabled", readonly: "readonly", countryCode: "countryCode", areaCodeLabel: "areaCodeLabel", countryNames: "countryNames", placeholder: "placeholder", inputFormatter: "inputFormatter" }, host: { properties: { "attr.id": "id" } }, providers: [{ provide: NxFormfieldControl, useExisting: NxPhoneInputComponent }], viewQueries: [{ propertyName: "dropdown", first: true, predicate: NxDropdownComponent, descendants: true, static: true }], ngImport: i0, template: "<div class=\"wrapper\">\n    <nx-dropdown\n        [class.hide]=\"readonly && !disabled\"\n        [nxValue]=\"countryCode\"\n        #dropdown\n        [nxShowFilter]=\"true\"\n        [nxDisabled]=\"disabled\"\n        [nxOverlayLabel]=\"areaCodeLabel\"\n        (nxValueChange)=\"_onCountryChange($event)\"\n        [options]=\"_sortedCountries\"\n    >\n        <span *nxClosedLabel>+{{ _getCallingCode(dropdown.value) }}</span>\n    </nx-dropdown>\n\n    <!-- adding c-input for the styles and to not get the overhead of the nxInput directive -->\n    <input\n        class=\"c-input\"\n        [class.hide]=\"readonly && !disabled\"\n        type=\"tel\"\n        (blur)=\"_onInputBlur()\"\n        [(ngModel)]=\"_inputValue\"\n        (ngModelChange)=\"_onInput()\"\n        [attr.aria-describedby]=\"_describedBy\"\n        [attr.aria-labelledby]=\"_ariaLabelledBy\"\n        [attr.required]=\"required || null\"\n        [attr.disabled]=\"disabled || null\"\n        [attr.placeholder]=\"placeholder || null\"\n    />\n\n    <input\n        class=\"c-input readonly-input\"\n        *ngIf=\"readonly && !disabled\"\n        type=\"tel\"\n        [attr.readonly]=\"readonly || null\"\n        [attr.aria-readonly]=\"readonly || null\"\n        [value]=\"_getReadonlyValue()\"\n        [attr.aria-describedby]=\"_describedBy\"\n        [attr.aria-labelledby]=\"_ariaLabelledBy\"\n    />\n</div>\n", styles: [":host{display:block;width:100%}.wrapper{display:flex;height:100%;align-items:center}.hide{display:none;visibility:hidden}input{flex:1}.readonly-input{margin-left:7px}nx-dropdown{width:auto;margin-right:8px}nx-dropdown.cdk-keyboard-focused{box-shadow:var(--focus-box-shadow);border-radius:4px}@media screen and (-ms-high-contrast: active),(forced-colors: active){nx-dropdown.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}nx-dropdown ::ng-deep .nx-dropdown__container{padding-right:0}nx-dropdown ::ng-deep .nx-dropdown__icon{margin-left:8px}nx-dropdown ::ng-deep .nx-dropdown__rendered{font-size:16px;line-height:24px}:host-context(.nx-formfield.has-outline) nx-dropdown{margin-left:7px}:host-context(.nx-formfield.has-outline) input{padding-left:0}:host-context(.nx-formfield.has-outline) ::ng-deep .nx-dropdown__container{padding:0}:host-context(.is-disabled) input{cursor:not-allowed}input{text-align:inherit;font-size:inherit;font-weight:inherit;background:0 0;color:inherit;border:none;outline:0;padding:0;margin:0}:host-context([dir=rtl]) nx-dropdown{margin-right:0;margin-left:8px}:host-context([dir=rtl]) nx-dropdown ::ng-deep .nx-dropdown__icon{margin-right:8px;margin-left:0}:host-context([dir=rtl]):host-context(.nx-formfield.has-outline) nx-dropdown{margin-right:7px;margin-left:8px}:host-context([dir=rtl]):host-context(.nx-formfield.has-outline) input{padding-left:7px;padding-right:0}\n"], components: [{ type: i6.NxDropdownComponent, selector: "nx-dropdown", inputs: ["options", "filterInputType", "tabIndex", "nxValue", "nxDisabled", "nxIsMultiselect", "nxRequired", "nxStyle", "placeholder", "nxIgnoreItemTrunctation", "nxShowFilter", "nxFilterPlaceholder", "nxOverlayLabel", "nxValueFormatter", "compareWith", "filterFn"], outputs: ["openedChange", "filterResult", "opened", "closed", "filterInput", "nxValueChange", "selectionChange"] }], directives: [{ type: i6.NxDropdownClosedLabelDirective, selector: "[nxClosedLabel]" }, { type: i5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i5.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxPhoneInputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-phone-input', changeDetection: ChangeDetectionStrategy.OnPush, providers: [{ provide: NxFormfieldControl, useExisting: NxPhoneInputComponent }], host: {
                        '[attr.id]': 'id',
                    }, template: "<div class=\"wrapper\">\n    <nx-dropdown\n        [class.hide]=\"readonly && !disabled\"\n        [nxValue]=\"countryCode\"\n        #dropdown\n        [nxShowFilter]=\"true\"\n        [nxDisabled]=\"disabled\"\n        [nxOverlayLabel]=\"areaCodeLabel\"\n        (nxValueChange)=\"_onCountryChange($event)\"\n        [options]=\"_sortedCountries\"\n    >\n        <span *nxClosedLabel>+{{ _getCallingCode(dropdown.value) }}</span>\n    </nx-dropdown>\n\n    <!-- adding c-input for the styles and to not get the overhead of the nxInput directive -->\n    <input\n        class=\"c-input\"\n        [class.hide]=\"readonly && !disabled\"\n        type=\"tel\"\n        (blur)=\"_onInputBlur()\"\n        [(ngModel)]=\"_inputValue\"\n        (ngModelChange)=\"_onInput()\"\n        [attr.aria-describedby]=\"_describedBy\"\n        [attr.aria-labelledby]=\"_ariaLabelledBy\"\n        [attr.required]=\"required || null\"\n        [attr.disabled]=\"disabled || null\"\n        [attr.placeholder]=\"placeholder || null\"\n    />\n\n    <input\n        class=\"c-input readonly-input\"\n        *ngIf=\"readonly && !disabled\"\n        type=\"tel\"\n        [attr.readonly]=\"readonly || null\"\n        [attr.aria-readonly]=\"readonly || null\"\n        [value]=\"_getReadonlyValue()\"\n        [attr.aria-describedby]=\"_describedBy\"\n        [attr.aria-labelledby]=\"_ariaLabelledBy\"\n    />\n</div>\n", styles: [":host{display:block;width:100%}.wrapper{display:flex;height:100%;align-items:center}.hide{display:none;visibility:hidden}input{flex:1}.readonly-input{margin-left:7px}nx-dropdown{width:auto;margin-right:8px}nx-dropdown.cdk-keyboard-focused{box-shadow:var(--focus-box-shadow);border-radius:4px}@media screen and (-ms-high-contrast: active),(forced-colors: active){nx-dropdown.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}nx-dropdown ::ng-deep .nx-dropdown__container{padding-right:0}nx-dropdown ::ng-deep .nx-dropdown__icon{margin-left:8px}nx-dropdown ::ng-deep .nx-dropdown__rendered{font-size:16px;line-height:24px}:host-context(.nx-formfield.has-outline) nx-dropdown{margin-left:7px}:host-context(.nx-formfield.has-outline) input{padding-left:0}:host-context(.nx-formfield.has-outline) ::ng-deep .nx-dropdown__container{padding:0}:host-context(.is-disabled) input{cursor:not-allowed}input{text-align:inherit;font-size:inherit;font-weight:inherit;background:0 0;color:inherit;border:none;outline:0;padding:0;margin:0}:host-context([dir=rtl]) nx-dropdown{margin-right:0;margin-left:8px}:host-context([dir=rtl]) nx-dropdown ::ng-deep .nx-dropdown__icon{margin-right:8px;margin-left:0}:host-context([dir=rtl]):host-context(.nx-formfield.has-outline) nx-dropdown{margin-right:7px;margin-left:8px}:host-context([dir=rtl]):host-context(.nx-formfield.has-outline) input{padding-left:7px;padding-right:0}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.FocusMonitor }, { type: i0.ChangeDetectorRef }, { type: i2.ErrorStateMatcher }, { type: i3.NxPhoneInputIntl }, { type: i4.NxFormfieldComponent, decorators: [{
                    type: Optional
                }] }, { type: i5.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }, { type: i5.NgForm, decorators: [{
                    type: Optional
                }] }, { type: i5.FormGroupDirective, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { dropdown: [{
                type: ViewChild,
                args: [NxDropdownComponent, { static: true }]
            }], id: [{
                type: Input
            }], required: [{
                type: Input
            }], disabled: [{
                type: Input
            }], readonly: [{
                type: Input
            }], countryCode: [{
                type: Input
            }], areaCodeLabel: [{
                type: Input
            }], countryNames: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], inputFormatter: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,