// This file gets created in the postinstall hook, see extract-calling-codes.js script
import rawMetadata from './metadata.json';
const MAX_LENGTH_COUNTRY_CODE = 3;
class CountryMetadata {
    constructor(sourceObj) {
        this.countries = {};
        this.callingCodes = {};
        this.countries = sourceObj.countries;
        this.callingCodes = sourceObj.callingCodes;
    }
}
const metadata = new CountryMetadata(rawMetadata);
/** Get dial code by country code */
export const getDialCodeByCountryCode = (countryCode) => metadata.countries[countryCode];
/** Get the country name by country code */
export const getCountryNameByCountryCode = (countryNames, countryCode) => {
    const name = countryNames[countryCode];
    return Array.isArray(name) ? name[0] : name;
};
export const getCountryCodeforCallingCode = (callingCode) => {
    const countries = metadata.callingCodes[callingCode];
    if (countries && countries.length > 0) {
        return countries[0];
    }
    throw new Error('Could not find calling code ' + callingCode);
};
// Extract the country calling code from a number string
// Returns the country calling code and the rest of the string with the calling code removed
// Throws an error if the input is not correctly formatted.
export const getCountryCallingCodeFromNumber = (number) => {
    // there are a lot of cases a phone number could have, e.g. with a "IDD prefix"
    // e.g. instead of +49 123 it could be 0049 123 if you are calling from european countries
    // this IDD prefix is specific to countries/areas. libphonenumber has all the metadata for it
    // but as we don't want the dependency on it we only accept numbers with + sign and calling code
    // in the beginning. this can later be done better once we introduce an adapter and then a libphonenumber adapter
    // could have additional capabilities here.
    if (!number.startsWith('+')) {
        throw Error('Expected phone number to start with "+" sign followed by the calling code');
    }
    // Taken from libphonenumber-js
    // https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/source/helpers/extractCountryCallingCode.js
    let i = 2;
    while (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {
        const countryCallingCode = number.slice(1, i);
        if (countryCallingCode in metadata.callingCodes) {
            return {
                countryCallingCode,
                number: number.slice(i),
            };
        }
        i++;
    }
    throw new Error('No country code found');
};
/** Get sorted country code */
export const getSortedCountryCodes = (countryNames) => Object.keys(countryNames)
    .filter(countryCode => countryCode in metadata.countries)
    .sort((a, b) => {
    // There are arrays and strings provided for locals. For example (en):
    // "RO": "Romania",
    // "RU": ["Russian Federation", "Russia"],
    const localA = (Array.isArray(countryNames[a]) ? countryNames[a][0] : countryNames[a]);
    const localB = (Array.isArray(countryNames[b]) ? countryNames[b][0] : countryNames[b]);
    return localA.localeCompare(localB);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnRyeS1kYXRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctYXF1aWxhL3NyYy9waG9uZS1pbnB1dC9jb3VudHJ5LWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsc0ZBQXNGO0FBQ3RGLE9BQU8sV0FBVyxNQUFNLGlCQUFpQixDQUFDO0FBRTFDLE1BQU0sdUJBQXVCLEdBQUcsQ0FBQyxDQUFDO0FBRWxDLE1BQU0sZUFBZTtJQUdqQixZQUFZLFNBQWM7UUFGMUIsY0FBUyxHQUE4QixFQUFFLENBQUM7UUFDMUMsaUJBQVksR0FBZ0MsRUFBRSxDQUFDO1FBRTNDLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQztRQUNyQyxJQUFJLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQyxZQUFZLENBQUM7SUFDL0MsQ0FBQztDQUNKO0FBRUQsTUFBTSxRQUFRLEdBQUcsSUFBSSxlQUFlLENBQUMsV0FBVyxDQUFDLENBQUM7QUFFbEQsb0NBQW9DO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFHLENBQUMsV0FBbUIsRUFBVSxFQUFFLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUV6RywyQ0FBMkM7QUFDM0MsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQUcsQ0FBQyxZQUF3QyxFQUFFLFdBQW1CLEVBQVUsRUFBRTtJQUNqSCxNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdkMsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUNoRCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSw0QkFBNEIsR0FBRyxDQUFDLFdBQW1CLEVBQUUsRUFBRTtJQUNoRSxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3JELElBQUksU0FBUyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ25DLE9BQU8sU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3ZCO0lBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQyw4QkFBOEIsR0FBRyxXQUFXLENBQUMsQ0FBQztBQUNsRSxDQUFDLENBQUM7QUFFRix3REFBd0Q7QUFDeEQsNEZBQTRGO0FBQzVGLDJEQUEyRDtBQUMzRCxNQUFNLENBQUMsTUFBTSwrQkFBK0IsR0FBRyxDQUFDLE1BQWMsRUFBRSxFQUFFO0lBQzlELCtFQUErRTtJQUMvRSwwRkFBMEY7SUFDMUYsNkZBQTZGO0lBQzdGLGdHQUFnRztJQUNoRyxpSEFBaUg7SUFDakgsMkNBQTJDO0lBQzNDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3pCLE1BQU0sS0FBSyxDQUFDLDJFQUEyRSxDQUFDLENBQUM7S0FDNUY7SUFFRCwrQkFBK0I7SUFDL0IsZ0hBQWdIO0lBQ2hILElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNWLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSx1QkFBdUIsSUFBSSxDQUFDLElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRTtRQUMzRCxNQUFNLGtCQUFrQixHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzlDLElBQUksa0JBQWtCLElBQUksUUFBUSxDQUFDLFlBQVksRUFBRTtZQUM3QyxPQUFPO2dCQUNILGtCQUFrQjtnQkFDbEIsTUFBTSxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2FBQzFCLENBQUM7U0FDTDtRQUNELENBQUMsRUFBRSxDQUFDO0tBQ1A7SUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7QUFDN0MsQ0FBQyxDQUFDO0FBRUYsOEJBQThCO0FBQzlCLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLENBQUMsWUFBd0MsRUFBRSxFQUFFLENBQzlFLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO0tBQ3BCLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLFdBQVcsSUFBSSxRQUFRLENBQUMsU0FBUyxDQUFDO0tBQ3hELElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUNYLHNFQUFzRTtJQUN0RSxtQkFBbUI7SUFDbkIsMENBQTBDO0lBQzFDLE1BQU0sTUFBTSxHQUFXLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUN6RyxNQUFNLE1BQU0sR0FBVyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFFekcsT0FBTyxNQUFNLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3hDLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTG9jYWxpemVkQ291bnRyeU5hbWVzIH0gZnJvbSAnaTE4bi1pc28tY291bnRyaWVzJztcblxuLy8gVGhpcyBmaWxlIGdldHMgY3JlYXRlZCBpbiB0aGUgcG9zdGluc3RhbGwgaG9vaywgc2VlIGV4dHJhY3QtY2FsbGluZy1jb2Rlcy5qcyBzY3JpcHRcbmltcG9ydCByYXdNZXRhZGF0YSBmcm9tICcuL21ldGFkYXRhLmpzb24nO1xuXG5jb25zdCBNQVhfTEVOR1RIX0NPVU5UUllfQ09ERSA9IDM7XG5cbmNsYXNzIENvdW50cnlNZXRhZGF0YSB7XG4gICAgY291bnRyaWVzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge307XG4gICAgY2FsbGluZ0NvZGVzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZ1tdIH0gPSB7fTtcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2VPYmo6IGFueSkge1xuICAgICAgICB0aGlzLmNvdW50cmllcyA9IHNvdXJjZU9iai5jb3VudHJpZXM7XG4gICAgICAgIHRoaXMuY2FsbGluZ0NvZGVzID0gc291cmNlT2JqLmNhbGxpbmdDb2RlcztcbiAgICB9XG59XG5cbmNvbnN0IG1ldGFkYXRhID0gbmV3IENvdW50cnlNZXRhZGF0YShyYXdNZXRhZGF0YSk7XG5cbi8qKiBHZXQgZGlhbCBjb2RlIGJ5IGNvdW50cnkgY29kZSAqL1xuZXhwb3J0IGNvbnN0IGdldERpYWxDb2RlQnlDb3VudHJ5Q29kZSA9IChjb3VudHJ5Q29kZTogc3RyaW5nKTogc3RyaW5nID0+IG1ldGFkYXRhLmNvdW50cmllc1tjb3VudHJ5Q29kZV07XG5cbi8qKiBHZXQgdGhlIGNvdW50cnkgbmFtZSBieSBjb3VudHJ5IGNvZGUgKi9cbmV4cG9ydCBjb25zdCBnZXRDb3VudHJ5TmFtZUJ5Q291bnRyeUNvZGUgPSAoY291bnRyeU5hbWVzOiBMb2NhbGl6ZWRDb3VudHJ5TmFtZXM8YW55PiwgY291bnRyeUNvZGU6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gICAgY29uc3QgbmFtZSA9IGNvdW50cnlOYW1lc1tjb3VudHJ5Q29kZV07XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkobmFtZSkgPyBuYW1lWzBdIDogbmFtZTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRDb3VudHJ5Q29kZWZvckNhbGxpbmdDb2RlID0gKGNhbGxpbmdDb2RlOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBjb3VudHJpZXMgPSBtZXRhZGF0YS5jYWxsaW5nQ29kZXNbY2FsbGluZ0NvZGVdO1xuICAgIGlmIChjb3VudHJpZXMgJiYgY291bnRyaWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIGNvdW50cmllc1swXTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIGNhbGxpbmcgY29kZSAnICsgY2FsbGluZ0NvZGUpO1xufTtcblxuLy8gRXh0cmFjdCB0aGUgY291bnRyeSBjYWxsaW5nIGNvZGUgZnJvbSBhIG51bWJlciBzdHJpbmdcbi8vIFJldHVybnMgdGhlIGNvdW50cnkgY2FsbGluZyBjb2RlIGFuZCB0aGUgcmVzdCBvZiB0aGUgc3RyaW5nIHdpdGggdGhlIGNhbGxpbmcgY29kZSByZW1vdmVkXG4vLyBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlIGlucHV0IGlzIG5vdCBjb3JyZWN0bHkgZm9ybWF0dGVkLlxuZXhwb3J0IGNvbnN0IGdldENvdW50cnlDYWxsaW5nQ29kZUZyb21OdW1iZXIgPSAobnVtYmVyOiBzdHJpbmcpID0+IHtcbiAgICAvLyB0aGVyZSBhcmUgYSBsb3Qgb2YgY2FzZXMgYSBwaG9uZSBudW1iZXIgY291bGQgaGF2ZSwgZS5nLiB3aXRoIGEgXCJJREQgcHJlZml4XCJcbiAgICAvLyBlLmcuIGluc3RlYWQgb2YgKzQ5IDEyMyBpdCBjb3VsZCBiZSAwMDQ5IDEyMyBpZiB5b3UgYXJlIGNhbGxpbmcgZnJvbSBldXJvcGVhbiBjb3VudHJpZXNcbiAgICAvLyB0aGlzIElERCBwcmVmaXggaXMgc3BlY2lmaWMgdG8gY291bnRyaWVzL2FyZWFzLiBsaWJwaG9uZW51bWJlciBoYXMgYWxsIHRoZSBtZXRhZGF0YSBmb3IgaXRcbiAgICAvLyBidXQgYXMgd2UgZG9uJ3Qgd2FudCB0aGUgZGVwZW5kZW5jeSBvbiBpdCB3ZSBvbmx5IGFjY2VwdCBudW1iZXJzIHdpdGggKyBzaWduIGFuZCBjYWxsaW5nIGNvZGVcbiAgICAvLyBpbiB0aGUgYmVnaW5uaW5nLiB0aGlzIGNhbiBsYXRlciBiZSBkb25lIGJldHRlciBvbmNlIHdlIGludHJvZHVjZSBhbiBhZGFwdGVyIGFuZCB0aGVuIGEgbGlicGhvbmVudW1iZXIgYWRhcHRlclxuICAgIC8vIGNvdWxkIGhhdmUgYWRkaXRpb25hbCBjYXBhYmlsaXRpZXMgaGVyZS5cbiAgICBpZiAoIW51bWJlci5zdGFydHNXaXRoKCcrJykpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0V4cGVjdGVkIHBob25lIG51bWJlciB0byBzdGFydCB3aXRoIFwiK1wiIHNpZ24gZm9sbG93ZWQgYnkgdGhlIGNhbGxpbmcgY29kZScpO1xuICAgIH1cblxuICAgIC8vIFRha2VuIGZyb20gbGlicGhvbmVudW1iZXItanNcbiAgICAvLyBodHRwczovL2dpdGxhYi5jb20vY2F0YW1waGV0YW1pbmUvbGlicGhvbmVudW1iZXItanMvLS9ibG9iL21hc3Rlci9zb3VyY2UvaGVscGVycy9leHRyYWN0Q291bnRyeUNhbGxpbmdDb2RlLmpzXG4gICAgbGV0IGkgPSAyO1xuICAgIHdoaWxlIChpIC0gMSA8PSBNQVhfTEVOR1RIX0NPVU5UUllfQ09ERSAmJiBpIDw9IG51bWJlci5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgY291bnRyeUNhbGxpbmdDb2RlID0gbnVtYmVyLnNsaWNlKDEsIGkpO1xuICAgICAgICBpZiAoY291bnRyeUNhbGxpbmdDb2RlIGluIG1ldGFkYXRhLmNhbGxpbmdDb2Rlcykge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBjb3VudHJ5Q2FsbGluZ0NvZGUsXG4gICAgICAgICAgICAgICAgbnVtYmVyOiBudW1iZXIuc2xpY2UoaSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGkrKztcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGNvdW50cnkgY29kZSBmb3VuZCcpO1xufTtcblxuLyoqIEdldCBzb3J0ZWQgY291bnRyeSBjb2RlICovXG5leHBvcnQgY29uc3QgZ2V0U29ydGVkQ291bnRyeUNvZGVzID0gKGNvdW50cnlOYW1lczogTG9jYWxpemVkQ291bnRyeU5hbWVzPGFueT4pID0+XG4gICAgT2JqZWN0LmtleXMoY291bnRyeU5hbWVzKVxuICAgICAgICAuZmlsdGVyKGNvdW50cnlDb2RlID0+IGNvdW50cnlDb2RlIGluIG1ldGFkYXRhLmNvdW50cmllcylcbiAgICAgICAgLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICAgIC8vIFRoZXJlIGFyZSBhcnJheXMgYW5kIHN0cmluZ3MgcHJvdmlkZWQgZm9yIGxvY2Fscy4gRm9yIGV4YW1wbGUgKGVuKTpcbiAgICAgICAgICAgIC8vIFwiUk9cIjogXCJSb21hbmlhXCIsXG4gICAgICAgICAgICAvLyBcIlJVXCI6IFtcIlJ1c3NpYW4gRmVkZXJhdGlvblwiLCBcIlJ1c3NpYVwiXSxcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsQTogc3RyaW5nID0gKEFycmF5LmlzQXJyYXkoY291bnRyeU5hbWVzW2FdKSA/IGNvdW50cnlOYW1lc1thXVswXSA6IGNvdW50cnlOYW1lc1thXSkgYXMgc3RyaW5nO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxCOiBzdHJpbmcgPSAoQXJyYXkuaXNBcnJheShjb3VudHJ5TmFtZXNbYl0pID8gY291bnRyeU5hbWVzW2JdWzBdIDogY291bnRyeU5hbWVzW2JdKSBhcyBzdHJpbmc7XG5cbiAgICAgICAgICAgIHJldHVybiBsb2NhbEEubG9jYWxlQ29tcGFyZShsb2NhbEIpO1xuICAgICAgICB9KTtcbiJdfQ==