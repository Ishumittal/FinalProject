import { ENTER, SPACE } from '@angular/cdk/keycodes';
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/a11y";
import * as i2 from "@aposin/ng-aquila/icon";
const visibilityIcons = {
    show: 'password-show-o',
    hide: 'password-hide-o',
};
export class NxPasswordToggleComponent {
    constructor(_cdr, _elementRef, _focusMonitor) {
        this._cdr = _cdr;
        this._elementRef = _elementRef;
        this._focusMonitor = _focusMonitor;
        /** @docs-private */
        this._currentIcon = visibilityIcons['show'];
        /** @docs-private */
        this._pressed = false;
        this._ariaLabel = 'Show password';
        this._focusMonitor.monitor(this._elementRef);
    }
    /** Sets the aria-label needed for accessibility.
     * Notice that this `aria-label` should describe the initial action according to the status of the visibility.
     * E.g if you have an `input[type=password]` at the beginning then the
     * password will be hidden and the correct aria-label would be 'Show password.'
     */
    set ariaLabel(value) {
        if (value !== this._ariaLabel) {
            this._ariaLabel = value;
            this._cdr.markForCheck();
        }
    }
    get ariaLabel() {
        return this._ariaLabel;
    }
    ngAfterViewInit() {
        if (!this.control) {
            console.warn('You need to pass an input as a control to the password toggle.');
            return;
        }
        // show the right icon according to the initial type of the input
        this._currentIcon = this.control.type === 'password' ? visibilityIcons['show'] : visibilityIcons['hide'];
    }
    ngOnDestroy() {
        this._focusMonitor.stopMonitoring(this._elementRef);
    }
    /** Toggles the type of the input. */
    toggleInputType() {
        if (this.control) {
            this.control.type = this.control.type === 'password' ? 'text' : 'password';
            this._pressed = !this._pressed;
            this.toggleIcon();
            this._cdr.markForCheck();
        }
    }
    /** @docs-private */
    toggleIcon() {
        this._currentIcon = this._currentIcon === visibilityIcons['show'] ? visibilityIcons['hide'] : visibilityIcons['show'];
    }
    /** @docs-private */
    _onKeydown($event) {
        if ($event && ($event.keyCode === ENTER || $event.keyCode === SPACE)) {
            this.toggleInputType();
        }
    }
    /** @docs-private */
    get tabindex() {
        if (this.control) {
            return this.control.disabled ? -1 : 0;
        }
        return null;
    }
}
NxPasswordToggleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxPasswordToggleComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });
NxPasswordToggleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxPasswordToggleComponent, selector: "nx-password-toggle", inputs: { control: "control", ariaLabel: "ariaLabel" }, host: { attributes: { "role": "button" }, listeners: { "click": "toggleInputType()", "keydown": "_onKeydown($event)" }, properties: { "attr.aria-label": "ariaLabel", "attr.tabindex": "tabindex", "attr.aria-pressed": "_pressed" } }, ngImport: i0, template: `<nx-icon aria-hidden="true" [name]="_currentIcon"> </nx-icon>`, isInline: true, styles: [":host{position:relative;display:inline-block;height:24px;width:24px;cursor:pointer}@media screen and (-ms-high-contrast: active){:host{color:buttonText!important}}:host:focus{outline:none}:host:hover{color:var(--hover-primary)}:host.cdk-keyboard-focused ::ng-deep nx-icon{box-shadow:var(--focus-box-shadow);border-radius:4px}@media screen and (-ms-high-contrast: active),(forced-colors: active){:host.cdk-keyboard-focused ::ng-deep nx-icon{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}:host-context(.is-disabled){pointer-events:none}@media screen and (-ms-high-contrast: active){:host-context(.is-disabled){color:GrayText!important}}\n"], components: [{ type: i2.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxPasswordToggleComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-password-toggle', template: `<nx-icon aria-hidden="true" [name]="_currentIcon"> </nx-icon>`, host: {
                        '[attr.aria-label]': 'ariaLabel',
                        '[attr.tabindex]': 'tabindex',
                        '[attr.aria-pressed]': '_pressed',
                        role: 'button',
                        '(click)': 'toggleInputType()',
                        '(keydown)': '_onKeydown($event)',
                    }, changeDetection: ChangeDetectionStrategy.OnPush, styles: [":host{position:relative;display:inline-block;height:24px;width:24px;cursor:pointer}@media screen and (-ms-high-contrast: active){:host{color:buttonText!important}}:host:focus{outline:none}:host:hover{color:var(--hover-primary)}:host.cdk-keyboard-focused ::ng-deep nx-icon{box-shadow:var(--focus-box-shadow);border-radius:4px}@media screen and (-ms-high-contrast: active),(forced-colors: active){:host.cdk-keyboard-focused ::ng-deep nx-icon{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}:host-context(.is-disabled){pointer-events:none}@media screen and (-ms-high-contrast: active){:host-context(.is-disabled){color:GrayText!important}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i1.FocusMonitor }]; }, propDecorators: { control: [{
                type: Input
            }], ariaLabel: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtdG9nZ2xlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWFxdWlsYS9zcmMvaW5wdXQvcGFzc3dvcmQtdG9nZ2xlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3JELE9BQU8sRUFBaUIsdUJBQXVCLEVBQXFCLFNBQVMsRUFBYyxLQUFLLEVBQWEsTUFBTSxlQUFlLENBQUM7Ozs7QUFFbkksTUFBTSxlQUFlLEdBQUc7SUFDcEIsSUFBSSxFQUFFLGlCQUFpQjtJQUN2QixJQUFJLEVBQUUsaUJBQWlCO0NBQzFCLENBQUM7QUFnQkYsTUFBTSxPQUFPLHlCQUF5QjtJQTBCbEMsWUFBb0IsSUFBdUIsRUFBVSxXQUF1QixFQUFVLGFBQTJCO1FBQTdGLFNBQUksR0FBSixJQUFJLENBQW1CO1FBQVUsZ0JBQVcsR0FBWCxXQUFXLENBQVk7UUFBVSxrQkFBYSxHQUFiLGFBQWEsQ0FBYztRQXRCakgsb0JBQW9CO1FBQ3BCLGlCQUFZLEdBQVcsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQy9DLG9CQUFvQjtRQUNwQixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ1QsZUFBVSxHQUFHLGVBQWUsQ0FBQztRQW1CakMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFsQkQ7Ozs7T0FJRztJQUNILElBQ0ksU0FBUyxDQUFDLEtBQWE7UUFDdkIsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUMzQixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztZQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQzVCO0lBQ0wsQ0FBQztJQUNELElBQUksU0FBUztRQUNULE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUMzQixDQUFDO0lBTUQsZUFBZTtRQUNYLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2YsT0FBTyxDQUFDLElBQUksQ0FBQyxnRUFBZ0UsQ0FBQyxDQUFDO1lBQy9FLE9BQU87U0FDVjtRQUNELGlFQUFpRTtRQUNqRSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDN0csQ0FBQztJQUVELFdBQVc7UUFDUCxJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVELHFDQUFxQztJQUNyQyxlQUFlO1FBQ1gsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQztZQUMzRSxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUMvQixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUM1QjtJQUNMLENBQUM7SUFFRCxvQkFBb0I7SUFDcEIsVUFBVTtRQUNOLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksS0FBSyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzFILENBQUM7SUFFRCxvQkFBb0I7SUFDcEIsVUFBVSxDQUFDLE1BQXFCO1FBQzVCLElBQUksTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sS0FBSyxLQUFLLElBQUksTUFBTSxDQUFDLE9BQU8sS0FBSyxLQUFLLENBQUMsRUFBRTtZQUNsRSxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDMUI7SUFDTCxDQUFDO0lBRUQsb0JBQW9CO0lBQ3BCLElBQUksUUFBUTtRQUNSLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNkLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDekM7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDOztzSEF2RVEseUJBQXlCOzBHQUF6Qix5QkFBeUIsMFZBWnhCLCtEQUErRDsyRkFZaEUseUJBQXlCO2tCQWRyQyxTQUFTOytCQUNJLG9CQUFvQixZQUNwQiwrREFBK0QsUUFFbkU7d0JBQ0YsbUJBQW1CLEVBQUUsV0FBVzt3QkFDaEMsaUJBQWlCLEVBQUUsVUFBVTt3QkFDN0IscUJBQXFCLEVBQUUsVUFBVTt3QkFDakMsSUFBSSxFQUFFLFFBQVE7d0JBQ2QsU0FBUyxFQUFFLG1CQUFtQjt3QkFDOUIsV0FBVyxFQUFFLG9CQUFvQjtxQkFDcEMsbUJBQ2dCLHVCQUF1QixDQUFDLE1BQU07NEpBSXRDLE9BQU87c0JBQWYsS0FBSztnQkFjRixTQUFTO3NCQURaLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb2N1c01vbml0b3IgfSBmcm9tICdAYW5ndWxhci9jZGsvYTExeSc7XG5pbXBvcnQgeyBFTlRFUiwgU1BBQ0UgfSBmcm9tICdAYW5ndWxhci9jZGsva2V5Y29kZXMnO1xuaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuY29uc3QgdmlzaWJpbGl0eUljb25zID0ge1xuICAgIHNob3c6ICdwYXNzd29yZC1zaG93LW8nLFxuICAgIGhpZGU6ICdwYXNzd29yZC1oaWRlLW8nLFxufTtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdueC1wYXNzd29yZC10b2dnbGUnLFxuICAgIHRlbXBsYXRlOiBgPG54LWljb24gYXJpYS1oaWRkZW49XCJ0cnVlXCIgW25hbWVdPVwiX2N1cnJlbnRJY29uXCI+IDwvbngtaWNvbj5gLFxuICAgIHN0eWxlVXJsczogWycuL3Bhc3N3b3JkLXRvZ2dsZS5jb21wb25lbnQuc2NzcyddLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgJ1thdHRyLmFyaWEtbGFiZWxdJzogJ2FyaWFMYWJlbCcsXG4gICAgICAgICdbYXR0ci50YWJpbmRleF0nOiAndGFiaW5kZXgnLFxuICAgICAgICAnW2F0dHIuYXJpYS1wcmVzc2VkXSc6ICdfcHJlc3NlZCcsXG4gICAgICAgIHJvbGU6ICdidXR0b24nLFxuICAgICAgICAnKGNsaWNrKSc6ICd0b2dnbGVJbnB1dFR5cGUoKScsXG4gICAgICAgICcoa2V5ZG93biknOiAnX29uS2V5ZG93bigkZXZlbnQpJyxcbiAgICB9LFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBOeFBhc3N3b3JkVG9nZ2xlQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgICAvKiogSW5wdXQgZWxlbWVudCB1c2luZyB0aGUgdG9nZ2xlIGZ1bmN0aW9uYWxpdHkuICovXG4gICAgQElucHV0KCkgY29udHJvbCE6IEhUTUxJbnB1dEVsZW1lbnQ7XG5cbiAgICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICAgIF9jdXJyZW50SWNvbjogc3RyaW5nID0gdmlzaWJpbGl0eUljb25zWydzaG93J107XG4gICAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgICBfcHJlc3NlZCA9IGZhbHNlO1xuICAgIHByaXZhdGUgX2FyaWFMYWJlbCA9ICdTaG93IHBhc3N3b3JkJztcblxuICAgIC8qKiBTZXRzIHRoZSBhcmlhLWxhYmVsIG5lZWRlZCBmb3IgYWNjZXNzaWJpbGl0eS5cbiAgICAgKiBOb3RpY2UgdGhhdCB0aGlzIGBhcmlhLWxhYmVsYCBzaG91bGQgZGVzY3JpYmUgdGhlIGluaXRpYWwgYWN0aW9uIGFjY29yZGluZyB0byB0aGUgc3RhdHVzIG9mIHRoZSB2aXNpYmlsaXR5LlxuICAgICAqIEUuZyBpZiB5b3UgaGF2ZSBhbiBgaW5wdXRbdHlwZT1wYXNzd29yZF1gIGF0IHRoZSBiZWdpbm5pbmcgdGhlbiB0aGVcbiAgICAgKiBwYXNzd29yZCB3aWxsIGJlIGhpZGRlbiBhbmQgdGhlIGNvcnJlY3QgYXJpYS1sYWJlbCB3b3VsZCBiZSAnU2hvdyBwYXNzd29yZC4nXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBzZXQgYXJpYUxhYmVsKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB0aGlzLl9hcmlhTGFiZWwpIHtcbiAgICAgICAgICAgIHRoaXMuX2FyaWFMYWJlbCA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBhcmlhTGFiZWwoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FyaWFMYWJlbDtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9jZHI6IENoYW5nZURldGVjdG9yUmVmLCBwcml2YXRlIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIF9mb2N1c01vbml0b3I6IEZvY3VzTW9uaXRvcikge1xuICAgICAgICB0aGlzLl9mb2N1c01vbml0b3IubW9uaXRvcih0aGlzLl9lbGVtZW50UmVmKTtcbiAgICB9XG5cbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgICAgIGlmICghdGhpcy5jb250cm9sKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1lvdSBuZWVkIHRvIHBhc3MgYW4gaW5wdXQgYXMgYSBjb250cm9sIHRvIHRoZSBwYXNzd29yZCB0b2dnbGUuJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2hvdyB0aGUgcmlnaHQgaWNvbiBhY2NvcmRpbmcgdG8gdGhlIGluaXRpYWwgdHlwZSBvZiB0aGUgaW5wdXRcbiAgICAgICAgdGhpcy5fY3VycmVudEljb24gPSB0aGlzLmNvbnRyb2wudHlwZSA9PT0gJ3Bhc3N3b3JkJyA/IHZpc2liaWxpdHlJY29uc1snc2hvdyddIDogdmlzaWJpbGl0eUljb25zWydoaWRlJ107XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuX2ZvY3VzTW9uaXRvci5zdG9wTW9uaXRvcmluZyh0aGlzLl9lbGVtZW50UmVmKTtcbiAgICB9XG5cbiAgICAvKiogVG9nZ2xlcyB0aGUgdHlwZSBvZiB0aGUgaW5wdXQuICovXG4gICAgdG9nZ2xlSW5wdXRUeXBlKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5jb250cm9sKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2wudHlwZSA9IHRoaXMuY29udHJvbC50eXBlID09PSAncGFzc3dvcmQnID8gJ3RleHQnIDogJ3Bhc3N3b3JkJztcbiAgICAgICAgICAgIHRoaXMuX3ByZXNzZWQgPSAhdGhpcy5fcHJlc3NlZDtcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlSWNvbigpO1xuICAgICAgICAgICAgdGhpcy5fY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgICB0b2dnbGVJY29uKCk6IHZvaWQge1xuICAgICAgICB0aGlzLl9jdXJyZW50SWNvbiA9IHRoaXMuX2N1cnJlbnRJY29uID09PSB2aXNpYmlsaXR5SWNvbnNbJ3Nob3cnXSA/IHZpc2liaWxpdHlJY29uc1snaGlkZSddIDogdmlzaWJpbGl0eUljb25zWydzaG93J107XG4gICAgfVxuXG4gICAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgICBfb25LZXlkb3duKCRldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICBpZiAoJGV2ZW50ICYmICgkZXZlbnQua2V5Q29kZSA9PT0gRU5URVIgfHwgJGV2ZW50LmtleUNvZGUgPT09IFNQQUNFKSkge1xuICAgICAgICAgICAgdGhpcy50b2dnbGVJbnB1dFR5cGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBAZG9jcy1wcml2YXRlICovXG4gICAgZ2V0IHRhYmluZGV4KCk6IG51bWJlciB8IG51bGwge1xuICAgICAgICBpZiAodGhpcy5jb250cm9sKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb250cm9sLmRpc2FibGVkID8gLTEgOiAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbiJdfQ==