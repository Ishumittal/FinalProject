/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { DOWN_ARROW } from '@angular/cdk/keycodes';
import { Directive, EventEmitter, forwardRef, Inject, Input, Optional, Output } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';
import { NX_INPUT_VALUE_ACCESSOR } from '@aposin/ng-aquila/input';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { NX_DATE_FORMATS } from './adapter/index';
import { NxDateValidators } from './date-validators';
import { createMissingDateImplError } from './datefield.functions';
import * as i0 from "@angular/core";
import * as i1 from "./adapter/index";
import * as i2 from "@aposin/ng-aquila/formfield";
export const NX_DATEFIELD_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NxDatefieldDirective),
    multi: true,
};
export const NX_DATEFIELD_VALIDATORS = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(() => NxDatefieldDirective),
    multi: true,
};
/**
 * An event used for datepicker input and change events. We don't always have access to a native
 * input or change event because the event may have been triggered by the user clicking on the
 * calendar popup. For consistency, we always use NxDatepickerInputEvent instead.
 */
export class NxDatepickerInputEvent {
    constructor(
    /** Reference to the datepicker input component that emitted the event. */
    target, 
    /** Reference to the native input element associated with the datepicker input. */
    targetElement) {
        this.target = target;
        this.targetElement = targetElement;
        this.value = this.target.value;
    }
}
/**
 * Directive used to provide date processing functionality to an input.
 */
export class NxDatefieldDirective {
    constructor(_elementRef, _dateAdapter, _dateFormats, _formField) {
        this._elementRef = _elementRef;
        this._formField = _formField;
        /** @docs-private */
        this.currentFormattedDate = null;
        this._strict = true;
        /** Emits when a `change` event is fired on this `<input>`. */
        this.dateChange = new EventEmitter();
        /** Emits when an `input` event is fired on this `<input>`. */
        this.dateInput = new EventEmitter();
        /** Emits when the value changes (either due to user input or programmatic change). */
        this._valueChange = new EventEmitter();
        /** Emits when the disabled state has changed. */
        this._disabledChange = new EventEmitter();
        /** Emits when the readonly state has changed. */
        this._readonlyChange = new EventEmitter();
        this._destroyed = new Subject();
        this._onTouched = () => { };
        this._cvaOnChange = () => { };
        this._validatorOnChange = () => { };
        if (!_dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
        this._dateAdapter = _dateAdapter;
        if (!_dateFormats) {
            throw createMissingDateImplError('NX_DATE_FORMATS');
        }
        this._dateFormats = _dateFormats;
        // Update the displayed date when the locale changes.
        _dateAdapter.localeChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {
            const value = this.value;
            this.value = value; // invoke setter
        });
    }
    /** The datepicker that this input is associated with. */
    set datepicker(value) {
        this.registerDatepicker(value);
    }
    /** Function that can be used to filter out dates within the datepicker and invalidate values in the datefield. */
    set datefieldFilter(value) {
        this._dateFilter = value;
        this._validatorOnChange();
    }
    /** Provide or read the current date. It's type <D> depends on the chosen date implementation */
    get value() {
        return this._value;
    }
    set value(value) {
        value = this._dateAdapter.deserialize(value);
        value = this._getValidDateOrNull(value);
        const oldDate = this.value;
        this._value = value;
        this._formatValue(this.value);
        if (!this._dateAdapter.sameDate(oldDate, value)) {
            this._valueChange.emit(value);
        }
    }
    /** Sets the minimum valid date. */
    get min() {
        return this._min;
    }
    set min(value) {
        this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
        this._validatorOnChange();
    }
    /** Sets the maximum valid date. */
    get max() {
        return this._max;
    }
    set max(value) {
        this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
        this._validatorOnChange();
    }
    /**
     * If supported by the date implementation enable strict parsing (applies to Moment's parse function here).
     *
     * The date value is not updated on a `strict` change.
     */
    get strict() {
        return this._strict;
    }
    set strict(value) {
        this._strict = coerceBooleanProperty(value);
    }
    /**
     * Override the parse format given with parse.dateInput with the token NX_DATE_FORMATS.
     *
     * The date value is not updated on a `parseFormat` change.
     */
    get parseFormat() {
        return this._parseFormat;
    }
    set parseFormat(value) {
        this._parseFormat = value;
    }
    /** Override the display format given with display.dateInput with the token NX_DATE_FORMATS  */
    get displayFormat() {
        return this._displayFormat;
    }
    set displayFormat(value) {
        this._displayFormat = value;
        this._formatValue(this.value);
    }
    /** Whether the datepicker-input is disabled. */
    get disabled() {
        return !!this._disabled;
    }
    set disabled(value) {
        const newValue = coerceBooleanProperty(value);
        if (this._disabled !== newValue) {
            this._disabled = newValue;
            this._disabledChange.emit(newValue);
        }
        // In Ivy static bindings are invoked earlier, before the element is attached to the DOM.
        // This can cause an error to be thrown in some browsers (IE/Edge) which assert that the
        // element has been inserted.
        if (newValue && this._isInitialized) {
            // Normally, native input elements automatically blur if they turn disabled. This behavior
            // is problematic, because it would mean that it triggers another change detection cycle,
            // which then causes a changed after checked error if the input element was focused before.
            this._elementRef.nativeElement.blur();
        }
    }
    /** Whether the datefield is readonly. */
    get readonly() {
        return !!this._readonly;
    }
    set readonly(value) {
        const newValue = coerceBooleanProperty(value);
        if (this._readonly !== newValue) {
            this._readonly = newValue;
            this._readonlyChange.emit(newValue);
        }
    }
    ngAfterContentInit() {
        this._datepicker?.selectedChanged.pipe(takeUntil(this._destroyed)).subscribe((selected) => {
            this.value = selected;
            this._cvaOnChange(selected);
            this._onTouched();
            this.dateInput.emit(new NxDatepickerInputEvent(this, this._elementRef.nativeElement));
            this.dateChange.emit(new NxDatepickerInputEvent(this, this._elementRef.nativeElement));
        });
        this._isInitialized = true;
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this._valueChange.complete();
        this._disabledChange.complete();
        this._readonlyChange.complete();
    }
    /** @docs-private */
    registerOnValidatorChange(fn) {
        this._validatorOnChange = fn;
    }
    /** @docs-private */
    validate(c) {
        const validator = Validators.compose(this.getValidators());
        return validator ? validator(c) : null;
    }
    /**
     * @docs-private
     *
     * Gets the element that the datepicker popup should be connected to.
     * @return The element to connect the popup to.
     */
    getConnectedOverlayOrigin() {
        // formfield not yet accessible as we don't have them in a secondary entry point to import yet.
        // return this._elementRef;
        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;
    }
    // Implemented as part of ControlValueAccessor.
    writeValue(value) {
        this.value = value;
    }
    // Implemented as part of ControlValueAccessor.
    registerOnChange(fn) {
        this._cvaOnChange = fn;
    }
    // Implemented as part of ControlValueAccessor.
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    // Implemented as part of ControlValueAccessor.
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    _onKeydown(event) {
        if (event.altKey && event.keyCode === DOWN_ARROW) {
            this._datepicker.open();
            event.preventDefault();
        }
    }
    _onInput(value) {
        let date = this._dateAdapter.parse(value, this._parseFormat || this._dateFormats.parse.dateInput, this.strict);
        date = this._getValidDateOrNull(date);
        this._value = date;
        if (date) {
            this.currentFormattedDate = this._dateAdapter.format(date, this._displayFormat || this._dateFormats.display.dateInput);
        }
        else {
            this.currentFormattedDate = null;
        }
        this._cvaOnChange(date);
        this._valueChange.emit(date);
        this.dateInput.emit(new NxDatepickerInputEvent(this, this._elementRef.nativeElement));
    }
    _onChange() {
        this.dateChange.emit(new NxDatepickerInputEvent(this, this._elementRef.nativeElement));
    }
    _focus() {
        this._elementRef.nativeElement.focus();
    }
    _onBlur() {
        // Reformat the input only if we have a valid value.
        if (this.value) {
            this._formatValue(this.value);
        }
        this._onTouched();
    }
    /** Returns the validators of the datefield. */
    getValidators() {
        return [
            NxDateValidators.parse(this._dateAdapter, this._dateFormats, this._elementRef.nativeElement, this._strict, this._parseFormat),
            NxDateValidators.min(this._dateAdapter, this.min),
            NxDateValidators.max(this._dateAdapter, this.max),
            NxDateValidators.filter(this._dateAdapter, this._dateFilter),
        ];
    }
    /** Formats a value and sets it on the input native element. */
    _formatValue(value) {
        this._elementRef.nativeElement.value = value ? this._dateAdapter.format(value, this._displayFormat || this._dateFormats.display.dateInput) : '';
    }
    /**
     * @param obj The object to check.
     * @returns The given object if it is both a date instance and valid, otherwise null.
     */
    _getValidDateOrNull(obj) {
        return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;
    }
    registerDatepicker(value) {
        if (value) {
            this._datepicker = value;
            this._datepicker.registerInput(this);
        }
    }
}
NxDatefieldDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDatefieldDirective, deps: [{ token: i0.ElementRef }, { token: i1.NxDateAdapter, optional: true }, { token: NX_DATE_FORMATS, optional: true }, { token: i2.NxFormfieldComponent, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
NxDatefieldDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxDatefieldDirective, selector: "input[nxDatefield]", inputs: { datepicker: ["nxDatepicker", "datepicker"], datefieldFilter: ["nxDatefieldFilter", "datefieldFilter"], value: "value", min: ["nxMin", "min"], max: ["nxMax", "max"], strict: ["nxStrict", "strict"], parseFormat: ["nxParseFormat", "parseFormat"], displayFormat: ["nxDisplayFormat", "displayFormat"], disabled: "disabled", readonly: "readonly" }, outputs: { dateChange: "dateChange", dateInput: "dateInput" }, host: { listeners: { "input": "_onInput($event.target.value)", "change": "_onChange()", "blur": "_onBlur()", "keydown": "_onKeydown($event)" }, properties: { "attr.aria-haspopup": "true", "attr.aria-owns": "(_datepicker?.opened && _datepicker.id) || null", "attr.min": "min ? _dateAdapter.toIso8601(min) : null", "attr.max": "max ? _dateAdapter.toIso8601(max) : null", "disabled": "disabled", "readonly": "readonly" } }, providers: [
        NX_DATEFIELD_VALUE_ACCESSOR,
        NX_DATEFIELD_VALIDATORS,
        // {provide: NX_INPUT_VALUE_ACCESSOR, useExisting: NxDatefieldDirective},
        { provide: NX_INPUT_VALUE_ACCESSOR, useExisting: NxDatefieldDirective },
    ], exportAs: ["nxDatefield"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDatefieldDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[nxDatefield]',
                    providers: [
                        NX_DATEFIELD_VALUE_ACCESSOR,
                        NX_DATEFIELD_VALIDATORS,
                        // {provide: NX_INPUT_VALUE_ACCESSOR, useExisting: NxDatefieldDirective},
                        { provide: NX_INPUT_VALUE_ACCESSOR, useExisting: NxDatefieldDirective },
                    ],
                    host: {
                        '[attr.aria-haspopup]': 'true',
                        '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',
                        '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',
                        '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',
                        '[disabled]': 'disabled',
                        '[readonly]': 'readonly',
                        '(input)': '_onInput($event.target.value)',
                        '(change)': '_onChange()',
                        '(blur)': '_onBlur()',
                        '(keydown)': '_onKeydown($event)',
                    },
                    exportAs: 'nxDatefield',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.NxDateAdapter, decorators: [{
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [NX_DATE_FORMATS]
                }] }, { type: i2.NxFormfieldComponent, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { datepicker: [{
                type: Input,
                args: ['nxDatepicker']
            }], datefieldFilter: [{
                type: Input,
                args: ['nxDatefieldFilter']
            }], value: [{
                type: Input
            }], min: [{
                type: Input,
                args: ['nxMin']
            }], max: [{
                type: Input,
                args: ['nxMax']
            }], strict: [{
                type: Input,
                args: ['nxStrict']
            }], parseFormat: [{
                type: Input,
                args: ['nxParseFormat']
            }], displayFormat: [{
                type: Input,
                args: ['nxDisplayFormat']
            }], disabled: [{
                type: Input
            }], readonly: [{
                type: Input
            }], dateChange: [{
                type: Output
            }], dateInput: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,