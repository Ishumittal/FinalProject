import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ESCAPE } from '@angular/cdk/keycodes';
import { Overlay, OverlayConfig } from '@angular/cdk/overlay';
import { ComponentPortal } from '@angular/cdk/portal';
import { DOCUMENT } from '@angular/common';
import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Injectable, InjectionToken, Input, Optional, Output, ViewChild, } from '@angular/core';
import { merge, Subject } from 'rxjs';
import { filter, take, takeUntil } from 'rxjs/operators';
import { createMissingDateImplError } from '../datefield.functions';
import { NxCalendarComponent } from './calendar';
import * as i0 from "@angular/core";
import * as i1 from "./datepicker-intl";
import * as i2 from "@aposin/ng-aquila/icon";
import * as i3 from "./calendar";
import * as i4 from "@angular/cdk/a11y";
import * as i5 from "@angular/common";
import * as i6 from "@angular/cdk/overlay";
import * as i7 from "../adapter/date-adapter";
import * as i8 from "@angular/cdk/bidi";
/** Used to generate a unique ID for each datepicker instance. */
let datepickerUid = 0;
/** Injection token that determines the scroll handling while the calendar is open. */
export const NX_DATEPICKER_SCROLL_STRATEGY = new InjectionToken('nx-datepicker-scroll-strategy');
/** @docs-private */
export function NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {
    return () => overlay.scrollStrategies.reposition();
}
/** @docs-private */
export const NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {
    provide: NX_DATEPICKER_SCROLL_STRATEGY,
    deps: [Overlay],
    useFactory: NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,
};
export class DatepickerDefaultOptions {
}
DatepickerDefaultOptions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: DatepickerDefaultOptions, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
DatepickerDefaultOptions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: DatepickerDefaultOptions });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: DatepickerDefaultOptions, decorators: [{
            type: Injectable
        }] });
export const DATEPICKER_DEFAULT_OPTIONS = new InjectionToken('DATEPICKER_DEFAULT_OPTIONS');
/**
 * @docs-private
 * Component used as the content for the datepicker dialog and popup. We use this instead of using
 * NxCalendarComponent directly as the content so we can control the initial focus. This also gives us a
 * place to put additional features of the popup that are not part of the calendar itself in the
 * future. (e.g. confirmation buttons).
 */
export class NxDatepickerContentComponent {
    constructor(_intl, elementRef, _ngZone) {
        this._intl = _intl;
        this.elementRef = elementRef;
        this._ngZone = _ngZone;
    }
    ngAfterContentInit() {
        this._focusActiveCell();
    }
    /** Focuses the active cell after the microtask queue is empty. */
    _focusActiveCell() {
        this._ngZone.runOutsideAngular(() => {
            this._ngZone.onStable
                .asObservable()
                .pipe(take(1))
                .subscribe(() => {
                this.elementRef.nativeElement.querySelector('.nx-calendar-body-active').focus();
            });
        });
    }
}
NxDatepickerContentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDatepickerContentComponent, deps: [{ token: i1.NxDatepickerIntl }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
NxDatepickerContentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxDatepickerContentComponent, selector: "nx-datepicker-content", host: { classAttribute: "nx-datepicker-content" }, viewQueries: [{ propertyName: "_calendar", first: true, predicate: NxCalendarComponent, descendants: true, static: true }], exportAs: ["nxDatepickerContent"], ngImport: i0, template: "<div class=\"nx-datepicker-header\">\n    <button (click)=\"datepicker.close()\" class=\"nx-datepicker-close\" type=\"button\">\n        <nx-icon name=\"close\"></nx-icon>\n    </button>\n</div>\n\n<nx-calendar\n    cdkTrapFocus\n    [id]=\"datepicker.id\"\n    [ngClass]=\"datepicker.panelClass\"\n    [startAt]=\"datepicker.startAt\"\n    [startView]=\"datepicker.startView\"\n    [minDate]=\"datepicker.minDate\"\n    [maxDate]=\"datepicker.maxDate\"\n    [dateFilter]=\"datepicker.dateFilter\"\n    [selected]=\"datepicker.selected\"\n    (selectedChange)=\"datepicker.select($event)\"\n    (yearSelected)=\"datepicker.selectYear($event)\"\n    (monthSelected)=\"datepicker.selectMonth($event)\"\n    (_userSelection)=\"datepicker.close()\"\n>\n</nx-calendar>\n", styles: [":host{background:var(--datefield-panel-background-color);display:flex;flex-flow:column nowrap;box-shadow:var(--shadow-large);border:1px solid var(--datefield-panel-border-color);border-radius:4px}.nx-datepicker-header{background:var(--datefield-panel-header-background-color);padding:15px 16px 16px;display:flex;height:55px}@media (max-width: 703px){.nx-datepicker-header{padding-left:19px;padding-right:19px}}.nx-datepicker-close{background-color:transparent;border:none;margin-left:auto;cursor:pointer;padding:0;font-size:var(--datefield-controls-icon-size);color:var(--datefield-controls-color);outline:none}:host-context([dir=rtl]) .nx-datepicker-close{margin-right:auto;margin-left:0;margin-left:initial}nx-calendar{width:342px;height:375px}@media (max-width: 703px){nx-calendar{width:302px;height:359px}}\n"], components: [{ type: i2.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }, { type: i3.NxCalendarComponent, selector: "nx-calendar", inputs: ["startAt", "startView", "selected", "minDate", "maxDate", "dateFilter"], outputs: ["selectedChange", "yearSelected", "monthSelected", "_userSelection"], exportAs: ["nxCalendar"] }], directives: [{ type: i4.CdkTrapFocus, selector: "[cdkTrapFocus]", inputs: ["cdkTrapFocus", "cdkTrapFocusAutoCapture"], exportAs: ["cdkTrapFocus"] }, { type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDatepickerContentComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-datepicker-content', host: {
                        class: 'nx-datepicker-content',
                    }, exportAs: 'nxDatepickerContent', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"nx-datepicker-header\">\n    <button (click)=\"datepicker.close()\" class=\"nx-datepicker-close\" type=\"button\">\n        <nx-icon name=\"close\"></nx-icon>\n    </button>\n</div>\n\n<nx-calendar\n    cdkTrapFocus\n    [id]=\"datepicker.id\"\n    [ngClass]=\"datepicker.panelClass\"\n    [startAt]=\"datepicker.startAt\"\n    [startView]=\"datepicker.startView\"\n    [minDate]=\"datepicker.minDate\"\n    [maxDate]=\"datepicker.maxDate\"\n    [dateFilter]=\"datepicker.dateFilter\"\n    [selected]=\"datepicker.selected\"\n    (selectedChange)=\"datepicker.select($event)\"\n    (yearSelected)=\"datepicker.selectYear($event)\"\n    (monthSelected)=\"datepicker.selectMonth($event)\"\n    (_userSelection)=\"datepicker.close()\"\n>\n</nx-calendar>\n", styles: [":host{background:var(--datefield-panel-background-color);display:flex;flex-flow:column nowrap;box-shadow:var(--shadow-large);border:1px solid var(--datefield-panel-border-color);border-radius:4px}.nx-datepicker-header{background:var(--datefield-panel-header-background-color);padding:15px 16px 16px;display:flex;height:55px}@media (max-width: 703px){.nx-datepicker-header{padding-left:19px;padding-right:19px}}.nx-datepicker-close{background-color:transparent;border:none;margin-left:auto;cursor:pointer;padding:0;font-size:var(--datefield-controls-icon-size);color:var(--datefield-controls-color);outline:none}:host-context([dir=rtl]) .nx-datepicker-close{margin-right:auto;margin-left:0;margin-left:initial}nx-calendar{width:342px;height:375px}@media (max-width: 703px){nx-calendar{width:302px;height:359px}}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.NxDatepickerIntl }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { _calendar: [{
                type: ViewChild,
                args: [NxCalendarComponent, { static: true }]
            }] } });
/** Component responsible for managing the datepicker popup/dialog. */
export class NxDatepickerComponent {
    constructor(_overlay, _ngZone, _viewContainerRef, _defaultScrollStrategyFactory, _dateAdapter, _dir, _document) {
        this._overlay = _overlay;
        this._ngZone = _ngZone;
        this._viewContainerRef = _viewContainerRef;
        this._defaultScrollStrategyFactory = _defaultScrollStrategyFactory;
        this._dir = _dir;
        this._document = _document;
        /** The view that the calendar should start in. */
        this.startView = 'month';
        /** @docs-private */
        this.selectedChanged = new EventEmitter();
        /**
         * Emits selected year in multiyear view.
         * This doesn't imply a change on the selected date.
         */
        this.yearSelected = new EventEmitter();
        /**
         * Emits selected month in year view.
         * This doesn't imply a change on the selected date.
         */
        this.monthSelected = new EventEmitter();
        /** Emits when the datepicker has been opened. */
        this.openedStream = new EventEmitter();
        /** Emits when the datepicker has been closed. */
        this.closedStream = new EventEmitter();
        this._opened = false;
        /**
         * @docs-private
         * The id for the datepicker calendar.
         */
        this.id = `nx-datepicker-${datepickerUid++}`;
        this._validSelected = null;
        /** The element that was focused before the datepicker was opened. */
        this._focusedElementBeforeOpen = null;
        /** Strategy factory that will be used to handle scrolling while the datepicker panel is open. */
        this._scrollStrategyFactory = this._defaultScrollStrategyFactory;
        /** Emits when the datepicker is disabled. */
        this._disabledChange = new Subject();
        this._destroyed = new Subject();
        if (!_dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
        this._dateAdapter = _dateAdapter;
        this._dir?.change.pipe(takeUntil(this._destroyed)).subscribe(() => {
            this.close();
            this._destroyPopup();
        });
    }
    /** The date to open the calendar initially. */
    get startAt() {
        // If an explicit startAt is set we start there, otherwise we start at whatever the currently
        // selected value is.
        return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);
    }
    set startAt(value) {
        this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
    }
    /**
     * Whether the datepicker pop-up should be disabled.
     * The datepicker is also disabled if the belonging input is readonly.
     */
    get disabled() {
        return this._disabled === undefined && this._datepickerInput ? this._datepickerInput.disabled || this._datepickerInput.readonly : !!this._disabled;
    }
    set disabled(value) {
        const newValue = coerceBooleanProperty(value);
        if (newValue !== this._disabled) {
            this._disabled = newValue;
            this._disabledChange.next(newValue);
        }
    }
    /** Whether the calendar is open. */
    get opened() {
        return this._opened;
    }
    set opened(value) {
        value ? this.open() : this.close();
    }
    /**
     * @docs-private
     * The currently selected date.
     */
    get selected() {
        return this._validSelected;
    }
    set selected(value) {
        this._validSelected = value;
    }
    /**
     * @docs-private
     * The minimum selectable date.
     */
    get minDate() {
        return this._datepickerInput?.min;
    }
    /**
     * @docs-private
     * The maximum selectable date.
     */
    get maxDate() {
        return this._datepickerInput?.max;
    }
    /** @docs-private */
    get dateFilter() {
        return this._datepickerInput?._dateFilter;
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this.close();
        this._disabledChange.complete();
        if (this._popupRef) {
            this._popupRef.dispose();
            this._popupComponentRef = null;
        }
    }
    /**
     * @docs-private
     * Selects the given date
     */
    select(date) {
        const oldValue = this.selected;
        this.selected = date;
        if (!this._dateAdapter.sameDate(oldValue, this.selected)) {
            this.selectedChanged.emit(date);
        }
    }
    /**
     * @docs-private
     * Emits the selected year in multiyear view
     */
    selectYear(normalizedYear) {
        this.yearSelected.emit(normalizedYear);
    }
    /**
     * @docs-private
     * Emits selected month in year view
     */
    selectMonth(normalizedMonth) {
        this.monthSelected.emit(normalizedMonth);
    }
    /**
     * @docs-private
     * Register an input with this datepicker.
     * @param input The datepicker input to register with this datepicker.
     */
    registerInput(input) {
        if (this._datepickerInput) {
            throw Error('A NxDatepicker can only be associated with a single input.');
        }
        this._datepickerInput = input;
        this._datepickerInput._valueChange.pipe(takeUntil(this._destroyed)).subscribe((value) => (this.selected = value));
    }
    /**
     * @docs-private
     * Register an input toggle with this datepicker.
     */
    registerToggle(toggle) {
        if (this._toggleButton) {
            throw Error('A NxDatepicker can only be associated with a single toggle button.');
        }
        this._toggleButton = toggle;
    }
    /**
     * @docs-private
     * Open the calendar.
     */
    open() {
        if (this._opened || this.disabled) {
            return;
        }
        if (!this._datepickerInput) {
            throw Error('Attempted to open an NxDatepicker with no associated input.');
        }
        if (this._document) {
            this._focusedElementBeforeOpen = this._document.activeElement;
        }
        this._openAsPopup();
        this._opened = true;
        this.openedStream.emit();
    }
    /**
     * @docs-private
     * Close the calendar.
     */
    close() {
        if (!this._opened) {
            return;
        }
        if (this._popupRef?.hasAttached()) {
            this._popupRef.detach();
        }
        if (this._calendarPortal?.isAttached) {
            this._calendarPortal.detach();
        }
        const completeClose = () => {
            // The `_opened` could've been reset already if
            // we got two events in quick succession.
            if (this._opened) {
                this._opened = false;
                this.closedStream.emit();
                this._focusedElementBeforeOpen = null;
            }
        };
        if (this._focusedElementBeforeOpen && typeof this._focusedElementBeforeOpen.focus === 'function') {
            // Because IE moves focus asynchronously, we can't count on it being restored before we've
            // marked the datepicker as closed. If the event fires out of sequence and the element that
            // we're refocusing opens the datepicker on focus, the user could be stuck with not being
            // able to close the calendar at all. We work around it by making the logic, that marks
            // the datepicker as closed, async as well.
            this._focusedElementBeforeOpen.focus();
            setTimeout(completeClose);
        }
        else {
            completeClose();
        }
        // if the datepicker toggle button is not focusable, focus the associated input.
        if (this._toggleButton && this._toggleButton.tabindex < 0) {
            this._datepickerInput._focus();
        }
    }
    /** Open the calendar as a popup. */
    _openAsPopup() {
        if (!this._calendarPortal) {
            this._calendarPortal = new ComponentPortal(NxDatepickerContentComponent, this._viewContainerRef);
        }
        if (!this._popupRef) {
            this._createPopup();
        }
        if (!this._popupRef.hasAttached()) {
            this._popupComponentRef = this._popupRef.attach(this._calendarPortal);
            this._popupComponentRef.instance.datepicker = this;
            // Update the position once the calendar has rendered.
            this._ngZone.onStable
                .asObservable()
                .pipe(take(1))
                .subscribe(() => {
                this._popupRef.updatePosition();
            });
        }
    }
    /** Create the popup. */
    _createPopup() {
        const overlayConfig = new OverlayConfig({
            positionStrategy: this._createPopupPositionStrategy(),
            hasBackdrop: true,
            backdropClass: 'nx-overlay-transparent-backdrop',
            direction: this._dir?.value || 'ltr',
            scrollStrategy: this._scrollStrategyFactory(),
            panelClass: 'nx-datepicker-popup',
        });
        this._popupRef = this._overlay.create(overlayConfig);
        merge(this._popupRef.backdropClick(), this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE)))
            .pipe(takeUntil(this._destroyed))
            .subscribe(() => this.close());
    }
    /** Destroy popup */
    _destroyPopup() {
        if (this._popupRef) {
            this._popupRef = null;
            this._popupComponentRef = null;
            this._calendarPortal = null;
        }
    }
    /** Create the popup PositionStrategy. */
    _createPopupPositionStrategy() {
        return this._overlay
            .position()
            .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())
            .withTransformOriginOn('.nx-datepicker-content')
            .withFlexibleDimensions(false)
            .withViewportMargin(8)
            .withLockedPosition()
            .withPositions([
            {
                originX: 'start',
                originY: 'bottom',
                overlayX: 'start',
                overlayY: 'top',
            },
            {
                originX: 'start',
                originY: 'top',
                overlayX: 'start',
                overlayY: 'bottom',
            },
            {
                originX: 'end',
                originY: 'bottom',
                overlayX: 'end',
                overlayY: 'top',
            },
            {
                originX: 'end',
                originY: 'top',
                overlayX: 'end',
                overlayY: 'bottom',
            },
        ]);
    }
    /**
     * @param obj The object to check.
     * @returns The given object if it is both a date instance and valid, otherwise null.
     */
    _getValidDateOrNull(obj) {
        return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;
    }
}
NxDatepickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDatepickerComponent, deps: [{ token: i6.Overlay }, { token: i0.NgZone }, { token: i0.ViewContainerRef }, { token: NX_DATEPICKER_SCROLL_STRATEGY }, { token: i7.NxDateAdapter, optional: true }, { token: i8.Directionality, optional: true }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NxDatepickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxDatepickerComponent, selector: "nx-datepicker", inputs: { startAt: "startAt", startView: "startView", disabled: "disabled", panelClass: "panelClass", opened: "opened" }, outputs: { yearSelected: "yearSelected", monthSelected: "monthSelected", openedStream: "opened", closedStream: "closed" }, exportAs: ["nxDatepicker"], ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDatepickerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'nx-datepicker',
                    template: '',
                    exportAs: 'nxDatepicker',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i6.Overlay }, { type: i0.NgZone }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NX_DATEPICKER_SCROLL_STRATEGY]
                }] }, { type: i7.NxDateAdapter, decorators: [{
                    type: Optional
                }] }, { type: i8.Directionality, decorators: [{
                    type: Optional
                }] }, { type: Document, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { startAt: [{
                type: Input
            }], startView: [{
                type: Input
            }], disabled: [{
                type: Input
            }], yearSelected: [{
                type: Output
            }], monthSelected: [{
                type: Output
            }], panelClass: [{
                type: Input
            }], openedStream: [{
                type: Output,
                args: ['opened']
            }], closedStream: [{
                type: Output,
                args: ['closed']
            }], opened: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,