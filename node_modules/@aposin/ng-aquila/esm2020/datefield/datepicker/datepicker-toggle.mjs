import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { ChangeDetectionStrategy, Component, ContentChild, Directive, Inject, Input, Optional, ViewChild, } from '@angular/core';
import { merge, of as observableOf, Subject, Subscription } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { DATEPICKER_DEFAULT_OPTIONS } from './datepicker.component';
import * as i0 from "@angular/core";
import * as i1 from "./datepicker-intl";
import * as i2 from "@angular/cdk/a11y";
import * as i3 from "@aposin/ng-aquila/icon";
import * as i4 from "@angular/common";
import * as i5 from "./datepicker.component";
/** Can be used to override the icon of a `nxDatepickerToggle`. */
export class NxDatepickerToggleIconComponent {
}
NxDatepickerToggleIconComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDatepickerToggleIconComponent, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NxDatepickerToggleIconComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxDatepickerToggleIconComponent, selector: "[nxDatepickerToggleIcon]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDatepickerToggleIconComponent, decorators: [{
            type: Directive,
            args: [{
                    selector: '[nxDatepickerToggleIcon]',
                }]
        }] });
export class NxDatepickerToggleComponent {
    constructor(_intl, _cdr, _defaultOptions, _focusMonitor) {
        this._intl = _intl;
        this._cdr = _cdr;
        this._defaultOptions = _defaultOptions;
        this._focusMonitor = _focusMonitor;
        this._stateChanges = Subscription.EMPTY;
        this._destroyed = new Subject();
        if (this._defaultOptions?.changes) {
            this._defaultOptions.changes.pipe(takeUntil(this._destroyed)).subscribe(() => {
                this._cdr.markForCheck();
            });
        }
    }
    /** Datepicker instance that the button will toggle. */
    set datepicker(value) {
        this.registerDatepicker(value);
    }
    get datepicker() {
        return this._datepicker;
    }
    /** Whether the toggle button is disabled. */
    get disabled() {
        return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
    }
    /** Sets the tabindex for the toggle button. Default: 0. */
    set tabindex(value) {
        const newValue = coerceNumberProperty(value);
        if (this._tabindex !== newValue) {
            this._tabindex = newValue;
        }
    }
    get tabindex() {
        if (this._tabindex !== undefined) {
            return this._tabindex;
        }
        if (this._defaultOptions?.toggleIconTabindex !== undefined) {
            return this._defaultOptions.toggleIconTabindex;
        }
        return 0;
    }
    ngAfterViewInit() {
        this._focusMonitor.monitor(this._toggleButton);
    }
    ngOnChanges(changes) {
        if (changes.datepicker) {
            this._watchStateChanges();
        }
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this._stateChanges.unsubscribe();
        this._focusMonitor.stopMonitoring(this._toggleButton);
    }
    ngAfterContentInit() {
        this._watchStateChanges();
    }
    _open(event) {
        if (this.datepicker && !this.disabled) {
            this.datepicker.open();
            event.stopPropagation();
        }
    }
    registerDatepicker(value) {
        if (value) {
            this._datepicker = value;
            this._datepicker.registerToggle(this);
        }
    }
    _watchStateChanges() {
        const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();
        const inputDisabled = this.datepicker?._datepickerInput ? this.datepicker._datepickerInput._disabledChange : observableOf();
        const inputReadonly = this.datepicker?._datepickerInput ? this.datepicker._datepickerInput._readonlyChange : observableOf();
        const datepickerToggled = this.datepicker ? merge(this.datepicker.openedStream, this.datepicker.closedStream) : observableOf();
        this._stateChanges.unsubscribe();
        this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled, inputReadonly, datepickerToggled)
            .pipe(takeUntil(this._destroyed))
            .subscribe(() => this._cdr.markForCheck());
    }
}
NxDatepickerToggleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDatepickerToggleComponent, deps: [{ token: i1.NxDatepickerIntl }, { token: i0.ChangeDetectorRef }, { token: DATEPICKER_DEFAULT_OPTIONS, optional: true }, { token: i2.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });
NxDatepickerToggleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxDatepickerToggleComponent, selector: "nx-datepicker-toggle", inputs: { datepicker: ["for", "datepicker"], disabled: "disabled", tabindex: "tabindex" }, host: { properties: { "class.nx-datepicker-toggle-active": "datepicker && datepicker.opened", "class.nx-datepicker-toggle--disabled": "disabled" }, classAttribute: "nx-datepicker-toggle" }, queries: [{ propertyName: "_customIcon", first: true, predicate: NxDatepickerToggleIconComponent, descendants: true }], viewQueries: [{ propertyName: "_toggleButton", first: true, predicate: ["toggleButton"], descendants: true }], exportAs: ["nxDatepickerToggle"], usesOnChanges: true, ngImport: i0, template: "<button\n    #toggleButton\n    class=\"nx-datepicker-toggle-button\"\n    [tabindex]=\"tabindex\"\n    type=\"button\"\n    [attr.aria-label]=\"_intl.openCalendarLabel\"\n    [disabled]=\"disabled\"\n    (click)=\"_open($event)\"\n>\n    <nx-icon name=\"calendar\" *ngIf=\"!_customIcon\"></nx-icon>\n\n    <ng-content select=\"[nxDatepickerToggleIcon]\"></ng-content>\n</button>\n", styles: [":host{position:relative;display:flex}:host:active{outline:none}:host:hover{color:var(--hover-primary)}.nx-datepicker-toggle-button{border:none;background-color:transparent;color:inherit;outline:none;cursor:pointer;padding:0;margin:0}.nx-datepicker-toggle-button::-moz-focus-inner{border:0}@media screen and (-ms-high-contrast: active){.nx-datepicker-toggle-button{color:ButtonText}}.default-icon{display:block;height:var(--datefield-toggle-icon-size);width:var(--datefield-toggle-icon-size)}:host(.nx-datepicker-toggle--disabled) .nx-datepicker-toggle-button{cursor:not-allowed}@media screen and (-ms-high-contrast: active){:host(.nx-datepicker-toggle--disabled) .nx-datepicker-toggle-button{color:GrayText}}.nx-datepicker-toggle-button.cdk-keyboard-focused{border-radius:4px;box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-datepicker-toggle-button.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}\n"], components: [{ type: i3.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDatepickerToggleComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-datepicker-toggle', host: {
                        class: 'nx-datepicker-toggle',
                        '[class.nx-datepicker-toggle-active]': 'datepicker && datepicker.opened',
                        '[class.nx-datepicker-toggle--disabled]': 'disabled',
                    }, exportAs: 'nxDatepickerToggle', changeDetection: ChangeDetectionStrategy.OnPush, template: "<button\n    #toggleButton\n    class=\"nx-datepicker-toggle-button\"\n    [tabindex]=\"tabindex\"\n    type=\"button\"\n    [attr.aria-label]=\"_intl.openCalendarLabel\"\n    [disabled]=\"disabled\"\n    (click)=\"_open($event)\"\n>\n    <nx-icon name=\"calendar\" *ngIf=\"!_customIcon\"></nx-icon>\n\n    <ng-content select=\"[nxDatepickerToggleIcon]\"></ng-content>\n</button>\n", styles: [":host{position:relative;display:flex}:host:active{outline:none}:host:hover{color:var(--hover-primary)}.nx-datepicker-toggle-button{border:none;background-color:transparent;color:inherit;outline:none;cursor:pointer;padding:0;margin:0}.nx-datepicker-toggle-button::-moz-focus-inner{border:0}@media screen and (-ms-high-contrast: active){.nx-datepicker-toggle-button{color:ButtonText}}.default-icon{display:block;height:var(--datefield-toggle-icon-size);width:var(--datefield-toggle-icon-size)}:host(.nx-datepicker-toggle--disabled) .nx-datepicker-toggle-button{cursor:not-allowed}@media screen and (-ms-high-contrast: active){:host(.nx-datepicker-toggle--disabled) .nx-datepicker-toggle-button{color:GrayText}}.nx-datepicker-toggle-button.cdk-keyboard-focused{border-radius:4px;box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-datepicker-toggle-button.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.NxDatepickerIntl }, { type: i0.ChangeDetectorRef }, { type: i5.DatepickerDefaultOptions, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DATEPICKER_DEFAULT_OPTIONS]
                }] }, { type: i2.FocusMonitor }]; }, propDecorators: { _customIcon: [{
                type: ContentChild,
                args: [NxDatepickerToggleIconComponent]
            }], _toggleButton: [{
                type: ViewChild,
                args: ['toggleButton']
            }], datepicker: [{
                type: Input,
                args: ['for']
            }], disabled: [{
                type: Input
            }], tabindex: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,