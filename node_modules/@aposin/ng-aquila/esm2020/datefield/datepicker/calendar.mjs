import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Optional, Output, ViewChild, } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { NX_DATE_FORMATS } from '../adapter/index';
import { createMissingDateImplError } from '../datefield.functions';
import { NxMonthViewComponent } from './month-view';
import { NxMultiYearViewComponent } from './multi-year-view';
import { NxYearViewComponent } from './year-view';
import * as i0 from "@angular/core";
import * as i1 from "./datepicker-intl";
import * as i2 from "../adapter/index";
import * as i3 from "@angular/cdk/bidi";
import * as i4 from "@angular/cdk/a11y";
import * as i5 from "@aposin/ng-aquila/icon";
import * as i6 from "./month-view";
import * as i7 from "./year-view";
import * as i8 from "./multi-year-view";
import * as i9 from "@angular/common";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const yearsPerPage = 20;
/**
 * A calendar that is used as part of the datepicker.
 * @docs-private
 */
export class NxCalendarComponent {
    constructor(_intl, _dateAdapter, _dir, _dateFormats, _cdr, _focusMonitor) {
        this._intl = _intl;
        this._dir = _dir;
        this._focusMonitor = _focusMonitor;
        /** Whether the calendar should be started in month or year view. */
        this.startView = 'month';
        /** Emits when the currently selected date changes. */
        this.selectedChange = new EventEmitter();
        /**
         * Emits the year chosen in multiyear view.
         * This doesn't imply a change on the selected date.
         */
        this.yearSelected = new EventEmitter();
        /**
         * Emits the month chosen in year view.
         * This doesn't imply a change on the selected date.
         */
        this.monthSelected = new EventEmitter();
        /** Emits when any date is selected. */
        this._userSelection = new EventEmitter();
        this._destroyed = new Subject();
        if (!_dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
        this._dateAdapter = _dateAdapter;
        if (!_dateFormats) {
            throw createMissingDateImplError('MAT_DATE_FORMATS');
        }
        this._dateFormats = _dateFormats;
        _intl.changes.pipe(takeUntil(this._destroyed)).subscribe(() => _cdr.markForCheck());
    }
    /** A date representing the period (month or year) to start the calendar in. */
    get startAt() {
        return this._startAt;
    }
    set startAt(value) {
        this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
    }
    /** The currently selected date. */
    get selected() {
        return this._selected;
    }
    set selected(value) {
        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
    }
    /** The minimum selectable date. */
    get minDate() {
        return this._minDate;
    }
    set minDate(value) {
        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
    }
    /** The maximum selectable date. */
    get maxDate() {
        return this._maxDate;
    }
    set maxDate(value) {
        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
    }
    /**
     * The current active date. This determines which time period is shown and which date is
     * highlighted when using keyboard navigation.
     */
    get _activeDate() {
        return this._clampedActiveDate;
    }
    set _activeDate(value) {
        this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);
    }
    /** The label for the current calendar view. */
    get _periodButtonText() {
        if (this._currentView === 'month') {
            return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel);
        }
        if (this._currentView === 'year') {
            return this._dateAdapter.getYearName(this._activeDate);
        }
        const activeYear = this._dateAdapter.getYear(this._activeDate);
        const firstYearInView = this._dateAdapter.getYearName(this._dateAdapter.createDate(activeYear - (activeYear % yearsPerPage), 0, 1));
        const lastYearInView = this._dateAdapter.getYearName(this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - (activeYear % yearsPerPage), 0, 1));
        return `${firstYearInView} \u2013 ${lastYearInView}`;
    }
    get _periodButtonLabel() {
        return this._currentView === 'month' ? this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;
    }
    /** The label for the the previous button. */
    get _prevButtonLabel() {
        return {
            month: this._intl.prevMonthLabel,
            year: this._intl.prevYearLabel,
            'multi-year': this._intl.prevMultiYearLabel,
        }[this._currentView];
    }
    /** The label for the the next button. */
    get _nextButtonLabel() {
        return {
            month: this._intl.nextMonthLabel,
            year: this._intl.nextYearLabel,
            'multi-year': this._intl.nextMultiYearLabel,
        }[this._currentView];
    }
    get _isRtl() {
        return this._dir?.value === 'rtl';
    }
    ngAfterContentInit() {
        this._activeDate = this.startAt || this._dateAdapter.today();
        this._currentView = this.startView;
    }
    ngAfterViewInit() {
        this._focusMonitor.monitor(this._previousButton);
        this._focusMonitor.monitor(this._nextButton);
        this._focusMonitor.monitor(this._changeViewButton);
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this._focusMonitor.stopMonitoring(this._previousButton);
        this._focusMonitor.stopMonitoring(this._nextButton);
        this._focusMonitor.stopMonitoring(this._changeViewButton);
    }
    ngOnChanges(changes) {
        const change = changes.minDate || changes.maxDate || changes.dateFilter;
        if (change && !change.firstChange) {
            const view = this.monthView || this.yearView || this.multiYearView;
            if (view) {
                view._init();
            }
        }
    }
    /** Handles date selection in the month view. */
    _dateSelected(date) {
        if (!this._dateAdapter.sameDate(date, this.selected)) {
            this.selectedChange.emit(date);
        }
    }
    /** Handles year selection in the multiyear view. */
    _yearSelectedInMultiYearView(normalizedYear) {
        this.yearSelected.emit(normalizedYear);
    }
    /** Handles month selection in the year view. */
    _monthSelectedInYearView(normalizedMonth) {
        this.monthSelected.emit(normalizedMonth);
    }
    _userSelected() {
        this._userSelection.emit();
    }
    /** Handles year/month selection in the multi-year/year views. */
    _goToDateInView(date, view) {
        this._activeDate = date;
        this._currentView = view;
    }
    /** Handles user clicks on the period label. */
    _changeViewClicked() {
        this._currentView = this._currentView === 'month' ? 'multi-year' : 'month';
    }
    /** Handles user clicks on the previous button. */
    _previousClicked() {
        this._activeDate =
            this._currentView === 'month'
                ? this._dateAdapter.addCalendarMonths(this._activeDate, -1)
                : this._dateAdapter.addCalendarYears(this._activeDate, this._currentView === 'year' ? -1 : -yearsPerPage);
    }
    /** Handles user clicks on the next button. */
    _nextClicked() {
        this._activeDate =
            this._currentView === 'month'
                ? this._dateAdapter.addCalendarMonths(this._activeDate, 1)
                : this._dateAdapter.addCalendarYears(this._activeDate, this._currentView === 'year' ? 1 : yearsPerPage);
    }
    /** Whether the previous period button is enabled. */
    _previousEnabled() {
        if (!this.minDate) {
            return true;
        }
        return !this.minDate || !this._isSameView(this._activeDate, this.minDate);
    }
    /** Whether the next period button is enabled. */
    _nextEnabled() {
        return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);
    }
    /** Whether the two dates represent the same view in the current view mode (month or year). */
    _isSameView(date1, date2) {
        if (this._currentView === 'month') {
            return (this._dateAdapter.getYear(date1) === this._dateAdapter.getYear(date2) && this._dateAdapter.getMonth(date1) === this._dateAdapter.getMonth(date2));
        }
        if (this._currentView === 'year') {
            return this._dateAdapter.getYear(date1) === this._dateAdapter.getYear(date2);
        }
        // Otherwise we are in 'multi-year' view.
        return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) === Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);
    }
    /**
     * @param obj The object to check.
     * @returns The given object if it is both a date instance and valid, otherwise null.
     */
    _getValidDateOrNull(obj) {
        return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;
    }
}
NxCalendarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxCalendarComponent, deps: [{ token: i1.NxDatepickerIntl }, { token: i2.NxDateAdapter, optional: true }, { token: i3.Directionality, optional: true }, { token: NX_DATE_FORMATS, optional: true }, { token: i0.ChangeDetectorRef }, { token: i4.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });
NxCalendarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxCalendarComponent, selector: "nx-calendar", inputs: { startAt: "startAt", startView: "startView", selected: "selected", minDate: "minDate", maxDate: "maxDate", dateFilter: "dateFilter" }, outputs: { selectedChange: "selectedChange", yearSelected: "yearSelected", monthSelected: "monthSelected", _userSelection: "_userSelection" }, host: { classAttribute: "nx-calendar" }, viewQueries: [{ propertyName: "monthView", first: true, predicate: NxMonthViewComponent, descendants: true }, { propertyName: "yearView", first: true, predicate: NxYearViewComponent, descendants: true }, { propertyName: "multiYearView", first: true, predicate: NxMultiYearViewComponent, descendants: true }, { propertyName: "_previousButton", first: true, predicate: ["previousButton"], descendants: true }, { propertyName: "_nextButton", first: true, predicate: ["nextButton"], descendants: true }, { propertyName: "_changeViewButton", first: true, predicate: ["changeViewButton"], descendants: true }], exportAs: ["nxCalendar"], usesOnChanges: true, ngImport: i0, template: "<div class=\"nx-calendar-header\">\n    <div class=\"nx-calendar-controls\">\n        <button\n            #previousButton\n            class=\"nx-calendar-previous-button\"\n            [disabled]=\"!_previousEnabled()\"\n            (click)=\"_previousClicked()\"\n            [attr.aria-label]=\"_prevButtonLabel\"\n        >\n            <nx-icon [name]=\"this._isRtl ? 'chevron-right' : 'chevron-left'\"></nx-icon>\n        </button>\n\n        <span class=\"nx-calendar-period-label\"> {{_periodButtonText}} </span>\n\n        <button #nextButton class=\"nx-calendar-next-button\" [disabled]=\"!_nextEnabled()\" (click)=\"_nextClicked()\" [attr.aria-label]=\"_nextButtonLabel\">\n            <nx-icon [name]=\"this._isRtl ? 'chevron-left' : 'chevron-right'\"></nx-icon>\n        </button>\n    </div>\n\n    <div class=\"nx-calendar-view-controls\">\n        <button #changeViewButton class=\"nx-calendar-change-view-button\" (click)=\"_changeViewClicked()\" [attr.aria-label]=\"_periodButtonLabel\">\n            {{_periodButtonLabel}}\n        </button>\n    </div>\n</div>\n\n<div class=\"nx-calendar-content\" [ngSwitch]=\"_currentView\" cdkMonitorSubtreeFocus tabindex=\"-1\">\n    <nx-month-view\n        *ngSwitchCase=\"'month'\"\n        [(activeDate)]=\"_activeDate\"\n        [selected]=\"selected\"\n        [dateFilter]=\"dateFilter\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        (selectedChange)=\"_dateSelected($event!)\"\n        (_userSelection)=\"_userSelected()\"\n    >\n    </nx-month-view>\n\n    <nx-year-view\n        *ngSwitchCase=\"'year'\"\n        [(activeDate)]=\"_activeDate\"\n        [selected]=\"selected\"\n        [dateFilter]=\"dateFilter\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        (monthSelected)=\"_monthSelectedInYearView($event)\"\n        (selectedChange)=\"_goToDateInView($event, 'month')\"\n    >\n    </nx-year-view>\n\n    <nx-multi-year-view\n        *ngSwitchCase=\"'multi-year'\"\n        [(activeDate)]=\"_activeDate\"\n        [selected]=\"selected\"\n        [dateFilter]=\"dateFilter\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        (yearSelected)=\"_yearSelectedInMultiYearView($event)\"\n        (selectedChange)=\"_goToDateInView($event, 'year')\"\n    >\n    </nx-multi-year-view>\n</div>\n", styles: [".nx-calendar-content{width:280px;margin:16px auto 0}.nx-calendar-previous-button,.nx-calendar-next-button{color:var(--datefield-controls-color);font-size:var(--datefield-controls-icon-size);background-color:transparent;border:none;cursor:pointer;line-height:0;padding:0}.nx-calendar-previous-button:focus,.nx-calendar-next-button:focus{outline:0}.nx-calendar-previous-button:hover,.nx-calendar-next-button:hover{color:var(--datefield-controls-hover-color)}.nx-calendar-previous-button[disabled],.nx-calendar-next-button[disabled]{cursor:not-allowed}.nx-calendar-previous-button[disabled] nx-icon,.nx-calendar-next-button[disabled] nx-icon{color:var(--disabled-01)}.nx-calendar-controls{display:flex;justify-content:space-between;align-items:center;padding:0 40px}.nx-calendar-period-label{font-size:var(--datefield-period-label-font-size);line-height:var(--datefield-period-label-line-height);font-weight:var(--datefield-period-label-font-weight);letter-spacing:var(--datefield-period-label-letter-spacing);color:var(--datefield-period-label-color);text-align:center}.nx-calendar-view-controls{text-align:center;height:24px}.nx-calendar-change-view-button{font-size:var(--datefield-change-view-font-size);line-height:var(--datefield-change-view-line-height);font-weight:var(--datefield-change-view-font-weight);letter-spacing:var(--datefield-change-view-letter-spacing);color:var(--datefield-change-view-color);border:none;background-color:transparent;cursor:pointer;margin:8px 0 0;height:16px}.nx-calendar-change-view-button:focus{outline:0}.nx-calendar-change-view-button:hover{color:var(--datefield-change-view-hover-color)}.nx-calendar-change-view-button.cdk-keyboard-focused,.nx-calendar-previous-button.cdk-keyboard-focused,.nx-calendar-next-button.cdk-keyboard-focused{box-shadow:var(--focus-box-shadow);border-radius:4px}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-calendar-change-view-button.cdk-keyboard-focused,.nx-calendar-previous-button.cdk-keyboard-focused,.nx-calendar-next-button.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}button::-moz-focus-inner{border:0}\n"], components: [{ type: i5.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }, { type: i6.NxMonthViewComponent, selector: "nx-month-view", inputs: ["activeDate", "selected", "minDate", "maxDate", "dateFilter"], outputs: ["selectedChange", "_userSelection", "activeDateChange"], exportAs: ["nxMonthView"] }, { type: i7.NxYearViewComponent, selector: "nx-year-view", inputs: ["activeDate", "selected", "minDate", "maxDate", "dateFilter"], outputs: ["selectedChange", "monthSelected", "activeDateChange"], exportAs: ["nxYearView"] }, { type: i8.NxMultiYearViewComponent, selector: "nx-multi-year-view", inputs: ["activeDate", "selected", "minDate", "maxDate", "dateFilter"], outputs: ["selectedChange", "yearSelected", "activeDateChange"], exportAs: ["nxMultiYearView"] }], directives: [{ type: i4.CdkMonitorFocus, selector: "[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]", outputs: ["cdkFocusChange"] }, { type: i9.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i9.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxCalendarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-calendar', host: {
                        class: 'nx-calendar',
                    }, exportAs: 'nxCalendar', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"nx-calendar-header\">\n    <div class=\"nx-calendar-controls\">\n        <button\n            #previousButton\n            class=\"nx-calendar-previous-button\"\n            [disabled]=\"!_previousEnabled()\"\n            (click)=\"_previousClicked()\"\n            [attr.aria-label]=\"_prevButtonLabel\"\n        >\n            <nx-icon [name]=\"this._isRtl ? 'chevron-right' : 'chevron-left'\"></nx-icon>\n        </button>\n\n        <span class=\"nx-calendar-period-label\"> {{_periodButtonText}} </span>\n\n        <button #nextButton class=\"nx-calendar-next-button\" [disabled]=\"!_nextEnabled()\" (click)=\"_nextClicked()\" [attr.aria-label]=\"_nextButtonLabel\">\n            <nx-icon [name]=\"this._isRtl ? 'chevron-left' : 'chevron-right'\"></nx-icon>\n        </button>\n    </div>\n\n    <div class=\"nx-calendar-view-controls\">\n        <button #changeViewButton class=\"nx-calendar-change-view-button\" (click)=\"_changeViewClicked()\" [attr.aria-label]=\"_periodButtonLabel\">\n            {{_periodButtonLabel}}\n        </button>\n    </div>\n</div>\n\n<div class=\"nx-calendar-content\" [ngSwitch]=\"_currentView\" cdkMonitorSubtreeFocus tabindex=\"-1\">\n    <nx-month-view\n        *ngSwitchCase=\"'month'\"\n        [(activeDate)]=\"_activeDate\"\n        [selected]=\"selected\"\n        [dateFilter]=\"dateFilter\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        (selectedChange)=\"_dateSelected($event!)\"\n        (_userSelection)=\"_userSelected()\"\n    >\n    </nx-month-view>\n\n    <nx-year-view\n        *ngSwitchCase=\"'year'\"\n        [(activeDate)]=\"_activeDate\"\n        [selected]=\"selected\"\n        [dateFilter]=\"dateFilter\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        (monthSelected)=\"_monthSelectedInYearView($event)\"\n        (selectedChange)=\"_goToDateInView($event, 'month')\"\n    >\n    </nx-year-view>\n\n    <nx-multi-year-view\n        *ngSwitchCase=\"'multi-year'\"\n        [(activeDate)]=\"_activeDate\"\n        [selected]=\"selected\"\n        [dateFilter]=\"dateFilter\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        (yearSelected)=\"_yearSelectedInMultiYearView($event)\"\n        (selectedChange)=\"_goToDateInView($event, 'year')\"\n    >\n    </nx-multi-year-view>\n</div>\n", styles: [".nx-calendar-content{width:280px;margin:16px auto 0}.nx-calendar-previous-button,.nx-calendar-next-button{color:var(--datefield-controls-color);font-size:var(--datefield-controls-icon-size);background-color:transparent;border:none;cursor:pointer;line-height:0;padding:0}.nx-calendar-previous-button:focus,.nx-calendar-next-button:focus{outline:0}.nx-calendar-previous-button:hover,.nx-calendar-next-button:hover{color:var(--datefield-controls-hover-color)}.nx-calendar-previous-button[disabled],.nx-calendar-next-button[disabled]{cursor:not-allowed}.nx-calendar-previous-button[disabled] nx-icon,.nx-calendar-next-button[disabled] nx-icon{color:var(--disabled-01)}.nx-calendar-controls{display:flex;justify-content:space-between;align-items:center;padding:0 40px}.nx-calendar-period-label{font-size:var(--datefield-period-label-font-size);line-height:var(--datefield-period-label-line-height);font-weight:var(--datefield-period-label-font-weight);letter-spacing:var(--datefield-period-label-letter-spacing);color:var(--datefield-period-label-color);text-align:center}.nx-calendar-view-controls{text-align:center;height:24px}.nx-calendar-change-view-button{font-size:var(--datefield-change-view-font-size);line-height:var(--datefield-change-view-line-height);font-weight:var(--datefield-change-view-font-weight);letter-spacing:var(--datefield-change-view-letter-spacing);color:var(--datefield-change-view-color);border:none;background-color:transparent;cursor:pointer;margin:8px 0 0;height:16px}.nx-calendar-change-view-button:focus{outline:0}.nx-calendar-change-view-button:hover{color:var(--datefield-change-view-hover-color)}.nx-calendar-change-view-button.cdk-keyboard-focused,.nx-calendar-previous-button.cdk-keyboard-focused,.nx-calendar-next-button.cdk-keyboard-focused{box-shadow:var(--focus-box-shadow);border-radius:4px}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-calendar-change-view-button.cdk-keyboard-focused,.nx-calendar-previous-button.cdk-keyboard-focused,.nx-calendar-next-button.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}button::-moz-focus-inner{border:0}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.NxDatepickerIntl }, { type: i2.NxDateAdapter, decorators: [{
                    type: Optional
                }] }, { type: i3.Directionality, decorators: [{
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [NX_DATE_FORMATS]
                }] }, { type: i0.ChangeDetectorRef }, { type: i4.FocusMonitor }]; }, propDecorators: { startAt: [{
                type: Input
            }], startView: [{
                type: Input
            }], selected: [{
                type: Input
            }], minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], dateFilter: [{
                type: Input
            }], selectedChange: [{
                type: Output
            }], yearSelected: [{
                type: Output
            }], monthSelected: [{
                type: Output
            }], _userSelection: [{
                type: Output
            }], monthView: [{
                type: ViewChild,
                args: [NxMonthViewComponent]
            }], yearView: [{
                type: ViewChild,
                args: [NxYearViewComponent]
            }], multiYearView: [{
                type: ViewChild,
                args: [NxMultiYearViewComponent]
            }], _previousButton: [{
                type: ViewChild,
                args: ['previousButton']
            }], _nextButton: [{
                type: ViewChild,
                args: ['nextButton']
            }], _changeViewButton: [{
                type: ViewChild,
                args: ['changeViewButton']
            }] } });
//# sourceMappingURL=data:application/json;base64,