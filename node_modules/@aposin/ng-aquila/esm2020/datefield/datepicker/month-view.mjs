import { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, UP_ARROW } from '@angular/cdk/keycodes';
import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Optional, Output, ViewChild, } from '@angular/core';
import { NX_DATE_FORMATS } from '../adapter/date-formats';
import { createMissingDateImplError } from '../datefield.functions';
import { NxCalendarBodyComponent, NxCalendarCell } from './calendar-body';
import * as i0 from "@angular/core";
import * as i1 from "../adapter/index";
import * as i2 from "@angular/cdk/bidi";
import * as i3 from "./calendar-body";
import * as i4 from "@angular/common";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const DAYS_PER_WEEK = 7;
const TOTAL_DAYS_TO_DISPLAY = 6 * DAYS_PER_WEEK;
/**
 * An internal component used to display a single month in the datepicker.
 * @docs-private
 */
export class NxMonthViewComponent {
    constructor(_cdr, _dateFormats, _dateAdapter, _dir) {
        this._cdr = _cdr;
        this._dir = _dir;
        /** Emits when a new date is selected. */
        this.selectedChange = new EventEmitter();
        /** Emits when any date is selected. */
        this._userSelection = new EventEmitter();
        /** Emits when any date is activated. */
        this.activeDateChange = new EventEmitter();
        /** Number of days that should be displayed in one row. */
        this._numCols = 7;
        if (!_dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
        this._dateAdapter = _dateAdapter;
        if (!_dateFormats) {
            throw createMissingDateImplError('MAT_DATE_FORMATS');
        }
        this._dateFormats = _dateFormats;
        const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();
        const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');
        const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');
        // Rotate the labels for days of the week based on the configured first day of the week.
        const weekdays = longWeekdays.map((long, i) => ({ long, narrow: narrowWeekdays[i] }));
        this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));
        this._activeDate = this._dateAdapter.today();
    }
    /**
     * The date to display in this month view (everything other than the month and year is ignored).
     */
    get activeDate() {
        return this._activeDate;
    }
    set activeDate(value) {
        const oldActiveDate = this._activeDate;
        const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();
        this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
        if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {
            this._init();
        }
    }
    /** The currently selected date. */
    get selected() {
        return this._selected;
    }
    set selected(value) {
        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
        this._selectedDate = this._getDateInCurrentMonth(this._selected);
    }
    /** The minimum selectable date. */
    get minDate() {
        return this._minDate;
    }
    set minDate(value) {
        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
    }
    /** The maximum selectable date. */
    get maxDate() {
        return this._maxDate;
    }
    set maxDate(value) {
        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
    }
    ngAfterContentInit() {
        this._init();
        this._focusActiveCell();
    }
    /** Handles when a new date is selected. */
    _dateSelected(date, monthsToAdd = 0) {
        if (this._selectedDate !== date) {
            const selectedYear = this._dateAdapter.getYear(this._dateAdapter.addCalendarMonths(this.activeDate, monthsToAdd));
            const selectedMonth = this._dateAdapter.getMonth(this._dateAdapter.addCalendarMonths(this.activeDate, monthsToAdd));
            const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);
            this.selectedChange.emit(selectedDate);
        }
        this._userSelection.emit();
    }
    /** Handles keydown events on the calendar body when calendar is in month view. */
    _handleCalendarBodyKeydown(event) {
        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
        // disabled ones from being selected. This may not be ideal, we should look into whether
        // navigation should skip over disabled dates, and if so, how to implement that efficiently.
        const oldActiveDate = this._activeDate;
        const isRtl = this._isRtl();
        switch (event.keyCode) {
            case LEFT_ARROW:
                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);
                break;
            case RIGHT_ARROW:
                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);
                break;
            case UP_ARROW:
                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -this._numCols);
                break;
            case DOWN_ARROW:
                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, this._numCols);
                break;
            case HOME:
                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1 - this._dateAdapter.getDate(this._activeDate));
                break;
            case END:
                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, this._dateAdapter.getNumDaysInMonth(this._activeDate) - this._dateAdapter.getDate(this._activeDate));
                break;
            case PAGE_UP:
                this.activeDate = event.altKey
                    ? this._dateAdapter.addCalendarYears(this._activeDate, -1)
                    : this._dateAdapter.addCalendarMonths(this._activeDate, -1);
                break;
            case PAGE_DOWN:
                this.activeDate = event.altKey
                    ? this._dateAdapter.addCalendarYears(this._activeDate, 1)
                    : this._dateAdapter.addCalendarMonths(this._activeDate, 1);
                break;
            case ENTER:
                if (!this.dateFilter || this.dateFilter(this._activeDate)) {
                    this._dateSelected(this._dateAdapter.getDate(this._activeDate));
                    this._userSelection.emit();
                    // Prevent unexpected default actions such as form submission.
                    event.preventDefault();
                }
                return;
            default:
                // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                return;
        }
        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {
            this.activeDateChange.emit(this.activeDate);
        }
        this._focusActiveCell();
        // Prevent unexpected default actions such as form submission.
        event.preventDefault();
    }
    /** Initializes this month view. */
    _init() {
        this._selectedDate = this._getDateInCurrentMonth(this.selected);
        this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());
        this._monthLabel = this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)].toLocaleUpperCase();
        const firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);
        this._firstWeekOffset = (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) - this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;
        this._createWeekCells();
        this._cdr.markForCheck();
    }
    /** Focuses the active cell after the microtask queue is empty. */
    _focusActiveCell() {
        this._nxCalendarBody._focusActiveCell();
    }
    /** Creates NxCalendarCells for the dates in this month. */
    _createWeekCells() {
        const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);
        const dateNames = this._dateAdapter.getDateNames();
        this._weeks = [[]];
        for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {
            if (cell === DAYS_PER_WEEK) {
                this._weeks.push([]);
                cell = 0;
            }
            const date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), i + 1);
            const enabled = this._shouldEnableDate(date);
            const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);
            this._weeks[this._weeks.length - 1].push(new NxCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));
        }
    }
    /** Date filter for the month */
    _shouldEnableDate(date) {
        return (!!date &&
            (!this.dateFilter || this.dateFilter(date)) &&
            (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&
            (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0));
    }
    /**
     * Gets the date in this month that the given Date falls on.
     * Returns null if the given Date is in another month.
     */
    _getDateInCurrentMonth(date) {
        return date && this._hasSameMonthAndYear(date, this.activeDate) ? this._dateAdapter.getDate(date) : null;
    }
    /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */
    _hasSameMonthAndYear(d1, d2) {
        return !!(d1 &&
            d2 &&
            this._dateAdapter.getMonth(d1) === this._dateAdapter.getMonth(d2) &&
            this._dateAdapter.getYear(d1) === this._dateAdapter.getYear(d2));
    }
    /**
     * @param obj The object to check.
     * @returns The given object if it is both a date instance and valid, otherwise null.
     */
    _getValidDateOrNull(obj) {
        return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;
    }
    /** Determines whether the user has the RTL layout direction. */
    _isRtl() {
        return this._dir && this._dir.value === 'rtl';
    }
    /**
     * The last days of the previous month that should be displayed
     * in the first row of the calendar.
     */
    _getLastDaysOfPreviousMonth() {
        const firstDayOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);
        const firstDayOfPreviousItems = this._dateAdapter.addCalendarDays(firstDayOfMonth, -this._firstWeekOffset);
        return this._getRowOfDays(firstDayOfPreviousItems, this._firstWeekOffset);
    }
    /**
     * The first days of the following month that should be displayed
     * after the days of the current month. After filling up the last
     * row of the current month, additional rows are added, so that a
     * total of 42 days (6 rows/weeks) is displayed.
     */
    _getFirstDaysOfFollowingMonth() {
        const followingDays = [];
        const firstDayOfNextMonth = this._dateAdapter.addCalendarMonths(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1), 1);
        // there should be displayed a total of 7 * 6 items
        const followingDaysCount = TOTAL_DAYS_TO_DISPLAY - this._firstWeekOffset - this._dateAdapter.getNumDaysInMonth(this.activeDate);
        const offsetItems = followingDaysCount % 7;
        // add a non-full row to following rows.
        // These items will fill up the last incomplete row of the current month.
        if (offsetItems > 0) {
            const offsetRow = this._getRowOfDays(firstDayOfNextMonth, offsetItems);
            followingDays.push(offsetRow);
        }
        let remainingDays = followingDaysCount - offsetItems;
        let firstDayInRow = this._dateAdapter.addCalendarDays(firstDayOfNextMonth, offsetItems);
        // fill remaining rows if needed
        while (remainingDays > 0) {
            followingDays.push(this._getRowOfDays(firstDayInRow, this._numCols));
            firstDayInRow = this._dateAdapter.addCalendarDays(firstDayInRow, this._numCols);
            remainingDays -= this._numCols;
        }
        return followingDays;
    }
    /**
     * Returns a row with days, beginning with the date of `firstDayInRow`-parameter.
     * The returned row contains `daysCount` elements.
     */
    _getRowOfDays(firstDayInRow, daysCount) {
        const nextRow = [];
        const dateNames = this._dateAdapter.getDateNames();
        for (let addDays = 0; addDays < daysCount; addDays++) {
            const date = this._dateAdapter.addCalendarDays(firstDayInRow, addDays);
            const day = this._dateAdapter.getDate(date);
            const enabled = this._shouldEnableDate(date);
            const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);
            nextRow.push(new NxCalendarCell(day, dateNames[day - 1], ariaLabel, enabled));
        }
        return nextRow;
    }
}
NxMonthViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxMonthViewComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: NX_DATE_FORMATS, optional: true }, { token: i1.NxDateAdapter, optional: true }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NxMonthViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxMonthViewComponent, selector: "nx-month-view", inputs: { activeDate: "activeDate", selected: "selected", minDate: "minDate", maxDate: "maxDate", dateFilter: "dateFilter" }, outputs: { selectedChange: "selectedChange", _userSelection: "_userSelection", activeDateChange: "activeDateChange" }, viewQueries: [{ propertyName: "_nxCalendarBody", first: true, predicate: NxCalendarBodyComponent, descendants: true, static: true }], exportAs: ["nxMonthView"], ngImport: i0, template: "<table class=\"nx-calendar-table\">\n    <thead class=\"nx-calendar-table-head\">\n        <tr> <th class=\"nx-calendar-table-header\" *ngFor=\"let day of _weekdays\" [attr.aria-label]=\"day.long\">{{day.narrow}}</th></tr>\n        <tr> </tr\n    ></thead>\n\n    <tbody\n        nx-calendar-body\n        [label]=\"_monthLabel\"\n        [rows]=\"_weeks\"\n        [previousItems]=\"_getLastDaysOfPreviousMonth()\"\n        [followingItems]=\"_getFirstDaysOfFollowingMonth()\"\n        [todayValue]=\"_todayDate!\"\n        [numCols]=\"_numCols\"\n        [selectedValue]=\"_selectedDate!\"\n        [activeCell]=\"_dateAdapter.getDate(activeDate) - 1\"\n        (selectedValueChange)=\"_dateSelected($event)\"\n        (selectedValueChangeToPrevious)=\"_dateSelected($event, -1)\"\n        (selectedValueChangeToFollowing)=\"_dateSelected($event, 1)\"\n        (keydown)=\"_handleCalendarBodyKeydown($event)\"\n    >\n    </tbody>\n</table>\n", styles: [".nx-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.nx-calendar-table-header{font-size:var(--datefield-cell-font-size);line-height:var(--datefield-cell-line-height);font-weight:var(--datefield-cell-font-weight);letter-spacing:var(--datefield-cell-letter-spacing);color:var(--datefield-header-cell-color);text-align:center;height:40px}\n"], components: [{ type: i3.NxCalendarBodyComponent, selector: "[nx-calendar-body]", inputs: ["label", "rows", "todayValue", "selectedValue", "numCols", "allowDisabledSelection", "activeCell", "previousItems", "followingItems"], outputs: ["selectedValueChange", "selectedValueChangeToPrevious", "selectedValueChangeToFollowing"], exportAs: ["nxCalendarBody"] }], directives: [{ type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxMonthViewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-month-view', exportAs: 'nxMonthView', changeDetection: ChangeDetectionStrategy.OnPush, template: "<table class=\"nx-calendar-table\">\n    <thead class=\"nx-calendar-table-head\">\n        <tr> <th class=\"nx-calendar-table-header\" *ngFor=\"let day of _weekdays\" [attr.aria-label]=\"day.long\">{{day.narrow}}</th></tr>\n        <tr> </tr\n    ></thead>\n\n    <tbody\n        nx-calendar-body\n        [label]=\"_monthLabel\"\n        [rows]=\"_weeks\"\n        [previousItems]=\"_getLastDaysOfPreviousMonth()\"\n        [followingItems]=\"_getFirstDaysOfFollowingMonth()\"\n        [todayValue]=\"_todayDate!\"\n        [numCols]=\"_numCols\"\n        [selectedValue]=\"_selectedDate!\"\n        [activeCell]=\"_dateAdapter.getDate(activeDate) - 1\"\n        (selectedValueChange)=\"_dateSelected($event)\"\n        (selectedValueChangeToPrevious)=\"_dateSelected($event, -1)\"\n        (selectedValueChangeToFollowing)=\"_dateSelected($event, 1)\"\n        (keydown)=\"_handleCalendarBodyKeydown($event)\"\n    >\n    </tbody>\n</table>\n", styles: [".nx-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.nx-calendar-table-header{font-size:var(--datefield-cell-font-size);line-height:var(--datefield-cell-line-height);font-weight:var(--datefield-cell-font-weight);letter-spacing:var(--datefield-cell-letter-spacing);color:var(--datefield-header-cell-color);text-align:center;height:40px}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [NX_DATE_FORMATS]
                }] }, { type: i1.NxDateAdapter, decorators: [{
                    type: Optional
                }] }, { type: i2.Directionality, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { activeDate: [{
                type: Input
            }], selected: [{
                type: Input
            }], minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], dateFilter: [{
                type: Input
            }], selectedChange: [{
                type: Output
            }], _userSelection: [{
                type: Output
            }], activeDateChange: [{
                type: Output
            }], _nxCalendarBody: [{
                type: ViewChild,
                args: [NxCalendarBodyComponent, { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,