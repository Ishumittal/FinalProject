import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ChangeDetectionStrategy, Component, ContentChildren, Input, Optional, QueryList, Self, } from '@angular/core';
import { mapClassNames } from '@aposin/ng-aquila/utils';
import { merge, Subject } from 'rxjs';
import { startWith, switchMap, takeUntil } from 'rxjs/operators';
import { NxRadioToggleButtonBaseComponent } from './radio-toggle-button-base.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@aposin/ng-aquila/utils";
import * as i3 from "@angular/common";
let nextId = 0;
const MAPPING = {
    negative: 'nx-radio-toggle--negative',
    small: 'nx-radio-toggle--small',
};
export const RESET_VALUES = [null, undefined, ''];
export class NxRadioToggleComponent {
    constructor(_cdr, 
    /** @docs-private */ ngControl, _errorStateMatcher, _parentForm, _parentFormGroup) {
        this._cdr = _cdr;
        this.ngControl = ngControl;
        this._errorStateMatcher = _errorStateMatcher;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this._toggleId = (nextId++).toString();
        this._disabled = false;
        /** @docs-private */
        this.errorState = false;
        // emits to signal children to run change detection
        this._disableChange = new Subject();
        /** @docs-private */
        this.additionalClasses = '';
        /** @docs-private */
        this.toggleButtons = new QueryList();
        this._destroyed = new Subject();
        this.onTouchedCallback = () => { };
        this.onChangeCallback = (option) => { };
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
    }
    /** Sets the component to the disabled state.*/
    set disabled(value) {
        const coerced = coerceBooleanProperty(value);
        if (this._disabled !== coerced) {
            this._disabled = coerced;
            this._disableChange.next();
        }
    }
    get disabled() {
        return this._disabled;
    }
    /** Sets the name used for accessibility. */
    set name(value) {
        if (this._name !== value) {
            this._name = value;
            this._cdr.markForCheck();
        }
    }
    get name() {
        return this._name;
    }
    ngAfterContentInit() {
        this.toggleButtons.changes
            .pipe(startWith(this.toggleButtons), switchMap(_ => merge(...this.toggleButtons.map((button) => button.onChecked))), takeUntil(this._destroyed))
            .subscribe(change => {
            this._selection = change.value;
            this.change(this._selection);
        });
        this.toggleButtons.changes
            .pipe(startWith(this.toggleButtons), takeUntil(this._destroyed))
            .subscribe((toggles) => {
            toggles.forEach(toggle => {
                toggle.resetClasses();
                if (toggle.value === this.selection) {
                    // We need to defer the selection for the edge case that the button with the value of this.selection
                    // didn't exist yet but was added afterwards to prevent changed after checked errors
                    setTimeout(() => toggle.select());
                }
            });
            if (toggles.length > 0) {
                toggles.first.setFirstButton();
                toggles.last.setLastButton();
            }
        });
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this._disableChange.complete();
    }
    ngDoCheck() {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this.updateErrorState();
        }
    }
    registerOnChange(onChangeCallback) {
        this.onChangeCallback = onChangeCallback;
    }
    registerOnTouched(onTouchedCallback) {
        this.onTouchedCallback = onTouchedCallback;
    }
    /** Preselects the respective options. */
    writeValue(value) {
        this._selection = value;
        const correspondingButton = this.toggleButtons.find((button) => button.value === this._selection);
        if (correspondingButton) {
            correspondingButton.select();
            return;
        }
        if (RESET_VALUES.includes(value)) {
            this.toggleButtons.map((button) => button.deselect());
        }
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /** @docs-private */
    get id() {
        return `nx-radio-toggle-${this._toggleId}`;
    }
    /** Sets the modifiers for the component. */
    set style(value) {
        this.additionalClasses = mapClassNames(value, [], MAPPING);
    }
    /**
     * @docs-private
     */
    get selection() {
        return this._selection;
    }
    /** @docs-private */
    change(value) {
        this.onChangeCallback(value);
        if (this.onTouchedCallback) {
            this.onTouchedCallback();
        }
    }
    /** @docs-private */
    updateErrorState() {
        const oldState = this.errorState;
        const parent = this._parentFormGroup || this._parentForm;
        const control = this.ngControl ? this.ngControl.control : null;
        const newState = this._errorStateMatcher.isErrorState(control, parent);
        if (newState !== oldState) {
            this.errorState = newState;
        }
    }
}
NxRadioToggleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxRadioToggleComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.NgControl, optional: true, self: true }, { token: i2.ErrorStateMatcher }, { token: i1.NgForm, optional: true }, { token: i1.FormGroupDirective, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NxRadioToggleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxRadioToggleComponent, selector: "nx-radio-toggle", inputs: { disabled: ["nxDisabled", "disabled"], name: ["nxName", "name"], writeValue: ["nxSelection", "writeValue"], style: ["nxStyle", "style"] }, queries: [{ propertyName: "toggleButtons", predicate: NxRadioToggleButtonBaseComponent }], ngImport: i0, template: "<div class=\"nx-radio-toggle\" [ngClass]=\"additionalClasses\" role=\"radiogroup\" [attr.aria-label]=\"name\">\n    <ng-content></ng-content>\n</div>\n", styles: [":host{display:block}.nx-radio-toggle{display:flex;height:100%}@media (max-width: 703px){.nx-radio-toggle{flex-direction:column;text-align:center;width:100%;justify-content:center;align-items:center}}\n"], directives: [{ type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxRadioToggleComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-radio-toggle', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"nx-radio-toggle\" [ngClass]=\"additionalClasses\" role=\"radiogroup\" [attr.aria-label]=\"name\">\n    <ng-content></ng-content>\n</div>\n", styles: [":host{display:block}.nx-radio-toggle{display:flex;height:100%}@media (max-width: 703px){.nx-radio-toggle{flex-direction:column;text-align:center;width:100%;justify-content:center;align-items:center}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }, { type: i2.ErrorStateMatcher }, { type: i1.NgForm, decorators: [{
                    type: Optional
                }] }, { type: i1.FormGroupDirective, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { disabled: [{
                type: Input,
                args: ['nxDisabled']
            }], name: [{
                type: Input,
                args: ['nxName']
            }], toggleButtons: [{
                type: ContentChildren,
                args: [NxRadioToggleButtonBaseComponent]
            }], writeValue: [{
                type: Input,
                args: ['nxSelection']
            }], style: [{
                type: Input,
                args: ['nxStyle']
            }] } });
//# sourceMappingURL=data:application/json;base64,