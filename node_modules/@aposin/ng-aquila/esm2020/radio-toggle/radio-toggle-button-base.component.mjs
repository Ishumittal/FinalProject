import { Directive, Input, ViewChild } from '@angular/core';
import { removeClasses } from '@aposin/ng-aquila/utils';
import * as i0 from "@angular/core";
let nextId = 0;
/** @docs-private */
export class NxRadioToggleButtonBaseComponent {
    constructor(/** @docs-private */ renderer) {
        this.renderer = renderer;
        /** @docs-private */
        this.toggleButtonId = 'nx-radio-toggle-button-' + nextId++;
    }
    /** @docs-private */
    triggerInputClick(event) {
        event.stopPropagation();
        this.toggleInput.nativeElement.click();
    }
    /** @docs-private */
    setFirstButton() {
        this.renderer.addClass(this.labelContainer.nativeElement, 'nx-radio-toggle__label-container--first');
    }
    /** @docs-private */
    setLastButton() {
        this.renderer.addClass(this.labelContainer.nativeElement, 'nx-radio-toggle__label-container--last');
    }
    /** @docs-private */
    resetClasses() {
        removeClasses(this.renderer, this.labelContainer, 'nx-radio-toggle__label-container--first nx-radio-toggle__label-container--last');
    }
}
NxRadioToggleButtonBaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxRadioToggleButtonBaseComponent, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
NxRadioToggleButtonBaseComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxRadioToggleButtonBaseComponent, inputs: { value: ["nxValue", "value"] }, viewQueries: [{ propertyName: "labelContainer", first: true, predicate: ["toggleButtonLabelContainer"], descendants: true, static: true }, { propertyName: "toggleInput", first: true, predicate: ["toggleInput"], descendants: true, static: true }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxRadioToggleButtonBaseComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { value: [{
                type: Input,
                args: ['nxValue']
            }], labelContainer: [{
                type: ViewChild,
                args: ['toggleButtonLabelContainer', { static: true }]
            }], toggleInput: [{
                type: ViewChild,
                args: ['toggleInput', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8tdG9nZ2xlLWJ1dHRvbi1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWFxdWlsYS9zcmMvcmFkaW8tdG9nZ2xlL3JhZGlvLXRvZ2dsZS1idXR0b24tYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBYyxLQUFLLEVBQWEsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25GLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQzs7QUFFeEQsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBRWYsb0JBQW9CO0FBRXBCLE1BQU0sT0FBTyxnQ0FBZ0M7SUFnQnpDLFlBQVksb0JBQW9CLENBQVcsUUFBbUI7UUFBbkIsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQWY5RCxvQkFBb0I7UUFDcEIsbUJBQWMsR0FBVyx5QkFBeUIsR0FBRyxNQUFNLEVBQUUsQ0FBQztJQWNHLENBQUM7SUFFbEUsb0JBQW9CO0lBQ3BCLGlCQUFpQixDQUFDLEtBQWlCO1FBQy9CLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUMzQyxDQUFDO0lBRUQsb0JBQW9CO0lBQ3BCLGNBQWM7UUFDVixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsRUFBRSx5Q0FBeUMsQ0FBQyxDQUFDO0lBQ3pHLENBQUM7SUFFRCxvQkFBb0I7SUFDcEIsYUFBYTtRQUNULElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxFQUFFLHdDQUF3QyxDQUFDLENBQUM7SUFDeEcsQ0FBQztJQUVELG9CQUFvQjtJQUNwQixZQUFZO1FBQ1IsYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxnRkFBZ0YsQ0FBQyxDQUFDO0lBQ3hJLENBQUM7OzZIQXJDUSxnQ0FBZ0M7aUhBQWhDLGdDQUFnQzsyRkFBaEMsZ0NBQWdDO2tCQUQ1QyxTQUFTO2dHQU9OLEtBQUs7c0JBREosS0FBSzt1QkFBQyxTQUFTO2dCQUtoQixjQUFjO3NCQURiLFNBQVM7dUJBQUMsNEJBQTRCLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO2dCQUt6RCxXQUFXO3NCQURWLFNBQVM7dUJBQUMsYUFBYSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIFJlbmRlcmVyMiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyByZW1vdmVDbGFzc2VzIH0gZnJvbSAnQGFwb3Npbi9uZy1hcXVpbGEvdXRpbHMnO1xuXG5sZXQgbmV4dElkID0gMDtcblxuLyoqIEBkb2NzLXByaXZhdGUgKi9cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGNsYXNzIE54UmFkaW9Ub2dnbGVCdXR0b25CYXNlQ29tcG9uZW50IHtcbiAgICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICAgIHRvZ2dsZUJ1dHRvbklkOiBzdHJpbmcgPSAnbngtcmFkaW8tdG9nZ2xlLWJ1dHRvbi0nICsgbmV4dElkKys7XG5cbiAgICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICAgIEBJbnB1dCgnbnhWYWx1ZScpXG4gICAgdmFsdWU6IGFueTtcblxuICAgIC8qKiBAZG9jcy1wcml2YXRlICovXG4gICAgQFZpZXdDaGlsZCgndG9nZ2xlQnV0dG9uTGFiZWxDb250YWluZXInLCB7IHN0YXRpYzogdHJ1ZSB9KVxuICAgIGxhYmVsQ29udGFpbmVyITogRWxlbWVudFJlZjtcblxuICAgIC8qKiBAZG9jcy1wcml2YXRlICovXG4gICAgQFZpZXdDaGlsZCgndG9nZ2xlSW5wdXQnLCB7IHN0YXRpYzogdHJ1ZSB9KVxuICAgIHRvZ2dsZUlucHV0ITogRWxlbWVudFJlZjtcblxuICAgIGNvbnN0cnVjdG9yKC8qKiBAZG9jcy1wcml2YXRlICovIHByb3RlY3RlZCByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gICAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgICB0cmlnZ2VySW5wdXRDbGljayhldmVudDogTW91c2VFdmVudCkge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdGhpcy50b2dnbGVJbnB1dC5uYXRpdmVFbGVtZW50LmNsaWNrKCk7XG4gICAgfVxuXG4gICAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgICBzZXRGaXJzdEJ1dHRvbigpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmxhYmVsQ29udGFpbmVyLm5hdGl2ZUVsZW1lbnQsICdueC1yYWRpby10b2dnbGVfX2xhYmVsLWNvbnRhaW5lci0tZmlyc3QnKTtcbiAgICB9XG5cbiAgICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICAgIHNldExhc3RCdXR0b24oKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5sYWJlbENvbnRhaW5lci5uYXRpdmVFbGVtZW50LCAnbngtcmFkaW8tdG9nZ2xlX19sYWJlbC1jb250YWluZXItLWxhc3QnKTtcbiAgICB9XG5cbiAgICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICAgIHJlc2V0Q2xhc3NlcygpIHtcbiAgICAgICAgcmVtb3ZlQ2xhc3Nlcyh0aGlzLnJlbmRlcmVyLCB0aGlzLmxhYmVsQ29udGFpbmVyLCAnbngtcmFkaW8tdG9nZ2xlX19sYWJlbC1jb250YWluZXItLWZpcnN0IG54LXJhZGlvLXRvZ2dsZV9fbGFiZWwtY29udGFpbmVyLS1sYXN0Jyk7XG4gICAgfVxufVxuIl19