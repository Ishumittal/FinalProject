import { ContentChildren, Directive } from '@angular/core';
import { BehaviorSubject, combineLatest, Subject } from 'rxjs';
import { distinctUntilChanged, flatMap, map, startWith, takeUntil } from 'rxjs/operators';
import { NxExpandableTableRowComponent } from './expandable-table-row.component';
import * as i0 from "@angular/core";
/**
 * The nxExpandableTable adds row expansion functionality to the nxTable.
 * It provides the logic to expand/collapse all expandable rows simultanously.
 */
export class NxExpandableTableDirective {
    constructor() {
        this.expanded = new BehaviorSubject(false);
        this._destroyed = new Subject();
    }
    ngAfterViewInit() {
        this.rows.changes
            .pipe(startWith(this.rows), flatMap((rows) => combineLatest(rows.map(row => row.expanded))), map((values) => values.reduce((a, x) => a && x, true)), distinctUntilChanged(), takeUntil(this._destroyed))
            .subscribe(rowsOpen => {
            this.expanded.next(rowsOpen);
        });
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
    /**
     * Toggles the expandable rows. If all rows are open it will close them, otherwise it will open them.
     */
    toggle() {
        if (this.expanded.value) {
            this.close();
        }
        else {
            this.expand();
        }
    }
    /**
     * Expands all expandable rows.
     */
    expand() {
        this.rows.forEach(row => row.expanded.next(true));
    }
    /**
     * Closes all expandable rows.
     */
    close() {
        this.rows.forEach(row => row.expanded.next(false));
    }
}
NxExpandableTableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxExpandableTableDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NxExpandableTableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxExpandableTableDirective, selector: "table[nxExpandableTable]", queries: [{ propertyName: "rows", predicate: NxExpandableTableRowComponent, descendants: true }], exportAs: ["nxExpandableTable"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxExpandableTableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'table[nxExpandableTable]',
                    exportAs: 'nxExpandableTable',
                }]
        }], propDecorators: { rows: [{
                type: ContentChildren,
                args: [NxExpandableTableRowComponent, { descendants: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5kYWJsZS10YWJsZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1hcXVpbGEvc3JjL3RhYmxlL2V4cGFuZGFibGUvZXhwYW5kYWJsZS10YWJsZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFpQixlQUFlLEVBQUUsU0FBUyxFQUF3QixNQUFNLGVBQWUsQ0FBQztBQUNoRyxPQUFPLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0QsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTFGLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDOztBQUdqRjs7O0dBR0c7QUFLSCxNQUFNLE9BQU8sMEJBQTBCO0lBSnZDO1FBT0ksYUFBUSxHQUE2QixJQUFJLGVBQWUsQ0FBVSxLQUFLLENBQUMsQ0FBQztRQUV4RCxlQUFVLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztLQTZDckQ7SUEzQ0csZUFBZTtRQUNYLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTzthQUNaLElBQUksQ0FDRCxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUNwQixPQUFPLENBQUMsQ0FBQyxJQUFxQyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQ2hHLEdBQUcsQ0FBQyxDQUFDLE1BQWlCLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQ2pFLG9CQUFvQixFQUFFLEVBQ3RCLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQzdCO2FBQ0EsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDO0lBQ1gsQ0FBQztJQUVELFdBQVc7UUFDUCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTTtRQUNGLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUU7WUFDckIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2hCO2FBQU07WUFDSCxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDakI7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNO1FBQ0YsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUs7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDdkQsQ0FBQzs7dUhBakRRLDBCQUEwQjsyR0FBMUIsMEJBQTBCLHFGQUNsQiw2QkFBNkI7MkZBRHJDLDBCQUEwQjtrQkFKdEMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsMEJBQTBCO29CQUNwQyxRQUFRLEVBQUUsbUJBQW1CO2lCQUNoQzs4QkFFMEUsSUFBSTtzQkFBMUUsZUFBZTt1QkFBQyw2QkFBNkIsRUFBRSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDb250ZW50Q2hpbGRyZW4sIERpcmVjdGl2ZSwgT25EZXN0cm95LCBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgY29tYmluZUxhdGVzdCwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQsIGZsYXRNYXAsIG1hcCwgc3RhcnRXaXRoLCB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IE54RXhwYW5kYWJsZVRhYmxlUm93Q29tcG9uZW50IH0gZnJvbSAnLi9leHBhbmRhYmxlLXRhYmxlLXJvdy5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnhFeHBhbmRhYmxlIH0gZnJvbSAnLi90b2dnbGUtYnV0dG9uLmNvbXBvbmVudCc7XG5cbi8qKlxuICogVGhlIG54RXhwYW5kYWJsZVRhYmxlIGFkZHMgcm93IGV4cGFuc2lvbiBmdW5jdGlvbmFsaXR5IHRvIHRoZSBueFRhYmxlLlxuICogSXQgcHJvdmlkZXMgdGhlIGxvZ2ljIHRvIGV4cGFuZC9jb2xsYXBzZSBhbGwgZXhwYW5kYWJsZSByb3dzIHNpbXVsdGFub3VzbHkuXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAndGFibGVbbnhFeHBhbmRhYmxlVGFibGVdJyxcbiAgICBleHBvcnRBczogJ254RXhwYW5kYWJsZVRhYmxlJyxcbn0pXG5leHBvcnQgY2xhc3MgTnhFeHBhbmRhYmxlVGFibGVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQsIE54RXhwYW5kYWJsZSB7XG4gICAgQENvbnRlbnRDaGlsZHJlbihOeEV4cGFuZGFibGVUYWJsZVJvd0NvbXBvbmVudCwgeyBkZXNjZW5kYW50czogdHJ1ZSB9KSByb3dzITogUXVlcnlMaXN0PE54RXhwYW5kYWJsZVRhYmxlUm93Q29tcG9uZW50PjtcblxuICAgIGV4cGFuZGVkOiBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+KGZhbHNlKTtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2Rlc3Ryb3llZCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgICAgIHRoaXMucm93cy5jaGFuZ2VzXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBzdGFydFdpdGgodGhpcy5yb3dzKSxcbiAgICAgICAgICAgICAgICBmbGF0TWFwKChyb3dzOiBOeEV4cGFuZGFibGVUYWJsZVJvd0NvbXBvbmVudFtdKSA9PiBjb21iaW5lTGF0ZXN0KHJvd3MubWFwKHJvdyA9PiByb3cuZXhwYW5kZWQpKSksXG4gICAgICAgICAgICAgICAgbWFwKCh2YWx1ZXM6IGJvb2xlYW5bXSkgPT4gdmFsdWVzLnJlZHVjZSgoYSwgeCkgPT4gYSAmJiB4LCB0cnVlKSksXG4gICAgICAgICAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgICAgICAgICAgICB0YWtlVW50aWwodGhpcy5fZGVzdHJveWVkKSxcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5zdWJzY3JpYmUocm93c09wZW4gPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZXhwYW5kZWQubmV4dChyb3dzT3Blbik7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5fZGVzdHJveWVkLm5leHQoKTtcbiAgICAgICAgdGhpcy5fZGVzdHJveWVkLmNvbXBsZXRlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlcyB0aGUgZXhwYW5kYWJsZSByb3dzLiBJZiBhbGwgcm93cyBhcmUgb3BlbiBpdCB3aWxsIGNsb3NlIHRoZW0sIG90aGVyd2lzZSBpdCB3aWxsIG9wZW4gdGhlbS5cbiAgICAgKi9cbiAgICB0b2dnbGUoKSB7XG4gICAgICAgIGlmICh0aGlzLmV4cGFuZGVkLnZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmV4cGFuZCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhwYW5kcyBhbGwgZXhwYW5kYWJsZSByb3dzLlxuICAgICAqL1xuICAgIGV4cGFuZCgpIHtcbiAgICAgICAgdGhpcy5yb3dzLmZvckVhY2gocm93ID0+IHJvdy5leHBhbmRlZC5uZXh0KHRydWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbG9zZXMgYWxsIGV4cGFuZGFibGUgcm93cy5cbiAgICAgKi9cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy5yb3dzLmZvckVhY2gocm93ID0+IHJvdy5leHBhbmRlZC5uZXh0KGZhbHNlKSk7XG4gICAgfVxufVxuIl19