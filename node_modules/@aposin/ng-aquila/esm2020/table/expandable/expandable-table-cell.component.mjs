import { animate, state, style, transition, trigger } from '@angular/animations';
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./expandable-table-row.component";
/**
 * This is an expandable table cell.
 * Only works in conjunction with the `[nxExpandableTableRow]` component.
 */
export class NxExpandableTableCellComponent {
    constructor(_row, _cdr) {
        this._cdr = _cdr;
        this._open = false;
        this._destroyed = new Subject();
        _row.expanded.pipe(takeUntil(this._destroyed)).subscribe(open => {
            this._open = open;
            this._cdr.markForCheck();
        });
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
}
NxExpandableTableCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxExpandableTableCellComponent, deps: [{ token: i1.NxExpandableTableRowComponent }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NxExpandableTableCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxExpandableTableCellComponent, selector: "td[nxExpandableTableCell]", host: { classAttribute: "nx-expandable-table-cell" }, ngImport: i0, template: "<div [@openClose]=\"_open ? 'open' : 'closed'\" class=\"nx-expandable-table-cell__content\">\n    <div class=\"nx-expandable-table-cell__wrapper\">\n        <ng-content></ng-content>\n    </div>\n</div>\n", animations: [
        trigger('openClose', [
            state('open', style({
                height: '*',
                visibility: 'visible',
            })),
            state('closed, void', style({
                height: '0',
                visibility: 'hidden', // visibility and height to toggle instead of display: none to prevent cell width jumping
            })),
            transition('closed <=> open, void => closed', [animate('225ms cubic-bezier(0.4,0.0,0.2,1)')]),
        ]),
    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxExpandableTableCellComponent, decorators: [{
            type: Component,
            args: [{ selector: 'td[nxExpandableTableCell]', host: {
                        class: 'nx-expandable-table-cell',
                    }, animations: [
                        trigger('openClose', [
                            state('open', style({
                                height: '*',
                                visibility: 'visible',
                            })),
                            state('closed, void', style({
                                height: '0',
                                visibility: 'hidden', // visibility and height to toggle instead of display: none to prevent cell width jumping
                            })),
                            transition('closed <=> open, void => closed', [animate('225ms cubic-bezier(0.4,0.0,0.2,1)')]),
                        ]),
                    ], changeDetection: ChangeDetectionStrategy.OnPush, template: "<div [@openClose]=\"_open ? 'open' : 'closed'\" class=\"nx-expandable-table-cell__content\">\n    <div class=\"nx-expandable-table-cell__wrapper\">\n        <ng-content></ng-content>\n    </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.NxExpandableTableRowComponent }, { type: i0.ChangeDetectorRef }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5kYWJsZS10YWJsZS1jZWxsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWFxdWlsYS9zcmMvdGFibGUvZXhwYW5kYWJsZS9leHBhbmRhYmxlLXRhYmxlLWNlbGwuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctYXF1aWxhL3NyYy90YWJsZS9leHBhbmRhYmxlL2V4cGFuZGFibGUtdGFibGUtY2VsbC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pGLE9BQU8sRUFBRSx1QkFBdUIsRUFBcUIsU0FBUyxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQ2pHLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7QUFJM0M7OztHQUdHO0FBNEJILE1BQU0sT0FBTyw4QkFBOEI7SUFLdkMsWUFBWSxJQUFtQyxFQUFVLElBQXVCO1FBQXZCLFNBQUksR0FBSixJQUFJLENBQW1CO1FBSmhGLFVBQUssR0FBRyxLQUFLLENBQUM7UUFFRyxlQUFVLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQUc5QyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzVELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1lBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDN0IsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMvQixDQUFDOzsySEFmUSw4QkFBOEI7K0dBQTlCLDhCQUE4Qix1SEN0QzNDLDhNQUtBLGNEWWdCO1FBQ1IsT0FBTyxDQUFDLFdBQVcsRUFBRTtZQUNqQixLQUFLLENBQ0QsTUFBTSxFQUNOLEtBQUssQ0FBQztnQkFDRixNQUFNLEVBQUUsR0FBRztnQkFDWCxVQUFVLEVBQUUsU0FBUzthQUN4QixDQUFDLENBQ0w7WUFDRCxLQUFLLENBQ0QsY0FBYyxFQUNkLEtBQUssQ0FBQztnQkFDRixNQUFNLEVBQUUsR0FBRztnQkFDWCxVQUFVLEVBQUUsUUFBUSxFQUFFLHlGQUF5RjthQUNsSCxDQUFDLENBQ0w7WUFDRCxVQUFVLENBQUMsaUNBQWlDLEVBQUUsQ0FBQyxPQUFPLENBQUMsbUNBQW1DLENBQUMsQ0FBQyxDQUFDO1NBQ2hHLENBQUM7S0FDTDsyRkFHUSw4QkFBOEI7a0JBM0IxQyxTQUFTOytCQUNJLDJCQUEyQixRQUUvQjt3QkFDRixLQUFLLEVBQUUsMEJBQTBCO3FCQUNwQyxjQUNXO3dCQUNSLE9BQU8sQ0FBQyxXQUFXLEVBQUU7NEJBQ2pCLEtBQUssQ0FDRCxNQUFNLEVBQ04sS0FBSyxDQUFDO2dDQUNGLE1BQU0sRUFBRSxHQUFHO2dDQUNYLFVBQVUsRUFBRSxTQUFTOzZCQUN4QixDQUFDLENBQ0w7NEJBQ0QsS0FBSyxDQUNELGNBQWMsRUFDZCxLQUFLLENBQUM7Z0NBQ0YsTUFBTSxFQUFFLEdBQUc7Z0NBQ1gsVUFBVSxFQUFFLFFBQVEsRUFBRSx5RkFBeUY7NkJBQ2xILENBQUMsQ0FDTDs0QkFDRCxVQUFVLENBQUMsaUNBQWlDLEVBQUUsQ0FBQyxPQUFPLENBQUMsbUNBQW1DLENBQUMsQ0FBQyxDQUFDO3lCQUNoRyxDQUFDO3FCQUNMLG1CQUNnQix1QkFBdUIsQ0FBQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYW5pbWF0ZSwgc3RhdGUsIHN0eWxlLCB0cmFuc2l0aW9uLCB0cmlnZ2VyIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IE54RXhwYW5kYWJsZVRhYmxlUm93Q29tcG9uZW50IH0gZnJvbSAnLi9leHBhbmRhYmxlLXRhYmxlLXJvdy5jb21wb25lbnQnO1xuXG4vKipcbiAqIFRoaXMgaXMgYW4gZXhwYW5kYWJsZSB0YWJsZSBjZWxsLlxuICogT25seSB3b3JrcyBpbiBjb25qdW5jdGlvbiB3aXRoIHRoZSBgW254RXhwYW5kYWJsZVRhYmxlUm93XWAgY29tcG9uZW50LlxuICovXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3RkW254RXhwYW5kYWJsZVRhYmxlQ2VsbF0nLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9leHBhbmRhYmxlLXRhYmxlLWNlbGwuY29tcG9uZW50Lmh0bWwnLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgY2xhc3M6ICdueC1leHBhbmRhYmxlLXRhYmxlLWNlbGwnLFxuICAgIH0sXG4gICAgYW5pbWF0aW9uczogW1xuICAgICAgICB0cmlnZ2VyKCdvcGVuQ2xvc2UnLCBbXG4gICAgICAgICAgICBzdGF0ZShcbiAgICAgICAgICAgICAgICAnb3BlbicsXG4gICAgICAgICAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICcqJyxcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogJ3Zpc2libGUnLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHN0YXRlKFxuICAgICAgICAgICAgICAgICdjbG9zZWQsIHZvaWQnLFxuICAgICAgICAgICAgICAgIHN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnMCcsXG4gICAgICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nLCAvLyB2aXNpYmlsaXR5IGFuZCBoZWlnaHQgdG8gdG9nZ2xlIGluc3RlYWQgb2YgZGlzcGxheTogbm9uZSB0byBwcmV2ZW50IGNlbGwgd2lkdGgganVtcGluZ1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHRyYW5zaXRpb24oJ2Nsb3NlZCA8PT4gb3Blbiwgdm9pZCA9PiBjbG9zZWQnLCBbYW5pbWF0ZSgnMjI1bXMgY3ViaWMtYmV6aWVyKDAuNCwwLjAsMC4yLDEpJyldKSxcbiAgICAgICAgXSksXG4gICAgXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgTnhFeHBhbmRhYmxlVGFibGVDZWxsQ29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBfb3BlbiA9IGZhbHNlO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBfZGVzdHJveWVkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICAgIGNvbnN0cnVjdG9yKF9yb3c6IE54RXhwYW5kYWJsZVRhYmxlUm93Q29tcG9uZW50LCBwcml2YXRlIF9jZHI6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gICAgICAgIF9yb3cuZXhwYW5kZWQucGlwZSh0YWtlVW50aWwodGhpcy5fZGVzdHJveWVkKSkuc3Vic2NyaWJlKG9wZW4gPT4ge1xuICAgICAgICAgICAgdGhpcy5fb3BlbiA9IG9wZW47XG4gICAgICAgICAgICB0aGlzLl9jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLl9kZXN0cm95ZWQubmV4dCgpO1xuICAgICAgICB0aGlzLl9kZXN0cm95ZWQuY29tcGxldGUoKTtcbiAgICB9XG59XG4iLCI8ZGl2IFtAb3BlbkNsb3NlXT1cIl9vcGVuID8gJ29wZW4nIDogJ2Nsb3NlZCdcIiBjbGFzcz1cIm54LWV4cGFuZGFibGUtdGFibGUtY2VsbF9fY29udGVudFwiPlxuICAgIDxkaXYgY2xhc3M9XCJueC1leHBhbmRhYmxlLXRhYmxlLWNlbGxfX3dyYXBwZXJcIj5cbiAgICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICAgIDwvZGl2PlxuPC9kaXY+XG4iXX0=