import { ChangeDetectionStrategy, Component, Input, ViewChild } from '@angular/core';
import { Subscription } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/a11y";
import * as i2 from "@aposin/ng-aquila/icon";
/**
 * This toggle button can be clicked and toggles expandable elements.
 * e.g. it can toggle a expandable table row or anything else that implements the `NxExpandable` interface.
 */
export class NxToggleButtonComponent {
    constructor(_cdr, _focusMonitor) {
        this._cdr = _cdr;
        this._focusMonitor = _focusMonitor;
        this._expanded = false;
        this._ariaLabel = '';
        this._subscription = Subscription.EMPTY;
    }
    /**
     * This is the expandable target that will be toggled when the user clicks the button.
     */
    set target(value) {
        this._target = value;
        this._subscription?.unsubscribe();
        if (this._target) {
            this._subscription = this._target.expanded.subscribe(expanded => {
                this._expanded = expanded;
                this._cdr.markForCheck();
            });
        }
    }
    set ariaLabel(value) {
        this._ariaLabel = value;
        this._cdr.markForCheck();
    }
    ngAfterViewInit() {
        this._focusMonitor.monitor(this._buttonElement);
    }
    _onClick() {
        if (this._target) {
            this._target.toggle();
        }
    }
    ngOnDestroy() {
        this._subscription?.unsubscribe();
        this._focusMonitor.stopMonitoring(this._buttonElement);
    }
}
NxToggleButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxToggleButtonComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });
NxToggleButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxToggleButtonComponent, selector: "nx-toggle-button", inputs: { target: "target", ariaLabel: "ariaLabel" }, viewQueries: [{ propertyName: "_buttonElement", first: true, predicate: ["button"], descendants: true }], ngImport: i0, template: "<button #button (click)=\"_onClick()\" class=\"nx-toggle-button\" [attr.aria-label]=\"_ariaLabel\" [attr.aria-expanded]=\"_expanded\" [class.is-expanded]=\"_expanded\">\n    <nx-icon name=\"chevron-down\" aria-hidden=\"true\" size=\"s\" class=\"nx-toggle-button__icon\"></nx-icon>\n</button>\n", styles: [":host{display:block}.nx-toggle-button{display:block;cursor:pointer;-webkit-appearance:none;appearance:none;border:none;outline:none;background:none;padding:0;line-height:24px;height:24px}.nx-toggle-button .nx-toggle-button__icon{transform:rotate(0);transition:transform .2s ease;color:var(--expandable-table-arrow-icon-color)}.nx-toggle-button.is-expanded .nx-toggle-button__icon{transform:rotate(-180deg)}.nx-toggle-button::-moz-focus-inner{border:0}.nx-toggle-button.cdk-keyboard-focused{border-radius:4px;box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-toggle-button.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}\n"], components: [{ type: i2.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxToggleButtonComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-toggle-button', changeDetection: ChangeDetectionStrategy.OnPush, template: "<button #button (click)=\"_onClick()\" class=\"nx-toggle-button\" [attr.aria-label]=\"_ariaLabel\" [attr.aria-expanded]=\"_expanded\" [class.is-expanded]=\"_expanded\">\n    <nx-icon name=\"chevron-down\" aria-hidden=\"true\" size=\"s\" class=\"nx-toggle-button__icon\"></nx-icon>\n</button>\n", styles: [":host{display:block}.nx-toggle-button{display:block;cursor:pointer;-webkit-appearance:none;appearance:none;border:none;outline:none;background:none;padding:0;line-height:24px;height:24px}.nx-toggle-button .nx-toggle-button__icon{transform:rotate(0);transition:transform .2s ease;color:var(--expandable-table-arrow-icon-color)}.nx-toggle-button.is-expanded .nx-toggle-button__icon{transform:rotate(-180deg)}.nx-toggle-button::-moz-focus-inner{border:0}.nx-toggle-button.cdk-keyboard-focused{border-radius:4px;box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-toggle-button.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.FocusMonitor }]; }, propDecorators: { _buttonElement: [{
                type: ViewChild,
                args: ['button']
            }], target: [{
                type: Input
            }], ariaLabel: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xlLWJ1dHRvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1hcXVpbGEvc3JjL3RhYmxlL2V4cGFuZGFibGUvdG9nZ2xlLWJ1dHRvbi5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1hcXVpbGEvc3JjL3RhYmxlL2V4cGFuZGFibGUvdG9nZ2xlLWJ1dHRvbi5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQWlCLHVCQUF1QixFQUFxQixTQUFTLEVBQWMsS0FBSyxFQUFhLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5SSxPQUFPLEVBQW1CLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQzs7OztBQWdCckQ7OztHQUdHO0FBT0gsTUFBTSxPQUFPLHVCQUF1QjtJQWdDaEMsWUFBb0IsSUFBdUIsRUFBVSxhQUEyQjtRQUE1RCxTQUFJLEdBQUosSUFBSSxDQUFtQjtRQUFVLGtCQUFhLEdBQWIsYUFBYSxDQUFjO1FBL0JoRixjQUFTLEdBQUcsS0FBSyxDQUFDO1FBMkJsQixlQUFVLEdBQUcsRUFBRSxDQUFDO1FBRVIsa0JBQWEsR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDO0lBRXdDLENBQUM7SUEzQnBGOztPQUVHO0lBQ0gsSUFDSSxNQUFNLENBQUMsS0FBbUI7UUFDMUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFFckIsSUFBSSxDQUFDLGFBQWEsRUFBRSxXQUFXLEVBQUUsQ0FBQztRQUVsQyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDZCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDNUQsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7Z0JBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDN0IsQ0FBQyxDQUFDLENBQUM7U0FDTjtJQUNMLENBQUM7SUFHRCxJQUNJLFNBQVMsQ0FBQyxLQUFhO1FBQ3ZCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQU9ELGVBQWU7UUFDWCxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELFFBQVE7UUFDSixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDZCxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ3pCO0lBQ0wsQ0FBQztJQUVELFdBQVc7UUFDUCxJQUFJLENBQUMsYUFBYSxFQUFFLFdBQVcsRUFBRSxDQUFDO1FBQ2xDLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUMzRCxDQUFDOztvSEEvQ1EsdUJBQXVCO3dHQUF2Qix1QkFBdUIsd05DNUJwQyx1U0FHQTsyRkR5QmEsdUJBQXVCO2tCQU5uQyxTQUFTOytCQUNJLGtCQUFrQixtQkFHWCx1QkFBdUIsQ0FBQyxNQUFNO21JQUsxQixjQUFjO3NCQUFsQyxTQUFTO3VCQUFDLFFBQVE7Z0JBTWYsTUFBTTtzQkFEVCxLQUFLO2dCQWdCRixTQUFTO3NCQURaLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb2N1c01vbml0b3IgfSBmcm9tICdAYW5ndWxhci9jZGsvYTExeSc7XG5pbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIE9uRGVzdHJveSwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE54RXhwYW5kYWJsZSB7XG4gICAgLyoqIEluZGljYXRlcyBpZiB0aGlzIGV4cGFuZGFibGUgaW5zdGFuY2UgaXMgb3BlbiBvciBub3QuICAqL1xuICAgIGV4cGFuZGVkOiBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj47XG5cbiAgICAvKiogVG9nZ2xlcyB0aGUgb3BlbiBzdGF0ZS4gKi9cbiAgICB0b2dnbGUoKTogdm9pZDtcblxuICAgIC8qKiBFeHBhbmRzIHRoaXMgY29tcG9uZW50LiAqL1xuICAgIGV4cGFuZCgpOiB2b2lkO1xuXG4gICAgLyoqIENsb3NlcyB0aGlzIGNvbXBvbmVudC4gKi9cbiAgICBjbG9zZSgpOiB2b2lkO1xufVxuXG4vKipcbiAqIFRoaXMgdG9nZ2xlIGJ1dHRvbiBjYW4gYmUgY2xpY2tlZCBhbmQgdG9nZ2xlcyBleHBhbmRhYmxlIGVsZW1lbnRzLlxuICogZS5nLiBpdCBjYW4gdG9nZ2xlIGEgZXhwYW5kYWJsZSB0YWJsZSByb3cgb3IgYW55dGhpbmcgZWxzZSB0aGF0IGltcGxlbWVudHMgdGhlIGBOeEV4cGFuZGFibGVgIGludGVyZmFjZS5cbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdueC10b2dnbGUtYnV0dG9uJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vdG9nZ2xlLWJ1dHRvbi5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vdG9nZ2xlLWJ1dHRvbi5zY3NzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIE54VG9nZ2xlQnV0dG9uQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgICBfZXhwYW5kZWQgPSBmYWxzZTtcblxuICAgIEBWaWV3Q2hpbGQoJ2J1dHRvbicpIF9idXR0b25FbGVtZW50ITogRWxlbWVudFJlZjtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgdGhlIGV4cGFuZGFibGUgdGFyZ2V0IHRoYXQgd2lsbCBiZSB0b2dnbGVkIHdoZW4gdGhlIHVzZXIgY2xpY2tzIHRoZSBidXR0b24uXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBzZXQgdGFyZ2V0KHZhbHVlOiBOeEV4cGFuZGFibGUpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0ID0gdmFsdWU7XG5cbiAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uPy51bnN1YnNjcmliZSgpO1xuXG4gICAgICAgIGlmICh0aGlzLl90YXJnZXQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbiA9IHRoaXMuX3RhcmdldC5leHBhbmRlZC5zdWJzY3JpYmUoZXhwYW5kZWQgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX2V4cGFuZGVkID0gZXhwYW5kZWQ7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3RhcmdldCE6IE54RXhwYW5kYWJsZTtcblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IGFyaWFMYWJlbCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX2FyaWFMYWJlbCA9IHZhbHVlO1xuICAgICAgICB0aGlzLl9jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuICAgIF9hcmlhTGFiZWwgPSAnJztcblxuICAgIHByaXZhdGUgX3N1YnNjcmlwdGlvbiA9IFN1YnNjcmlwdGlvbi5FTVBUWTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX2NkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIHByaXZhdGUgX2ZvY3VzTW9uaXRvcjogRm9jdXNNb25pdG9yKSB7fVxuXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAgICB0aGlzLl9mb2N1c01vbml0b3IubW9uaXRvcih0aGlzLl9idXR0b25FbGVtZW50KTtcbiAgICB9XG5cbiAgICBfb25DbGljaygpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RhcmdldCkge1xuICAgICAgICAgICAgdGhpcy5fdGFyZ2V0LnRvZ2dsZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbj8udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5fZm9jdXNNb25pdG9yLnN0b3BNb25pdG9yaW5nKHRoaXMuX2J1dHRvbkVsZW1lbnQpO1xuICAgIH1cbn1cbiIsIjxidXR0b24gI2J1dHRvbiAoY2xpY2spPVwiX29uQ2xpY2soKVwiIGNsYXNzPVwibngtdG9nZ2xlLWJ1dHRvblwiIFthdHRyLmFyaWEtbGFiZWxdPVwiX2FyaWFMYWJlbFwiIFthdHRyLmFyaWEtZXhwYW5kZWRdPVwiX2V4cGFuZGVkXCIgW2NsYXNzLmlzLWV4cGFuZGVkXT1cIl9leHBhbmRlZFwiPlxuICAgIDxueC1pY29uIG5hbWU9XCJjaGV2cm9uLWRvd25cIiBhcmlhLWhpZGRlbj1cInRydWVcIiBzaXplPVwic1wiIGNsYXNzPVwibngtdG9nZ2xlLWJ1dHRvbl9faWNvblwiPjwvbngtaWNvbj5cbjwvYnV0dG9uPlxuIl19