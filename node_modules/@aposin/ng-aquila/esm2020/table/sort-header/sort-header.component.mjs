import { ENTER, SPACE } from '@angular/cdk/keycodes';
import { ChangeDetectionStrategy, Component, Input, Optional, ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./sort.directive";
import * as i2 from "./sort-header-intl";
import * as i3 from "@angular/cdk/a11y";
import * as i4 from "@aposin/ng-aquila/icon";
export class NxSortHeaderComponent {
    constructor(_sort, _intl, _cdr, _focusMonitor) {
        this._intl = _intl;
        this._cdr = _cdr;
        this._focusMonitor = _focusMonitor;
        this._destroyed = new Subject();
        if (!_sort) {
            throw new Error(`NxTable: Using the 'nxSortHeaderCell' component requires the 'nxSort' directive on containing table.`);
        }
        this._sort = _sort;
        this._intl.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._cdr.markForCheck());
    }
    /** Sets the key of this sort header. */
    set key(value) {
        if (this._key !== value) {
            this._key = value;
        }
    }
    get key() {
        return this._key;
    }
    ngOnInit() {
        this._sort._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {
            this._cdr.markForCheck();
        });
    }
    ngAfterViewInit() {
        this._focusMonitor.monitor(this._focusContainer);
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this._focusMonitor.stopMonitoring(this._focusContainer);
    }
    _handleClick() {
        this._sort.sort(this._key);
    }
    _onKeydown($event) {
        if ($event && ($event.keyCode === ENTER || $event.keyCode === SPACE)) {
            this._sort.sort(this._key);
            // prevent page from scrolling down
            if ($event.keyCode === SPACE) {
                $event.preventDefault();
            }
        }
    }
    _isSortedAscending() {
        return this._sort.active === this._key && this._sort.direction === 'asc';
    }
    _isSortedDescending() {
        return this._sort.active === this._key && this._sort.direction === 'desc';
    }
    _getAriaLabel() {
        if (this._sort.active === this._key) {
            if (this._sort.direction === 'asc') {
                return `${this._intl.sortedAscendingAriaLabel}`;
            }
            return `${this._intl.sortedDescendingAriaLabel}`;
        }
        return '';
    }
    _getTitle() {
        if (this._sort.active === this._key && this._sort.direction === 'asc') {
            return `${this._intl.sortDescendingAriaLabel}`;
        }
        return `${this._intl.sortAscendingAriaLabel}`;
    }
}
NxSortHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSortHeaderComponent, deps: [{ token: i1.NxSortDirective, optional: true }, { token: i2.NxSortHeaderIntl }, { token: i0.ChangeDetectorRef }, { token: i3.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });
NxSortHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxSortHeaderComponent, selector: "th[nxSortHeaderCell]", inputs: { key: ["nxSortHeaderCell", "key"] }, host: { listeners: { "click": "_handleClick()", "keydown": "_onKeydown($event)" } }, viewQueries: [{ propertyName: "_focusContainer", first: true, predicate: ["focusContainer"], descendants: true }], exportAs: ["nxSortHeaderComponent"], ngImport: i0, template: "<div #focusContainer class=\"nx-sort-header__focus-container\" role=\"button\" tabindex=\"0\" [title]=\"_getTitle()\" aria-live=\"polite\">\n    <div class=\"nx-sort-header__icons-container\" [attr.aria-label]=\"_getAriaLabel()\">\n        <nx-icon name=\"chevron-up-small\" class=\"nx-sort-header__icon-up\" [class.nx-sort-header__hidden-icon]=\"_isSortedDescending()\"> </nx-icon>\n        <nx-icon name=\"chevron-down-small\" class=\"nx-sort-header__icon-down\" [class.nx-sort-header__hidden-icon]=\"_isSortedAscending()\"> </nx-icon>\n    </div>\n\n    <ng-content></ng-content>\n</div>\n", styles: [":host{cursor:pointer}.nx-sort-header__icons-container{display:inline-block;margin-right:16px;vertical-align:bottom;width:9px;position:relative}:host-context([dir=rtl]) .nx-sort-header__icons-container{margin-right:0;margin-right:initial;margin-left:16px}.nx-sort-header__icons-container nx-icon{font-size:20px;position:absolute;font-weight:600;width:9px}.nx-sort-header__icons-container .nx-sort-header__icon-up{top:-4px}.nx-sort-header__icons-container .nx-sort-header__icon-down{top:5px}.nx-sort-header__icons-container .nx-sort-header__hidden-icon{visibility:hidden}.nx-sort-header__focus-container{display:flex}.nx-sort-header__focus-container:focus{outline:0}.nx-sort-header__focus-container:focus.cdk-keyboard-focused{box-shadow:var(--focus-box-shadow);border-radius:4px}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-sort-header__focus-container:focus.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}@media screen and (-ms-high-contrast: active){.nx-sort-header__focus-container{color:buttonText}}\n"], components: [{ type: i4.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSortHeaderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'th[nxSortHeaderCell]', exportAs: 'nxSortHeaderComponent', host: {
                        '(click)': '_handleClick()',
                        '(keydown)': '_onKeydown($event)',
                    }, changeDetection: ChangeDetectionStrategy.OnPush, template: "<div #focusContainer class=\"nx-sort-header__focus-container\" role=\"button\" tabindex=\"0\" [title]=\"_getTitle()\" aria-live=\"polite\">\n    <div class=\"nx-sort-header__icons-container\" [attr.aria-label]=\"_getAriaLabel()\">\n        <nx-icon name=\"chevron-up-small\" class=\"nx-sort-header__icon-up\" [class.nx-sort-header__hidden-icon]=\"_isSortedDescending()\"> </nx-icon>\n        <nx-icon name=\"chevron-down-small\" class=\"nx-sort-header__icon-down\" [class.nx-sort-header__hidden-icon]=\"_isSortedAscending()\"> </nx-icon>\n    </div>\n\n    <ng-content></ng-content>\n</div>\n", styles: [":host{cursor:pointer}.nx-sort-header__icons-container{display:inline-block;margin-right:16px;vertical-align:bottom;width:9px;position:relative}:host-context([dir=rtl]) .nx-sort-header__icons-container{margin-right:0;margin-right:initial;margin-left:16px}.nx-sort-header__icons-container nx-icon{font-size:20px;position:absolute;font-weight:600;width:9px}.nx-sort-header__icons-container .nx-sort-header__icon-up{top:-4px}.nx-sort-header__icons-container .nx-sort-header__icon-down{top:5px}.nx-sort-header__icons-container .nx-sort-header__hidden-icon{visibility:hidden}.nx-sort-header__focus-container{display:flex}.nx-sort-header__focus-container:focus{outline:0}.nx-sort-header__focus-container:focus.cdk-keyboard-focused{box-shadow:var(--focus-box-shadow);border-radius:4px}@media screen and (-ms-high-contrast: active),(forced-colors: active){.nx-sort-header__focus-container:focus.cdk-keyboard-focused{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}@media screen and (-ms-high-contrast: active){.nx-sort-header__focus-container{color:buttonText}}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.NxSortDirective, decorators: [{
                    type: Optional
                }] }, { type: i2.NxSortHeaderIntl }, { type: i0.ChangeDetectorRef }, { type: i3.FocusMonitor }]; }, propDecorators: { _focusContainer: [{
                type: ViewChild,
                args: ['focusContainer']
            }], key: [{
                type: Input,
                args: ['nxSortHeaderCell']
            }] } });
//# sourceMappingURL=data:application/json;base64,