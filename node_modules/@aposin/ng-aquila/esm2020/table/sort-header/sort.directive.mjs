import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class SortEvent {
    constructor(active, direction) {
        this.active = active;
        this.direction = direction;
    }
}
export class NxSortDirective {
    constructor() {
        this._stateChanges = new Subject();
        this._direction = 'asc';
        /**
         * @docs-private
         * An event emitted when the active value has changed.
         */
        this.activeChange = new EventEmitter();
        /**
         * @docs-private
         * An event emitted when the direction value has changed.
         */
        this.directionChange = new EventEmitter();
        /** An event emitted when either the active sort or sort direction changes. */
        this.sortChange = new EventEmitter();
    }
    /** Sets the key of the most recently sorted column. */
    set active(value) {
        if (this._active !== value) {
            this._active = value;
            this.sortChange.emit(new SortEvent(this.active, this.direction));
            this._stateChanges.next();
        }
    }
    get active() {
        return this._active;
    }
    /** Sets the direction of the currently active sorted column. Default: 'asc'. */
    set direction(value) {
        if (this._direction !== value) {
            this._direction = value;
            this.sortChange.emit(new SortEvent(this.active, this.direction));
            this._stateChanges.next();
        }
    }
    get direction() {
        return this._direction;
    }
    ngOnDestroy() {
        this._stateChanges.complete();
    }
    /**
     * Sets the active sort key and determines the new sort direction.
     * Afterwards the output event `sortChange` is called.
     *
     * If `sortable` is not the key of the active sort header, the initial direction to sort is 'asc'.
     * Otherwise the direction of the sorted column changes.
     */
    sort(sortable) {
        if (this._active !== sortable) {
            this._active = sortable;
            this.activeChange.emit(this.active);
            this._direction = 'asc';
            this.directionChange.emit(this.direction);
        }
        else if (this._direction === 'asc') {
            this._direction = 'desc';
            this.directionChange.emit(this.direction);
        }
        else {
            this._direction = 'asc';
            this.directionChange.emit(this.direction);
        }
        this.sortChange.emit(new SortEvent(this.active, this.direction));
        this._stateChanges.next();
    }
}
NxSortDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSortDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NxSortDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxSortDirective, selector: "table[nxSort]", inputs: { active: "active", direction: "direction" }, outputs: { activeChange: "activeChange", directionChange: "directionChange", sortChange: "sortChange" }, exportAs: ["NxSortDirective"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxSortDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'table[nxSort]',
                    exportAs: 'NxSortDirective',
                }]
        }], propDecorators: { active: [{
                type: Input
            }], direction: [{
                type: Input
            }], activeChange: [{
                type: Output
            }], directionChange: [{
                type: Output
            }], sortChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1hcXVpbGEvc3JjL3RhYmxlL3NvcnQtaGVhZGVyL3NvcnQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBYSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEYsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFJL0IsTUFBTSxPQUFPLFNBQVM7SUFPbEIsWUFBWSxNQUFjLEVBQUUsU0FBd0I7UUFDaEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDL0IsQ0FBQztDQUNKO0FBTUQsTUFBTSxPQUFPLGVBQWU7SUFKNUI7UUFLYSxrQkFBYSxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7UUFpQnJDLGVBQVUsR0FBa0IsS0FBSyxDQUFDO1FBZTFDOzs7V0FHRztRQUNnQixpQkFBWSxHQUF5QixJQUFJLFlBQVksRUFBVSxDQUFDO1FBRW5GOzs7V0FHRztRQUNnQixvQkFBZSxHQUFnQyxJQUFJLFlBQVksRUFBaUIsQ0FBQztRQUVwRyw4RUFBOEU7UUFDM0QsZUFBVSxHQUE0QixJQUFJLFlBQVksRUFBYSxDQUFDO0tBOEIxRjtJQXZFRyx1REFBdUQ7SUFDdkQsSUFDSSxNQUFNLENBQUMsS0FBYTtRQUNwQixJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssS0FBSyxFQUFFO1lBQ3hCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1lBQ3JCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDakUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUM3QjtJQUNMLENBQUM7SUFDRCxJQUFJLE1BQU07UUFDTixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDeEIsQ0FBQztJQUlELGdGQUFnRjtJQUNoRixJQUNJLFNBQVMsQ0FBQyxLQUFvQjtRQUM5QixJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssS0FBSyxFQUFFO1lBQzNCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1lBQ3hCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDakUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUM3QjtJQUNMLENBQUM7SUFDRCxJQUFJLFNBQVM7UUFDVCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDM0IsQ0FBQztJQWlCRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsSUFBSSxDQUFDLFFBQWdCO1FBQ2pCLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxRQUFRLEVBQUU7WUFDM0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUM7WUFDeEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3BDLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1lBQ3hCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUM3QzthQUFNLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxLQUFLLEVBQUU7WUFDbEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7WUFDekIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQzdDO2FBQU07WUFDSCxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztZQUN4QixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDN0M7UUFFRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ2pFLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDOUIsQ0FBQzs7NEdBM0VRLGVBQWU7Z0dBQWYsZUFBZTsyRkFBZixlQUFlO2tCQUozQixTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxlQUFlO29CQUN6QixRQUFRLEVBQUUsaUJBQWlCO2lCQUM5Qjs4QkFRTyxNQUFNO3NCQURULEtBQUs7Z0JBZ0JGLFNBQVM7c0JBRFosS0FBSztnQkFnQmEsWUFBWTtzQkFBOUIsTUFBTTtnQkFNWSxlQUFlO3NCQUFqQyxNQUFNO2dCQUdZLFVBQVU7c0JBQTVCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uRGVzdHJveSwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCB0eXBlIFNvcnREaXJlY3Rpb24gPSAnYXNjJyB8ICdkZXNjJztcblxuZXhwb3J0IGNsYXNzIFNvcnRFdmVudCB7XG4gICAgLyoqIFRoZSBuYW1lIG9mIHRoZSBjb2x1bW4gdGhhdCBpcyBiZWluZyBzb3J0ZWQgYnkuICovXG4gICAgYWN0aXZlOiBzdHJpbmc7XG5cbiAgICAvKiogVGhlIHNvcnQgZGlyZWN0aW9uLiAqL1xuICAgIGRpcmVjdGlvbjogU29ydERpcmVjdGlvbjtcblxuICAgIGNvbnN0cnVjdG9yKGFjdGl2ZTogc3RyaW5nLCBkaXJlY3Rpb246IFNvcnREaXJlY3Rpb24pIHtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBhY3RpdmU7XG4gICAgICAgIHRoaXMuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuICAgIH1cbn1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICd0YWJsZVtueFNvcnRdJyxcbiAgICBleHBvcnRBczogJ054U29ydERpcmVjdGl2ZScsXG59KVxuZXhwb3J0IGNsYXNzIE54U29ydERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgcmVhZG9ubHkgX3N0YXRlQ2hhbmdlcyA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgICBwcml2YXRlIF9hY3RpdmUhOiBzdHJpbmc7XG5cbiAgICAvKiogU2V0cyB0aGUga2V5IG9mIHRoZSBtb3N0IHJlY2VudGx5IHNvcnRlZCBjb2x1bW4uICovXG4gICAgQElucHV0KClcbiAgICBzZXQgYWN0aXZlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZSA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5zb3J0Q2hhbmdlLmVtaXQobmV3IFNvcnRFdmVudCh0aGlzLmFjdGl2ZSwgdGhpcy5kaXJlY3Rpb24pKTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQ2hhbmdlcy5uZXh0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGFjdGl2ZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZlO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2RpcmVjdGlvbjogU29ydERpcmVjdGlvbiA9ICdhc2MnO1xuXG4gICAgLyoqIFNldHMgdGhlIGRpcmVjdGlvbiBvZiB0aGUgY3VycmVudGx5IGFjdGl2ZSBzb3J0ZWQgY29sdW1uLiBEZWZhdWx0OiAnYXNjJy4gKi9cbiAgICBASW5wdXQoKVxuICAgIHNldCBkaXJlY3Rpb24odmFsdWU6IFNvcnREaXJlY3Rpb24pIHtcbiAgICAgICAgaWYgKHRoaXMuX2RpcmVjdGlvbiAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX2RpcmVjdGlvbiA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5zb3J0Q2hhbmdlLmVtaXQobmV3IFNvcnRFdmVudCh0aGlzLmFjdGl2ZSwgdGhpcy5kaXJlY3Rpb24pKTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQ2hhbmdlcy5uZXh0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGRpcmVjdGlvbigpOiBTb3J0RGlyZWN0aW9uIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RpcmVjdGlvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAZG9jcy1wcml2YXRlXG4gICAgICogQW4gZXZlbnQgZW1pdHRlZCB3aGVuIHRoZSBhY3RpdmUgdmFsdWUgaGFzIGNoYW5nZWQuXG4gICAgICovXG4gICAgQE91dHB1dCgpIHJlYWRvbmx5IGFjdGl2ZUNoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz4gPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcblxuICAgIC8qKlxuICAgICAqIEBkb2NzLXByaXZhdGVcbiAgICAgKiBBbiBldmVudCBlbWl0dGVkIHdoZW4gdGhlIGRpcmVjdGlvbiB2YWx1ZSBoYXMgY2hhbmdlZC5cbiAgICAgKi9cbiAgICBAT3V0cHV0KCkgcmVhZG9ubHkgZGlyZWN0aW9uQ2hhbmdlOiBFdmVudEVtaXR0ZXI8U29ydERpcmVjdGlvbj4gPSBuZXcgRXZlbnRFbWl0dGVyPFNvcnREaXJlY3Rpb24+KCk7XG5cbiAgICAvKiogQW4gZXZlbnQgZW1pdHRlZCB3aGVuIGVpdGhlciB0aGUgYWN0aXZlIHNvcnQgb3Igc29ydCBkaXJlY3Rpb24gY2hhbmdlcy4gKi9cbiAgICBAT3V0cHV0KCkgcmVhZG9ubHkgc29ydENoYW5nZTogRXZlbnRFbWl0dGVyPFNvcnRFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyPFNvcnRFdmVudD4oKTtcblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLl9zdGF0ZUNoYW5nZXMuY29tcGxldGUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBhY3RpdmUgc29ydCBrZXkgYW5kIGRldGVybWluZXMgdGhlIG5ldyBzb3J0IGRpcmVjdGlvbi5cbiAgICAgKiBBZnRlcndhcmRzIHRoZSBvdXRwdXQgZXZlbnQgYHNvcnRDaGFuZ2VgIGlzIGNhbGxlZC5cbiAgICAgKlxuICAgICAqIElmIGBzb3J0YWJsZWAgaXMgbm90IHRoZSBrZXkgb2YgdGhlIGFjdGl2ZSBzb3J0IGhlYWRlciwgdGhlIGluaXRpYWwgZGlyZWN0aW9uIHRvIHNvcnQgaXMgJ2FzYycuXG4gICAgICogT3RoZXJ3aXNlIHRoZSBkaXJlY3Rpb24gb2YgdGhlIHNvcnRlZCBjb2x1bW4gY2hhbmdlcy5cbiAgICAgKi9cbiAgICBzb3J0KHNvcnRhYmxlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZSAhPT0gc29ydGFibGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZSA9IHNvcnRhYmxlO1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVDaGFuZ2UuZW1pdCh0aGlzLmFjdGl2ZSk7XG4gICAgICAgICAgICB0aGlzLl9kaXJlY3Rpb24gPSAnYXNjJztcbiAgICAgICAgICAgIHRoaXMuZGlyZWN0aW9uQ2hhbmdlLmVtaXQodGhpcy5kaXJlY3Rpb24pO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2RpcmVjdGlvbiA9PT0gJ2FzYycpIHtcbiAgICAgICAgICAgIHRoaXMuX2RpcmVjdGlvbiA9ICdkZXNjJztcbiAgICAgICAgICAgIHRoaXMuZGlyZWN0aW9uQ2hhbmdlLmVtaXQodGhpcy5kaXJlY3Rpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZGlyZWN0aW9uID0gJ2FzYyc7XG4gICAgICAgICAgICB0aGlzLmRpcmVjdGlvbkNoYW5nZS5lbWl0KHRoaXMuZGlyZWN0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc29ydENoYW5nZS5lbWl0KG5ldyBTb3J0RXZlbnQodGhpcy5hY3RpdmUsIHRoaXMuZGlyZWN0aW9uKSk7XG4gICAgICAgIHRoaXMuX3N0YXRlQ2hhbmdlcy5uZXh0KCk7XG4gICAgfVxufVxuIl19