import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { SPACE } from '@angular/cdk/keycodes';
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * This is a table row.
 */
export class NxTableRowComponent {
    constructor(_cdr, _elementRef) {
        this._cdr = _cdr;
        this._elementRef = _elementRef;
        this._selectable = false;
        this._selected = false;
        this.select = new EventEmitter();
    }
    /** Whether this table row is selectable */
    set selectable(value) {
        this._selectable = coerceBooleanProperty(value);
        this._cdr.markForCheck();
    }
    get selectable() {
        return this._selectable;
    }
    /** Whether this table row is selected */
    set selected(value) {
        this._selected = coerceBooleanProperty(value);
        this._cdr.markForCheck();
    }
    get selected() {
        return this._selected;
    }
    _onSelect($event) {
        if (!this._selectable || this.isSelectionPrevented($event)) {
            return;
        }
        if ($event.keyCode === SPACE) {
            $event.preventDefault();
        }
        this.select.emit();
    }
    /**
     * Checks if the event would trigger an action or if default action is prevented.
     * Returns `true` if a button, link, input or label are clicked.
     */
    isSelectionPrevented($event) {
        if ($event.defaultPrevented) {
            return true;
        }
        let parent = $event.target;
        while (parent && parent !== this._elementRef.nativeElement) {
            if (['A', 'INPUT', 'BUTTON', 'TEXTAREA'].includes(parent.tagName)) {
                return true;
            }
            else if (parent.tagName === 'LABEL' && parent.getAttribute('for')) {
                return true;
            }
            parent = parent.parentElement;
        }
        return false;
    }
}
NxTableRowComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTableRowComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
NxTableRowComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxTableRowComponent, selector: "tr[nxTableRow]", inputs: { selectable: "selectable", selected: "selected" }, outputs: { select: "select" }, host: { listeners: { "click": "_onSelect($event)", "keydown.space": "_onSelect($event)" }, properties: { "class.is-selected": "selected", "class.nx-table-row--selectable": "selectable", "attr.aria-selected": "selected" }, classAttribute: "nx-table-row" }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxTableRowComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tr[nxTableRow]',
                    host: {
                        class: 'nx-table-row',
                        '[class.is-selected]': 'selected',
                        '[class.nx-table-row--selectable]': 'selectable',
                        '[attr.aria-selected]': 'selected',
                        '(click)': '_onSelect($event)',
                        '(keydown.space)': '_onSelect($event)',
                    },
                    template: `<ng-content></ng-content>`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }]; }, propDecorators: { selectable: [{
                type: Input
            }], selected: [{
                type: Input
            }], select: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtcm93LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWFxdWlsYS9zcmMvdGFibGUvdGFibGUtcm93LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWdCLHFCQUFxQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDNUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzlDLE9BQU8sRUFBRSx1QkFBdUIsRUFBcUIsU0FBUyxFQUFjLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUUvSDs7R0FFRztBQWNILE1BQU0sT0FBTyxtQkFBbUI7SUEwQjVCLFlBQXNCLElBQXVCLEVBQVUsV0FBdUI7UUFBeEQsU0FBSSxHQUFKLElBQUksQ0FBbUI7UUFBVSxnQkFBVyxHQUFYLFdBQVcsQ0FBWTtRQWhCdEUsZ0JBQVcsR0FBRyxLQUFLLENBQUM7UUFXcEIsY0FBUyxHQUFHLEtBQUssQ0FBQztRQUcxQixXQUFNLEdBQXVCLElBQUksWUFBWSxFQUFFLENBQUM7SUFFaUMsQ0FBQztJQXpCbEYsMkNBQTJDO0lBQzNDLElBQ0ksVUFBVSxDQUFDLEtBQW1CO1FBQzlCLElBQUksQ0FBQyxXQUFXLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBQ0QsSUFBSSxVQUFVO1FBQ1YsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzVCLENBQUM7SUFHRCx5Q0FBeUM7SUFDekMsSUFDSSxRQUFRLENBQUMsS0FBbUI7UUFDNUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFDRCxJQUFJLFFBQVE7UUFDUixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDMUIsQ0FBQztJQVFELFNBQVMsQ0FBQyxNQUFxQjtRQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDeEQsT0FBTztTQUNWO1FBRUQsSUFBSSxNQUFNLENBQUMsT0FBTyxLQUFLLEtBQUssRUFBRTtZQUMxQixNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDM0I7UUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7O09BR0c7SUFDSyxvQkFBb0IsQ0FBQyxNQUFhO1FBQ3RDLElBQUksTUFBTSxDQUFDLGdCQUFnQixFQUFFO1lBQ3pCLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFFRCxJQUFJLE1BQU0sR0FBZ0IsTUFBTSxDQUFDLE1BQXFCLENBQUM7UUFFdkQsT0FBTyxNQUFNLElBQUksTUFBTSxLQUFLLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFO1lBQ3hELElBQUksQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUMvRCxPQUFPLElBQUksQ0FBQzthQUNmO2lCQUFNLElBQUksTUFBTSxDQUFDLE9BQU8sS0FBSyxPQUFPLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDakUsT0FBTyxJQUFJLENBQUM7YUFDZjtZQUVELE1BQU0sR0FBRyxNQUFNLENBQUMsYUFBNEIsQ0FBQztTQUNoRDtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7O2dIQTlEUSxtQkFBbUI7b0dBQW5CLG1CQUFtQixpWkFIbEIsMkJBQTJCOzJGQUc1QixtQkFBbUI7a0JBYi9CLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIsSUFBSSxFQUFFO3dCQUNGLEtBQUssRUFBRSxjQUFjO3dCQUNyQixxQkFBcUIsRUFBRSxVQUFVO3dCQUNqQyxrQ0FBa0MsRUFBRSxZQUFZO3dCQUNoRCxzQkFBc0IsRUFBRSxVQUFVO3dCQUNsQyxTQUFTLEVBQUUsbUJBQW1CO3dCQUM5QixpQkFBaUIsRUFBRSxtQkFBbUI7cUJBQ3pDO29CQUNELFFBQVEsRUFBRSwyQkFBMkI7b0JBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2lCQUNsRDtpSUFJTyxVQUFVO3NCQURiLEtBQUs7Z0JBWUYsUUFBUTtzQkFEWCxLQUFLO2dCQVdOLE1BQU07c0JBREwsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvb2xlYW5JbnB1dCwgY29lcmNlQm9vbGVhblByb3BlcnR5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcbmltcG9ydCB7IFNQQUNFIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2tleWNvZGVzJztcbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBUaGlzIGlzIGEgdGFibGUgcm93LlxuICovXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3RyW254VGFibGVSb3ddJyxcbiAgICBob3N0OiB7XG4gICAgICAgIGNsYXNzOiAnbngtdGFibGUtcm93JyxcbiAgICAgICAgJ1tjbGFzcy5pcy1zZWxlY3RlZF0nOiAnc2VsZWN0ZWQnLFxuICAgICAgICAnW2NsYXNzLm54LXRhYmxlLXJvdy0tc2VsZWN0YWJsZV0nOiAnc2VsZWN0YWJsZScsXG4gICAgICAgICdbYXR0ci5hcmlhLXNlbGVjdGVkXSc6ICdzZWxlY3RlZCcsXG4gICAgICAgICcoY2xpY2spJzogJ19vblNlbGVjdCgkZXZlbnQpJyxcbiAgICAgICAgJyhrZXlkb3duLnNwYWNlKSc6ICdfb25TZWxlY3QoJGV2ZW50KScsXG4gICAgfSxcbiAgICB0ZW1wbGF0ZTogYDxuZy1jb250ZW50PjwvbmctY29udGVudD5gLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBOeFRhYmxlUm93Q29tcG9uZW50IHtcbiAgICAvKiogV2hldGhlciB0aGlzIHRhYmxlIHJvdyBpcyBzZWxlY3RhYmxlICovXG4gICAgQElucHV0KClcbiAgICBzZXQgc2VsZWN0YWJsZSh2YWx1ZTogQm9vbGVhbklucHV0KSB7XG4gICAgICAgIHRoaXMuX3NlbGVjdGFibGUgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgICAgICB0aGlzLl9jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuICAgIGdldCBzZWxlY3RhYmxlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0YWJsZTtcbiAgICB9XG4gICAgcHJpdmF0ZSBfc2VsZWN0YWJsZSA9IGZhbHNlO1xuXG4gICAgLyoqIFdoZXRoZXIgdGhpcyB0YWJsZSByb3cgaXMgc2VsZWN0ZWQgKi9cbiAgICBASW5wdXQoKVxuICAgIHNldCBzZWxlY3RlZCh2YWx1ZTogQm9vbGVhbklucHV0KSB7XG4gICAgICAgIHRoaXMuX3NlbGVjdGVkID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcbiAgICAgICAgdGhpcy5fY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgIH1cbiAgICBnZXQgc2VsZWN0ZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3RlZDtcbiAgICB9XG4gICAgcHJpdmF0ZSBfc2VsZWN0ZWQgPSBmYWxzZTtcblxuICAgIEBPdXRwdXQoKVxuICAgIHNlbGVjdDogRXZlbnRFbWl0dGVyPHZvaWQ+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIF9jZHI6IENoYW5nZURldGVjdG9yUmVmLCBwcml2YXRlIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7fVxuXG4gICAgX29uU2VsZWN0KCRldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICBpZiAoIXRoaXMuX3NlbGVjdGFibGUgfHwgdGhpcy5pc1NlbGVjdGlvblByZXZlbnRlZCgkZXZlbnQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJGV2ZW50LmtleUNvZGUgPT09IFNQQUNFKSB7XG4gICAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2VsZWN0LmVtaXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGV2ZW50IHdvdWxkIHRyaWdnZXIgYW4gYWN0aW9uIG9yIGlmIGRlZmF1bHQgYWN0aW9uIGlzIHByZXZlbnRlZC5cbiAgICAgKiBSZXR1cm5zIGB0cnVlYCBpZiBhIGJ1dHRvbiwgbGluaywgaW5wdXQgb3IgbGFiZWwgYXJlIGNsaWNrZWQuXG4gICAgICovXG4gICAgcHJpdmF0ZSBpc1NlbGVjdGlvblByZXZlbnRlZCgkZXZlbnQ6IEV2ZW50KSB7XG4gICAgICAgIGlmICgkZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcGFyZW50OiBIVE1MRWxlbWVudCA9ICRldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG5cbiAgICAgICAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQgIT09IHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKFsnQScsICdJTlBVVCcsICdCVVRUT04nLCAnVEVYVEFSRUEnXS5pbmNsdWRlcyhwYXJlbnQudGFnTmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyZW50LnRhZ05hbWUgPT09ICdMQUJFTCcgJiYgcGFyZW50LmdldEF0dHJpYnV0ZSgnZm9yJykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudEVsZW1lbnQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuIl19