import { Overlay, OverlayConfig } from '@angular/cdk/overlay';
import { ComponentPortal, TemplatePortal } from '@angular/cdk/portal';
import { Inject, Injectable, InjectionToken, Injector, Optional, SkipSelf, TemplateRef } from '@angular/core';
import { Subject } from 'rxjs';
import { NxOverlayConfig } from './overlay-config';
import { NxOverlayContainerComponent } from './overlay-container.component';
import { NxOverlayRef } from './overlay-ref';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
import * as i2 from "@angular/router";
import * as i3 from "./position-builder";
import * as i4 from "@angular/cdk/bidi";
/** Injection token that determines the scroll handling while a overlay is open. */
export const NX_OVERLAY_SCROLL_STRATEGY = new InjectionToken('nx-overlay-scroll-strategy');
/** @docs-private */
export function NX_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {
    return () => overlay.scrollStrategies.reposition();
}
/** @docs-private */
export const NX_OVERLAY_SCROLL_STRATEGY_PROVIDER = {
    provide: NX_OVERLAY_SCROLL_STRATEGY,
    useFactory: NX_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,
    deps: [Overlay],
};
export class NxOverlayService {
    constructor(_overlay, _injector, _router, _positionBuilder, _parentOverlayService, _dir, _defaultScrollStrategyFactory) {
        this._overlay = _overlay;
        this._injector = _injector;
        this._router = _router;
        this._positionBuilder = _positionBuilder;
        this._parentOverlayService = _parentOverlayService;
        this._dir = _dir;
        this._defaultScrollStrategyFactory = _defaultScrollStrategyFactory;
        this._afterAllClosedAtThisLevel = new Subject();
        this._afterOpenedAtThisLevel = new Subject();
        this._openOverlaysAtThisLevel = [];
        /** Strategy factory that will be used to handle scrolling while an overlay panel is open. */
        this._scrollStrategyFactory = this._defaultScrollStrategyFactory;
    }
    /** Keeps track of the currently-open overlays. */
    get openOverlays() {
        return this._parentOverlayService ? this._parentOverlayService.openOverlays : this._openOverlaysAtThisLevel;
    }
    /** The text direction of the containing app. */
    get dir() {
        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
    }
    /**
     * Opens a panel containing the given component and attaches it to an element.
     * @param componentOrTemplateRef Type of the component to load into the dialog,
     *     or a TemplateRef to instantiate as the panel content.
     * @param config Extra configuration options.
     * @returns Reference to the newly-opened panel.
     */
    open(componentOrTemplateRef, origin, config) {
        config = _applyConfigDefaults(config, new NxOverlayConfig());
        if (config.id && this.getOverlayById(config.id)) {
            throw Error(`Overlay with id "${config.id}" exists already. The overlay id must be unique.`);
        }
        const cdkOverlayRef = this._createOverlay(config, origin);
        const overlayContainer = this._attachOverlayContainer(cdkOverlayRef, config);
        const overlayRef = this._attachOverlayContent(componentOrTemplateRef, overlayContainer, cdkOverlayRef, config, origin);
        this.openOverlays.push(overlayRef);
        overlayRef.afterClosed().subscribe(() => this._removeOpenOverlay(overlayRef));
        if (config.triggerButton) {
            config.triggerButton.setTriggerActive();
        }
        return overlayRef;
    }
    /**
     * Finds an open overlay by its id.
     * @param id ID to use when looking up the overlay.
     */
    getOverlayById(id) {
        return this.openOverlays.find(overlay => overlay.id === id);
    }
    ngOnDestroy() {
        // Only close the overlays at this level on destroy
        // since the parent service may still be active.
        this._closeOverlays(this._openOverlaysAtThisLevel);
        this._afterAllClosedAtThisLevel.complete();
        this._afterOpenedAtThisLevel.complete();
    }
    /**
     * Creates the overlay into which the overlay will be loaded.
     * @param config The overlay configuration.
     * @returns A promise resolving to the OverlayRef for the created overlay.
     */
    _createOverlay(config, origin) {
        const overlayConfig = this._getOverlayConfig(config, origin);
        return this._overlay.create(overlayConfig);
    }
    /*
     **
     * Creates a CDK overlay configuration from the overlay service config.
     * @param overlayConfig The nx overlay service configuration.
     * @returns The CDK overlay configuration.
     */
    _getOverlayConfig(overlayConfig, origin) {
        const state = new OverlayConfig({
            positionStrategy: overlayConfig.positionStrategy || this._positionBuilder.createPositionStrategy(origin, overlayConfig),
            scrollStrategy: overlayConfig.scrollStrategy || this._scrollStrategyFactory(),
            panelClass: overlayConfig.panelClass,
            hasBackdrop: overlayConfig.hasBackdrop,
            width: overlayConfig.width,
            height: overlayConfig.height,
            minWidth: overlayConfig.minWidth,
            minHeight: overlayConfig.minHeight,
            maxWidth: overlayConfig.maxWidth,
            maxHeight: overlayConfig.maxHeight,
            disposeOnNavigation: overlayConfig.closeOnNavigation,
            direction: this.dir,
        });
        if (overlayConfig.backdropClass) {
            state.backdropClass = overlayConfig.backdropClass;
        }
        return state;
    }
    get isRtl() {
        return this._dir?.value === 'rtl';
    }
    /**
     * Attaches an NxOverlayContainer to the already-created overlay.
     * @param cdkOverlay Reference to the dialog's underlying overlay.
     * @param config The overlay configuration.
     * @returns A promise resolving to a ComponentRef for the attached container.
     */
    _attachOverlayContainer(cdkOverlay, config) {
        const userInjector = config?.viewContainerRef?.injector;
        const injector = Injector.create({
            parent: userInjector || this._injector,
            providers: [{ provide: NxOverlayConfig, useValue: config }],
        });
        const containerPortal = new ComponentPortal(NxOverlayContainerComponent, config.viewContainerRef, injector, config.componentFactoryResolver);
        const containerRef = cdkOverlay.attach(containerPortal);
        return containerRef.instance;
    }
    /**
     * Attaches the user-provided component to the already-created NxOverlayContainer.
     * @param componentOrTemplateRef The type of component being loaded into the dialog,
     *     or a TemplateRef to instantiate as the content.
     * @param overlayContainer Reference to the wrapping NxOverlayContainer.
     * @param cdkOverlayRef Reference to the overlay in which the overlay resides.
     * @param config The overlay configuration.
     * @returns A promise resolving to the NxOverlayRef that should be returned to the user.
     */
    _attachOverlayContent(componentOrTemplateRef, overlayContainer, cdkOverlayRef, config, origin) {
        // Create a reference to the overlay we're creating in order to give the user a handle
        // to modify and close it.
        const overlayRef = new NxOverlayRef(cdkOverlayRef, overlayContainer, origin, this._router, config.id);
        if (componentOrTemplateRef instanceof TemplateRef) {
            overlayContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, { $implicit: overlayRef }));
        }
        else {
            const injector = this._createInjector(config, overlayRef, overlayContainer);
            const contentRef = overlayContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));
            overlayRef.componentInstance = contentRef.instance;
        }
        return overlayRef;
    }
    /**
     * Creates a custom injector to be used inside the overlay. This allows a component loaded inside
     * of a overlay to close itself and, optionally, to return a value.
     * @param config Config object that is used to construct the overlay.
     * @param overlayRef Reference to the overlay.
     * @param container Overlay container element that wraps all of the contents.
     * @returns The custom injector that can be used inside the overlay.
     */
    _createInjector(config, overlayRef, overlayContainer) {
        const userInjector = config?.viewContainerRef?.injector;
        // The NxOverlayContainer is injected in the portal as the NxOverlayContainer and the overlays's
        // content are created out of the same ViewContainerRef and as such, are siblings for injector
        // purposes. To allow the hierarchy that is expected, the NxOverlayContainer is explicitly
        // added to the injection tokens.
        const providers = [
            { provide: NxOverlayContainerComponent, useValue: overlayContainer },
            { provide: NxOverlayRef, useValue: overlayRef },
        ];
        return Injector.create({ parent: userInjector || this._injector, providers });
    }
    /**
     * Removes a overlay from the array of open overlays.
     * @param overlayRef Overlay to be removed.
     */
    _removeOpenOverlay(overlayRef) {
        const index = this.openOverlays.indexOf(overlayRef);
        if (index > -1) {
            this.openOverlays.splice(index, 1);
        }
    }
    /** Closes all of the overlays in an array. */
    _closeOverlays(overlays) {
        let i = overlays.length;
        while (i--) {
            // The `_openOverlays` property isn't updated after close until the rxjs subscription
            // runs on the next microtask, in addition to modifying the array as we're going
            // through it. We loop through all of them and call close without assuming that
            // they'll be removed from the list instantaneously.
            overlays[i].close();
        }
    }
}
NxOverlayService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxOverlayService, deps: [{ token: i1.Overlay }, { token: i0.Injector }, { token: i2.Router }, { token: i3.NxOverlayPositionBuilder }, { token: NxOverlayService, optional: true, skipSelf: true }, { token: i4.Directionality, optional: true }, { token: NX_OVERLAY_SCROLL_STRATEGY }], target: i0.ɵɵFactoryTarget.Injectable });
NxOverlayService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxOverlayService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxOverlayService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Overlay }, { type: i0.Injector }, { type: i2.Router }, { type: i3.NxOverlayPositionBuilder }, { type: NxOverlayService, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i4.Directionality, decorators: [{
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NX_OVERLAY_SCROLL_STRATEGY]
                }] }]; } });
/**
 * Applies default options to the overlay config.
 * @param config Config to be modified.
 * @param defaultOptions Default options provided.
 * @returns The new configuration object.
 */
function _applyConfigDefaults(config, defaultOptions) {
    return { ...defaultOptions, ...config };
}
//# sourceMappingURL=data:application/json;base64,