import { Injectable, Optional } from '@angular/core';
import { BASE_OFFSET, CLOCKWISE_DIRECTIONS, HORIZONTAL_DIRECTIONS, VERTICAL_DIRECTIONS } from './overlay-config';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
import * as i2 from "@angular/cdk/bidi";
/**
 * Creates an error to be thrown if the user provided an invalid popover direction.
 * @docs-private
 */
export function getNxOverlayInvalidDirectionError(direction) {
    return Error(`Overlay direction "${direction}" is invalid.`);
}
export const OVERLAY_POSITIONS = {
    top(isRtl) {
        return { overlayX: 'center', overlayY: 'bottom' };
    },
    'top-start': function (isRtl) {
        return { overlayX: isRtl ? 'end' : 'start', overlayY: 'bottom' };
    },
    'top-end': function (isRtl) {
        return { overlayX: isRtl ? 'start' : 'end', overlayY: 'bottom' };
    },
    bottom(isRtl) {
        return { overlayX: 'center', overlayY: 'top' };
    },
    'bottom-start': function (isRtl) {
        return { overlayX: isRtl ? 'end' : 'start', overlayY: 'top' };
    },
    'bottom-end': function (isRtl) {
        return { overlayX: isRtl ? 'start' : 'end', overlayY: 'top' };
    },
    left(isRtl) {
        return { overlayX: isRtl ? 'start' : 'end', overlayY: 'center' };
    },
    right(isRtl) {
        return { overlayX: isRtl ? 'end' : 'start', overlayY: 'center' };
    },
};
export const ORIGIN_POSITIONS = {
    top(isRtl) {
        return { originX: 'center', originY: 'top' };
    },
    'top-start': function (isRtl) {
        return { originX: isRtl ? 'end' : 'start', originY: 'top' };
    },
    'top-end': function (isRtl) {
        return { originX: isRtl ? 'start' : 'end', originY: 'top' };
    },
    bottom(isRtl) {
        return { originX: 'center', originY: 'bottom' };
    },
    'bottom-start': function (isRtl) {
        return { originX: isRtl ? 'end' : 'start', originY: 'bottom' };
    },
    'bottom-end': function (isRtl) {
        return { originX: isRtl ? 'start' : 'end', originY: 'bottom' };
    },
    left(isRtl) {
        return { originX: isRtl ? 'end' : 'start', originY: 'center' };
    },
    right(isRtl) {
        return { originX: isRtl ? 'start' : 'end', originY: 'center' };
    },
};
export class NxOverlayPositionBuilder {
    constructor(_overlay, _dir) {
        this._overlay = _overlay;
        this._dir = _dir;
    }
    createPositionStrategy(element, config) {
        const fallbacks = this._getFallbackPositions(config.direction, config);
        const origin = this.getOrigin(config.direction);
        const overlay = this.getOverlayPosition(config.direction);
        const offset = this.getOffset(config.direction, config);
        return this._overlay
            .position()
            .flexibleConnectedTo(element)
            .withPush(false)
            .withFlexibleDimensions(true)
            .withLockedPosition()
            .withGrowAfterOpen()
            .withPositions([
            {
                ...origin,
                ...overlay,
                ...offset,
            },
            ...fallbacks,
        ]);
    }
    /**
     * Returns the origin position based on the user's direction preference.
     */
    getOrigin(direction) {
        if (!direction || !(direction in ORIGIN_POSITIONS)) {
            throw getNxOverlayInvalidDirectionError(direction);
        }
        return ORIGIN_POSITIONS[direction](this.isRtl);
    }
    /** Returns the overlay position based on the user's direction preference */
    getOverlayPosition(direction) {
        if (!direction || !(direction in OVERLAY_POSITIONS)) {
            throw getNxOverlayInvalidDirectionError(direction);
        }
        return OVERLAY_POSITIONS[direction](this.isRtl);
    }
    /** Returns the overlay offset required by the user's direction preference */
    getOffset(direction, config) {
        if (!direction || !(direction in OVERLAY_POSITIONS)) {
            throw getNxOverlayInvalidDirectionError(direction);
        }
        const offset = config.offset || BASE_OFFSET;
        const [genericDirection] = direction.split('-');
        switch (genericDirection) {
            case 'top': {
                return {
                    offsetY: offset * -1,
                };
            }
            case 'bottom': {
                return {
                    offsetY: offset,
                };
            }
            case 'left': {
                return {
                    offsetX: offset * -1,
                };
            }
            case 'right': {
                return {
                    offsetX: offset,
                };
            }
            default: {
                throw getNxOverlayInvalidDirectionError(direction);
            }
        }
    }
    /** Returns an array of fallback positions for popover, following the algoritm:
     * 1) Slightly alternate preferred position if applicable. I.e. for 'top' try 'top-start' and 'top-end' positioning.
     * 2) Try the opposite position, i.e. for 'top' try 'bottom'.
     * 3) Slightly alternate opposite position, i.e. 'bottom-start', 'bottom-end'
     * 4) All remaining positions from positions list
     */
    _getFallbackPositions(direction, config) {
        if (!direction) {
            return [];
        }
        // create order of fallbacks like: if top then bottom, left, right
        const fallbackOrder = this._getFallbackOrder(direction, config);
        // add positions like {direction}-start and filter the requested direction
        const resolvedDirections = this._resolveFallbacks(fallbackOrder, config).filter(d => d !== direction);
        const fallbackPositions = [];
        resolvedDirections.forEach(fallbackDirection => {
            const origin = this.getOrigin(fallbackDirection);
            const overlay = this.getOverlayPosition(fallbackDirection);
            const offset = this.getOffset(fallbackDirection, config);
            fallbackPositions.push({
                ...origin,
                ...overlay,
                ...offset,
            });
        });
        return fallbackPositions;
    }
    /** Takes the defined fallback orders and adjusts it for the requested direction */
    _getFallbackOrder(direction, config) {
        let order;
        switch (config.fallbackOrientation) {
            case 'vertical':
                order = VERTICAL_DIRECTIONS;
                break;
            case 'horizontal':
                order = HORIZONTAL_DIRECTIONS;
                break;
            case 'clockwise':
                order = CLOCKWISE_DIRECTIONS;
                break;
            default:
                throw getNxOverlayInvalidDirectionError(config.fallbackOrientation || '');
        }
        // reorder the array to start from the requested position
        const [generalDirection] = this._splitDirection(direction);
        const directionIndex = order.indexOf(generalDirection);
        return [...order.slice(directionIndex), ...order.slice(0, directionIndex)];
    }
    // We often need the general direction like top or bottom if the requested direction
    // is like bottom-start
    _splitDirection(direction) {
        return direction.split('-');
    }
    get isRtl() {
        return this._dir?.value === 'rtl';
    }
    /** Returns the opposite position, using angular position naming: top, bottom, start, end, center */
    _getInversePosition(position) {
        const positionPairs = {
            top: 'bottom',
            bottom: 'top',
            start: 'end',
            end: 'start',
            center: 'center',
        };
        return positionPairs[position];
    }
    /** Resolve the fallback order to all possible direction. For top and bottom we want to add the start and end positions. */
    _resolveFallbacks(fallbacks, config) {
        if (!config.direction) {
            throw getNxOverlayInvalidDirectionError('');
        }
        const [generalDirection, addition] = this._splitDirection(config.direction);
        return fallbacks.reduce((resolved, direction) => {
            if (direction === 'top' || direction === 'bottom') {
                if (addition) {
                    // if we have something like bottom-start we want to do bottom-end first
                    resolved.push(`${direction}-${addition}`, `${direction}-${this._getInversePosition(addition)}`, direction);
                }
                else {
                    resolved.push(direction, `${direction}-start`, `${direction}-end`);
                }
            }
            else {
                resolved.push(direction);
            }
            return resolved;
        }, []);
    }
}
NxOverlayPositionBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxOverlayPositionBuilder, deps: [{ token: i1.Overlay }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
NxOverlayPositionBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxOverlayPositionBuilder });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxOverlayPositionBuilder, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Overlay }, { type: i2.Directionality, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,