import { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';
import { NavigationEnd } from '@angular/router';
import { fromEvent, Subject } from 'rxjs';
import { filter, map, takeUntil } from 'rxjs/operators';
// Id counter
let nextId = 0;
/**
 * Reference to a overlay opened via the NxDialogService.
 */
export class NxOverlayRef {
    constructor(_overlayRef, _containerInstance, origin, _router, id = `nx-overlay-${nextId++}`) {
        this._overlayRef = _overlayRef;
        this._containerInstance = _containerInstance;
        this.origin = origin;
        this._router = _router;
        this.id = id;
        /** Whether the user is allowed to close the overlay. */
        this.closeOnClickOutside = this._containerInstance._config.closeOnClickOutside;
        /** Subject for notifying the user that the overlay has finished opening. */
        this._afterOpened = new Subject();
        /** Subject for notifying the user that the overlay has finished closing. */
        this._afterClosed = new Subject();
        /** Subject for notifying the user that the overlay has started closing. */
        this._beforeClosed = new Subject();
        /** Current state of the overlay. */
        this._state = 0 /* OPEN */;
        this._documentClickObservable = fromEvent(document, 'click');
        _overlayRef
            .backdropClick()
            .pipe(takeUntil(this._afterClosed))
            .subscribe(() => {
            if (this.closeOnClickOutside) {
                this.close();
            }
        });
        // We have to defer that or the same click that opened an overlay
        // would immediately close it again.
        setTimeout(() => this.waitForClose());
        this._router.events.pipe(takeUntil(this.afterClosed())).subscribe(event => {
            if (event instanceof NavigationEnd) {
                this.close();
            }
        });
        // Pass the id along to the container.
        _containerInstance._id = id;
        _overlayRef
            .detachments()
            .pipe(takeUntil(this._afterClosed))
            .subscribe(() => {
            this._beforeClosed.next(this._result);
            this._beforeClosed.complete();
            this._afterClosed.next(this._result);
            this._afterClosed.complete();
            this.componentInstance = null;
            this._overlayRef.dispose();
        });
        _overlayRef
            .keydownEvents()
            .pipe(filter(event => event.keyCode === ESCAPE && !hasModifierKey(event)), takeUntil(this._afterClosed))
            .subscribe(event => {
            event.preventDefault();
            this.close();
        });
        this._afterOpened.next();
        this._afterOpened.complete();
    }
    waitForClose() {
        this._documentClickObservable
            .pipe(map(event => event.target), filter((target) => !this._overlayRef.overlayElement?.contains(target)), takeUntil(this._afterClosed))
            .subscribe(() => {
            if (this.closeOnClickOutside) {
                this.close();
            }
        });
    }
    /**
     * Close the overlay.
     * @param overlayResult Optional result to return to the overlay opener.
     */
    close(overlayResult) {
        this._result = overlayResult;
        this._beforeClosed.next(overlayResult);
        this._beforeClosed.complete();
        this._overlayRef.dispose();
        this._state = 1 /* CLOSED */;
        this._containerInstance.restoreFocus();
        if (this._containerInstance._config.triggerButton) {
            this._containerInstance._config.triggerButton.setTriggerInactive();
        }
    }
    /**
     * Gets an observable that is notified when the overlay is finished opening.
     */
    afterOpened() {
        return this._afterOpened.asObservable();
    }
    /**
     * Gets an observable that is notified when the overlay is finished closing.
     */
    afterClosed() {
        return this._afterClosed.asObservable();
    }
    /**
     * Gets an observable that is notified when the overlay has started closing.
     */
    beforeClosed() {
        return this._beforeClosed.asObservable();
    }
    /**
     * Gets an observable that emits when the overlay's backdrop has been clicked.
     */
    backdropClick() {
        return this._overlayRef.backdropClick();
    }
    /**
     * Gets an observable that emits when keydown events are targeted on the overlay.
     */
    keydownEvents() {
        return this._overlayRef.keydownEvents();
    }
    /** Add a CSS class or an array of classes to the overlay pane. */
    addPanelClass(classes) {
        this._overlayRef.addPanelClass(classes);
        return this;
    }
    /** Remove a CSS class or an array of classes from the overlay pane. */
    removePanelClass(classes) {
        this._overlayRef.removePanelClass(classes);
        return this;
    }
    /** Gets the current state of the overlay's lifecycle. */
    getState() {
        return this._state;
    }
}
//# sourceMappingURL=data:application/json;base64,