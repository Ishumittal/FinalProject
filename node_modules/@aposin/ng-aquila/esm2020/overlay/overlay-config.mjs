export const VERTICAL_DIRECTIONS = ['top', 'bottom'];
export const HORIZONTAL_DIRECTIONS = ['left', 'right'];
export const CLOCKWISE_DIRECTIONS = ['top', 'right', 'bottom', 'left'];
export const BASE_OFFSET = 0; // TODO should be 16 once we have a "showArrow" option
/**
 * Configuration for opening a overlay  with the NxDialogService.
 */
export class NxOverlayConfig {
    constructor() {
        /** The ARIA role of the overlay element. */
        this.role = null;
        /** Custom class for the overlay pane. */
        this.panelClass = '';
        /** Whether the overlay has a backdrop. */
        this.hasBackdrop = false;
        /** Custom class for the backdrop. */
        this.backdropClass = '';
        /** Whether the user can use escape or clicking on the backdrop to close the overlay. */
        this.closeOnClickOutside = true;
        /** Width of the overlay. */
        this.width = '';
        /** Height of the overlay. */
        this.height = '';
        /** Max-width of the overlay. If a number is provided, assumes pixel units. Defaults to 100vw. */
        this.maxWidth = '';
        /** Position overrides. */
        this.direction = 'bottom';
        /** The fallbacks that are chosen. */
        this.fallbackOrientation = 'clockwise';
        /** ID of the element that describes the overlay. */
        this.ariaDescribedBy = null;
        /** ID of the element that labels the overlay. */
        this.ariaLabelledBy = null;
        /** Aria label to assign to the overlay element. */
        this.ariaLabel = null;
        /** Whether the overlay should focus the first focusable element on open. */
        this.autoFocus = true;
        /**
         * Whether the overlay should restore focus to the
         * previously-focused element, after it's closed.
         */
        this.restoreFocus = true;
        /**
         * Whether the overlay should close when the user goes backwards/forwards in history.
         * Note that this usually doesn't include clicking on links (unless the user is using
         * the `HashLocationStrategy`).
         */
        this.closeOnNavigation = true;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmxheS1jb25maWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1hcXVpbGEvc3JjL292ZXJsYXkvb3ZlcmxheS1jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBY0EsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQXlCLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQzNFLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUF5QixDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztBQUM3RSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBeUIsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUU3RixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxDQUFDLENBQUMsc0RBQXNEO0FBRXBGOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGVBQWU7SUFBNUI7UUFZSSw0Q0FBNEM7UUFDNUMsU0FBSSxHQUEwQixJQUFJLENBQUM7UUFFbkMseUNBQXlDO1FBQ3pDLGVBQVUsR0FBdUIsRUFBRSxDQUFDO1FBRXBDLDBDQUEwQztRQUMxQyxnQkFBVyxHQUFhLEtBQUssQ0FBQztRQUU5QixxQ0FBcUM7UUFDckMsa0JBQWEsR0FBWSxFQUFFLENBQUM7UUFFNUIsd0ZBQXdGO1FBQ3hGLHdCQUFtQixHQUFhLElBQUksQ0FBQztRQUVyQyw0QkFBNEI7UUFDNUIsVUFBSyxHQUFxQixFQUFFLENBQUM7UUFFN0IsNkJBQTZCO1FBQzdCLFdBQU0sR0FBcUIsRUFBRSxDQUFDO1FBUTlCLGlHQUFpRztRQUNqRyxhQUFRLEdBQXFCLEVBQUUsQ0FBQztRQVFoQywwQkFBMEI7UUFDMUIsY0FBUyxHQUF3QixRQUFRLENBQUM7UUFFMUMscUNBQXFDO1FBQ3JDLHdCQUFtQixHQUFrQyxXQUFXLENBQUM7UUFFakUsb0RBQW9EO1FBQ3BELG9CQUFlLEdBQW1CLElBQUksQ0FBQztRQUV2QyxpREFBaUQ7UUFDakQsbUJBQWMsR0FBbUIsSUFBSSxDQUFDO1FBRXRDLG1EQUFtRDtRQUNuRCxjQUFTLEdBQW1CLElBQUksQ0FBQztRQUVqQyw0RUFBNEU7UUFDNUUsY0FBUyxHQUFhLElBQUksQ0FBQztRQUUzQjs7O1dBR0c7UUFDSCxpQkFBWSxHQUFhLElBQUksQ0FBQztRQVE5Qjs7OztXQUlHO1FBQ0gsc0JBQWlCLEdBQWEsSUFBSSxDQUFDO0lBTXZDLENBQUM7Q0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZsZXhpYmxlQ29ubmVjdGVkUG9zaXRpb25TdHJhdGVneSwgU2Nyb2xsU3RyYXRlZ3kgfSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XG5pbXBvcnQgeyBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTnhUcmlnZ2VyQnV0dG9uIH0gZnJvbSAnLi90cmlnZ2VyLWJ1dHRvbic7XG5cbi8qKiBUaGUgQVJJQSByb2xlIG9mIHRoZSBvdmVybGF5LiAqL1xuZXhwb3J0IHR5cGUgTnhPdmVybGF5Um9sZSA9IHN0cmluZztcblxuZXhwb3J0IHR5cGUgTnhPdmVybGF5RGlyZWN0aW9uID0gTnhPdmVybGF5VmVydGljYWxEaXJlY3Rpb24gfCBOeE92ZXJsYXlIb3Jpem9udGFsRGlyZWN0aW9uO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBOeE92ZXJsYXlWZXJ0aWNhbERpcmVjdGlvbiA9ICd0b3AnIHwgJ3RvcC1zdGFydCcgfCAndG9wLWVuZCcgfCAnYm90dG9tJyB8ICdib3R0b20tc3RhcnQnIHwgJ2JvdHRvbS1lbmQnO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBOeE92ZXJsYXlIb3Jpem9udGFsRGlyZWN0aW9uID0gJ2xlZnQnIHwgJ3JpZ2h0JztcblxuZXhwb3J0IHR5cGUgTnhPdmVybGF5RmFsbGJhY2tPcmllbnRhdGlvbiA9ICd2ZXJ0aWNhbCcgfCAnaG9yaXpvbnRhbCcgfCAnY2xvY2t3aXNlJztcblxuZXhwb3J0IGNvbnN0IFZFUlRJQ0FMX0RJUkVDVElPTlM6IE54T3ZlcmxheURpcmVjdGlvbltdID0gWyd0b3AnLCAnYm90dG9tJ107XG5leHBvcnQgY29uc3QgSE9SSVpPTlRBTF9ESVJFQ1RJT05TOiBOeE92ZXJsYXlEaXJlY3Rpb25bXSA9IFsnbGVmdCcsICdyaWdodCddO1xuZXhwb3J0IGNvbnN0IENMT0NLV0lTRV9ESVJFQ1RJT05TOiBOeE92ZXJsYXlEaXJlY3Rpb25bXSA9IFsndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J107XG5cbmV4cG9ydCBjb25zdCBCQVNFX09GRlNFVCA9IDA7IC8vIFRPRE8gc2hvdWxkIGJlIDE2IG9uY2Ugd2UgaGF2ZSBhIFwic2hvd0Fycm93XCIgb3B0aW9uXG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBmb3Igb3BlbmluZyBhIG92ZXJsYXkgIHdpdGggdGhlIE54RGlhbG9nU2VydmljZS5cbiAqL1xuZXhwb3J0IGNsYXNzIE54T3ZlcmxheUNvbmZpZzxEID0gYW55PiB7XG4gICAgLyoqXG4gICAgICogV2hlcmUgdGhlIGF0dGFjaGVkIGNvbXBvbmVudCBzaG91bGQgbGl2ZSBpbiBBbmd1bGFyJ3MgKmxvZ2ljYWwqIGNvbXBvbmVudCB0cmVlLlxuICAgICAqIFRoaXMgYWZmZWN0cyB3aGF0IGlzIGF2YWlsYWJsZSBmb3IgaW5qZWN0aW9uIGFuZCB0aGUgY2hhbmdlIGRldGVjdGlvbiBvcmRlciBmb3IgdGhlXG4gICAgICogY29tcG9uZW50IGluc3RhbnRpYXRlZCBpbnNpZGUgb2YgdGhlIG92ZXJsYXkuIFRoaXMgZG9lcyBub3QgYWZmZWN0IHdoZXJlIHRoZSBvdmVybGF5XG4gICAgICogY29udGVudCB3aWxsIGJlIHJlbmRlcmVkLlxuICAgICAqL1xuICAgIHZpZXdDb250YWluZXJSZWY/OiBWaWV3Q29udGFpbmVyUmVmO1xuXG4gICAgLyoqIElEIGZvciB0aGUgb3ZlcmxheS4gSWYgb21pdHRlZCwgYSB1bmlxdWUgb25lIHdpbGwgYmUgZ2VuZXJhdGVkLiAqL1xuICAgIGlkPzogc3RyaW5nO1xuXG4gICAgLyoqIFRoZSBBUklBIHJvbGUgb2YgdGhlIG92ZXJsYXkgZWxlbWVudC4gKi9cbiAgICByb2xlPzogTnhPdmVybGF5Um9sZSB8IG51bGwgPSBudWxsO1xuXG4gICAgLyoqIEN1c3RvbSBjbGFzcyBmb3IgdGhlIG92ZXJsYXkgcGFuZS4gKi9cbiAgICBwYW5lbENsYXNzPzogc3RyaW5nIHwgc3RyaW5nW10gPSAnJztcblxuICAgIC8qKiBXaGV0aGVyIHRoZSBvdmVybGF5IGhhcyBhIGJhY2tkcm9wLiAqL1xuICAgIGhhc0JhY2tkcm9wPzogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqIEN1c3RvbSBjbGFzcyBmb3IgdGhlIGJhY2tkcm9wLiAqL1xuICAgIGJhY2tkcm9wQ2xhc3M/OiBzdHJpbmcgPSAnJztcblxuICAgIC8qKiBXaGV0aGVyIHRoZSB1c2VyIGNhbiB1c2UgZXNjYXBlIG9yIGNsaWNraW5nIG9uIHRoZSBiYWNrZHJvcCB0byBjbG9zZSB0aGUgb3ZlcmxheS4gKi9cbiAgICBjbG9zZU9uQ2xpY2tPdXRzaWRlPzogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvKiogV2lkdGggb2YgdGhlIG92ZXJsYXkuICovXG4gICAgd2lkdGg/OiBudW1iZXIgfCBzdHJpbmcgPSAnJztcblxuICAgIC8qKiBIZWlnaHQgb2YgdGhlIG92ZXJsYXkuICovXG4gICAgaGVpZ2h0PzogbnVtYmVyIHwgc3RyaW5nID0gJyc7XG5cbiAgICAvKiogTWluLXdpZHRoIG9mIHRoZSBvdmVybGF5LiBJZiBhIG51bWJlciBpcyBwcm92aWRlZCwgYXNzdW1lcyBwaXhlbCB1bml0cy4gKi9cbiAgICBtaW5XaWR0aD86IG51bWJlciB8IHN0cmluZztcblxuICAgIC8qKiBNaW4taGVpZ2h0IG9mIHRoZSBvdmVybGF5LiBJZiBhIG51bWJlciBpcyBwcm92aWRlZCwgYXNzdW1lcyBwaXhlbCB1bml0cy4gKi9cbiAgICBtaW5IZWlnaHQ/OiBudW1iZXIgfCBzdHJpbmc7XG5cbiAgICAvKiogTWF4LXdpZHRoIG9mIHRoZSBvdmVybGF5LiBJZiBhIG51bWJlciBpcyBwcm92aWRlZCwgYXNzdW1lcyBwaXhlbCB1bml0cy4gRGVmYXVsdHMgdG8gMTAwdncuICovXG4gICAgbWF4V2lkdGg/OiBudW1iZXIgfCBzdHJpbmcgPSAnJztcblxuICAgIC8qKiBNYXgtaGVpZ2h0IG9mIHRoZSBvdmVybGF5LiBJZiBhIG51bWJlciBpcyBwcm92aWRlZCwgYXNzdW1lcyBwaXhlbCB1bml0cy4gKi9cbiAgICBtYXhIZWlnaHQ/OiBudW1iZXIgfCBzdHJpbmc7XG5cbiAgICAvKiogVGhlIGRpc3RhbmNlIGZyb20gdGhlIHRyaWdnZXIgdG8gdGhlIG92ZXJsYXkgaW4gcGl4ZWxzLiAqL1xuICAgIG9mZnNldD86IG51bWJlcjtcblxuICAgIC8qKiBQb3NpdGlvbiBvdmVycmlkZXMuICovXG4gICAgZGlyZWN0aW9uPzogTnhPdmVybGF5RGlyZWN0aW9uID0gJ2JvdHRvbSc7XG5cbiAgICAvKiogVGhlIGZhbGxiYWNrcyB0aGF0IGFyZSBjaG9zZW4uICovXG4gICAgZmFsbGJhY2tPcmllbnRhdGlvbj86IE54T3ZlcmxheUZhbGxiYWNrT3JpZW50YXRpb24gPSAnY2xvY2t3aXNlJztcblxuICAgIC8qKiBJRCBvZiB0aGUgZWxlbWVudCB0aGF0IGRlc2NyaWJlcyB0aGUgb3ZlcmxheS4gKi9cbiAgICBhcmlhRGVzY3JpYmVkQnk/OiBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuICAgIC8qKiBJRCBvZiB0aGUgZWxlbWVudCB0aGF0IGxhYmVscyB0aGUgb3ZlcmxheS4gKi9cbiAgICBhcmlhTGFiZWxsZWRCeT86IHN0cmluZyB8IG51bGwgPSBudWxsO1xuXG4gICAgLyoqIEFyaWEgbGFiZWwgdG8gYXNzaWduIHRvIHRoZSBvdmVybGF5IGVsZW1lbnQuICovXG4gICAgYXJpYUxhYmVsPzogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG5cbiAgICAvKiogV2hldGhlciB0aGUgb3ZlcmxheSBzaG91bGQgZm9jdXMgdGhlIGZpcnN0IGZvY3VzYWJsZSBlbGVtZW50IG9uIG9wZW4uICovXG4gICAgYXV0b0ZvY3VzPzogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBvdmVybGF5IHNob3VsZCByZXN0b3JlIGZvY3VzIHRvIHRoZVxuICAgICAqIHByZXZpb3VzbHktZm9jdXNlZCBlbGVtZW50LCBhZnRlciBpdCdzIGNsb3NlZC5cbiAgICAgKi9cbiAgICByZXN0b3JlRm9jdXM/OiBib29sZWFuID0gdHJ1ZTtcblxuICAgIC8qKiBTY3JvbGwgc3RyYXRlZ3kgdG8gYmUgdXNlZCBmb3IgdGhlIG92ZXJsYXkuICovXG4gICAgc2Nyb2xsU3RyYXRlZ3k/OiBTY3JvbGxTdHJhdGVneTtcblxuICAgIC8qKiBTY3JvbGwgc3RyYXRlZ3kgdG8gYmUgdXNlZCBmb3IgdGhlIG92ZXJsYXkuICovXG4gICAgcG9zaXRpb25TdHJhdGVneT86IEZsZXhpYmxlQ29ubmVjdGVkUG9zaXRpb25TdHJhdGVneTtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIG92ZXJsYXkgc2hvdWxkIGNsb3NlIHdoZW4gdGhlIHVzZXIgZ29lcyBiYWNrd2FyZHMvZm9yd2FyZHMgaW4gaGlzdG9yeS5cbiAgICAgKiBOb3RlIHRoYXQgdGhpcyB1c3VhbGx5IGRvZXNuJ3QgaW5jbHVkZSBjbGlja2luZyBvbiBsaW5rcyAodW5sZXNzIHRoZSB1c2VyIGlzIHVzaW5nXG4gICAgICogdGhlIGBIYXNoTG9jYXRpb25TdHJhdGVneWApLlxuICAgICAqL1xuICAgIGNsb3NlT25OYXZpZ2F0aW9uPzogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvKiogQWx0ZXJuYXRlIGBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXJgIHRvIHVzZSB3aGVuIHJlc29sdmluZyB0aGUgYXNzb2NpYXRlZCBjb21wb25lbnQuICovXG4gICAgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyPzogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyO1xuXG4gICAgdHJpZ2dlckJ1dHRvbj86IE54VHJpZ2dlckJ1dHRvbjtcbn1cbiJdfQ==