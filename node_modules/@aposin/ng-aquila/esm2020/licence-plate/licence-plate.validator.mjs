import { Directive, Input } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import * as i0 from "@angular/core";
const DE_SPECIAL_PATTERN = /^[\dA-Za-zÄÖÜäöü]{1,3}[ -]?[\dA-Za-z]{1,5}[ -]?[\dA-Za-z]{1,5}$/;
const DE_STANDARD_PATTERN = /^[A-Za-zÄÖÜäöü]{1,3}-[A-Za-z]{1,2} \d{1,4}[EHeh]?$/;
const OTHER_PATTERN = /^.+$/;
const LICENCE_PLATE_PATTERNS = {
    de_standard: DE_STANDARD_PATTERN,
    de_special: DE_SPECIAL_PATTERN,
    de_season: DE_STANDARD_PATTERN,
    other: OTHER_PATTERN,
    euro: OTHER_PATTERN,
};
/**
 * Licence plate validator.
 * Supports validation for german standard and special plate numbers.
 * Choose `other` to allow all values.
 */
export function nxLicensePlateValidator(type) {
    return (control) => {
        const valid = LICENCE_PLATE_PATTERNS[type].test(control.value);
        if (valid) {
            return null;
        }
        return { nxLicensePlateError: true };
    };
}
export class NxLicencePlateValidatorDirective {
    constructor() {
        /**
         * Licence plate type.
         * Supports validation for german standard and special plate numbers.
         * Choose `other` to allow all values.
         */
        this.type = 'other';
    }
    validate(control) {
        return nxLicensePlateValidator(this.type)(control);
    }
}
NxLicencePlateValidatorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxLicencePlateValidatorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NxLicencePlateValidatorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NxLicencePlateValidatorDirective, selector: "[nxLicensePlate]", inputs: { type: ["nxLicensePlate", "type"] }, providers: [
        {
            provide: NG_VALIDATORS,
            useExisting: NxLicencePlateValidatorDirective,
            multi: true,
        },
    ], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxLicencePlateValidatorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[nxLicensePlate]',
                    providers: [
                        {
                            provide: NG_VALIDATORS,
                            useExisting: NxLicencePlateValidatorDirective,
                            multi: true,
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input,
                args: ['nxLicensePlate']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGljZW5jZS1wbGF0ZS52YWxpZGF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1hcXVpbGEvc3JjL2xpY2VuY2UtcGxhdGUvbGljZW5jZS1wbGF0ZS52YWxpZGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFtQixhQUFhLEVBQTRDLE1BQU0sZ0JBQWdCLENBQUM7O0FBTzFHLE1BQU0sa0JBQWtCLEdBQUcsaUVBQWlFLENBQUM7QUFDN0YsTUFBTSxtQkFBbUIsR0FBRyxvREFBb0QsQ0FBQztBQUNqRixNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUM7QUFFN0IsTUFBTSxzQkFBc0IsR0FBNEM7SUFDcEUsV0FBVyxFQUFFLG1CQUFtQjtJQUNoQyxVQUFVLEVBQUUsa0JBQWtCO0lBQzlCLFNBQVMsRUFBRSxtQkFBbUI7SUFDOUIsS0FBSyxFQUFFLGFBQWE7SUFDcEIsSUFBSSxFQUFFLGFBQWE7Q0FDdEIsQ0FBQztBQUVGOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUsdUJBQXVCLENBQUMsSUFBd0I7SUFDNUQsT0FBTyxDQUFDLE9BQXdCLEVBQTJCLEVBQUU7UUFDekQsTUFBTSxLQUFLLEdBQUcsc0JBQXNCLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUUvRCxJQUFJLEtBQUssRUFBRTtZQUNQLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFDRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDekMsQ0FBQyxDQUFDO0FBQ04sQ0FBQztBQVlELE1BQU0sT0FBTyxnQ0FBZ0M7SUFWN0M7UUFXSTs7OztXQUlHO1FBRUgsU0FBSSxHQUF1QixPQUFPLENBQUM7S0FLdEM7SUFIRyxRQUFRLENBQUMsT0FBd0I7UUFDN0IsT0FBTyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkQsQ0FBQzs7NkhBWFEsZ0NBQWdDO2lIQUFoQyxnQ0FBZ0MseUZBUjlCO1FBQ1A7WUFDSSxPQUFPLEVBQUUsYUFBYTtZQUN0QixXQUFXLEVBQUUsZ0NBQWdDO1lBQzdDLEtBQUssRUFBRSxJQUFJO1NBQ2Q7S0FDSjsyRkFFUSxnQ0FBZ0M7a0JBVjVDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsU0FBUyxFQUFFO3dCQUNQOzRCQUNJLE9BQU8sRUFBRSxhQUFhOzRCQUN0QixXQUFXLGtDQUFrQzs0QkFDN0MsS0FBSyxFQUFFLElBQUk7eUJBQ2Q7cUJBQ0o7aUJBQ0o7OEJBUUcsSUFBSTtzQkFESCxLQUFLO3VCQUFDLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgTkdfVkFMSURBVE9SUywgVmFsaWRhdGlvbkVycm9ycywgVmFsaWRhdG9yLCBWYWxpZGF0b3JGbiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuLyoqXG4gKiBUeXBlIG9mIHN1cHBvcnRlZCBsaWNlbnNlIHBsYXRlcy5cbiAqL1xuZXhwb3J0IHR5cGUgTnhMaWNlbmNlUGxhdGVUeXBlID0gJ2RlX3N0YW5kYXJkJyB8ICdkZV9zZWFzb24nIHwgJ2RlX3NwZWNpYWwnIHwgJ290aGVyJyB8ICdldXJvJztcblxuY29uc3QgREVfU1BFQ0lBTF9QQVRURVJOID0gL15bXFxkQS1aYS16w4TDlsOcw6TDtsO8XXsxLDN9WyAtXT9bXFxkQS1aYS16XXsxLDV9WyAtXT9bXFxkQS1aYS16XXsxLDV9JC87XG5jb25zdCBERV9TVEFOREFSRF9QQVRURVJOID0gL15bQS1aYS16w4TDlsOcw6TDtsO8XXsxLDN9LVtBLVphLXpdezEsMn0gXFxkezEsNH1bRUhlaF0/JC87XG5jb25zdCBPVEhFUl9QQVRURVJOID0gL14uKyQvO1xuXG5jb25zdCBMSUNFTkNFX1BMQVRFX1BBVFRFUk5TOiB7IFtrZXkgaW4gTnhMaWNlbmNlUGxhdGVUeXBlXTogUmVnRXhwIH0gPSB7XG4gICAgZGVfc3RhbmRhcmQ6IERFX1NUQU5EQVJEX1BBVFRFUk4sXG4gICAgZGVfc3BlY2lhbDogREVfU1BFQ0lBTF9QQVRURVJOLFxuICAgIGRlX3NlYXNvbjogREVfU1RBTkRBUkRfUEFUVEVSTixcbiAgICBvdGhlcjogT1RIRVJfUEFUVEVSTixcbiAgICBldXJvOiBPVEhFUl9QQVRURVJOLFxufTtcblxuLyoqXG4gKiBMaWNlbmNlIHBsYXRlIHZhbGlkYXRvci5cbiAqIFN1cHBvcnRzIHZhbGlkYXRpb24gZm9yIGdlcm1hbiBzdGFuZGFyZCBhbmQgc3BlY2lhbCBwbGF0ZSBudW1iZXJzLlxuICogQ2hvb3NlIGBvdGhlcmAgdG8gYWxsb3cgYWxsIHZhbHVlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG54TGljZW5zZVBsYXRlVmFsaWRhdG9yKHR5cGU6IE54TGljZW5jZVBsYXRlVHlwZSk6IFZhbGlkYXRvckZuIHtcbiAgICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsID0+IHtcbiAgICAgICAgY29uc3QgdmFsaWQgPSBMSUNFTkNFX1BMQVRFX1BBVFRFUk5TW3R5cGVdLnRlc3QoY29udHJvbC52YWx1ZSk7XG5cbiAgICAgICAgaWYgKHZhbGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBueExpY2Vuc2VQbGF0ZUVycm9yOiB0cnVlIH07XG4gICAgfTtcbn1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbbnhMaWNlbnNlUGxhdGVdJyxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogTkdfVkFMSURBVE9SUyxcbiAgICAgICAgICAgIHVzZUV4aXN0aW5nOiBOeExpY2VuY2VQbGF0ZVZhbGlkYXRvckRpcmVjdGl2ZSxcbiAgICAgICAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgICB9LFxuICAgIF0sXG59KVxuZXhwb3J0IGNsYXNzIE54TGljZW5jZVBsYXRlVmFsaWRhdG9yRGlyZWN0aXZlIGltcGxlbWVudHMgVmFsaWRhdG9yIHtcbiAgICAvKipcbiAgICAgKiBMaWNlbmNlIHBsYXRlIHR5cGUuXG4gICAgICogU3VwcG9ydHMgdmFsaWRhdGlvbiBmb3IgZ2VybWFuIHN0YW5kYXJkIGFuZCBzcGVjaWFsIHBsYXRlIG51bWJlcnMuXG4gICAgICogQ2hvb3NlIGBvdGhlcmAgdG8gYWxsb3cgYWxsIHZhbHVlcy5cbiAgICAgKi9cbiAgICBASW5wdXQoJ254TGljZW5zZVBsYXRlJylcbiAgICB0eXBlOiBOeExpY2VuY2VQbGF0ZVR5cGUgPSAnb3RoZXInO1xuXG4gICAgdmFsaWRhdGUoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwge1xuICAgICAgICByZXR1cm4gbnhMaWNlbnNlUGxhdGVWYWxpZGF0b3IodGhpcy50eXBlKShjb250cm9sKTtcbiAgICB9XG59XG4iXX0=