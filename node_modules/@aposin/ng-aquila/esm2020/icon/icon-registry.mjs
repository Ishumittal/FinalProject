import { DOCUMENT } from '@angular/common';
import { Inject, Injectable, Optional } from '@angular/core';
import { DEFAULT_ICONS } from './default-icons';
import { NxFontIcon, NxSvgIconFromUrl, NxSvgIconLiteral } from './icons';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@angular/platform-browser";
export function throwNxIconNotFoundError(iconName) {
    throw Error(`Could not find icon with name ${iconName}`);
}
export class NxIconFontDefinition {
    constructor(hostClass, prefix = '') {
        this.hostClass = hostClass;
        this.prefix = prefix;
    }
}
export class NxIconRegistry {
    constructor(_httpClient, _sanitizer, _document) {
        this._httpClient = _httpClient;
        this._sanitizer = _sanitizer;
        this._document = _document;
        this._icons = new Map();
        this._fonts = new Map();
        // register default icons
        Object.keys(DEFAULT_ICONS).forEach(icon => {
            this.addSvgIconLiteral(icon, _sanitizer.bypassSecurityTrustHtml(DEFAULT_ICONS[icon]));
        });
    }
    /**
     * Registers an icon using an HTML string.
     * @param iconName
     * @param literal
     */
    addSvgIconLiteral(iconName, literal) {
        this._icons.set(iconName, new NxSvgIconLiteral(literal, this._httpClient, this._sanitizer, this._document));
    }
    /**
     * Registers an icon by URL.
     * @param iconName Name under which the icon should be registered.
     * @param url
     */
    addSvgIcon(iconName, safeUrl) {
        if (safeUrl == null) {
            throw Error(`Cannot fetch icon from URL "${safeUrl}".`);
        }
        this._icons.set(iconName, new NxSvgIconFromUrl(safeUrl, this._httpClient, this._sanitizer, this._document));
    }
    /**
     * Only necessary to override an existing svg icon in the registry
     * with a font class. Useful to override the essential library icons.
     * To register an icon font in general use `registerFont` and
     * `setDefaultFontClass`.
     *
     * Example: you want to override the essential svg icon of the library `chevron-down`
     * with an icon from your icon font called 'arrow-down'. You would first register your
     * icon font:
     * `iconRegistry.registerFont('my-icons');`
     * `iconRegistry.setDefaultFontClass('my-icons');`
     * and then override the chevron-down icon in the registry:
     * `iconRegistry.addFontIcon('chevron-down', 'arrow-down');`
     */
    addFontIcon(iconName, alias, fontName) {
        let fontDefinition = this.getDefaultFont();
        if (fontName) {
            fontDefinition = this._fonts.get(fontName);
        }
        if (!fontDefinition) {
            throw Error(`Could not find a registered font with name ${fontName}.`);
        }
        this._icons.set(iconName, new NxFontIcon(alias, fontDefinition));
    }
    /** Returns the icon from the registry or undefined if not found. */
    getIcon(iconName) {
        const icon = this._icons.get(iconName);
        return icon;
    }
    ngOnDestroy() {
        this._icons.clear();
    }
    /**
     * Register an icon font which can be used by the font input on the icon component.
     * @param name
     * @param hostClass The hostClass is the general class like `fa` and an optional prefix can be given.
     * @param prefix The prefix is helpful if your class name for the icon would be prefixed,
     * e.g. my-icons--heart but you still want to only use the name
     * <code>&lt;nx-icon name="heart" font="my-icons"&gt;&lt;/nx-icon&gt;</code>.
     */
    registerFont(name, hostClass, prefix) {
        // register the name in a map
        this._fonts.set(name, new NxIconFontDefinition(hostClass ? hostClass : name, prefix));
    }
    /**
     * Sets the font as the default font that is used when the font input
     * is omitted.
     */
    setDefaultFont(name) {
        const font = this.getFont(name);
        this._defaultFont = font;
    }
    /**
     * Returns the registered CSS class name.
     */
    getDefaultFont() {
        return this._defaultFont;
    }
    /**
     * Returns the registered font by name.
     */
    getFont(fontName) {
        const font = this._fonts.get(fontName);
        if (!font) {
            throw Error(`Cannot find registered font with name ${fontName}`);
        }
        return font;
    }
}
NxIconRegistry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxIconRegistry, deps: [{ token: i1.HttpClient, optional: true }, { token: i2.DomSanitizer }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });
NxIconRegistry.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxIconRegistry, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxIconRegistry, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DomSanitizer }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });
/** Clones an SVGElement while preserving type information. */
export function cloneSvg(svg) {
    return svg.cloneNode(true);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi1yZWdpc3RyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWFxdWlsYS9zcmMvaWNvbi9pY29uLXJlZ2lzdHJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBYSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHeEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxVQUFVLEVBQWEsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxTQUFTLENBQUM7Ozs7QUFFcEYsTUFBTSxVQUFVLHdCQUF3QixDQUFDLFFBQWdCO0lBQ3JELE1BQU0sS0FBSyxDQUFDLGlDQUFpQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQzdELENBQUM7QUFFRCxNQUFNLE9BQU8sb0JBQW9CO0lBQzdCLFlBQW1CLFNBQWlCLEVBQVMsU0FBaUIsRUFBRTtRQUE3QyxjQUFTLEdBQVQsU0FBUyxDQUFRO1FBQVMsV0FBTSxHQUFOLE1BQU0sQ0FBYTtJQUFHLENBQUM7Q0FDdkU7QUFHRCxNQUFNLE9BQU8sY0FBYztJQU12QixZQUFnQyxXQUE4QixFQUFVLFVBQXdCLEVBQTRCLFNBQW1CO1FBQS9HLGdCQUFXLEdBQVgsV0FBVyxDQUFtQjtRQUFVLGVBQVUsR0FBVixVQUFVLENBQWM7UUFBNEIsY0FBUyxHQUFULFNBQVMsQ0FBVTtRQUx2SSxXQUFNLEdBQUcsSUFBSSxHQUFHLEVBQWtDLENBQUM7UUFDbkQsV0FBTSxHQUFHLElBQUksR0FBRyxFQUFnQyxDQUFDO1FBS3JELHlCQUF5QjtRQUN6QixNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN0QyxJQUFJLENBQUMsaUJBQWlCLENBQUMs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ekcsY0FBYyxjQURELE1BQU07MkZBQ25CLGNBQWM7a0JBRDFCLFVBQVU7bUJBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzswQkFPakIsUUFBUTt5REFBa0gsUUFBUTswQkFBNUMsTUFBTTsyQkFBQyxRQUFROztBQTJHdEgsOERBQThEO0FBQzlELE1BQU0sVUFBVSxRQUFRLENBQUMsR0FBZTtJQUNwQyxPQUFPLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFlLENBQUM7QUFDN0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE9uRGVzdHJveSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERvbVNhbml0aXplciwgU2FmZUh0bWwsIFNhZmVSZXNvdXJjZVVybCB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuXG5pbXBvcnQgeyBERUZBVUxUX0lDT05TIH0gZnJvbSAnLi9kZWZhdWx0LWljb25zJztcbmltcG9ydCB7IE54Rm9udEljb24sIE54U3ZnSWNvbiwgTnhTdmdJY29uRnJvbVVybCwgTnhTdmdJY29uTGl0ZXJhbCB9IGZyb20gJy4vaWNvbnMnO1xuXG5leHBvcnQgZnVuY3Rpb24gdGhyb3dOeEljb25Ob3RGb3VuZEVycm9yKGljb25OYW1lOiBzdHJpbmcpIHtcbiAgICB0aHJvdyBFcnJvcihgQ291bGQgbm90IGZpbmQgaWNvbiB3aXRoIG5hbWUgJHtpY29uTmFtZX1gKTtcbn1cblxuZXhwb3J0IGNsYXNzIE54SWNvbkZvbnREZWZpbml0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgaG9zdENsYXNzOiBzdHJpbmcsIHB1YmxpYyBwcmVmaXg6IHN0cmluZyA9ICcnKSB7fVxufVxuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIE54SWNvblJlZ2lzdHJ5IGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIF9pY29ucyA9IG5ldyBNYXA8c3RyaW5nLCBOeFN2Z0ljb24gfCBOeEZvbnRJY29uPigpO1xuICAgIHByaXZhdGUgX2ZvbnRzID0gbmV3IE1hcDxzdHJpbmcsIE54SWNvbkZvbnREZWZpbml0aW9uPigpO1xuXG4gICAgcHJpdmF0ZSBfZGVmYXVsdEZvbnQ/OiBOeEljb25Gb250RGVmaW5pdGlvbjtcblxuICAgIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIHByaXZhdGUgX2h0dHBDbGllbnQ6IEh0dHBDbGllbnQgfCBudWxsLCBwcml2YXRlIF9zYW5pdGl6ZXI6IERvbVNhbml0aXplciwgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBfZG9jdW1lbnQ6IERvY3VtZW50KSB7XG4gICAgICAgIC8vIHJlZ2lzdGVyIGRlZmF1bHQgaWNvbnNcbiAgICAgICAgT2JqZWN0LmtleXMoREVGQVVMVF9JQ09OUykuZm9yRWFjaChpY29uID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWRkU3ZnSWNvbkxpdGVyYWwoaWNvbiwgX3Nhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0SHRtbChERUZBVUxUX0lDT05TW2ljb25dKSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBhbiBpY29uIHVzaW5nIGFuIEhUTUwgc3RyaW5nLlxuICAgICAqIEBwYXJhbSBpY29uTmFtZVxuICAgICAqIEBwYXJhbSBsaXRlcmFsXG4gICAgICovXG4gICAgYWRkU3ZnSWNvbkxpdGVyYWwoaWNvbk5hbWU6IHN0cmluZywgbGl0ZXJhbDogU2FmZUh0bWwpIHtcbiAgICAgICAgdGhpcy5faWNvbnMuc2V0KGljb25OYW1lLCBuZXcgTnhTdmdJY29uTGl0ZXJhbChsaXRlcmFsLCB0aGlzLl9odHRwQ2xpZW50LCB0aGlzLl9zYW5pdGl6ZXIsIHRoaXMuX2RvY3VtZW50KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIGFuIGljb24gYnkgVVJMLlxuICAgICAqIEBwYXJhbSBpY29uTmFtZSBOYW1lIHVuZGVyIHdoaWNoIHRoZSBpY29uIHNob3VsZCBiZSByZWdpc3RlcmVkLlxuICAgICAqIEBwYXJhbSB1cmxcbiAgICAgKi9cbiAgICBhZGRTdmdJY29uKGljb25OYW1lOiBzdHJpbmcsIHNhZmVVcmw6IFNhZmVSZXNvdXJjZVVybCkge1xuICAgICAgICBpZiAoc2FmZVVybCA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgQ2Fubm90IGZldGNoIGljb24gZnJvbSBVUkwgXCIke3NhZmVVcmx9XCIuYCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9pY29ucy5zZXQoaWNvbk5hbWUsIG5ldyBOeFN2Z0ljb25Gcm9tVXJsKHNhZmVVcmwsIHRoaXMuX2h0dHBDbGllbnQsIHRoaXMuX3Nhbml0aXplciwgdGhpcy5fZG9jdW1lbnQpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPbmx5IG5lY2Vzc2FyeSB0byBvdmVycmlkZSBhbiBleGlzdGluZyBzdmcgaWNvbiBpbiB0aGUgcmVnaXN0cnlcbiAgICAgKiB3aXRoIGEgZm9udCBjbGFzcy4gVXNlZnVsIHRvIG92ZXJyaWRlIHRoZSBlc3NlbnRpYWwgbGlicmFyeSBpY29ucy5cbiAgICAgKiBUbyByZWdpc3RlciBhbiBpY29uIGZvbnQgaW4gZ2VuZXJhbCB1c2UgYHJlZ2lzdGVyRm9udGAgYW5kXG4gICAgICogYHNldERlZmF1bHRGb250Q2xhc3NgLlxuICAgICAqXG4gICAgICogRXhhbXBsZTogeW91IHdhbnQgdG8gb3ZlcnJpZGUgdGhlIGVzc2VudGlhbCBzdmcgaWNvbiBvZiB0aGUgbGlicmFyeSBgY2hldnJvbi1kb3duYFxuICAgICAqIHdpdGggYW4gaWNvbiBmcm9tIHlvdXIgaWNvbiBmb250IGNhbGxlZCAnYXJyb3ctZG93bicuIFlvdSB3b3VsZCBmaXJzdCByZWdpc3RlciB5b3VyXG4gICAgICogaWNvbiBmb250OlxuICAgICAqIGBpY29uUmVnaXN0cnkucmVnaXN0ZXJGb250KCdteS1pY29ucycpO2BcbiAgICAgKiBgaWNvblJlZ2lzdHJ5LnNldERlZmF1bHRGb250Q2xhc3MoJ215LWljb25zJyk7YFxuICAgICAqIGFuZCB0aGVuIG92ZXJyaWRlIHRoZSBjaGV2cm9uLWRvd24gaWNvbiBpbiB0aGUgcmVnaXN0cnk6XG4gICAgICogYGljb25SZWdpc3RyeS5hZGRGb250SWNvbignY2hldnJvbi1kb3duJywgJ2Fycm93LWRvd24nKTtgXG4gICAgICovXG4gICAgYWRkRm9udEljb24oaWNvbk5hbWU6IHN0cmluZywgYWxpYXM/OiBzdHJpbmcsIGZvbnROYW1lPzogc3RyaW5nKSB7XG4gICAgICAgIGxldCBmb250RGVmaW5pdGlvbiA9IHRoaXMuZ2V0RGVmYXVsdEZvbnQoKTtcbiAgICAgICAgaWYgKGZvbnROYW1lKSB7XG4gICAgICAgICAgICBmb250RGVmaW5pdGlvbiA9IHRoaXMuX2ZvbnRzLmdldChmb250TmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWZvbnREZWZpbml0aW9uKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgQ291bGQgbm90IGZpbmQgYSByZWdpc3RlcmVkIGZvbnQgd2l0aCBuYW1lICR7Zm9udE5hbWV9LmApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5faWNvbnMuc2V0KGljb25OYW1lLCBuZXcgTnhGb250SWNvbihhbGlhcyBhcyBzdHJpbmcsIGZvbnREZWZpbml0aW9uKSk7XG4gICAgfVxuXG4gICAgLyoqIFJldHVybnMgdGhlIGljb24gZnJvbSB0aGUgcmVnaXN0cnkgb3IgdW5kZWZpbmVkIGlmIG5vdCBmb3VuZC4gKi9cbiAgICBnZXRJY29uKGljb25OYW1lOiBzdHJpbmcpOiBOeFN2Z0ljb24gfCBOeEZvbnRJY29uIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgY29uc3QgaWNvbiA9IHRoaXMuX2ljb25zLmdldChpY29uTmFtZSk7XG4gICAgICAgIHJldHVybiBpY29uO1xuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgICB0aGlzLl9pY29ucy5jbGVhcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGFuIGljb24gZm9udCB3aGljaCBjYW4gYmUgdXNlZCBieSB0aGUgZm9udCBpbnB1dCBvbiB0aGUgaWNvbiBjb21wb25lbnQuXG4gICAgICogQHBhcmFtIG5hbWVcbiAgICAgKiBAcGFyYW0gaG9zdENsYXNzIFRoZSBob3N0Q2xhc3MgaXMgdGhlIGdlbmVyYWwgY2xhc3MgbGlrZSBgZmFgIGFuZCBhbiBvcHRpb25hbCBwcmVmaXggY2FuIGJlIGdpdmVuLlxuICAgICAqIEBwYXJhbSBwcmVmaXggVGhlIHByZWZpeCBpcyBoZWxwZnVsIGlmIHlvdXIgY2xhc3MgbmFtZSBmb3IgdGhlIGljb24gd291bGQgYmUgcHJlZml4ZWQsXG4gICAgICogZS5nLiBteS1pY29ucy0taGVhcnQgYnV0IHlvdSBzdGlsbCB3YW50IHRvIG9ubHkgdXNlIHRoZSBuYW1lXG4gICAgICogPGNvZGU+Jmx0O254LWljb24gbmFtZT1cImhlYXJ0XCIgZm9udD1cIm15LWljb25zXCImZ3Q7Jmx0Oy9ueC1pY29uJmd0OzwvY29kZT4uXG4gICAgICovXG4gICAgcmVnaXN0ZXJGb250KG5hbWU6IHN0cmluZywgaG9zdENsYXNzPzogc3RyaW5nLCBwcmVmaXg/OiBzdHJpbmcpIHtcbiAgICAgICAgLy8gcmVnaXN0ZXIgdGhlIG5hbWUgaW4gYSBtYXBcbiAgICAgICAgdGhpcy5fZm9udHMuc2V0KG5hbWUsIG5ldyBOeEljb25Gb250RGVmaW5pdGlvbihob3N0Q2xhc3MgPyBob3N0Q2xhc3MgOiBuYW1lLCBwcmVmaXgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBmb250IGFzIHRoZSBkZWZhdWx0IGZvbnQgdGhhdCBpcyB1c2VkIHdoZW4gdGhlIGZvbnQgaW5wdXRcbiAgICAgKiBpcyBvbWl0dGVkLlxuICAgICAqL1xuICAgIHNldERlZmF1bHRGb250KG5hbWU6IHN0cmluZykge1xuICAgICAgICBjb25zdCBmb250ID0gdGhpcy5nZXRGb250KG5hbWUpO1xuICAgICAgICB0aGlzLl9kZWZhdWx0Rm9udCA9IGZvbnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcmVnaXN0ZXJlZCBDU1MgY2xhc3MgbmFtZS5cbiAgICAgKi9cbiAgICBnZXREZWZhdWx0Rm9udCgpOiBOeEljb25Gb250RGVmaW5pdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWZhdWx0Rm9udDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSByZWdpc3RlcmVkIGZvbnQgYnkgbmFtZS5cbiAgICAgKi9cbiAgICBnZXRGb250KGZvbnROYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgZm9udCA9IHRoaXMuX2ZvbnRzLmdldChmb250TmFtZSk7XG4gICAgICAgIGlmICghZm9udCkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYENhbm5vdCBmaW5kIHJlZ2lzdGVyZWQgZm9udCB3aXRoIG5hbWUgJHtmb250TmFtZX1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm9udDtcbiAgICB9XG59XG5cbi8qKiBDbG9uZXMgYW4gU1ZHRWxlbWVudCB3aGlsZSBwcmVzZXJ2aW5nIHR5cGUgaW5mb3JtYXRpb24uICovXG5leHBvcnQgZnVuY3Rpb24gY2xvbmVTdmcoc3ZnOiBTVkdFbGVtZW50KTogU1ZHRWxlbWVudCB7XG4gICAgcmV0dXJuIHN2Zy5jbG9uZU5vZGUodHJ1ZSkgYXMgU1ZHRWxlbWVudDtcbn1cbiJdfQ==