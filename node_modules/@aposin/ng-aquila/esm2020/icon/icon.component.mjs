import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { take } from 'rxjs/operators';
import { cloneSvg } from './icon-registry';
import { NxSvgIcon } from './icons';
import * as i0 from "@angular/core";
import * as i1 from "./icon-registry";
export class NxIconComponent {
    constructor(/** @docs-private */ el, _iconRegistry) {
        this.el = el;
        this._iconRegistry = _iconRegistry;
        this._name = '';
        this._previousFontClasses = [];
        this._outline = false;
        this._fill = false;
        this._size = 'auto';
        /** Sets the font name that should be used. */
        this.font = '';
    }
    /** Sets the name for specifying the icon.*/
    set name(name) {
        this._name = name;
    }
    get name() {
        return this._name;
    }
    /** Whether the icon has an outline. */
    set outline(value) {
        this._outline = coerceBooleanProperty(value);
    }
    get outline() {
        return this._outline;
    }
    /** Whether the icon is filled. */
    set fill(value) {
        this._fill = coerceBooleanProperty(value);
    }
    get fill() {
        return this._fill;
    }
    /** Specifies the size of the icon. */
    set size(value) {
        if (this._size === value) {
            return;
        }
        this._size = value;
        this.el.nativeElement.classList.add('nx-icon--' + this.size);
    }
    get size() {
        return this._size;
    }
    ngOnChanges(changes) {
        if (changes['name'] || changes['font']) {
            this.renderIcon();
        }
    }
    renderIcon() {
        const icon = this._iconRegistry.getIcon(this.name);
        if (!icon) {
            // here we fall back to the icon class so we look at the `font` input
            // or take the default font
            this._updateFontIconClasses();
            this._clearSvgElement();
        }
        else if (icon instanceof NxSvgIcon) {
            // add content
            icon.getContent()
                .pipe(take(1))
                .subscribe((content) => {
                if (!content) {
                    return;
                }
                // we need to clone the svg here otherwise when you have the same icon
                // multiple times it would end up only in the last icon that got created
                this._setSvgElement(cloneSvg(content));
            });
        }
        else {
            // here we have to look at the alias as well that could come from the registry
            this._updateFontIconClassesFromOverride(icon.alias, icon.font);
            this._clearSvgElement();
        }
    }
    _setSvgElement(svg) {
        this._clearSvgElement();
        // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.
        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/
        // Do this before inserting the element into the DOM, in order to avoid a style recalculation.
        const styleTags = svg.querySelectorAll('style');
        for (let i = 0; i < styleTags.length; i++) {
            styleTags[i].textContent += ' ';
        }
        this._removePreviousFontClasses();
        this.el.nativeElement.appendChild(svg);
    }
    _clearSvgElement() {
        const layoutElement = this.el.nativeElement;
        let childCount = layoutElement.childNodes.length;
        if (this._elementsWithExternalReferences) {
            this._elementsWithExternalReferences.clear();
        }
        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that
        // we can't use innerHTML, because IE will throw if the element has a data binding.
        while (childCount--) {
            const child = layoutElement.childNodes[childCount];
            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid
            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.
            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {
                layoutElement.removeChild(child);
            }
        }
    }
    _updateFontIconClassesFromOverride(alias, font) {
        const name = alias ? alias : this.name;
        this._setFontIconClasses([font.hostClass, font.prefix + name]);
    }
    _updateFontIconClasses() {
        const font = this.font ? this._iconRegistry.getFont(this.font) : this._iconRegistry.getDefaultFont();
        const hostClass = font ? font.hostClass : '';
        const name = font ? font.prefix + this.name : this.name;
        this._setFontIconClasses([hostClass, name]);
    }
    _setFontIconClasses(classes) {
        // filters empty classes as they cannot be added via classList.add
        const filteredClasses = classes.filter(c => c !== '');
        const elem = this.el.nativeElement;
        this._removePreviousFontClasses();
        this._previousFontClasses = filteredClasses;
        filteredClasses.forEach(cl => elem.classList.add(cl));
    }
    _removePreviousFontClasses() {
        if (!this._previousFontClasses) {
            return;
        }
        this._previousFontClasses.forEach(cl => {
            // IE11 doesn't support multiple paramaters in remove or add
            // so we can't use the spread operator here
            this.el.nativeElement.classList.remove(cl);
        });
    }
}
NxIconComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxIconComponent, deps: [{ token: i0.ElementRef }, { token: i1.NxIconRegistry }], target: i0.ɵɵFactoryTarget.Component });
NxIconComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxIconComponent, selector: "nx-icon", inputs: { name: "name", outline: "outline", fill: "fill", size: "size", font: "font" }, host: { properties: { "class.nx-icon--outline": "outline", "class.nx-icon--fill": "fill", "class.nx-icon--auto": "size === \"auto\"" } }, usesOnChanges: true, ngImport: i0, template: '', isInline: true, styles: [":host{speak:none;text-transform:none;line-height:1;display:inline-flex;align-items:center;justify-content:center;letter-spacing:normal;text-align:center;width:1em;height:1em}:host ::ng-deep svg{width:1em;height:1em;fill:currentColor;flex:0 0 auto}:host:before{font-size:inherit;width:1em;height:1em}@media screen and (-ms-high-contrast: active){:host{color:inherit!important}}:host(.nx-icon--auto){font-size:inherit}:host(.nx-icon--s){font-size:24px}:host(.nx-icon--m){font-size:48px}:host(.nx-icon--l){font-size:72px}:host(.nx-icon--xl){font-size:96px}:host(.nx-icon--outline){border-radius:50%;border:solid;width:2em;height:2em;border-width:1px}:host(.nx-icon--outline).nx-icon--s{border-width:1px;width:40px;height:40px}:host(.nx-icon--outline).nx-icon--m{border-width:2px;width:80px;height:80px}:host(.nx-icon--outline).nx-icon--l{border-width:3px;width:120px;height:120px}:host(.nx-icon--outline).nx-icon--xl{border-width:4px;width:160px;height:160px}:host(.nx-icon--fill){border-radius:50%;border-color:transparent;width:2em;height:2em;background:var(--icon-filled-background-color);color:var(--icon-filled-color)}:host(.nx-icon--fill).nx-icon--s{width:40px;height:40px}:host(.nx-icon--fill).nx-icon--m{width:80px;height:80px}:host(.nx-icon--fill).nx-icon--l{width:120px;height:120px}:host(.nx-icon--fill).nx-icon--xl{width:160px;height:160px}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxIconComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-icon', template: '', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[class.nx-icon--outline]': 'outline',
                        '[class.nx-icon--fill]': 'fill',
                        '[class.nx-icon--auto]': 'size === "auto"',
                    }, styles: [":host{speak:none;text-transform:none;line-height:1;display:inline-flex;align-items:center;justify-content:center;letter-spacing:normal;text-align:center;width:1em;height:1em}:host ::ng-deep svg{width:1em;height:1em;fill:currentColor;flex:0 0 auto}:host:before{font-size:inherit;width:1em;height:1em}@media screen and (-ms-high-contrast: active){:host{color:inherit!important}}:host(.nx-icon--auto){font-size:inherit}:host(.nx-icon--s){font-size:24px}:host(.nx-icon--m){font-size:48px}:host(.nx-icon--l){font-size:72px}:host(.nx-icon--xl){font-size:96px}:host(.nx-icon--outline){border-radius:50%;border:solid;width:2em;height:2em;border-width:1px}:host(.nx-icon--outline).nx-icon--s{border-width:1px;width:40px;height:40px}:host(.nx-icon--outline).nx-icon--m{border-width:2px;width:80px;height:80px}:host(.nx-icon--outline).nx-icon--l{border-width:3px;width:120px;height:120px}:host(.nx-icon--outline).nx-icon--xl{border-width:4px;width:160px;height:160px}:host(.nx-icon--fill){border-radius:50%;border-color:transparent;width:2em;height:2em;background:var(--icon-filled-background-color);color:var(--icon-filled-color)}:host(.nx-icon--fill).nx-icon--s{width:40px;height:40px}:host(.nx-icon--fill).nx-icon--m{width:80px;height:80px}:host(.nx-icon--fill).nx-icon--l{width:120px;height:120px}:host(.nx-icon--fill).nx-icon--xl{width:160px;height:160px}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.NxIconRegistry }]; }, propDecorators: { name: [{
                type: Input
            }], outline: [{
                type: Input
            }], fill: [{
                type: Input
            }], size: [{
                type: Input
            }], font: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,