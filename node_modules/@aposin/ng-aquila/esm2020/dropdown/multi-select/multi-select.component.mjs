var _NxMultiSelectComponent_disableSelectAll, _NxMultiSelectComponent_filterFn;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { CdkConnectedOverlay } from '@angular/cdk/overlay';
import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Optional, Output, Self, ViewChild, ViewChildren, } from '@angular/core';
import { NxFormfieldControl } from '@aposin/ng-aquila/formfield';
import { Subject } from 'rxjs';
import { take, takeUntil } from 'rxjs/operators';
import { getPositionOffset, getPositions } from '../dropdown-position';
import { NxMultiSelectOptionComponent } from './multi-select-option.component';
import * as i0 from "@angular/core";
import * as i1 from "../dropdown";
import * as i2 from "@aposin/ng-aquila/utils";
import * as i3 from "@aposin/ng-aquila/formfield";
import * as i4 from "@angular/forms";
import * as i5 from "@aposin/ng-aquila/icon";
import * as i6 from "@aposin/ng-aquila/checkbox";
import * as i7 from "@aposin/ng-aquila/button";
import * as i8 from "./multi-select-option.component";
import * as i9 from "@angular/cdk/overlay";
import * as i10 from "@aposin/ng-aquila/tooltip";
import * as i11 from "@angular/common";
import * as i12 from "@aposin/ng-aquila/input";
let id = 0;
const OVERLAY_MIN_WIDTH = 260;
const _defaultFilterFn = (query, label) => label.toLowerCase().includes(query.toLowerCase());
/**
 * Multi Select component.
 * @typeParam S Type of the items in the options array
 * @typeParam T Type of the ngModel value
 */
export class NxMultiSelectComponent {
    constructor(_intl, _elementRef, _errorStateMatcher, _cdr, _formFieldComponent, ngControl, _parentForm, _parentFormGroup) {
        this._intl = _intl;
        this._elementRef = _elementRef;
        this._errorStateMatcher = _errorStateMatcher;
        this._cdr = _cdr;
        this._formFieldComponent = _formFieldComponent;
        this.ngControl = ngControl;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        _NxMultiSelectComponent_disableSelectAll.set(this, false);
        _NxMultiSelectComponent_filterFn.set(this, void 0);
        this._required = false;
        this._disabled = false;
        this._readonly = false;
        this._placeholder = '';
        this._filter = false;
        this._openedBy = 'mouse';
        /** @docs-private */
        this._divider = 0;
        /** Event emitted when the selected value has been changed. */
        this.selectionChange = new EventEmitter();
        /** @docs-private */
        this.controlType = 'nx-multi-select';
        /** @docs-private */
        this.errorState = false;
        this._positions = getPositions('auto', 0);
        this._inputFocused = false;
        this._ariaDescribedby = '';
        this._width = 0;
        this._filterValue = '';
        this._tooltipText = '';
        this.listItems = [];
        this.selectedItems = new Set();
        this.id = `nx-multi-select-${id++}`;
        this._comboboxId = `${this.id}-combobox`;
        this.stateChanges = new Subject();
        /**
         * List of options to choose from.
         */
        this.options = [];
        /**
         * Placeholder for the filter input.
         */
        this.filterPlaceholder = 'Type to filter';
        /**
         * Selector to get the value of an option.
         * Can be either a property name or a selector function.
         * When empty the whole option is treated as the value.
         */
        this.selectValue = '';
        /**
         * Selector to get the label of an option.
         * Can be either a property name or a selector function.
         * When empty the whole option is treated as the label.
         */
        this.selectLabel = '';
        this._isOpen = false;
        this._destroyed = new Subject();
        this._onChange = () => { };
        this._onTouched = () => { };
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
        this._isDisabled = this._isDisabled.bind(this);
        _intl.changes.pipe(takeUntil(this._destroyed)).subscribe(() => _cdr.markForCheck());
    }
    get value() {
        return this.options.filter(option => this.selectedItems.has(option)).map(option => this._selectValue(option));
    }
    get _isOutline() {
        return this._appearance === 'outline';
    }
    get _appearance() {
        return this._formFieldComponent?.appearance;
    }
    get _overlayLabel() {
        return this._formFieldComponent?.label;
    }
    /**
     * Whether the value is empty.
     */
    get empty() {
        return this.selectedItems.size === 0;
    }
    get focused() {
        return this._isOpen || this._inputFocused;
    }
    // @Input()
    // selectValue(value: string | () )
    get required() {
        return this._required;
    }
    set required(value) {
        this._required = value;
    }
    /** Whether the multi select is disabled. */
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = value;
    }
    /** Whether the multi select should be read only. */
    get readonly() {
        return this._readonly;
    }
    set readonly(value) {
        this._readonly = coerceBooleanProperty(value);
        this.stateChanges.next();
    }
    /** The placeholder shown in the multi select field. */
    get placeholder() {
        return this._placeholder;
    }
    set placeholder(value) {
        this._placeholder = value;
        this.stateChanges.next();
    }
    /**
     * Whether this multi select can be filtered.
     */
    set filter(value) {
        this._filter = coerceBooleanProperty(value);
    }
    get filter() {
        return this._filter;
    }
    /** Whether the (select all / clear all) should be disabled and hidden. */
    set disableSelectAll(value) {
        const coercedValue = coerceBooleanProperty(value);
        if (__classPrivateFieldGet(this, _NxMultiSelectComponent_disableSelectAll, "f") !== coercedValue) {
            __classPrivateFieldSet(this, _NxMultiSelectComponent_disableSelectAll, coercedValue, "f");
            this._cdr.markForCheck();
        }
    }
    get disableSelectAll() {
        return __classPrivateFieldGet(this, _NxMultiSelectComponent_disableSelectAll, "f");
    }
    /**
     * Function to be used when the user types into the search filter. The first argument is the user input,
     * the second argument is the dropdown item value as displayed. The dropdown items will use this function
     * to set their visibility state. A boolean should be returned.
     *
     * Defaults to lower case inclusion.
     */
    set filterFn(value) {
        __classPrivateFieldSet(this, _NxMultiSelectComponent_filterFn, value, "f");
    }
    get filterFn() {
        return __classPrivateFieldGet(this, _NxMultiSelectComponent_filterFn, "f") ?? _defaultFilterFn;
    }
    /** @docs-private */
    get shouldLabelFloat() {
        return this.focused || !this.empty || !!(this.placeholder && this.placeholder.length > 0);
    }
    /** @docs-private */
    get elementRef() {
        return this._elementRef;
    }
    get _allSelected() {
        return this.selectedItems.size === this.options.filter(option => !this._isDisabled(option)).length;
    }
    get _someSelected() {
        return this.selectedItems.size > 0 && !this._allSelected;
    }
    get _isActiveItemFiltered() {
        return (typeof this._keyManager.activeItem !== 'undefined' &&
            !this.listItems.some(option => this._selectValue(option) === this._keyManager.activeItem?.value));
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this._cdr.markForCheck();
        this.stateChanges.next();
    }
    _selectValue(option) {
        if (!this.selectValue) {
            return option;
        }
        if (typeof this.selectValue === 'string') {
            return option[this.selectValue];
        }
        return this.selectValue(option);
    }
    _selectLabel(option) {
        if (!this.selectLabel) {
            return String(this._selectValue(option));
        }
        if (typeof this.selectLabel === 'string') {
            return String(option[this.selectLabel]);
        }
        return this.selectLabel(option);
    }
    _updatePositions() {
        if (this._formFieldComponent) {
            const offset = getPositionOffset(this._elementRef.nativeElement, this._formFieldComponent.elementRef.nativeElement, this._panelHeader?.nativeElement);
            this._positions = getPositions(this._appearance, offset);
        }
    }
    _isDisabled(option) {
        if (typeof this.selectDisabled === 'string') {
            return option[this.selectDisabled];
        }
        if (typeof this.selectDisabled === 'function') {
            return this.selectDisabled(option);
        }
        return false;
    }
    /**
     * Returns html ids of multi select rendered value and label (if available),
     * separated by space.
     */
    _getAriaLabelledBy() {
        const valueId = this.id;
        const labelId = this._formFieldComponent?.labelId;
        if (labelId) {
            return `${valueId} ${labelId}`;
        }
        return valueId;
    }
    /** @docs-private */
    setDescribedByIds(ids) {
        this._ariaDescribedby = ids.join(' ');
    }
    ngAfterViewInit() {
        this._initKeyManager();
    }
    open($event, origin) {
        this._open($event, origin);
    }
    _open($event, origin) {
        if (this._isOpen || this.disabled) {
            return;
        }
        const sortSelectedToTop = (a, b) => {
            const aSelected = this.selectedItems.has(a);
            const bSelected = this.selectedItems.has(b);
            if (aSelected && !bSelected) {
                return -1;
            }
            else if (!aSelected && bSelected) {
                return 1;
            }
            return 0;
        };
        $event.preventDefault();
        this._filterValue = '';
        this._width = Math.max(OVERLAY_MIN_WIDTH, this._trigger?.nativeElement.getBoundingClientRect().width);
        this._isOpen = true;
        this.listItems = this.options.slice().sort(sortSelectedToTop);
        this._divider = this.selectedItems.size - 1;
        this._openedBy = origin;
        this._cdr.markForCheck();
    }
    _close() {
        this._isOpen = false;
        this._updateTooltipText();
        this._trigger?.nativeElement.focus();
    }
    _onSelect(item, selected) {
        if (selected) {
            this.selectedItems.add(item);
        }
        else {
            this.selectedItems.delete(item);
        }
        this._onChange(this.value);
        this.selectionChange.emit(this.value);
    }
    _onKeydown($event) {
        if (!this._isOpen || this.disabled) {
            return;
        }
        const key = $event.key;
        if (key === 'ArrowUp' || key === 'ArrowDown' || key === 'Home' || key === 'End') {
            this._keyManager.onKeydown($event);
            this._scrollActiveOptionIntoView();
            $event.preventDefault();
        }
        if ((window.navigator.platform.match('Mac') ? $event.metaKey : $event.ctrlKey) && key === 'a') {
            this._onSelectAll();
            $event.preventDefault();
        }
        if (key === 'Tab') {
            this._keyManager.onKeydown($event);
        }
        if (key === 'Enter' || (this._filterValue.trim() === '' && key === ' ')) {
            this._keyManager.activeItem?.selectViaInteraction();
            $event.preventDefault();
        }
    }
    _onTriggerBlur() {
        this._onTouched();
    }
    _onFocusWithinOverlay($event) {
        // Keeps focus on the filter when clicking around in the overlay
        if (this._filterInput && $event.target !== this._filterInput.nativeElement) {
            this._filterInput.nativeElement.focus();
        }
    }
    _getAriaActiveDescendant() {
        if (this._keyManager.activeItem) {
            return this._keyManager.activeItem.id;
        }
        return null;
    }
    _onFilterChange(query) {
        if (query) {
            this.listItems = this.options.filter(item => this.filterFn(query, this._selectLabel(item)));
        }
        else {
            this.listItems = this.options.slice();
        }
        if (this._isActiveItemFiltered) {
            setTimeout(() => {
                this._keyManager.setFirstItemActive();
            });
        }
        this._optionsList?.nativeElement.scrollTo(0, 0);
    }
    _getValueText() {
        return this.options
            .filter(option => this.selectedItems.has(option))
            .map(option => this._selectLabel(option))
            .join(', ');
    }
    _onAttach() {
        this._overlayDir?.positionChange.pipe(take(1)).subscribe(() => {
            const overlayRef = this._overlayDir.overlayRef;
            const positionStrategy = overlayRef.getConfig().positionStrategy;
            this._updatePositions();
            positionStrategy.withPositions(this._positions);
            overlayRef.updatePosition();
            this._filterInput?.nativeElement.focus();
            this._panelContent?.nativeElement.focus();
            if (this._openedBy === 'keyboard') {
                this._keyManager.setFirstItemActive();
                this._scrollActiveOptionIntoView();
            }
            this._cdr.markForCheck();
        });
    }
    _onDetach() {
        this._close();
    }
    _onSelectAll() {
        if (this._allSelected) {
            this.selectedItems.clear();
        }
        else {
            this.listItems.filter(option => !this._isDisabled(option)).forEach(option => this.selectedItems.add(option));
        }
        this._onChange(this.value);
        this.selectionChange.emit(this.value);
    }
    _clear() {
        this.selectedItems.clear();
        this._onChange(this.value);
        this.selectionChange.emit(this.value);
    }
    _clearFilter() {
        this._filterValue = '';
        this._onFilterChange(this._filterValue);
    }
    writeValue(value) {
        this.selectedItems.clear();
        if (Array.isArray(value)) {
            for (const item of value) {
                const selectedItem = this.options.find(option => this._selectValue(option) === item);
                if (selectedItem) {
                    this.selectedItems.add(selectedItem);
                }
                else {
                    console.warn('NxMultiSelect: Model contains value that does not exist in given options', item);
                }
            }
        }
        this._cdr.markForCheck();
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    ngDoCheck() {
        if (this.ngControl) {
            this.updateErrorState();
        }
    }
    updateErrorState() {
        const oldState = this.errorState;
        const parent = this._parentFormGroup || this._parentForm;
        const control = this.ngControl ? this.ngControl.control : null;
        const newState = this._errorStateMatcher.isErrorState(control, parent);
        if (newState !== oldState) {
            this.errorState = newState;
            this.stateChanges.next();
        }
    }
    _updateTooltipText() {
        if (!this._trigger) {
            return;
        }
        const [label, suffix, icon] = this._trigger.nativeElement.children;
        const { paddingLeft, paddingRight } = getComputedStyle(this._trigger.nativeElement);
        const triggerContentWidth = this._trigger.nativeElement.clientWidth - parseInt(paddingLeft, 10) - parseInt(paddingRight, 10);
        if (triggerContentWidth - suffix.offsetWidth - icon.offsetWidth <= label.offsetWidth) {
            this._tooltipText = this._getValueText();
        }
        else {
            this._tooltipText = '';
        }
    }
    _scrollActiveOptionIntoView() {
        if (!this._keyManager.activeItem) {
            return;
        }
        const activeItem = this._keyManager.activeItem.elementRef.nativeElement;
        const list = this._optionsList?.nativeElement;
        const listTopScrollPosition = list.scrollTop;
        const listHeight = list.clientHeight;
        const itemTop = activeItem.offsetTop;
        const itemBottom = activeItem.offsetTop + activeItem.offsetHeight;
        // item half or less visible on top
        if (itemTop < listTopScrollPosition) {
            list.scrollTop = itemTop;
            // item half or less visible on bottom
        }
        else if (itemBottom > listTopScrollPosition + listHeight) {
            list.scrollTop = itemBottom - listHeight;
        }
    }
    _initKeyManager() {
        this._keyManager = new ActiveDescendantKeyManager(this._options)
            .withHomeAndEnd()
            .withVerticalOrientation()
            .withHorizontalOrientation('ltr')
            .skipPredicate(item => item.disabled);
        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => this._close());
    }
}
_NxMultiSelectComponent_disableSelectAll = new WeakMap(), _NxMultiSelectComponent_filterFn = new WeakMap();
NxMultiSelectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxMultiSelectComponent, deps: [{ token: i1.NxDropdownIntl }, { token: i0.ElementRef }, { token: i2.ErrorStateMatcher }, { token: i0.ChangeDetectorRef }, { token: i3.NxFormfieldComponent, optional: true }, { token: i4.NgControl, optional: true, self: true }, { token: i4.NgForm, optional: true }, { token: i4.FormGroupDirective, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NxMultiSelectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxMultiSelectComponent, selector: "nx-multi-select", inputs: { required: "required", disabled: "disabled", readonly: "readonly", placeholder: "placeholder", filter: "filter", disableSelectAll: "disableSelectAll", filterFn: "filterFn", options: "options", filterPlaceholder: "filterPlaceholder", selectValue: "selectValue", selectLabel: "selectLabel", selectDisabled: "selectDisabled" }, outputs: { selectionChange: "selectionChange" }, host: { properties: { "class.is-open": "this._isOpen" } }, providers: [{ provide: NxFormfieldControl, useExisting: NxMultiSelectComponent }], viewQueries: [{ propertyName: "_panelContent", first: true, predicate: ["panelContent"], descendants: true }, { propertyName: "_filterInput", first: true, predicate: ["filterInput"], descendants: true }, { propertyName: "_optionsList", first: true, predicate: ["itemsList"], descendants: true }, { propertyName: "_trigger", first: true, predicate: ["trigger"], descendants: true }, { propertyName: "_panelHeader", first: true, predicate: ["panelHeader"], descendants: true }, { propertyName: "_overlayDir", first: true, predicate: CdkConnectedOverlay, descendants: true, static: true }, { propertyName: "_options", predicate: NxMultiSelectOptionComponent, descendants: true }], ngImport: i0, template: "<div\n    [nxTooltip]=\"_tooltipText\"\n    class=\"value\"\n    (click)=\"_open($event, 'mouse')\"\n    (keydown.enter)=\"_open($event, 'keyboard')\"\n    (keydown.space)=\"_open($event, 'keyboard')\"\n    cdkOverlayOrigin\n    #trigger\n    #origin=\"cdkOverlayOrigin\"\n    role=\"combobox\"\n    tabindex=\"0\"\n    aria-haspopup=\"listbox\"\n    [attr.aria-controls]=\"_comboboxId\"\n    (blur)=\"_onTriggerBlur(); _inputFocused = false\"\n    [attr.aria-expanded]=\"_isOpen\"\n    [attr.aria-labelledby]=\"_getAriaLabelledBy()\"\n    [id]=\"id\"\n    (focus)=\"disabled ? null : (_inputFocused = true)\"\n    (keydown)=\"_onKeydown($event)\"\n>\n    <span class=\"value-text\">{{ empty ? placeholder : _getValueText() }}</span>\n    <span>{{ selectedItems.size ? '(' + selectedItems.size + ')' : '' }}</span>\n    <nx-icon size=\"s\" aria-hidden=\"true\" class=\"indicator\" name=\"chevron-down\"></nx-icon>\n</div>\n<ng-template\n    cdkConnectedOverlay\n    cdkConnectedOverlayHasBackdrop\n    cdkConnectedOverlayPush\n    cdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\n    [cdkConnectedOverlayPositions]=\"_positions\"\n    [cdkConnectedOverlayWidth]=\"_width\"\n    [cdkConnectedOverlayOrigin]=\"origin\"\n    [cdkConnectedOverlayOpen]=\"_isOpen\"\n    (overlayOutsideClick)=\"_close()\"\n    (attach)=\"_onAttach()\"\n    (detach)=\"_onDetach()\"\n>\n    <div\n        class=\"panel\"\n        [class.is-outline]=\"_isOutline\"\n        (keydown)=\"_onKeydown($event)\"\n        [attr.aria-owns]=\"_comboboxId\"\n        aria-expanded=\"true\"\n        (focusin)=\"_onFocusWithinOverlay($event)\"\n        role=\"combobox\"\n        [attr.aria-activedescendant]=\"_getAriaActiveDescendant()\"\n        tabindex=\"-1\"\n        [attr.aria-labelledby]=\"_getAriaLabelledBy()\"\n        #panelContent\n    >\n        <div *ngIf=\"!_isOutline && _overlayLabel\" class=\"panel-header\" #panelHeader>\n            {{ _overlayLabel }}\n        </div>\n        <div *ngIf=\"filter\" class=\"filter-wrapper\">\n            <nx-formfield class=\"filter\" appearance=\"auto\">\n                <input\n                    nxInput\n                    #filterInput\n                    [(ngModel)]=\"_filterValue\"\n                    (ngModelChange)=\"_onFilterChange($event)\"\n                    [placeholder]=\"filterPlaceholder\"\n                    autocomplete=\"off\"\n                    [attr.aria-controls]=\"_comboboxId\"\n                    [attr.aria-labelledby]=\"_getAriaLabelledBy()\"\n                    [attr.aria-activedescendant]=\"_getAriaActiveDescendant()\"\n                />\n                <nx-icon\n                    aria-hidden=\"true\"\n                    nxFormfieldSuffix\n                    [class.hidden]=\"!_filterValue.length\"\n                    class=\"clear\"\n                    (click)=\"_clearFilter()\"\n                    name=\"close\"\n                ></nx-icon>\n            </nx-formfield>\n        </div>\n        <div class=\"item actions\" *ngIf=\"_isOutline && !disableSelectAll\">\n            <nx-checkbox [ngModel]=\"_allSelected\" (ngModelChange)=\"_onSelectAll()\" [indeterminate]=\"_someSelected\"> {{ _intl.selectAll }} </nx-checkbox>\n            <button type=\"button\" nxPlainButton (click)=\"_clear()\" [disabled]=\"selectedItems.size === 0\"> {{ _intl.clearAll }} </button>\n        </div>\n        <div class=\"items\" #itemsList [id]=\"_comboboxId\" role=\"listbox\" aria-multiselectable=\"true\">\n            <nx-multi-select-option\n                *ngFor=\"let option of listItems; let i = index\"\n                class=\"item\"\n                [class.divider]=\"_divider === i\"\n                (selectedChange)=\"_onSelect(option, $event)\"\n                [value]=\"_selectValue(option)\"\n                [label]=\"_selectLabel(option)\"\n                [selected]=\"this.selectedItems.has(option)\"\n                [disabled]=\"this._isDisabled(option)\"\n                [appearance]=\"_appearance\"\n            ></nx-multi-select-option>\n        </div>\n    </div>\n</ng-template>\n", styles: [":host{display:block;width:100%;height:100%}.panel{width:100%;box-shadow:var(--shadow-small);border-radius:4px;background:var(--ui-01)}.panel.is-outline .filter{--formfield-label-height: 8px;--formfield-bottom-padding: 8px}.panel.is-outline .items{padding-bottom:8px;max-height:200px}.value{display:grid;align-items:center;width:100%;height:100%;max-width:100%;grid-template-columns:auto -webkit-min-content -webkit-min-content;grid-template-columns:auto min-content min-content;cursor:pointer}.value:focus{outline:none}.value::-moz-focus-inner{border:0}:host-context(.nx-formfield.is-disabled) .value{cursor:not-allowed}.value-text{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;padding-right:8px}.panel-header{font-size:var(--formfield-label-font-size);line-height:var(--formfield-label-line-height);font-weight:var(--formfield-label-font-weight);letter-spacing:var(--formfield-label-letter-spacing);color:var(--dropdown-panel-header-text-color);background-color:var(--dropdown-panel-header-background-color);padding:8px 32px;border-top-left-radius:4px;border-top-right-radius:4px}.label span:nth-child(2){font-weight:600;margin-left:auto;padding-right:12px;flex:0 0 auto}.indicator{transform:rotate(0)}:host(.is-open) .indicator{transform:rotate(180deg)}.items{list-style:none;max-height:272px;overflow-y:auto;position:relative;padding:12px 32px}.filter-wrapper{padding:0 32px}.filter{width:100%}.border{padding-top:8px;margin-top:8px;border-top:1px solid lightgrey}.toggle{width:100%;display:block}.actions{display:flex;justify-content:space-between;white-space:nowrap;padding:8px 32px}.clear{cursor:pointer}.hidden{display:none}.divider{border-bottom:1px solid var(--dropdown-item-divider);margin-bottom:8px;padding-bottom:16px}\n"], components: [{ type: i5.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }, { type: i3.NxFormfieldComponent, selector: "nx-formfield", inputs: ["nxLabel", "nxFloatLabel", "nxStyle", "appearance"] }, { type: i6.NxCheckboxComponent, selector: "nx-checkbox", inputs: ["id", "name", "disabled", "labelSize", "negative", "checked", "indeterminate", "required", "value"], outputs: ["indeterminateChange", "checkedChange", "checkboxChange"] }, { type: i7.NxPlainButtonComponent, selector: "button[nxPlainButton]", inputs: ["nxPlainButton", "disabled"] }, { type: i8.NxMultiSelectOptionComponent, selector: "nx-multi-select-option", inputs: ["appearance", "value", "label", "selected", "disabled"], outputs: ["selectedChange"] }], directives: [{ type: i9.CdkOverlayOrigin, selector: "[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]", exportAs: ["cdkOverlayOrigin"] }, { type: i10.NxTooltipDirective, selector: "[nxTooltip]", inputs: ["nxTooltipPosition", "nxTooltipDisabled", "nxTooltipSelectable", "nxTooltipShowDelay", "nxTooltipHideDelay", "nxTooltip"], exportAs: ["nxTooltip"] }, { type: i9.CdkConnectedOverlay, selector: "[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]", inputs: ["cdkConnectedOverlayOrigin", "cdkConnectedOverlayPositions", "cdkConnectedOverlayPositionStrategy", "cdkConnectedOverlayOffsetX", "cdkConnectedOverlayOffsetY", "cdkConnectedOverlayWidth", "cdkConnectedOverlayHeight", "cdkConnectedOverlayMinWidth", "cdkConnectedOverlayMinHeight", "cdkConnectedOverlayBackdropClass", "cdkConnectedOverlayPanelClass", "cdkConnectedOverlayViewportMargin", "cdkConnectedOverlayScrollStrategy", "cdkConnectedOverlayOpen", "cdkConnectedOverlayDisableClose", "cdkConnectedOverlayTransformOriginOn", "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayLockPosition", "cdkConnectedOverlayFlexibleDimensions", "cdkConnectedOverlayGrowAfterOpen", "cdkConnectedOverlayPush"], outputs: ["backdropClick", "positionChange", "attach", "detach", "overlayKeydown", "overlayOutsideClick"], exportAs: ["cdkConnectedOverlay"] }, { type: i11.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i12.NxInputDirective, selector: "input[nxInput], textarea[nxInput], select[nxInput]", inputs: ["nxAriaLabel", "id", "value", "readonly", "disabled", "required", "type", "placeholder"], exportAs: ["nxInput"] }, { type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i3.NxFormfieldSuffixDirective, selector: "[nxFormfieldSuffix]" }, { type: i11.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxMultiSelectComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-multi-select', providers: [{ provide: NxFormfieldControl, useExisting: NxMultiSelectComponent }], changeDetection: ChangeDetectionStrategy.OnPush, template: "<div\n    [nxTooltip]=\"_tooltipText\"\n    class=\"value\"\n    (click)=\"_open($event, 'mouse')\"\n    (keydown.enter)=\"_open($event, 'keyboard')\"\n    (keydown.space)=\"_open($event, 'keyboard')\"\n    cdkOverlayOrigin\n    #trigger\n    #origin=\"cdkOverlayOrigin\"\n    role=\"combobox\"\n    tabindex=\"0\"\n    aria-haspopup=\"listbox\"\n    [attr.aria-controls]=\"_comboboxId\"\n    (blur)=\"_onTriggerBlur(); _inputFocused = false\"\n    [attr.aria-expanded]=\"_isOpen\"\n    [attr.aria-labelledby]=\"_getAriaLabelledBy()\"\n    [id]=\"id\"\n    (focus)=\"disabled ? null : (_inputFocused = true)\"\n    (keydown)=\"_onKeydown($event)\"\n>\n    <span class=\"value-text\">{{ empty ? placeholder : _getValueText() }}</span>\n    <span>{{ selectedItems.size ? '(' + selectedItems.size + ')' : '' }}</span>\n    <nx-icon size=\"s\" aria-hidden=\"true\" class=\"indicator\" name=\"chevron-down\"></nx-icon>\n</div>\n<ng-template\n    cdkConnectedOverlay\n    cdkConnectedOverlayHasBackdrop\n    cdkConnectedOverlayPush\n    cdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\n    [cdkConnectedOverlayPositions]=\"_positions\"\n    [cdkConnectedOverlayWidth]=\"_width\"\n    [cdkConnectedOverlayOrigin]=\"origin\"\n    [cdkConnectedOverlayOpen]=\"_isOpen\"\n    (overlayOutsideClick)=\"_close()\"\n    (attach)=\"_onAttach()\"\n    (detach)=\"_onDetach()\"\n>\n    <div\n        class=\"panel\"\n        [class.is-outline]=\"_isOutline\"\n        (keydown)=\"_onKeydown($event)\"\n        [attr.aria-owns]=\"_comboboxId\"\n        aria-expanded=\"true\"\n        (focusin)=\"_onFocusWithinOverlay($event)\"\n        role=\"combobox\"\n        [attr.aria-activedescendant]=\"_getAriaActiveDescendant()\"\n        tabindex=\"-1\"\n        [attr.aria-labelledby]=\"_getAriaLabelledBy()\"\n        #panelContent\n    >\n        <div *ngIf=\"!_isOutline && _overlayLabel\" class=\"panel-header\" #panelHeader>\n            {{ _overlayLabel }}\n        </div>\n        <div *ngIf=\"filter\" class=\"filter-wrapper\">\n            <nx-formfield class=\"filter\" appearance=\"auto\">\n                <input\n                    nxInput\n                    #filterInput\n                    [(ngModel)]=\"_filterValue\"\n                    (ngModelChange)=\"_onFilterChange($event)\"\n                    [placeholder]=\"filterPlaceholder\"\n                    autocomplete=\"off\"\n                    [attr.aria-controls]=\"_comboboxId\"\n                    [attr.aria-labelledby]=\"_getAriaLabelledBy()\"\n                    [attr.aria-activedescendant]=\"_getAriaActiveDescendant()\"\n                />\n                <nx-icon\n                    aria-hidden=\"true\"\n                    nxFormfieldSuffix\n                    [class.hidden]=\"!_filterValue.length\"\n                    class=\"clear\"\n                    (click)=\"_clearFilter()\"\n                    name=\"close\"\n                ></nx-icon>\n            </nx-formfield>\n        </div>\n        <div class=\"item actions\" *ngIf=\"_isOutline && !disableSelectAll\">\n            <nx-checkbox [ngModel]=\"_allSelected\" (ngModelChange)=\"_onSelectAll()\" [indeterminate]=\"_someSelected\"> {{ _intl.selectAll }} </nx-checkbox>\n            <button type=\"button\" nxPlainButton (click)=\"_clear()\" [disabled]=\"selectedItems.size === 0\"> {{ _intl.clearAll }} </button>\n        </div>\n        <div class=\"items\" #itemsList [id]=\"_comboboxId\" role=\"listbox\" aria-multiselectable=\"true\">\n            <nx-multi-select-option\n                *ngFor=\"let option of listItems; let i = index\"\n                class=\"item\"\n                [class.divider]=\"_divider === i\"\n                (selectedChange)=\"_onSelect(option, $event)\"\n                [value]=\"_selectValue(option)\"\n                [label]=\"_selectLabel(option)\"\n                [selected]=\"this.selectedItems.has(option)\"\n                [disabled]=\"this._isDisabled(option)\"\n                [appearance]=\"_appearance\"\n            ></nx-multi-select-option>\n        </div>\n    </div>\n</ng-template>\n", styles: [":host{display:block;width:100%;height:100%}.panel{width:100%;box-shadow:var(--shadow-small);border-radius:4px;background:var(--ui-01)}.panel.is-outline .filter{--formfield-label-height: 8px;--formfield-bottom-padding: 8px}.panel.is-outline .items{padding-bottom:8px;max-height:200px}.value{display:grid;align-items:center;width:100%;height:100%;max-width:100%;grid-template-columns:auto -webkit-min-content -webkit-min-content;grid-template-columns:auto min-content min-content;cursor:pointer}.value:focus{outline:none}.value::-moz-focus-inner{border:0}:host-context(.nx-formfield.is-disabled) .value{cursor:not-allowed}.value-text{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;padding-right:8px}.panel-header{font-size:var(--formfield-label-font-size);line-height:var(--formfield-label-line-height);font-weight:var(--formfield-label-font-weight);letter-spacing:var(--formfield-label-letter-spacing);color:var(--dropdown-panel-header-text-color);background-color:var(--dropdown-panel-header-background-color);padding:8px 32px;border-top-left-radius:4px;border-top-right-radius:4px}.label span:nth-child(2){font-weight:600;margin-left:auto;padding-right:12px;flex:0 0 auto}.indicator{transform:rotate(0)}:host(.is-open) .indicator{transform:rotate(180deg)}.items{list-style:none;max-height:272px;overflow-y:auto;position:relative;padding:12px 32px}.filter-wrapper{padding:0 32px}.filter{width:100%}.border{padding-top:8px;margin-top:8px;border-top:1px solid lightgrey}.toggle{width:100%;display:block}.actions{display:flex;justify-content:space-between;white-space:nowrap;padding:8px 32px}.clear{cursor:pointer}.hidden{display:none}.divider{border-bottom:1px solid var(--dropdown-item-divider);margin-bottom:8px;padding-bottom:16px}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.NxDropdownIntl }, { type: i0.ElementRef }, { type: i2.ErrorStateMatcher }, { type: i0.ChangeDetectorRef }, { type: i3.NxFormfieldComponent, decorators: [{
                    type: Optional
                }] }, { type: i4.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }, { type: i4.NgForm, decorators: [{
                    type: Optional
                }] }, { type: i4.FormGroupDirective, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { required: [{
                type: Input
            }], disabled: [{
                type: Input
            }], readonly: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], filter: [{
                type: Input
            }], disableSelectAll: [{
                type: Input
            }], filterFn: [{
                type: Input
            }], _options: [{
                type: ViewChildren,
                args: [NxMultiSelectOptionComponent]
            }], _panelContent: [{
                type: ViewChild,
                args: ['panelContent']
            }], _filterInput: [{
                type: ViewChild,
                args: ['filterInput']
            }], _optionsList: [{
                type: ViewChild,
                args: ['itemsList']
            }], _trigger: [{
                type: ViewChild,
                args: ['trigger']
            }], _panelHeader: [{
                type: ViewChild,
                args: ['panelHeader']
            }], _overlayDir: [{
                type: ViewChild,
                args: [CdkConnectedOverlay, { static: true }]
            }], selectionChange: [{
                type: Output
            }], options: [{
                type: Input
            }], filterPlaceholder: [{
                type: Input
            }], selectValue: [{
                type: Input
            }], selectLabel: [{
                type: Input
            }], selectDisabled: [{
                type: Input
            }], _isOpen: [{
                type: HostBinding,
                args: ['class.is-open']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktc2VsZWN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWFxdWlsYS9zcmMvZHJvcGRvd24vbXVsdGktc2VsZWN0L211bHRpLXNlbGVjdC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1hcXVpbGEvc3JjL2Ryb3Bkb3duL211bHRpLXNlbGVjdC9tdWx0aS1zZWxlY3QuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEVBQUUsMEJBQTBCLEVBQWUsTUFBTSxtQkFBbUIsQ0FBQztBQUM1RSxPQUFPLEVBQWdCLHFCQUFxQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDNUUsT0FBTyxFQUFFLG1CQUFtQixFQUE2RCxNQUFNLHNCQUFzQixDQUFDO0FBQ3RILE9BQU8sRUFFSCx1QkFBdUIsRUFFdkIsU0FBUyxFQUdULFlBQVksRUFDWixXQUFXLEVBQ1gsS0FBSyxFQUVMLFFBQVEsRUFDUixNQUFNLEVBRU4sSUFBSSxFQUNKLFNBQVMsRUFDVCxZQUFZLEdBQ2YsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUF3QyxrQkFBa0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRXZHLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUdqRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDdkUsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0saUNBQWlDLENBQUM7Ozs7Ozs7Ozs7Ozs7O0FBRS9FLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztBQUVYLE1BQU0saUJBQWlCLEdBQUcsR0FBRyxDQUFDO0FBSTlCLE1BQU0sZ0JBQWdCLEdBQTBCLENBQUMsS0FBSyxF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QyxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aXZlRGVzY2VuZGFudEtleU1hbmFnZXIsIEZvY3VzT3JpZ2luIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2ExMXknO1xuaW1wb3J0IHsgQm9vbGVhbklucHV0LCBjb2VyY2VCb29sZWFuUHJvcGVydHkgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHsgQ2RrQ29ubmVjdGVkT3ZlcmxheSwgQ29ubmVjdGlvblBvc2l0aW9uUGFpciwgRmxleGlibGVDb25uZWN0ZWRQb3NpdGlvblN0cmF0ZWd5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHtcbiAgICBBZnRlclZpZXdJbml0LFxuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENoYW5nZURldGVjdG9yUmVmLFxuICAgIENvbXBvbmVudCxcbiAgICBEb0NoZWNrLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIEhvc3RCaW5kaW5nLFxuICAgIElucHV0LFxuICAgIE9uRGVzdHJveSxcbiAgICBPcHRpb25hbCxcbiAgICBPdXRwdXQsXG4gICAgUXVlcnlMaXN0LFxuICAgIFNlbGYsXG4gICAgVmlld0NoaWxkLFxuICAgIFZpZXdDaGlsZHJlbixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgRm9ybUNvbnRyb2wsIEZvcm1Hcm91cERpcmVjdGl2ZSwgTmdDb250cm9sLCBOZ0Zvcm0gfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBBcHBlYXJhbmNlVHlwZSwgTnhGb3JtZmllbGRDb21wb25lbnQsIE54Rm9ybWZpZWxkQ29udHJvbCB9IGZyb20gJ0BhcG9zaW4vbmctYXF1aWxhL2Zvcm1maWVsZCc7XG5pbXBvcnQgeyBFcnJvclN0YXRlTWF0Y2hlciB9IGZyb20gJ0BhcG9zaW4vbmctYXF1aWxhL3V0aWxzJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2UsIHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgTnhEcm9wZG93bkludGwgfSBmcm9tICcuLi9kcm9wZG93bic7XG5pbXBvcnQgeyBnZXRQb3NpdGlvbk9mZnNldCwgZ2V0UG9zaXRpb25zIH0gZnJvbSAnLi4vZHJvcGRvd24tcG9zaXRpb24nO1xuaW1wb3J0IHsgTnhNdWx0aVNlbGVjdE9wdGlvbkNvbXBvbmVudCB9IGZyb20gJy4vbXVsdGktc2VsZWN0LW9wdGlvbi5jb21wb25lbnQnO1xuXG5sZXQgaWQgPSAwO1xuXG5jb25zdCBPVkVSTEFZX01JTl9XSURUSCA9IDI2MDtcblxuZXhwb3J0IHR5cGUgTnhNdWx0aVNlbGVjdEZpbHRlckZuID0gKHF1ZXJ5OiBzdHJpbmcsIGxhYmVsOiBzdHJpbmcpID0+IGJvb2xlYW47XG5cbmNvbnN0IF9kZWZhdWx0RmlsdGVyRm46IE54TXVsdGlTZWxlY3RGaWx0ZXJGbiA9IChxdWVyeSwgbGFiZWwpID0+IGxhYmVsLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMocXVlcnkudG9Mb3dlckNhc2UoKSk7XG5cbi8qKlxuICogTXVsdGkgU2VsZWN0IGNvbXBvbmVudC5cbiAqIEB0eXBlUGFyYW0gUyBUeXBlIG9mIHRoZSBpdGVtcyBpbiB0aGUgb3B0aW9ucyBhcnJheVxuICogQHR5cGVQYXJhbSBUIFR5cGUgb2YgdGhlIG5nTW9kZWwgdmFsdWVcbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdueC1tdWx0aS1zZWxlY3QnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9tdWx0aS1zZWxlY3QuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL211bHRpLXNlbGVjdC5jb21wb25lbnQuc2NzcyddLFxuICAgIHByb3ZpZGVyczogW3sgcHJvdmlkZTogTnhGb3JtZmllbGRDb250cm9sLCB1c2VFeGlzdGluZzogTnhNdWx0aVNlbGVjdENvbXBvbmVudCB9XSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgTnhNdWx0aVNlbGVjdENvbXBvbmVudDxTLCBUPiBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBOeEZvcm1maWVsZENvbnRyb2w8VFtdPiwgRG9DaGVjaywgT25EZXN0cm95LCBBZnRlclZpZXdJbml0IHtcbiAgICBnZXQgdmFsdWUoKTogVFtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5maWx0ZXIob3B0aW9uID0+IHRoaXMuc2VsZWN0ZWRJdGVtcy5oYXMob3B0aW9uKSkubWFwKG9wdGlvbiA9PiB0aGlzLl9zZWxlY3RWYWx1ZShvcHRpb24pKTtcbiAgICB9XG5cbiAgICBnZXQgX2lzT3V0bGluZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGVhcmFuY2UgPT09ICdvdXRsaW5lJztcbiAgICB9XG5cbiAgICBnZXQgX2FwcGVhcmFuY2UoKTogQXBwZWFyYW5jZVR5cGUge1xuICAgICAgICByZXR1cm4gdGhpcy5fZm9ybUZpZWxkQ29tcG9uZW50Py5hcHBlYXJhbmNlIGFzIEFwcGVhcmFuY2VUeXBlO1xuICAgIH1cblxuICAgIGdldCBfb3ZlcmxheUxhYmVsKCk6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gdGhpcy5fZm9ybUZpZWxkQ29tcG9uZW50Py5sYWJlbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSB2YWx1ZSBpcyBlbXB0eS5cbiAgICAgKi9cbiAgICBnZXQgZW1wdHkoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkSXRlbXMuc2l6ZSA9PT0gMDtcbiAgICB9XG5cbiAgICBnZXQgZm9jdXNlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzT3BlbiB8fCB0aGlzLl9pbnB1dEZvY3VzZWQ7XG4gICAgfVxuXG4gICAgLy8gQElucHV0KClcbiAgICAvLyBzZWxlY3RWYWx1ZSh2YWx1ZTogc3RyaW5nIHwgKCkgKVxuXG4gICAgQElucHV0KClcbiAgICBnZXQgcmVxdWlyZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXF1aXJlZDtcbiAgICB9XG4gICAgc2V0IHJlcXVpcmVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuX3JlcXVpcmVkID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqIFdoZXRoZXIgdGhlIG11bHRpIHNlbGVjdCBpcyBkaXNhYmxlZC4gKi9cbiAgICBASW5wdXQoKVxuICAgIGdldCBkaXNhYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkO1xuICAgIH1cbiAgICBzZXQgZGlzYWJsZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5fZGlzYWJsZWQgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKiogV2hldGhlciB0aGUgbXVsdGkgc2VsZWN0IHNob3VsZCBiZSByZWFkIG9ubHkuICovXG4gICAgQElucHV0KClcbiAgICBnZXQgcmVhZG9ubHkoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWFkb25seTtcbiAgICB9XG4gICAgc2V0IHJlYWRvbmx5KHZhbHVlOiBCb29sZWFuSW5wdXQpIHtcbiAgICAgICAgdGhpcy5fcmVhZG9ubHkgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgICAgICB0aGlzLnN0YXRlQ2hhbmdlcy5uZXh0KCk7XG4gICAgfVxuXG4gICAgLyoqIFRoZSBwbGFjZWhvbGRlciBzaG93biBpbiB0aGUgbXVsdGkgc2VsZWN0IGZpZWxkLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgZ2V0IHBsYWNlaG9sZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGxhY2Vob2xkZXI7XG4gICAgfVxuICAgIHNldCBwbGFjZWhvbGRlcih2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX3BsYWNlaG9sZGVyID0gdmFsdWU7XG4gICAgICAgIHRoaXMuc3RhdGVDaGFuZ2VzLm5leHQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoaXMgbXVsdGkgc2VsZWN0IGNhbiBiZSBmaWx0ZXJlZC5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHNldCBmaWx0ZXIodmFsdWU6IEJvb2xlYW5JbnB1dCkge1xuICAgICAgICB0aGlzLl9maWx0ZXIgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgIH1cbiAgICBnZXQgZmlsdGVyKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fZmlsdGVyO1xuICAgIH1cblxuICAgIC8qKiBXaGV0aGVyIHRoZSAoc2VsZWN0IGFsbCAvIGNsZWFyIGFsbCkgc2hvdWxkIGJlIGRpc2FibGVkIGFuZCBoaWRkZW4uICovXG4gICAgQElucHV0KClcbiAgICBzZXQgZGlzYWJsZVNlbGVjdEFsbCh2YWx1ZTogQm9vbGVhbklucHV0KSB7XG4gICAgICAgIGNvbnN0IGNvZXJjZWRWYWx1ZSA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSk7XG4gICAgICAgIGlmICh0aGlzLiNkaXNhYmxlU2VsZWN0QWxsICE9PSBjb2VyY2VkVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuI2Rpc2FibGVTZWxlY3RBbGwgPSBjb2VyY2VkVmFsdWU7XG4gICAgICAgICAgICB0aGlzLl9jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGRpc2FibGVTZWxlY3RBbGwoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLiNkaXNhYmxlU2VsZWN0QWxsO1xuICAgIH1cbiAgICAjZGlzYWJsZVNlbGVjdEFsbCA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdG8gYmUgdXNlZCB3aGVuIHRoZSB1c2VyIHR5cGVzIGludG8gdGhlIHNlYXJjaCBmaWx0ZXIuIFRoZSBmaXJzdCBhcmd1bWVudCBpcyB0aGUgdXNlciBpbnB1dCxcbiAgICAgKiB0aGUgc2Vjb25kIGFyZ3VtZW50IGlzIHRoZSBkcm9wZG93biBpdGVtIHZhbHVlIGFzIGRpc3BsYXllZC4gVGhlIGRyb3Bkb3duIGl0ZW1zIHdpbGwgdXNlIHRoaXMgZnVuY3Rpb25cbiAgICAgKiB0byBzZXQgdGhlaXIgdmlzaWJpbGl0eSBzdGF0ZS4gQSBib29sZWFuIHNob3VsZCBiZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIERlZmF1bHRzIHRvIGxvd2VyIGNhc2UgaW5jbHVzaW9uLlxuICAgICAqL1xuICAgIEBJbnB1dCgpIHNldCBmaWx0ZXJGbih2YWx1ZTogTnhNdWx0aVNlbGVjdEZpbHRlckZuIHwgbnVsbCB8IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLiNmaWx0ZXJGbiA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgZmlsdGVyRm4oKTogTnhNdWx0aVNlbGVjdEZpbHRlckZuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2ZpbHRlckZuID8/IF9kZWZhdWx0RmlsdGVyRm47XG4gICAgfVxuICAgICNmaWx0ZXJGbj86IE54TXVsdGlTZWxlY3RGaWx0ZXJGbiB8IG51bGw7XG5cbiAgICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICAgIGdldCBzaG91bGRMYWJlbEZsb2F0KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5mb2N1c2VkIHx8ICF0aGlzLmVtcHR5IHx8ICEhKHRoaXMucGxhY2Vob2xkZXIgJiYgdGhpcy5wbGFjZWhvbGRlci5sZW5ndGggPiAwKTtcbiAgICB9XG5cbiAgICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICAgIGdldCBlbGVtZW50UmVmKCk6IEVsZW1lbnRSZWY8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50UmVmO1xuICAgIH1cblxuICAgIGdldCBfYWxsU2VsZWN0ZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkSXRlbXMuc2l6ZSA9PT0gdGhpcy5vcHRpb25zLmZpbHRlcihvcHRpb24gPT4gIXRoaXMuX2lzRGlzYWJsZWQob3B0aW9uKSkubGVuZ3RoO1xuICAgIH1cblxuICAgIGdldCBfc29tZVNlbGVjdGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZEl0ZW1zLnNpemUgPiAwICYmICF0aGlzLl9hbGxTZWxlY3RlZDtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIF9pbnRsOiBOeERyb3Bkb3duSW50bCxcbiAgICAgICAgcHJpdmF0ZSBfZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICAgICAgcHJpdmF0ZSBfZXJyb3JTdGF0ZU1hdGNoZXI6IEVycm9yU3RhdGVNYXRjaGVyLFxuICAgICAgICBwcml2YXRlIF9jZHI6IENoYW5nZURldGVjdG9yUmVmLFxuICAgICAgICBAT3B0aW9uYWwoKSBwcml2YXRlIF9mb3JtRmllbGRDb21wb25lbnQ6IE54Rm9ybWZpZWxkQ29tcG9uZW50IHwgbnVsbCxcbiAgICAgICAgQE9wdGlvbmFsKCkgQFNlbGYoKSBwdWJsaWMgbmdDb250cm9sOiBOZ0NvbnRyb2wgfCBudWxsLFxuICAgICAgICBAT3B0aW9uYWwoKSBwcml2YXRlIF9wYXJlbnRGb3JtOiBOZ0Zvcm0gfCBudWxsLFxuICAgICAgICBAT3B0aW9uYWwoKSBwcml2YXRlIF9wYXJlbnRGb3JtR3JvdXA6IEZvcm1Hcm91cERpcmVjdGl2ZSB8IG51bGwsXG4gICAgKSB7XG4gICAgICAgIGlmICh0aGlzLm5nQ29udHJvbCkge1xuICAgICAgICAgICAgLy8gTm90ZTogd2UgcHJvdmlkZSB0aGUgdmFsdWUgYWNjZXNzb3IgdGhyb3VnaCBoZXJlLCBpbnN0ZWFkIG9mXG4gICAgICAgICAgICAvLyB0aGUgYHByb3ZpZGVyc2AgdG8gYXZvaWQgcnVubmluZyBpbnRvIGEgY2lyY3VsYXIgaW1wb3J0LlxuICAgICAgICAgICAgdGhpcy5uZ0NvbnRyb2wudmFsdWVBY2Nlc3NvciA9IHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faXNEaXNhYmxlZCA9IHRoaXMuX2lzRGlzYWJsZWQuYmluZCh0aGlzKTtcblxuICAgICAgICBfaW50bC5jaGFuZ2VzLnBpcGUodGFrZVVudGlsKHRoaXMuX2Rlc3Ryb3llZCkpLnN1YnNjcmliZSgoKSA9PiBfY2RyLm1hcmtGb3JDaGVjaygpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldCBfaXNBY3RpdmVJdGVtRmlsdGVyZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5fa2V5TWFuYWdlci5hY3RpdmVJdGVtICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgIXRoaXMubGlzdEl0ZW1zLnNvbWUob3B0aW9uID0+IHRoaXMuX3NlbGVjdFZhbHVlKG9wdGlvbikgPT09IHRoaXMuX2tleU1hbmFnZXIuYWN0aXZlSXRlbT8udmFsdWUpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgQFZpZXdDaGlsZHJlbihOeE11bHRpU2VsZWN0T3B0aW9uQ29tcG9uZW50KVxuICAgIHByaXZhdGUgX29wdGlvbnMhOiBRdWVyeUxpc3Q8TnhNdWx0aVNlbGVjdE9wdGlvbkNvbXBvbmVudDxUPj47XG5cbiAgICBwcml2YXRlIF9yZXF1aXJlZCA9IGZhbHNlO1xuXG4gICAgcHJpdmF0ZSBfZGlzYWJsZWQgPSBmYWxzZTtcblxuICAgIHByaXZhdGUgX3JlYWRvbmx5ID0gZmFsc2U7XG5cbiAgICBwcml2YXRlIF9wbGFjZWhvbGRlciA9ICcnO1xuXG4gICAgcHJpdmF0ZSBfZmlsdGVyID0gZmFsc2U7XG5cbiAgICBwcml2YXRlIF9vcGVuZWRCeTogRm9jdXNPcmlnaW4gPSAnbW91c2UnO1xuXG4gICAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgICBfZGl2aWRlciA9IDA7XG5cbiAgICBAVmlld0NoaWxkKCdwYW5lbENvbnRlbnQnKSBwcml2YXRlIF9wYW5lbENvbnRlbnQ/OiBFbGVtZW50UmVmO1xuXG4gICAgQFZpZXdDaGlsZCgnZmlsdGVySW5wdXQnKVxuICAgIHByaXZhdGUgX2ZpbHRlcklucHV0PzogRWxlbWVudFJlZjtcblxuICAgIEBWaWV3Q2hpbGQoJ2l0ZW1zTGlzdCcpXG4gICAgcHJpdmF0ZSBfb3B0aW9uc0xpc3Q/OiBFbGVtZW50UmVmO1xuXG4gICAgQFZpZXdDaGlsZCgndHJpZ2dlcicpXG4gICAgcHJpdmF0ZSBfdHJpZ2dlcj86IEVsZW1lbnRSZWY7XG5cbiAgICBAVmlld0NoaWxkKCdwYW5lbEhlYWRlcicpXG4gICAgcHJpdmF0ZSBfcGFuZWxIZWFkZXI/OiBFbGVtZW50UmVmO1xuXG4gICAgQFZpZXdDaGlsZChDZGtDb25uZWN0ZWRPdmVybGF5LCB7IHN0YXRpYzogdHJ1ZSB9KVxuICAgIHByaXZhdGUgX292ZXJsYXlEaXI/OiBDZGtDb25uZWN0ZWRPdmVybGF5O1xuXG4gICAgLyoqIEV2ZW50IGVtaXR0ZWQgd2hlbiB0aGUgc2VsZWN0ZWQgdmFsdWUgaGFzIGJlZW4gY2hhbmdlZC4gKi9cbiAgICBAT3V0cHV0KCkgcmVhZG9ubHkgc2VsZWN0aW9uQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxUW10+KCk7XG5cbiAgICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICAgIHJlYWRvbmx5IGNvbnRyb2xUeXBlOiBzdHJpbmcgPSAnbngtbXVsdGktc2VsZWN0JztcblxuICAgIC8qKiBAZG9jcy1wcml2YXRlICovXG4gICAgZXJyb3JTdGF0ZSA9IGZhbHNlO1xuXG4gICAgX3Bvc2l0aW9uczogQ29ubmVjdGlvblBvc2l0aW9uUGFpcltdID0gZ2V0UG9zaXRpb25zKCdhdXRvJywgMCk7XG5cbiAgICBfaW5wdXRGb2N1c2VkID0gZmFsc2U7XG5cbiAgICBfYXJpYURlc2NyaWJlZGJ5ID0gJyc7XG5cbiAgICBfd2lkdGggPSAwO1xuXG4gICAgX2ZpbHRlclZhbHVlID0gJyc7XG5cbiAgICBfdG9vbHRpcFRleHQgPSAnJztcblxuICAgIGxpc3RJdGVtczogU1tdID0gW107XG5cbiAgICBzZWxlY3RlZEl0ZW1zOiBTZXQ8Uz4gPSBuZXcgU2V0KCk7XG5cbiAgICBpZCA9IGBueC1tdWx0aS1zZWxlY3QtJHtpZCsrfWA7XG5cbiAgICBfY29tYm9ib3hJZCA9IGAke3RoaXMuaWR9LWNvbWJvYm94YDtcblxuICAgIHJlYWRvbmx5IHN0YXRlQ2hhbmdlcyA9IG5ldyBTdWJqZWN0PGFueT4oKTtcblxuICAgIF9rZXlNYW5hZ2VyITogQWN0aXZlRGVzY2VuZGFudEtleU1hbmFnZXI8TnhNdWx0aVNlbGVjdE9wdGlvbkNvbXBvbmVudDxUPj47XG5cbiAgICAvKipcbiAgICAgKiBMaXN0IG9mIG9wdGlvbnMgdG8gY2hvb3NlIGZyb20uXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBvcHRpb25zOiBTW10gPSBbXTtcblxuICAgIC8qKlxuICAgICAqIFBsYWNlaG9sZGVyIGZvciB0aGUgZmlsdGVyIGlucHV0LlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgZmlsdGVyUGxhY2Vob2xkZXIgPSAnVHlwZSB0byBmaWx0ZXInO1xuXG4gICAgLyoqXG4gICAgICogU2VsZWN0b3IgdG8gZ2V0IHRoZSB2YWx1ZSBvZiBhbiBvcHRpb24uXG4gICAgICogQ2FuIGJlIGVpdGhlciBhIHByb3BlcnR5IG5hbWUgb3IgYSBzZWxlY3RvciBmdW5jdGlvbi5cbiAgICAgKiBXaGVuIGVtcHR5IHRoZSB3aG9sZSBvcHRpb24gaXMgdHJlYXRlZCBhcyB0aGUgdmFsdWUuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBzZWxlY3RWYWx1ZTogc3RyaW5nIHwgKChvcHRpb246IFMpID0+IFQpID0gJyc7XG5cbiAgICAvKipcbiAgICAgKiBTZWxlY3RvciB0byBnZXQgdGhlIGxhYmVsIG9mIGFuIG9wdGlvbi5cbiAgICAgKiBDYW4gYmUgZWl0aGVyIGEgcHJvcGVydHkgbmFtZSBvciBhIHNlbGVjdG9yIGZ1bmN0aW9uLlxuICAgICAqIFdoZW4gZW1wdHkgdGhlIHdob2xlIG9wdGlvbiBpcyB0cmVhdGVkIGFzIHRoZSBsYWJlbC5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHNlbGVjdExhYmVsOiBzdHJpbmcgfCAoKG9wdGlvbjogUykgPT4gc3RyaW5nKSA9ICcnO1xuXG4gICAgLyoqXG4gICAgICogU2VsZWN0b3IgdG8gZ2V0IHRoZSBkaXNhYmxlZCBzdGF0ZSBvZiBhbiBvcHRpb24uXG4gICAgICogQ2FuIGJlIGVpdGhlciBhIHByb3BlcnR5IG5hbWUgb3IgYSBzZWxlY3RvciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHNlbGVjdERpc2FibGVkPzogc3RyaW5nIHwgKChvcHRpb246IFMpID0+IGJvb2xlYW4pO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pcy1vcGVuJylcbiAgICBfaXNPcGVuID0gZmFsc2U7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IF9kZXN0cm95ZWQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2Rlc3Ryb3llZC5uZXh0KCk7XG4gICAgICAgIHRoaXMuX2Rlc3Ryb3llZC5jb21wbGV0ZSgpO1xuICAgIH1cblxuICAgIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICB0aGlzLmRpc2FibGVkID0gaXNEaXNhYmxlZDtcbiAgICAgICAgdGhpcy5fY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICB0aGlzLnN0YXRlQ2hhbmdlcy5uZXh0KCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfb25DaGFuZ2U6ICh2YWx1ZTogVFtdKSA9PiB2b2lkID0gKCkgPT4ge307XG5cbiAgICBwcml2YXRlIF9vblRvdWNoZWQ6ICgpID0+IHZvaWQgPSAoKSA9PiB7fTtcblxuICAgIF9zZWxlY3RWYWx1ZShvcHRpb246IFMpOiBUIHtcbiAgICAgICAgaWYgKCF0aGlzLnNlbGVjdFZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9uIGFzIHVua25vd24gYXMgVDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5zZWxlY3RWYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiAob3B0aW9uIGFzIGFueSlbdGhpcy5zZWxlY3RWYWx1ZV0gYXMgVDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdFZhbHVlKG9wdGlvbik7XG4gICAgfVxuXG4gICAgX3NlbGVjdExhYmVsKG9wdGlvbjogUyk6IHN0cmluZyB7XG4gICAgICAgIGlmICghdGhpcy5zZWxlY3RMYWJlbCkge1xuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyh0aGlzLl9zZWxlY3RWYWx1ZShvcHRpb24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5zZWxlY3RMYWJlbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBTdHJpbmcoKG9wdGlvbiBhcyBhbnkpW3RoaXMuc2VsZWN0TGFiZWxdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdExhYmVsKG9wdGlvbik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfdXBkYXRlUG9zaXRpb25zKCkge1xuICAgICAgICBpZiAodGhpcy5fZm9ybUZpZWxkQ29tcG9uZW50KSB7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBnZXRQb3NpdGlvbk9mZnNldChcbiAgICAgICAgICAgICAgICB0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgdGhpcy5fZm9ybUZpZWxkQ29tcG9uZW50LmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0aGlzLl9wYW5lbEhlYWRlcj8ubmF0aXZlRWxlbWVudCxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLl9wb3NpdGlvbnMgPSBnZXRQb3NpdGlvbnModGhpcy5fYXBwZWFyYW5jZSwgb2Zmc2V0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9pc0Rpc2FibGVkKG9wdGlvbjogUyk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuc2VsZWN0RGlzYWJsZWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gKG9wdGlvbiBhcyBhbnkpW3RoaXMuc2VsZWN0RGlzYWJsZWRdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnNlbGVjdERpc2FibGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3REaXNhYmxlZChvcHRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaHRtbCBpZHMgb2YgbXVsdGkgc2VsZWN0IHJlbmRlcmVkIHZhbHVlIGFuZCBsYWJlbCAoaWYgYXZhaWxhYmxlKSxcbiAgICAgKiBzZXBhcmF0ZWQgYnkgc3BhY2UuXG4gICAgICovXG4gICAgX2dldEFyaWFMYWJlbGxlZEJ5KCk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IHZhbHVlSWQgPSB0aGlzLmlkO1xuICAgICAgICBjb25zdCBsYWJlbElkID0gdGhpcy5fZm9ybUZpZWxkQ29tcG9uZW50Py5sYWJlbElkO1xuXG4gICAgICAgIGlmIChsYWJlbElkKSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7dmFsdWVJZH0gJHtsYWJlbElkfWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlSWQ7XG4gICAgfVxuXG4gICAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgICBzZXREZXNjcmliZWRCeUlkcyhpZHM6IHN0cmluZ1tdKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2FyaWFEZXNjcmliZWRieSA9IGlkcy5qb2luKCcgJyk7XG4gICAgfVxuXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAgICB0aGlzLl9pbml0S2V5TWFuYWdlcigpO1xuICAgIH1cblxuICAgIG9wZW4oJGV2ZW50OiBFdmVudCwgb3JpZ2luOiBGb2N1c09yaWdpbikge1xuICAgICAgICB0aGlzLl9vcGVuKCRldmVudCwgb3JpZ2luKTtcbiAgICB9XG5cbiAgICBfb3BlbigkZXZlbnQ6IEV2ZW50LCBvcmlnaW46IEZvY3VzT3JpZ2luKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc09wZW4gfHwgdGhpcy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc29ydFNlbGVjdGVkVG9Ub3AgPSAoYTogUywgYjogUykgPT4ge1xuICAgICAgICAgICAgY29uc3QgYVNlbGVjdGVkID0gdGhpcy5zZWxlY3RlZEl0ZW1zLmhhcyhhKTtcbiAgICAgICAgICAgIGNvbnN0IGJTZWxlY3RlZCA9IHRoaXMuc2VsZWN0ZWRJdGVtcy5oYXMoYik7XG4gICAgICAgICAgICBpZiAoYVNlbGVjdGVkICYmICFiU2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFhU2VsZWN0ZWQgJiYgYlNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfTtcblxuICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5fZmlsdGVyVmFsdWUgPSAnJztcbiAgICAgICAgdGhpcy5fd2lkdGggPSBNYXRoLm1heChPVkVSTEFZX01JTl9XSURUSCwgdGhpcy5fdHJpZ2dlcj8ubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCk7XG4gICAgICAgIHRoaXMuX2lzT3BlbiA9IHRydWU7XG4gICAgICAgIHRoaXMubGlzdEl0ZW1zID0gdGhpcy5vcHRpb25zLnNsaWNlKCkuc29ydChzb3J0U2VsZWN0ZWRUb1RvcCk7XG4gICAgICAgIHRoaXMuX2RpdmlkZXIgPSB0aGlzLnNlbGVjdGVkSXRlbXMuc2l6ZSAtIDE7XG4gICAgICAgIHRoaXMuX29wZW5lZEJ5ID0gb3JpZ2luO1xuICAgICAgICB0aGlzLl9jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuXG4gICAgX2Nsb3NlKCkge1xuICAgICAgICB0aGlzLl9pc09wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fdXBkYXRlVG9vbHRpcFRleHQoKTtcbiAgICAgICAgdGhpcy5fdHJpZ2dlcj8ubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgIH1cblxuICAgIF9vblNlbGVjdChpdGVtOiBTLCBzZWxlY3RlZDogYm9vbGVhbikge1xuICAgICAgICBpZiAoc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRJdGVtcy5hZGQoaXRlbSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkSXRlbXMuZGVsZXRlKGl0ZW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fb25DaGFuZ2UodGhpcy52YWx1ZSk7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uQ2hhbmdlLmVtaXQodGhpcy52YWx1ZSk7XG4gICAgfVxuXG4gICAgX29uS2V5ZG93bigkZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pc09wZW4gfHwgdGhpcy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qga2V5ID0gJGV2ZW50LmtleTtcblxuICAgICAgICBpZiAoa2V5ID09PSAnQXJyb3dVcCcgfHwga2V5ID09PSAnQXJyb3dEb3duJyB8fCBrZXkgPT09ICdIb21lJyB8fCBrZXkgPT09ICdFbmQnKSB7XG4gICAgICAgICAgICB0aGlzLl9rZXlNYW5hZ2VyLm9uS2V5ZG93bigkZXZlbnQpO1xuICAgICAgICAgICAgdGhpcy5fc2Nyb2xsQWN0aXZlT3B0aW9uSW50b1ZpZXcoKTtcbiAgICAgICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCh3aW5kb3cubmF2aWdhdG9yLnBsYXRmb3JtLm1hdGNoKCdNYWMnKSA/ICRldmVudC5tZXRhS2V5IDogJGV2ZW50LmN0cmxLZXkpICYmIGtleSA9PT0gJ2EnKSB7XG4gICAgICAgICAgICB0aGlzLl9vblNlbGVjdEFsbCgpO1xuICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoa2V5ID09PSAnVGFiJykge1xuICAgICAgICAgICAgdGhpcy5fa2V5TWFuYWdlci5vbktleWRvd24oJGV2ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChrZXkgPT09ICdFbnRlcicgfHwgKHRoaXMuX2ZpbHRlclZhbHVlLnRyaW0oKSA9PT0gJycgJiYga2V5ID09PSAnICcpKSB7XG4gICAgICAgICAgICB0aGlzLl9rZXlNYW5hZ2VyLmFjdGl2ZUl0ZW0/LnNlbGVjdFZpYUludGVyYWN0aW9uKCk7XG4gICAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9vblRyaWdnZXJCbHVyKCkge1xuICAgICAgICB0aGlzLl9vblRvdWNoZWQoKTtcbiAgICB9XG5cbiAgICBfb25Gb2N1c1dpdGhpbk92ZXJsYXkoJGV2ZW50OiBFdmVudCkge1xuICAgICAgICAvLyBLZWVwcyBmb2N1cyBvbiB0aGUgZmlsdGVyIHdoZW4gY2xpY2tpbmcgYXJvdW5kIGluIHRoZSBvdmVybGF5XG4gICAgICAgIGlmICh0aGlzLl9maWx0ZXJJbnB1dCAmJiAkZXZlbnQudGFyZ2V0ICE9PSB0aGlzLl9maWx0ZXJJbnB1dC5uYXRpdmVFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9maWx0ZXJJbnB1dC5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfZ2V0QXJpYUFjdGl2ZURlc2NlbmRhbnQoKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgICAgIGlmICh0aGlzLl9rZXlNYW5hZ2VyLmFjdGl2ZUl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9rZXlNYW5hZ2VyLmFjdGl2ZUl0ZW0uaWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBfb25GaWx0ZXJDaGFuZ2UocXVlcnk6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHF1ZXJ5KSB7XG4gICAgICAgICAgICB0aGlzLmxpc3RJdGVtcyA9IHRoaXMub3B0aW9ucy5maWx0ZXIoaXRlbSA9PiB0aGlzLmZpbHRlckZuKHF1ZXJ5LCB0aGlzLl9zZWxlY3RMYWJlbChpdGVtKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5saXN0SXRlbXMgPSB0aGlzLm9wdGlvbnMuc2xpY2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9pc0FjdGl2ZUl0ZW1GaWx0ZXJlZCkge1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fa2V5TWFuYWdlci5zZXRGaXJzdEl0ZW1BY3RpdmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fb3B0aW9uc0xpc3Q/Lm5hdGl2ZUVsZW1lbnQuc2Nyb2xsVG8oMCwgMCk7XG4gICAgfVxuXG4gICAgX2dldFZhbHVlVGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1xuICAgICAgICAgICAgLmZpbHRlcihvcHRpb24gPT4gdGhpcy5zZWxlY3RlZEl0ZW1zLmhhcyhvcHRpb24pKVxuICAgICAgICAgICAgLm1hcChvcHRpb24gPT4gdGhpcy5fc2VsZWN0TGFiZWwob3B0aW9uKSlcbiAgICAgICAgICAgIC5qb2luKCcsICcpO1xuICAgIH1cblxuICAgIF9vbkF0dGFjaCgpIHtcbiAgICAgICAgdGhpcy5fb3ZlcmxheURpcj8ucG9zaXRpb25DaGFuZ2UucGlwZSh0YWtlKDEpKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgb3ZlcmxheVJlZiA9ICh0aGlzLl9vdmVybGF5RGlyIGFzIENka0Nvbm5lY3RlZE92ZXJsYXkpLm92ZXJsYXlSZWY7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvblN0cmF0ZWd5ID0gb3ZlcmxheVJlZi5nZXRDb25maWcoKS5wb3NpdGlvblN0cmF0ZWd5IGFzIEZsZXhpYmxlQ29ubmVjdGVkUG9zaXRpb25TdHJhdGVneTtcblxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlUG9zaXRpb25zKCk7XG4gICAgICAgICAgICBwb3NpdGlvblN0cmF0ZWd5LndpdGhQb3NpdGlvbnModGhpcy5fcG9zaXRpb25zKTtcbiAgICAgICAgICAgIG92ZXJsYXlSZWYudXBkYXRlUG9zaXRpb24oKTtcblxuICAgICAgICAgICAgdGhpcy5fZmlsdGVySW5wdXQ/Lm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICAgIHRoaXMuX3BhbmVsQ29udGVudD8ubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5fb3BlbmVkQnkgPT09ICdrZXlib2FyZCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9rZXlNYW5hZ2VyLnNldEZpcnN0SXRlbUFjdGl2ZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Njcm9sbEFjdGl2ZU9wdGlvbkludG9WaWV3KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9vbkRldGFjaCgpIHtcbiAgICAgICAgdGhpcy5fY2xvc2UoKTtcbiAgICB9XG5cbiAgICBfb25TZWxlY3RBbGwoKSB7XG4gICAgICAgIGlmICh0aGlzLl9hbGxTZWxlY3RlZCkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEl0ZW1zLmNsZWFyKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxpc3RJdGVtcy5maWx0ZXIob3B0aW9uID0+ICF0aGlzLl9pc0Rpc2FibGVkKG9wdGlvbikpLmZvckVhY2gob3B0aW9uID0+IHRoaXMuc2VsZWN0ZWRJdGVtcy5hZGQob3B0aW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fb25DaGFuZ2UodGhpcy52YWx1ZSk7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uQ2hhbmdlLmVtaXQodGhpcy52YWx1ZSk7XG4gICAgfVxuXG4gICAgX2NsZWFyKCkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkSXRlbXMuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5fb25DaGFuZ2UodGhpcy52YWx1ZSk7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uQ2hhbmdlLmVtaXQodGhpcy52YWx1ZSk7XG4gICAgfVxuXG4gICAgX2NsZWFyRmlsdGVyKCkge1xuICAgICAgICB0aGlzLl9maWx0ZXJWYWx1ZSA9ICcnO1xuICAgICAgICB0aGlzLl9vbkZpbHRlckNoYW5nZSh0aGlzLl9maWx0ZXJWYWx1ZSk7XG4gICAgfVxuXG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogVFtdKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRJdGVtcy5jbGVhcigpO1xuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRJdGVtID0gdGhpcy5vcHRpb25zLmZpbmQob3B0aW9uID0+IHRoaXMuX3NlbGVjdFZhbHVlKG9wdGlvbikgPT09IGl0ZW0pO1xuICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZEl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEl0ZW1zLmFkZChzZWxlY3RlZEl0ZW0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignTnhNdWx0aVNlbGVjdDogTW9kZWwgY29udGFpbnMgdmFsdWUgdGhhdCBkb2VzIG5vdCBleGlzdCBpbiBnaXZlbiBvcHRpb25zJywgaXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2Nkci5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG5cbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fb25DaGFuZ2UgPSBmbjtcbiAgICB9XG5cbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZCB7XG4gICAgICAgIHRoaXMuX29uVG91Y2hlZCA9IGZuO1xuICAgIH1cblxuICAgIG5nRG9DaGVjaygpIHtcbiAgICAgICAgaWYgKHRoaXMubmdDb250cm9sKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUVycm9yU3RhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZUVycm9yU3RhdGUoKSB7XG4gICAgICAgIGNvbnN0IG9sZFN0YXRlID0gdGhpcy5lcnJvclN0YXRlO1xuICAgICAgICBjb25zdCBwYXJlbnQgPSB0aGlzLl9wYXJlbnRGb3JtR3JvdXAgfHwgdGhpcy5fcGFyZW50Rm9ybTtcbiAgICAgICAgY29uc3QgY29udHJvbCA9IHRoaXMubmdDb250cm9sID8gKHRoaXMubmdDb250cm9sLmNvbnRyb2wgYXMgRm9ybUNvbnRyb2wpIDogbnVsbDtcbiAgICAgICAgY29uc3QgbmV3U3RhdGUgPSB0aGlzLl9lcnJvclN0YXRlTWF0Y2hlci5pc0Vycm9yU3RhdGUoY29udHJvbCwgcGFyZW50KTtcblxuICAgICAgICBpZiAobmV3U3RhdGUgIT09IG9sZFN0YXRlKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yU3RhdGUgPSBuZXdTdGF0ZTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVDaGFuZ2VzLm5leHQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgX3VwZGF0ZVRvb2x0aXBUZXh0KCkge1xuICAgICAgICBpZiAoIXRoaXMuX3RyaWdnZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IFtsYWJlbCwgc3VmZml4LCBpY29uXSA9IHRoaXMuX3RyaWdnZXIubmF0aXZlRWxlbWVudC5jaGlsZHJlbjtcbiAgICAgICAgY29uc3QgeyBwYWRkaW5nTGVmdCwgcGFkZGluZ1JpZ2h0IH0gPSBnZXRDb21wdXRlZFN0eWxlKHRoaXMuX3RyaWdnZXIubmF0aXZlRWxlbWVudCk7XG4gICAgICAgIGNvbnN0IHRyaWdnZXJDb250ZW50V2lkdGggPSB0aGlzLl90cmlnZ2VyLm5hdGl2ZUVsZW1lbnQuY2xpZW50V2lkdGggLSBwYXJzZUludChwYWRkaW5nTGVmdCwgMTApIC0gcGFyc2VJbnQocGFkZGluZ1JpZ2h0LCAxMCk7XG5cbiAgICAgICAgaWYgKHRyaWdnZXJDb250ZW50V2lkdGggLSBzdWZmaXgub2Zmc2V0V2lkdGggLSBpY29uLm9mZnNldFdpZHRoIDw9IGxhYmVsLm9mZnNldFdpZHRoKSB7XG4gICAgICAgICAgICB0aGlzLl90b29sdGlwVGV4dCA9IHRoaXMuX2dldFZhbHVlVGV4dCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fdG9vbHRpcFRleHQgPSAnJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgX3Njcm9sbEFjdGl2ZU9wdGlvbkludG9WaWV3KCkge1xuICAgICAgICBpZiAoIXRoaXMuX2tleU1hbmFnZXIuYWN0aXZlSXRlbSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYWN0aXZlSXRlbSA9IHRoaXMuX2tleU1hbmFnZXIuYWN0aXZlSXRlbS5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IGxpc3QgPSB0aGlzLl9vcHRpb25zTGlzdD8ubmF0aXZlRWxlbWVudDtcbiAgICAgICAgY29uc3QgbGlzdFRvcFNjcm9sbFBvc2l0aW9uID0gbGlzdC5zY3JvbGxUb3A7XG4gICAgICAgIGNvbnN0IGxpc3RIZWlnaHQgPSBsaXN0LmNsaWVudEhlaWdodDtcbiAgICAgICAgY29uc3QgaXRlbVRvcCA9IGFjdGl2ZUl0ZW0ub2Zmc2V0VG9wO1xuICAgICAgICBjb25zdCBpdGVtQm90dG9tID0gYWN0aXZlSXRlbS5vZmZzZXRUb3AgKyBhY3RpdmVJdGVtLm9mZnNldEhlaWdodDtcblxuICAgICAgICAvLyBpdGVtIGhhbGYgb3IgbGVzcyB2aXNpYmxlIG9uIHRvcFxuICAgICAgICBpZiAoaXRlbVRvcCA8IGxpc3RUb3BTY3JvbGxQb3NpdGlvbikge1xuICAgICAgICAgICAgbGlzdC5zY3JvbGxUb3AgPSBpdGVtVG9wO1xuICAgICAgICAgICAgLy8gaXRlbSBoYWxmIG9yIGxlc3MgdmlzaWJsZSBvbiBib3R0b21cbiAgICAgICAgfSBlbHNlIGlmIChpdGVtQm90dG9tID4gbGlzdFRvcFNjcm9sbFBvc2l0aW9uICsgbGlzdEhlaWdodCkge1xuICAgICAgICAgICAgbGlzdC5zY3JvbGxUb3AgPSBpdGVtQm90dG9tIC0gbGlzdEhlaWdodDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgX2luaXRLZXlNYW5hZ2VyKCkge1xuICAgICAgICB0aGlzLl9rZXlNYW5hZ2VyID0gbmV3IEFjdGl2ZURlc2NlbmRhbnRLZXlNYW5hZ2VyPE54TXVsdGlTZWxlY3RPcHRpb25Db21wb25lbnQ8VD4+KHRoaXMuX29wdGlvbnMpXG4gICAgICAgICAgICAud2l0aEhvbWVBbmRFbmQoKVxuICAgICAgICAgICAgLndpdGhWZXJ0aWNhbE9yaWVudGF0aW9uKClcbiAgICAgICAgICAgIC53aXRoSG9yaXpvbnRhbE9yaWVudGF0aW9uKCdsdHInKVxuICAgICAgICAgICAgLnNraXBQcmVkaWNhdGUoaXRlbSA9PiBpdGVtLmRpc2FibGVkKTtcblxuICAgICAgICB0aGlzLl9rZXlNYW5hZ2VyLnRhYk91dC5waXBlKHRha2VVbnRpbCh0aGlzLl9kZXN0cm95ZWQpKS5zdWJzY3JpYmUoKCkgPT4gdGhpcy5fY2xvc2UoKSk7XG4gICAgfVxufVxuIiwiPGRpdlxuICAgIFtueFRvb2x0aXBdPVwiX3Rvb2x0aXBUZXh0XCJcbiAgICBjbGFzcz1cInZhbHVlXCJcbiAgICAoY2xpY2spPVwiX29wZW4oJGV2ZW50LCAnbW91c2UnKVwiXG4gICAgKGtleWRvd24uZW50ZXIpPVwiX29wZW4oJGV2ZW50LCAna2V5Ym9hcmQnKVwiXG4gICAgKGtleWRvd24uc3BhY2UpPVwiX29wZW4oJGV2ZW50LCAna2V5Ym9hcmQnKVwiXG4gICAgY2RrT3ZlcmxheU9yaWdpblxuICAgICN0cmlnZ2VyXG4gICAgI29yaWdpbj1cImNka092ZXJsYXlPcmlnaW5cIlxuICAgIHJvbGU9XCJjb21ib2JveFwiXG4gICAgdGFiaW5kZXg9XCIwXCJcbiAgICBhcmlhLWhhc3BvcHVwPVwibGlzdGJveFwiXG4gICAgW2F0dHIuYXJpYS1jb250cm9sc109XCJfY29tYm9ib3hJZFwiXG4gICAgKGJsdXIpPVwiX29uVHJpZ2dlckJsdXIoKTsgX2lucHV0Rm9jdXNlZCA9IGZhbHNlXCJcbiAgICBbYXR0ci5hcmlhLWV4cGFuZGVkXT1cIl9pc09wZW5cIlxuICAgIFthdHRyLmFyaWEtbGFiZWxsZWRieV09XCJfZ2V0QXJpYUxhYmVsbGVkQnkoKVwiXG4gICAgW2lkXT1cImlkXCJcbiAgICAoZm9jdXMpPVwiZGlzYWJsZWQgPyBudWxsIDogKF9pbnB1dEZvY3VzZWQgPSB0cnVlKVwiXG4gICAgKGtleWRvd24pPVwiX29uS2V5ZG93bigkZXZlbnQpXCJcbj5cbiAgICA8c3BhbiBjbGFzcz1cInZhbHVlLXRleHRcIj57eyBlbXB0eSA/IHBsYWNlaG9sZGVyIDogX2dldFZhbHVlVGV4dCgpIH19PC9zcGFuPlxuICAgIDxzcGFuPnt7IHNlbGVjdGVkSXRlbXMuc2l6ZSA/ICcoJyArIHNlbGVjdGVkSXRlbXMuc2l6ZSArICcpJyA6ICcnIH19PC9zcGFuPlxuICAgIDxueC1pY29uIHNpemU9XCJzXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgY2xhc3M9XCJpbmRpY2F0b3JcIiBuYW1lPVwiY2hldnJvbi1kb3duXCI+PC9ueC1pY29uPlxuPC9kaXY+XG48bmctdGVtcGxhdGVcbiAgICBjZGtDb25uZWN0ZWRPdmVybGF5XG4gICAgY2RrQ29ubmVjdGVkT3ZlcmxheUhhc0JhY2tkcm9wXG4gICAgY2RrQ29ubmVjdGVkT3ZlcmxheVB1c2hcbiAgICBjZGtDb25uZWN0ZWRPdmVybGF5QmFja2Ryb3BDbGFzcz1cImNkay1vdmVybGF5LXRyYW5zcGFyZW50LWJhY2tkcm9wXCJcbiAgICBbY2RrQ29ubmVjdGVkT3ZlcmxheVBvc2l0aW9uc109XCJfcG9zaXRpb25zXCJcbiAgICBbY2RrQ29ubmVjdGVkT3ZlcmxheVdpZHRoXT1cIl93aWR0aFwiXG4gICAgW2Nka0Nvbm5lY3RlZE92ZXJsYXlPcmlnaW5dPVwib3JpZ2luXCJcbiAgICBbY2RrQ29ubmVjdGVkT3ZlcmxheU9wZW5dPVwiX2lzT3BlblwiXG4gICAgKG92ZXJsYXlPdXRzaWRlQ2xpY2spPVwiX2Nsb3NlKClcIlxuICAgIChhdHRhY2gpPVwiX29uQXR0YWNoKClcIlxuICAgIChkZXRhY2gpPVwiX29uRGV0YWNoKClcIlxuPlxuICAgIDxkaXZcbiAgICAgICAgY2xhc3M9XCJwYW5lbFwiXG4gICAgICAgIFtjbGFzcy5pcy1vdXRsaW5lXT1cIl9pc091dGxpbmVcIlxuICAgICAgICAoa2V5ZG93bik9XCJfb25LZXlkb3duKCRldmVudClcIlxuICAgICAgICBbYXR0ci5hcmlhLW93bnNdPVwiX2NvbWJvYm94SWRcIlxuICAgICAgICBhcmlhLWV4cGFuZGVkPVwidHJ1ZVwiXG4gICAgICAgIChmb2N1c2luKT1cIl9vbkZvY3VzV2l0aGluT3ZlcmxheSgkZXZlbnQpXCJcbiAgICAgICAgcm9sZT1cImNvbWJvYm94XCJcbiAgICAgICAgW2F0dHIuYXJpYS1hY3RpdmVkZXNjZW5kYW50XT1cIl9nZXRBcmlhQWN0aXZlRGVzY2VuZGFudCgpXCJcbiAgICAgICAgdGFiaW5kZXg9XCItMVwiXG4gICAgICAgIFthdHRyLmFyaWEtbGFiZWxsZWRieV09XCJfZ2V0QXJpYUxhYmVsbGVkQnkoKVwiXG4gICAgICAgICNwYW5lbENvbnRlbnRcbiAgICA+XG4gICAgICAgIDxkaXYgKm5nSWY9XCIhX2lzT3V0bGluZSAmJiBfb3ZlcmxheUxhYmVsXCIgY2xhc3M9XCJwYW5lbC1oZWFkZXJcIiAjcGFuZWxIZWFkZXI+XG4gICAgICAgICAgICB7eyBfb3ZlcmxheUxhYmVsIH19XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2ICpuZ0lmPVwiZmlsdGVyXCIgY2xhc3M9XCJmaWx0ZXItd3JhcHBlclwiPlxuICAgICAgICAgICAgPG54LWZvcm1maWVsZCBjbGFzcz1cImZpbHRlclwiIGFwcGVhcmFuY2U9XCJhdXRvXCI+XG4gICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgIG54SW5wdXRcbiAgICAgICAgICAgICAgICAgICAgI2ZpbHRlcklucHV0XG4gICAgICAgICAgICAgICAgICAgIFsobmdNb2RlbCldPVwiX2ZpbHRlclZhbHVlXCJcbiAgICAgICAgICAgICAgICAgICAgKG5nTW9kZWxDaGFuZ2UpPVwiX29uRmlsdGVyQ2hhbmdlKCRldmVudClcIlxuICAgICAgICAgICAgICAgICAgICBbcGxhY2Vob2xkZXJdPVwiZmlsdGVyUGxhY2Vob2xkZXJcIlxuICAgICAgICAgICAgICAgICAgICBhdXRvY29tcGxldGU9XCJvZmZcIlxuICAgICAgICAgICAgICAgICAgICBbYXR0ci5hcmlhLWNvbnRyb2xzXT1cIl9jb21ib2JveElkXCJcbiAgICAgICAgICAgICAgICAgICAgW2F0dHIuYXJpYS1sYWJlbGxlZGJ5XT1cIl9nZXRBcmlhTGFiZWxsZWRCeSgpXCJcbiAgICAgICAgICAgICAgICAgICAgW2F0dHIuYXJpYS1hY3RpdmVkZXNjZW5kYW50XT1cIl9nZXRBcmlhQWN0aXZlRGVzY2VuZGFudCgpXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxueC1pY29uXG4gICAgICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPVwidHJ1ZVwiXG4gICAgICAgICAgICAgICAgICAgIG54Rm9ybWZpZWxkU3VmZml4XG4gICAgICAgICAgICAgICAgICAgIFtjbGFzcy5oaWRkZW5dPVwiIV9maWx0ZXJWYWx1ZS5sZW5ndGhcIlxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImNsZWFyXCJcbiAgICAgICAgICAgICAgICAgICAgKGNsaWNrKT1cIl9jbGVhckZpbHRlcigpXCJcbiAgICAgICAgICAgICAgICAgICAgbmFtZT1cImNsb3NlXCJcbiAgICAgICAgICAgICAgICA+PC9ueC1pY29uPlxuICAgICAgICAgICAgPC9ueC1mb3JtZmllbGQ+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiaXRlbSBhY3Rpb25zXCIgKm5nSWY9XCJfaXNPdXRsaW5lICYmICFkaXNhYmxlU2VsZWN0QWxsXCI+XG4gICAgICAgICAgICA8bngtY2hlY2tib3ggW25nTW9kZWxdPVwiX2FsbFNlbGVjdGVkXCIgKG5nTW9kZWxDaGFuZ2UpPVwiX29uU2VsZWN0QWxsKClcIiBbaW5kZXRlcm1pbmF0ZV09XCJfc29tZVNlbGVjdGVkXCI+IHt7IF9pbnRsLnNlbGVjdEFsbCB9fSA8L254LWNoZWNrYm94PlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgbnhQbGFpbkJ1dHRvbiAoY2xpY2spPVwiX2NsZWFyKClcIiBbZGlzYWJsZWRdPVwic2VsZWN0ZWRJdGVtcy5zaXplID09PSAwXCI+IHt7IF9pbnRsLmNsZWFyQWxsIH19IDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIml0ZW1zXCIgI2l0ZW1zTGlzdCBbaWRdPVwiX2NvbWJvYm94SWRcIiByb2xlPVwibGlzdGJveFwiIGFyaWEtbXVsdGlzZWxlY3RhYmxlPVwidHJ1ZVwiPlxuICAgICAgICAgICAgPG54LW11bHRpLXNlbGVjdC1vcHRpb25cbiAgICAgICAgICAgICAgICAqbmdGb3I9XCJsZXQgb3B0aW9uIG9mIGxpc3RJdGVtczsgbGV0IGkgPSBpbmRleFwiXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJpdGVtXCJcbiAgICAgICAgICAgICAgICBbY2xhc3MuZGl2aWRlcl09XCJfZGl2aWRlciA9PT0gaVwiXG4gICAgICAgICAgICAgICAgKHNlbGVjdGVkQ2hhbmdlKT1cIl9vblNlbGVjdChvcHRpb24sICRldmVudClcIlxuICAgICAgICAgICAgICAgIFt2YWx1ZV09XCJfc2VsZWN0VmFsdWUob3B0aW9uKVwiXG4gICAgICAgICAgICAgICAgW2xhYmVsXT1cIl9zZWxlY3RMYWJlbChvcHRpb24pXCJcbiAgICAgICAgICAgICAgICBbc2VsZWN0ZWRdPVwidGhpcy5zZWxlY3RlZEl0ZW1zLmhhcyhvcHRpb24pXCJcbiAgICAgICAgICAgICAgICBbZGlzYWJsZWRdPVwidGhpcy5faXNEaXNhYmxlZChvcHRpb24pXCJcbiAgICAgICAgICAgICAgICBbYXBwZWFyYW5jZV09XCJfYXBwZWFyYW5jZVwiXG4gICAgICAgICAgICA+PC9ueC1tdWx0aS1zZWxlY3Qtb3B0aW9uPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbjwvbmctdGVtcGxhdGU+XG4iXX0=