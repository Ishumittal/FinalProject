import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Optional, Output, ViewChild, } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { NxDropdownControl } from '../dropdown.control';
import * as i0 from "@angular/core";
import * as i1 from "../group/dropdown-group";
import * as i2 from "@aposin/ng-aquila/checkbox";
import * as i3 from "@aposin/ng-aquila/icon";
import * as i4 from "@angular/common";
import * as i5 from "@aposin/ng-aquila/tooltip";
import * as i6 from "@angular/cdk/observers";
import * as i7 from "../dropdown.control";
export class NxDropdownItemChange {
    constructor(
    /** Reference to the option that emitted the event. */
    item, 
    /** Whether the change in the option's value was a result of a user action. */
    isUserInput = false) {
        this.item = item;
        this.isUserInput = isUserInput;
    }
}
/** the unique id counter */
let nextId = 0;
export class NxDropdownItemComponent {
    constructor(_dropdown, 
    /** @docs-private */ group, _cdr, _elementRef) {
        this._dropdown = _dropdown;
        this.group = group;
        this._cdr = _cdr;
        this._elementRef = _elementRef;
        this._hidden = false;
        this._mostRecentViewValue = '';
        this._id = `nx-dropdown-item-${nextId++}`;
        this._disabled = false;
        this._selected = false;
        /** Emits whenever the component is destroyed. */
        this._destroyed = new Subject();
        /** Event emitted when the option is selected or deselected. */
        this.onSelectionChange = new EventEmitter();
        /** Emits when the state of the option changes and any parents have to be notified. */
        this._stateChanges = new Subject();
        this._dropdown.filterChanges.pipe(takeUntil(this._destroyed)).subscribe(value => {
            this._showOrHideByFilter(value);
        });
        // reset the hidden state when dropdown closes that on next open the user is seeing the full list again
        this._dropdown._closedStream.pipe(takeUntil(this._destroyed)).subscribe(() => {
            this._hidden = false;
        });
    }
    get label() {
        return this._mostRecentViewValue || this.viewValue;
    }
    /** The unique ID of the option. */
    get id() {
        return this._id;
    }
    /** Whether the dropdown item is disabled. */
    set disabled(value) {
        const newValue = coerceBooleanProperty(value);
        if (this.disabled !== newValue) {
            this._disabled = newValue;
            this._cdr.markForCheck();
        }
    }
    get disabled() {
        return this._disabled;
    }
    /** Whether the item is selected. */
    get selected() {
        return this._selected;
    }
    /** Whether the item is active. */
    get active() {
        return this._active;
    }
    /**
     * @docs-private
     * Whether the parent dropdown is in multiselect mode.
     */
    get multiselect() {
        return this._dropdown?.isMultiSelect;
    }
    /**
     * @docs-private
     * Whether the parent dropdown allows item truncation.
     */
    get truncateItems() {
        return !this._dropdown?.ignoreItemTrunctation;
    }
    ngAfterViewChecked() {
        // Since the parent dropdown component could be using the item's label to display the selected values
        // and it doesn't have a way of knowing if the item's label has changed
        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are
        // relatively cheap, however we still limit them only to selected options in order to avoid
        // hitting the DOM too often.
        this._updateViewValue();
    }
    _updateViewValue() {
        if (this._selected) {
            const viewValue = this.viewValue;
            if (viewValue !== this._mostRecentViewValue) {
                this._mostRecentViewValue = viewValue;
                this._stateChanges.next();
            }
        }
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this._stateChanges.complete();
    }
    _onClick(event) {
        /* preventDefault to stop triggering the event twice when you click on the checkbox or the label inside the item */
        event.preventDefault();
        event.stopPropagation();
        this._selectViaInteraction();
    }
    /**
     * `Selects the option while indicating the selection came from the user. Used to
     * determine if the select's view -> model callback should be invoked.`
     */
    _selectViaInteraction() {
        if (!this.disabled) {
            this._selected = this.multiselect ? !this._selected : true;
            this._updateViewValue();
            this._cdr.markForCheck();
            this._emitSelectionChangeEvent(true);
        }
    }
    /**
     * @docs-private
     * Gets the `aria-selected` value for the option. The attribute is omitted from the single-select dropdown
     * for the unselected options. Including the `aria-selected="false" attributes adds a lot of of noise to
     * screen-reader users without providing useful information.
     */
    _getAriaSelected() {
        return this.multiselect ? this.selected : null;
    }
    /** @docs-private */
    show() {
        this._hidden = false;
        this._cdr.markForCheck();
    }
    /** @docs-private */
    hide() {
        this._hidden = true;
        this._cdr.markForCheck();
    }
    _showOrHideByFilter(search) {
        const constraint = this._dropdown.filterFn(search, this.viewValue);
        this._hidden = !constraint;
        this._cdr.markForCheck();
    }
    get _formattedValue() {
        return this._dropdown.valueFormatter(this.value);
    }
    /** @docs-private */
    get viewValue() {
        return (this._elementRef.nativeElement.textContent || '').trim();
    }
    /** @docs-private */
    get elementRef() {
        return this._elementRef;
    }
    select() {
        if (!this._selected && !this.disabled) {
            this._selected = true;
            this._cdr.markForCheck();
            this._emitSelectionChangeEvent();
        }
    }
    /** @docs-private */
    deselect() {
        if (this._selected) {
            this._selected = false;
            this._cdr.markForCheck();
            this._emitSelectionChangeEvent();
        }
    }
    _initSelected(selected) {
        this._selected = selected;
        this._cdr.markForCheck();
    }
    /** @docs-private */
    focus() {
        this._elementRef.nativeElement.focus();
    }
    _emitSelectionChangeEvent(isUserInput = false) {
        this.onSelectionChange.emit(new NxDropdownItemChange(this, isUserInput));
    }
    /** @docs-private */
    setActiveStyles() {
        this._active = true;
        this._cdr.markForCheck();
    }
    /** @docs-private */
    setInactiveStyles() {
        this._active = false;
        this._cdr.markForCheck();
    }
    /**
     * Returns the list item's text label. Implemented as a part of the ListKeyManagerOption.
     * @docs-private */
    getLabel() {
        return this.viewValue;
    }
    _isContentEmpty(element) {
        return element.children.length === 0 && !element.textContent?.trim();
    }
    _onLabelChange() {
        // trigger change detection when the label content changes for the case that ng-content was empty before.
        // this is also important when the label comes in deferred, e.g. by a delayed observable,
        // then first the default label derived from the value is shown
        // and after the value from the async observable is ready we need to trigger change detection that the derived label
        // gets hidden again.
        // Notice(!): the event of (cdkObserveContent) is run outside of the ngZone
        // We run detectChanges directly here as markForCheck wasn't enough to always trigger change detection correctly
        this._cdr.detectChanges();
    }
    /** Returns the correct tabindex for the option depending on disabled state. */
    _getTabIndex() {
        return this.disabled ? '-1' : '0';
    }
}
NxDropdownItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDropdownItemComponent, deps: [{ token: NxDropdownControl }, { token: i1.NxDropdownGroupComponent, optional: true }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
NxDropdownItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxDropdownItemComponent, selector: "nx-dropdown-item", inputs: { value: ["nxValue", "value"], disabled: "disabled" }, outputs: { onSelectionChange: "onSelectionChange" }, host: { attributes: { "role": "option" }, listeners: { "click": "_onClick($event)" }, properties: { "id": "id", "attr.tabindex": "_getTabIndex()", "attr.aria-disabled": "disabled.toString()", "attr.aria-selected": "_getAriaSelected()", "class.nx-hidden": "_hidden", "class.nx-dropdown-item--active": "active", "class.nx-dropdown-item--disabled": "disabled", "class.nx-selected": "selected", "class.nx-multiselect": "multiselect" } }, viewQueries: [{ propertyName: "containerElement", first: true, predicate: ["container"], descendants: true, static: true }], ngImport: i0, template: "<div #container class=\"nx-dropdown-results__option\" [ngClass]=\"{'nx-dropdown-results__option--selected': selected}\">\n    <nx-checkbox *ngIf=\"multiselect\" [checked]=\"selected\" [disabled]=\"disabled\">\n        <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n    </nx-checkbox>\n\n    <span *ngIf=\"!multiselect\" class=\"nx-dropdown-results__option-checkicon\">\n        <nx-icon name=\"check\" aria-hidden=\"true\"></nx-icon>\n    </span>\n\n    <ng-container *ngIf=\"!multiselect\">\n        <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n    </ng-container>\n</div>\n\n<ng-template #contentTemplate>\n    <div class=\"nx-dropdown-results__option-label\">\n        <div\n            #content\n            (cdkObserveContent)=\"_onLabelChange()\"\n            [nxTooltip]=\"truncateItems && viewValue?.length > 35 ? viewValue : null\"\n            [ngClass]=\"{ 'ellipsis': truncateItems }\"\n        >\n            <ng-content></ng-content>\n        </div>\n\n        <div [nxTooltip]=\"truncateItems && value?.length > 35 ? value : null\" [ngClass]=\"{ 'ellipsis': truncateItems }\">\n            <ng-container *ngIf=\"_isContentEmpty(content)\"> {{_formattedValue }} </ng-container>\n        </div>\n    </div>\n</ng-template>\n", styles: [":host{display:block}:host:focus{outline:none}:host(.nx-hidden){display:none}:host:first-child .nx-dropdown-results__option{padding-top:16px}:host:last-child .nx-dropdown-results__option{padding-bottom:24px}nx-checkbox{margin-bottom:0}.nx-dropdown-results__option{font-size:var(--dropdown-item-font-size);line-height:var(--dropdown-item-line-height);font-weight:var(--dropdown-item-font-weight);letter-spacing:var(--dropdown-item-letter-spacing);padding:8px 32px 8px 8px;cursor:pointer;position:relative;display:flex;max-width:100%;white-space:nowrap}:host-context([dir=rtl]) .nx-dropdown-results__option{padding:8px 8px 8px 32px}.nx-dropdown-results__option-label{padding:0 12px;margin:0 -12px;color:var(--dropdown-item-text-color);white-space:pre-line}@media screen and (-ms-high-contrast: active){.nx-dropdown-results__option-label{-ms-high-contrast-adjust:none;color:buttonText;background-color:buttonFace;border-radius:4px}}:host(.nx-multiselect) .nx-dropdown-results__option{display:block;padding-left:32px}[dir=rtl] :host(.nx-multiselect) .nx-dropdown-results__option{padding-right:32px}:host:not(.nx-dropdown-item--disabled):hover .nx-dropdown-results__option-label,:host(.nx-selected):not(.nx-dropdown-item--disabled):hover .nx-dropdown-results__option-label,:host(.nx-selected):not(.nx-dropdown-item--disabled):hover .nx-dropdown-results__option-checkicon{color:var(--dropdown-item-hover-color)}:host(.nx-selected) .nx-dropdown-results__option-checkicon{opacity:1}:host(.nx-selected) .nx-dropdown-results__option-label{color:var(--dropdown-item-selected-color)}.nx-dropdown-results__option-checkicon{opacity:0;margin-right:8px;height:var(--dropdown-item-line-height);color:var(--dropdown-item-checkmark-color)}.nx-dropdown-results__option-checkicon nx-icon{line-height:var(--dropdown-item-line-height);font-size:16px}:host-context([dir=rtl]) .nx-dropdown-results__option-checkicon{margin-right:0;margin-right:initial;margin-left:8px}:host(.nx-dropdown-item--active) .nx-dropdown-results__option .nx-dropdown-results__option-label{border-radius:4px;box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){:host(.nx-dropdown-item--active) .nx-dropdown-results__option .nx-dropdown-results__option-label{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}:host(.nx-multiselect.nx-dropdown-item--active) .nx-dropdown-results__option .nx-dropdown-results__option-label{box-shadow:none}@media screen and (-ms-high-contrast: active){:host(.nx-multiselect.nx-dropdown-item--active) .nx-dropdown-results__option .nx-dropdown-results__option-label{box-shadow:none}}:host(.nx-multiselect.nx-dropdown-item--active) ::ng-deep .nx-checkbox__label{border-radius:4px;box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){:host(.nx-multiselect.nx-dropdown-item--active) ::ng-deep .nx-checkbox__label{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}:host(.nx-selected.nx-dropdown-item--active) .nx-dropdown-results__option-label{padding-left:24px;margin-left:-24px}[dir=rtl] :host(.nx-selected.nx-dropdown-item--active) .nx-dropdown-results__option-label{padding-left:0;padding-left:initial;margin-left:0;margin-left:initial;padding-right:24px;margin-right:-24px}:host ::ng-deep .nx-checkbox__label{padding:0 4px;margin:0 -4px}:host(.nx-dropdown-item--disabled) .nx-dropdown-results__option{cursor:not-allowed}:host(.nx-dropdown-item--disabled) .nx-dropdown-results__option-label{color:var(--dropdown-item-text-color-disabled)}@media screen and (-ms-high-contrast: active){:host:hover:not(.nx-dropdown-item--disabled) .nx-dropdown-results__option-label,:host(.nx-dropdown-item--active):not(.nx-multiselect) .nx-dropdown-results__option-label{color:highlightText;background-color:highlight}:host(.nx-dropdown-item--active):not(.nx-multiselect) .nx-dropdown-results__option-checkicon{-ms-high-contrast-adjust:none;color:highlightText;background:highlight;z-index:1}:host(.nx-dropdown-item--disabled) .nx-dropdown-results__option-label{color:GrayText}}.ellipsis{max-width:35ch;text-overflow:ellipsis;overflow:hidden;white-space:nowrap}\n"], components: [{ type: i2.NxCheckboxComponent, selector: "nx-checkbox", inputs: ["id", "name", "disabled", "labelSize", "negative", "checked", "indeterminate", "required", "value"], outputs: ["indeterminateChange", "checkedChange", "checkboxChange"] }, { type: i3.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }], directives: [{ type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i5.NxTooltipDirective, selector: "[nxTooltip]", inputs: ["nxTooltipPosition", "nxTooltipDisabled", "nxTooltipSelectable", "nxTooltipShowDelay", "nxTooltipHideDelay", "nxTooltip"], exportAs: ["nxTooltip"] }, { type: i6.CdkObserveContent, selector: "[cdkObserveContent]", inputs: ["cdkObserveContentDisabled", "debounce"], outputs: ["cdkObserveContent"], exportAs: ["cdkObserveContent"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDropdownItemComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-dropdown-item', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[id]': 'id',
                        role: 'option',
                        '[attr.tabindex]': '_getTabIndex()',
                        '[attr.aria-disabled]': 'disabled.toString()',
                        '[attr.aria-selected]': '_getAriaSelected()',
                        '[class.nx-hidden]': '_hidden',
                        '[class.nx-dropdown-item--active]': 'active',
                        '[class.nx-dropdown-item--disabled]': 'disabled',
                        '[class.nx-selected]': 'selected',
                        '[class.nx-multiselect]': 'multiselect',
                        '(click)': '_onClick($event)',
                    }, template: "<div #container class=\"nx-dropdown-results__option\" [ngClass]=\"{'nx-dropdown-results__option--selected': selected}\">\n    <nx-checkbox *ngIf=\"multiselect\" [checked]=\"selected\" [disabled]=\"disabled\">\n        <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n    </nx-checkbox>\n\n    <span *ngIf=\"!multiselect\" class=\"nx-dropdown-results__option-checkicon\">\n        <nx-icon name=\"check\" aria-hidden=\"true\"></nx-icon>\n    </span>\n\n    <ng-container *ngIf=\"!multiselect\">\n        <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n    </ng-container>\n</div>\n\n<ng-template #contentTemplate>\n    <div class=\"nx-dropdown-results__option-label\">\n        <div\n            #content\n            (cdkObserveContent)=\"_onLabelChange()\"\n            [nxTooltip]=\"truncateItems && viewValue?.length > 35 ? viewValue : null\"\n            [ngClass]=\"{ 'ellipsis': truncateItems }\"\n        >\n            <ng-content></ng-content>\n        </div>\n\n        <div [nxTooltip]=\"truncateItems && value?.length > 35 ? value : null\" [ngClass]=\"{ 'ellipsis': truncateItems }\">\n            <ng-container *ngIf=\"_isContentEmpty(content)\"> {{_formattedValue }} </ng-container>\n        </div>\n    </div>\n</ng-template>\n", styles: [":host{display:block}:host:focus{outline:none}:host(.nx-hidden){display:none}:host:first-child .nx-dropdown-results__option{padding-top:16px}:host:last-child .nx-dropdown-results__option{padding-bottom:24px}nx-checkbox{margin-bottom:0}.nx-dropdown-results__option{font-size:var(--dropdown-item-font-size);line-height:var(--dropdown-item-line-height);font-weight:var(--dropdown-item-font-weight);letter-spacing:var(--dropdown-item-letter-spacing);padding:8px 32px 8px 8px;cursor:pointer;position:relative;display:flex;max-width:100%;white-space:nowrap}:host-context([dir=rtl]) .nx-dropdown-results__option{padding:8px 8px 8px 32px}.nx-dropdown-results__option-label{padding:0 12px;margin:0 -12px;color:var(--dropdown-item-text-color);white-space:pre-line}@media screen and (-ms-high-contrast: active){.nx-dropdown-results__option-label{-ms-high-contrast-adjust:none;color:buttonText;background-color:buttonFace;border-radius:4px}}:host(.nx-multiselect) .nx-dropdown-results__option{display:block;padding-left:32px}[dir=rtl] :host(.nx-multiselect) .nx-dropdown-results__option{padding-right:32px}:host:not(.nx-dropdown-item--disabled):hover .nx-dropdown-results__option-label,:host(.nx-selected):not(.nx-dropdown-item--disabled):hover .nx-dropdown-results__option-label,:host(.nx-selected):not(.nx-dropdown-item--disabled):hover .nx-dropdown-results__option-checkicon{color:var(--dropdown-item-hover-color)}:host(.nx-selected) .nx-dropdown-results__option-checkicon{opacity:1}:host(.nx-selected) .nx-dropdown-results__option-label{color:var(--dropdown-item-selected-color)}.nx-dropdown-results__option-checkicon{opacity:0;margin-right:8px;height:var(--dropdown-item-line-height);color:var(--dropdown-item-checkmark-color)}.nx-dropdown-results__option-checkicon nx-icon{line-height:var(--dropdown-item-line-height);font-size:16px}:host-context([dir=rtl]) .nx-dropdown-results__option-checkicon{margin-right:0;margin-right:initial;margin-left:8px}:host(.nx-dropdown-item--active) .nx-dropdown-results__option .nx-dropdown-results__option-label{border-radius:4px;box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){:host(.nx-dropdown-item--active) .nx-dropdown-results__option .nx-dropdown-results__option-label{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}:host(.nx-multiselect.nx-dropdown-item--active) .nx-dropdown-results__option .nx-dropdown-results__option-label{box-shadow:none}@media screen and (-ms-high-contrast: active){:host(.nx-multiselect.nx-dropdown-item--active) .nx-dropdown-results__option .nx-dropdown-results__option-label{box-shadow:none}}:host(.nx-multiselect.nx-dropdown-item--active) ::ng-deep .nx-checkbox__label{border-radius:4px;box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){:host(.nx-multiselect.nx-dropdown-item--active) ::ng-deep .nx-checkbox__label{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}:host(.nx-selected.nx-dropdown-item--active) .nx-dropdown-results__option-label{padding-left:24px;margin-left:-24px}[dir=rtl] :host(.nx-selected.nx-dropdown-item--active) .nx-dropdown-results__option-label{padding-left:0;padding-left:initial;margin-left:0;margin-left:initial;padding-right:24px;margin-right:-24px}:host ::ng-deep .nx-checkbox__label{padding:0 4px;margin:0 -4px}:host(.nx-dropdown-item--disabled) .nx-dropdown-results__option{cursor:not-allowed}:host(.nx-dropdown-item--disabled) .nx-dropdown-results__option-label{color:var(--dropdown-item-text-color-disabled)}@media screen and (-ms-high-contrast: active){:host:hover:not(.nx-dropdown-item--disabled) .nx-dropdown-results__option-label,:host(.nx-dropdown-item--active):not(.nx-multiselect) .nx-dropdown-results__option-label{color:highlightText;background-color:highlight}:host(.nx-dropdown-item--active):not(.nx-multiselect) .nx-dropdown-results__option-checkicon{-ms-high-contrast-adjust:none;color:highlightText;background:highlight;z-index:1}:host(.nx-dropdown-item--disabled) .nx-dropdown-results__option-label{color:GrayText}}.ellipsis{max-width:35ch;text-overflow:ellipsis;overflow:hidden;white-space:nowrap}\n"] }]
        }], ctorParameters: function () { return [{ type: i7.NxDropdownControl, decorators: [{
                    type: Inject,
                    args: [NxDropdownControl]
                }] }, { type: i1.NxDropdownGroupComponent, decorators: [{
                    type: Optional
                }] }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }]; }, propDecorators: { value: [{
                type: Input,
                args: ['nxValue']
            }], disabled: [{
                type: Input
            }], onSelectionChange: [{
                type: Output
            }], containerElement: [{
                type: ViewChild,
                args: ['container', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,