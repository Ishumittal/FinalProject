var _NxDropdownComponent_valueFormatter, _NxDropdownComponent_compareWith, _NxDropdownComponent_filterFn;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { SelectionModel } from '@angular/cdk/collections';
import { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SHIFT, SPACE, TAB, UP_ARROW } from '@angular/cdk/keycodes';
import { CdkConnectedOverlay, Overlay } from '@angular/cdk/overlay';
import { Attribute, ChangeDetectionStrategy, Component, ContentChild, ContentChildren, EventEmitter, Inject, InjectionToken, Input, isDevMode, Optional, Output, Self, ViewChild, ViewChildren, } from '@angular/core';
import { NxFormfieldControl } from '@aposin/ng-aquila/formfield';
import { BehaviorSubject, merge, Subject } from 'rxjs';
import { filter, map, startWith, take, takeUntil } from 'rxjs/operators';
import { NxDropdownClosedLabelDirective } from './closed-label.directive';
import { NxDropdownControl } from './dropdown.control';
import { getNxDropdownNonArrayValueError } from './dropdown-errors';
import { getPositionOffset, getPositions } from './dropdown-position';
import { NxDropdownGroupComponent } from './group/dropdown-group';
import { NxDropdownItemComponent } from './item/dropdown-item';
import * as i0 from "@angular/core";
import * as i1 from "@aposin/ng-aquila/formfield";
import * as i2 from "@aposin/ng-aquila/utils";
import * as i3 from "@angular/forms";
import * as i4 from "@angular/cdk/bidi";
import * as i5 from "@angular/cdk/a11y";
import * as i6 from "@aposin/ng-aquila/icon";
import * as i7 from "./item/dropdown-item";
import * as i8 from "@angular/cdk/overlay";
import * as i9 from "@angular/common";
let nextUniqueId = 0;
/** Dropdown data that requires internationalization. */
export class NxDropdownIntl {
    constructor() {
        /**
         * Stream that emits whenever the labels here are changed. Use this to notify
         * components if the labels have changed after initialization.
         */
        this.changes = new Subject();
        /** A label for the multi-select component. */
        this.selectAll = 'Select all';
        /** A label for the multi-select component. */
        this.clearAll = 'Clear all';
    }
}
/** Change event object that is emitted when the select value has changed. */
export class NxDropdownSelectChange {
    constructor(
    /** Reference to the select that emitted the change event. */
    source, 
    /** Current value of the select that emitted the event. */
    value) {
        this.source = source;
        this.value = value;
    }
}
/** Injection token that determines the scroll handling while a dropdown is open. */
export const NX_DROPDOWN_SCROLL_STRATEGY = new InjectionToken('nx-dropdown-scroll-strategy');
/** @docs-private */
export function NX_DROPDOWN_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {
    return () => overlay.scrollStrategies.reposition();
}
/** @docs-private */
export const NX_DROPDOWN_SCROLL_STRATEGY_PROVIDER = {
    provide: NX_DROPDOWN_SCROLL_STRATEGY,
    useFactory: NX_DROPDOWN_SCROLL_STRATEGY_PROVIDER_FACTORY,
    deps: [Overlay],
};
const _defaultFilterFn = (query, label) => label.toLocaleLowerCase().includes(query.toLocaleLowerCase()); // TODO why not `toLowerCase()` as in multi-select?
const _defaultCompareWithFn = (o1, o2) => o1 === o2;
const _defaultValueFormatterFn = value => (value == null ? '' : value.toString());
export class NxDropdownComponent {
    constructor(_cdr, _elementRef, _ngZone, tabIndex, formFieldComponent, _errorStateMatcher, 
    /** @docs-private */ ngControl, _parentForm, _parentFormGroup, _dir, _defaultScrollStrategyFactory, liveAnnouncer) {
        this._cdr = _cdr;
        this._elementRef = _elementRef;
        this._ngZone = _ngZone;
        this.formFieldComponent = formFieldComponent;
        this._errorStateMatcher = _errorStateMatcher;
        this.ngControl = ngControl;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this._dir = _dir;
        this._defaultScrollStrategyFactory = _defaultScrollStrategyFactory;
        this.liveAnnouncer = liveAnnouncer;
        // The dropdown currently doesn't support readonly of the NxFormfieldControl so we hardcode it here
        this.readonly = false;
        this._disabled = false;
        /** The ID of rendered dropdown html element. */
        this.renderedValueId = `nx-dropdown-rendered-${nextUniqueId++}`;
        this._placeholder = '';
        this._focused = false;
        /** Whether or not the overlay panel is open. */
        this._panelOpen = false;
        /** @docs-private */
        this.errorState = false;
        /**
         * Disable truncation of long item texts.
         * We recommend following UX guidelines and always truncating long items.
         * Please only disable truncation if it's impossible to use short descriptions.
         */
        this._ignoreItemTrunctation = false;
        /**
         * Name of this control that is used inside the formfield component
         * @docs-private
         */
        this.controlType = 'nx-dropdown';
        /** The minimal space between the viewport and the overlay */
        this._overlayViewportMargin = this.dir === 'rtl' ? 0 : 16;
        this._positions = getPositions('auto', 0);
        /**
         * @docs-private
         * Emits when internal state changes to inform formfield about it.
         */
        this.stateChanges = new Subject();
        this._tabIndex = 0;
        /** @docs-private */
        this.currentFilter = '';
        // @ts-expect-error TODO: refactor to be TS compatible
        this._options = new BehaviorSubject(null);
        this._filterInputType = 'text';
        /**
         * Whether the dropdown should allow multi selection and additional checkboxes are shown.
         * Note: Please make sure the value you bind is an array.
         *
         * @throws Error if true and the bound value is not an array
         * @deprecated Please use the new `<nx-multi-select>` component instead.
         */
        this.isMultiSelect = false;
        this._style = '';
        /** Whether the dropdown should render in its negative style or not. */
        this._negative = false;
        /** Whether the dropdown should be shown with an additional filter input. */
        this.showFilter = false;
        /** Text displayed as placeholder for the filter. */
        this.filterPlaceholder = '';
        /** Text that is displayed at the top of the overlay. If not set the formfield label is used by default. */
        this.overlayLabel = '';
        /** Event emitted when the select panel has been toggled. */
        this.openedChange = new EventEmitter();
        /** Event emitted when the dropdown items get filtered. Returns the currently visible dropdown items. */
        this.filterResultChange = new EventEmitter();
        /** Event emitted when the select has been opened. */
        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));
        /** Event emitted when the select has been closed. */
        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));
        /** Event emitted when the user types in the filter input. */
        this.filterChanges = new Subject();
        /**
         * Event that emits whenever the raw value of the select changes. This is here primarily
         * to facilitate the two-way binding for the `value` input.
         * @docs-private
         */
        this.valueChange = new EventEmitter();
        /** Event emitted when the selected value has been changed. */
        this.selectionChange = new EventEmitter();
        this._destroyed = new Subject();
        /** Strategy factory that will be used to handle scrolling while the dropdown panel is open. */
        this._scrollStrategyFactory = this._defaultScrollStrategyFactory;
        _NxDropdownComponent_valueFormatter.set(this, void 0);
        _NxDropdownComponent_compareWith.set(this, void 0);
        _NxDropdownComponent_filterFn.set(this, void 0);
        /** Strategy that will be used to handle scrolling while the dropdown panel is open. */
        this._scrollStrategy = this._scrollStrategyFactory();
        /** Comparison function to specify which option is displayed. Defaults to object equality. */
        this._compareWith = (o1, o2) => o1 === o2;
        /** `View -> model callback called when value changes` */
        this._onChange = () => { };
        /** `View -> model callback called when select has been touched` */
        this._onTouched = () => { };
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
        this.tabIndex = parseInt(tabIndex, 10) || 0;
    }
    /**
     * Array of options for the dropdown.
     */
    set options(value) {
        this._options.next(value);
    }
    get options() {
        return this._options.value;
    }
    /**
     * Type of filter input (default: text)
     */
    set filterInputType(value) {
        this._filterInputType = value;
    }
    get filterInputType() {
        return this._filterInputType;
    }
    get tabIndex() {
        return this.disabled ? -1 : this._tabIndex;
    }
    set tabIndex(value) {
        // If the specified tabIndex value is null or undefined, fall back to the default value.
        this._tabIndex = value != null ? value : 0;
    }
    /** Selected value */
    get value() {
        return this._value;
    }
    set value(newValue) {
        if (newValue !== this._value) {
            this.writeValue(newValue);
            this._value = newValue;
            this._onChange(newValue);
        }
    }
    /** Whether the dropdown is disabled. */
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
    }
    /** The id of the input. */
    get id() {
        return this.renderedValueId;
    }
    /** If set to 'negative', the component is displayed with the negative set of styles. */
    set styles(value) {
        if (this._style === value) {
            return;
        }
        this._style = value;
        this._negative = !!this._style.match(/negative/);
    }
    /** Placeholder to be shown if no value has been selected. */
    get placeholder() {
        return this._placeholder;
    }
    set placeholder(value) {
        this._placeholder = value;
        this.stateChanges.next();
    }
    /**
     * Disable truncation of long item texts.
     * We recommend following UX guidelines and always truncating long items.
     * Please only disable truncation if it's impossible to use short descriptions.
     */
    get ignoreItemTrunctation() {
        return this._ignoreItemTrunctation;
    }
    set ignoreItemTrunctation(value) {
        this._ignoreItemTrunctation = coerceBooleanProperty(value);
    }
    get dropdownItems() {
        return this._isLazy ? this._lazyDropdownItems : this._contentDropdownItems;
    }
    /** @docs-private */
    get closedDropdownLabel() {
        return this._closedDropdownLabel;
    }
    /** @docs-private */
    get panelOpen() {
        return this._panelOpen;
    }
    set panelOpen(value) {
        this._panelOpen = value;
    }
    /** @docs-private */
    get label() {
        if (this._isInOutlineField) {
            return '';
        }
        return this.overlayLabel ? this.overlayLabel : this.formFieldComponent?.label ?? '';
    }
    /**
     * Function that transforms the value into a string.
     * This function is used for displaying and filtering the content.
     *
     * Defaults to `(value: any) => value == null ? '' : value.toString()`
     */
    set valueFormatter(value) {
        __classPrivateFieldSet(this, _NxDropdownComponent_valueFormatter, value, "f");
    }
    get valueFormatter() {
        return __classPrivateFieldGet(this, _NxDropdownComponent_valueFormatter, "f") ?? _defaultValueFormatterFn;
    }
    /**
     * Function to compare the option values with the selected values. The first argument
     * is a value from an option. The second is a value from the selection. A boolean
     * should be returned.
     *
     * Defaults to object equality.
     */
    set compareWith(value) {
        __classPrivateFieldSet(this, _NxDropdownComponent_compareWith, value, "f");
        if (this._selectionModel) {
            // A different comparator means the selection could change.
            this._initializeSelection();
        }
    }
    get compareWith() {
        return __classPrivateFieldGet(this, _NxDropdownComponent_compareWith, "f") ?? _defaultCompareWithFn;
    }
    /**
     * Function to be used when the user types into the search filter. The first argument is the user input,
     * the second argument is the dropdown item value as displayed. The dropdown items will use this function
     * to set their visibility state. A boolean should be returned.
     *
     * Defaults to lower case inclusion.
     */
    set filterFn(value) {
        __classPrivateFieldSet(this, _NxDropdownComponent_filterFn, value, "f");
    }
    get filterFn() {
        return __classPrivateFieldGet(this, _NxDropdownComponent_filterFn, "f") ?? _defaultFilterFn;
    }
    /**
     * @docs-private
     * Whether the select is focused.
     */
    get focused() {
        return this._focused || this.panelOpen;
    }
    /** @docs-private */
    get elementRef() {
        return this._elementRef;
    }
    /** The text direction of the containing app. */
    get dir() {
        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
    }
    ngDoCheck() {
        if (this.ngControl) {
            this.updateErrorState();
        }
    }
    ngOnInit() {
        this._selectionModel = new SelectionModel(this.isMultiSelect);
    }
    ngAfterViewInit() {
        this._initKeyManager();
    }
    ngAfterContentInit() {
        this._closedDropdownLabel = this._customClosedDropdownLabel?.templateRef || this._defaultClosedDropdownLabel;
        this._selectionModel.changed.pipe(takeUntil(this._destroyed)).subscribe(event => {
            event.added.forEach(({ value }) => {
                this.dropdownItems.filter(option => option.value === value).forEach(option => option.select());
            });
            event.removed.forEach(({ value }) => {
                this.dropdownItems.filter(option => option.value === value).forEach(option => option.deselect());
            });
        });
        if (this._isLazy) {
            this._options.pipe(takeUntil(this._destroyed)).subscribe(() => {
                this._initializeSelection();
            });
        }
        else {
            this.dropdownItems.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {
                this._subscribeToOptionChanges();
                this._initializeSelection();
            });
        }
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
    /** @docs-private */
    updateErrorState() {
        const oldState = this.errorState;
        const parent = this._parentFormGroup || this._parentForm;
        const control = this.ngControl ? this.ngControl.control : null;
        const newState = this._errorStateMatcher.isErrorState(control, parent);
        if (newState !== oldState) {
            this.errorState = newState;
            this.stateChanges.next();
        }
    }
    /** Sets up a key manager to listen to keyboard events on the overlay panel. */
    _initKeyManager() {
        this._keyManager = new ActiveDescendantKeyManager(this.dropdownItems)
            .withTypeAhead()
            .withHomeAndEnd()
            .withVerticalOrientation()
            .withHorizontalOrientation('ltr')
            .skipPredicate(item => item._hidden || item.disabled);
        this._keyManager.tabOut.pipe(takeUntil(this._closedStream), takeUntil(this._destroyed)).subscribe(() => {
            // Restore focus to the trigger before closing. Ensures that the focus
            // position won't be lost if the user got focus into the overlay.
            this.closePanel();
        });
        this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(() => {
            if (this._panelOpen && this.panel) {
                this._scrollActiveOptionIntoView();
            }
            else if (!this._panelOpen && !this.isMultiSelect && this._keyManager.activeItem) {
                this._keyManager.activeItem._selectViaInteraction();
            }
        });
    }
    _initActiveItem() {
        if (!this.isMultiSelect && this._selectionModel.selected[0]) {
            const option = this.dropdownItems.find(o => o.value === this._selectionModel.selected[0].value);
            if (option) {
                this._keyManager.setActiveItem(option);
                this._scrollActiveOptionIntoCenter();
            }
        }
        else {
            this._keyManager.setFirstItemActive();
        }
    }
    _subscribeToOptionChanges() {
        merge(...this.dropdownItems.map(option => option.onSelectionChange))
            .pipe(takeUntil(this.dropdownItems.changes), takeUntil(this._destroyed))
            .subscribe(event => {
            this._onSelect(event.item, event.isUserInput);
        });
        // Listen to changes in the internal state of the options and react accordingly.
        // Handles cases like the labels of the selected options changing.
        merge(...this.dropdownItems.map(option => option._stateChanges))
            .pipe(takeUntil(this.dropdownItems.changes), takeUntil(this._destroyed))
            .subscribe(() => {
            // defer it for the next cycle to not run in changed after checked errors
            // the combination of dropdown-item notifying parent and when the parent
            // tries to fetch the triggerValue from the child throws these errors
            setTimeout(() => {
                this._cdr.markForCheck();
                this.stateChanges.next();
            });
        });
    }
    /** Invoked when an option is clicked. */
    _onSelect(option, isUserInput, item) {
        const wasSelected = this._selectionModel.isSelected(option);
        const selectedOption = item || option;
        if (option.value === null && !this.isMultiSelect) {
            option.deselect();
            this._selectionModel.clear();
            this._propagateChanges(selectedOption.value);
        }
        else {
            if (option.selected) {
                this._selectionModel.select(selectedOption);
            }
            else {
                this._selectionModel.deselect(selectedOption);
            }
            if (isUserInput) {
                this._keyManager?.setActiveItem(option);
            }
            if (this.isMultiSelect) {
                this._sortValues();
            }
        }
        const isSelected = this._selectionModel.isSelected(selectedOption);
        if (wasSelected !== isSelected) {
            this._propagateChanges();
        }
        this.stateChanges.next();
        if (isUserInput && !this.isMultiSelect && this._panelOpen) {
            this.closePanel();
        }
    }
    _initializeSelection() {
        // Defer setting the value in order to avoid the "Expression
        // has changed after it was checked" errors from Angular.
        Promise.resolve().then(() => {
            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);
        });
    }
    /**
     * Sets the selected option based on a value. If no option can be
     * found with the designated value, the select trigger is cleared.
     */
    _setSelectionByValue(value) {
        if (!this._selectionModel) {
            return;
        }
        this._selectionModel.clear();
        if (this.isMultiSelect && value) {
            if (!Array.isArray(value)) {
                throw getNxDropdownNonArrayValueError();
            }
            value.forEach(v => this._selectValue(v));
            this._sortValues();
        }
        else {
            this._selectValue(value);
        }
        this._cdr.markForCheck();
    }
    /**
     * Finds and selects and option based on its value.
     */
    _selectValue(value) {
        const filterFn = (o) => {
            try {
                // Treat null as a special reset value.
                return o.value !== null && this.compareWith(o.value, value);
            }
            catch (error) {
                if (isDevMode()) {
                    // Notify developers of errors in their comparator.
                    console.warn(error);
                }
                return false;
            }
        };
        const options = this._isLazy ? this.options : this.dropdownItems.toArray();
        const option = options.find(filterFn);
        if (option) {
            this._selectionModel.select(option);
        }
    }
    /** Emits change event to set the model value. */
    _propagateChanges(fallbackValue) {
        let valueToEmit = null;
        if (this.isMultiSelect) {
            valueToEmit = this._selectionModel.selected.map(option => option.value);
        }
        else {
            const selectedOption = this._selectionModel.selected[0];
            valueToEmit = selectedOption ? selectedOption.value : fallbackValue;
        }
        this._value = valueToEmit;
        this.valueChange.emit(valueToEmit);
        this._onChange(valueToEmit);
        this.selectionChange.emit(new NxDropdownSelectChange(this, valueToEmit));
        this._cdr.markForCheck();
    }
    /** Sorts the selected values in the selected based on their order in the panel. */
    _sortValues() {
        if (this.isMultiSelect) {
            const options = this._isLazy ? this.options : this.dropdownItems.toArray();
            this._selectionModel.sort((a, b) => options.findIndex(o => o.value === a.value) - options.findIndex(o => o.value === b.value));
            this.stateChanges.next();
        }
    }
    /** Adds a offset to the overlay position, so the formfield label and the dropdown panel header are vertically aligned. */
    _updatePosition() {
        if (this.formFieldComponent) {
            const panelHeader = this.overlayDir.overlayRef.overlayElement.querySelector('.nx-dropdown__panel-header');
            const offset = getPositionOffset(this._elementRef.nativeElement, this.formFieldComponent.elementRef.nativeElement, panelHeader);
            this._positions = getPositions(this.formFieldComponent.appearance, offset);
        }
    }
    /** Focuses the select element. */
    focus() {
        this._elementRef.nativeElement.focus();
    }
    /** Opens the panel of the dropdown. */
    openPanel($event) {
        if (this.disabled || !(this.dropdownItems?.length || this.options?.length) || this._panelOpen) {
            return;
        }
        $event.preventDefault();
        this._panelOpen = true;
        setTimeout(() => {
            this._selectionModel.selected.forEach(selectedOption => {
                const option = this.dropdownItems.find(o => o.value === selectedOption.value);
                if (option) {
                    option._initSelected(true);
                }
            });
            this._initActiveItem();
        });
        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();
        this._cdr.markForCheck();
    }
    /** Closes the panel of the dropdown. */
    closePanel() {
        if (this._panelOpen) {
            this._panelOpen = false;
            this._cdr.markForCheck();
            this._onTouched();
            this.openedChange.emit(false);
            // defer the focus if the dropdown triggers actions that detach
            // a template/view from the DOM to prevent changed after checked errors
            this._ngZone.runOutsideAngular(() => {
                setTimeout(() => this.focus());
            });
        }
    }
    _scrollActiveOptionIntoCenter() {
        if (!this.panelBody) {
            return;
        }
        // reset the scrolltop to make calculation easier
        this.panelBody.nativeElement.scrollTop = 0;
        if (!this.empty) {
            const offset = this._getItemOffset(this._keyManager.activeItem);
            const panelHeight = this.panelBody.nativeElement.offsetHeight;
            const panelRect = this.panelBody.nativeElement.getBoundingClientRect();
            const middleOfPanel = panelRect.top + panelHeight / 2;
            if (offset > middleOfPanel) {
                // because we reset the scrollTop to 0 at the top we can simply take the middleOfPanel which is our
                // target position for the item and subtract it from the offset (which is now always relative to the viewport)
                this.panelBody.nativeElement.scrollTop = offset - middleOfPanel;
            }
        }
    }
    /** Scrolls the active option into view. */
    _scrollActiveOptionIntoView() {
        if (!this.panelBody || !this.panelOpen || !this._keyManager.activeItem) {
            return;
        }
        const activeItem = this._keyManager.activeItem.containerElement.nativeElement;
        this.liveAnnouncer.announce(activeItem.textContent); // force screen reader to speak active option
        const panel = this.panelBody.nativeElement;
        const panelOffset = panel.offsetTop; // how much the overlay is repositioned on the page
        const panelTopScrollPosition = panel.scrollTop;
        const panelHeight = panel.clientHeight;
        const itemTop = activeItem.offsetTop - panelOffset;
        const itemBottom = activeItem.offsetTop - panelOffset + activeItem.getBoundingClientRect().height;
        // item half or less visible on top
        if (itemTop < panelTopScrollPosition) {
            this.panelBody.nativeElement.scrollTop = itemTop;
            // item half or less visible on bottom
        }
        else if (itemBottom > panelTopScrollPosition + panelHeight) {
            this.panelBody.nativeElement.scrollTop = itemBottom - panelHeight;
        }
    }
    _getItemOffset(item) {
        if (!item) {
            return 0;
        }
        const itemRect = item.containerElement.nativeElement.getBoundingClientRect();
        return itemRect.top + itemRect.height / 2; // get position of the item's center
    }
    /**
     * @docs-private
     * Formfield Implementation
     */
    setDescribedByIds(ids) {
        this.ariaDescribedby = ids.join(' ');
    }
    /**
     * @docs-private
     * aria-label support removed in favor of aria-labelledby
     * The NxFormfieldControl abstract class requires implementation
     * of below method.
     */
    setAriaLabel(value) {
        return value;
    }
    /**
     * @docs-private
     * Returns html ids of dropdown rendered value and label (if available),
     * separated by space.
     */
    _getAriaLabelledBy() {
        const valueId = this.renderedValueId;
        const labelId = this.formFieldComponent?.labelId;
        if (labelId) {
            return `${valueId} ${labelId}`;
        }
        return valueId;
    }
    get _isInOutlineField() {
        return this.formFieldComponent !== null && this.formFieldComponent.appearance === 'outline';
    }
    /**
     * @docs-private
     * Whether the select has a value.
     */
    get empty() {
        return !this._selectionModel || this._selectionModel.isEmpty();
    }
    /** @docs-private */
    get hasValue() {
        return this._selectionModel.hasValue();
    }
    /** @docs-private */
    get shouldLabelFloat() {
        return this.focused || !this.empty || !!(this.placeholder && this.placeholder.length > 0);
    }
    /** End Formfield */
    /** ControlValueAccessor */
    /**
     * Sets the select's value. Part of the ControlValueAccessor interface
     * required to integrate with Angular's core forms API.
     *
     * setTimeout allows to write value after ngOnInit (happens before it right now),
     * so that we have the input `options` set, and it's shown properly in the dropdown
     * https://github.com/angular/angular/issues/29218#issuecomment-592015773
     * It can be removed after the Angular issue is resolved
     *
     * @param value New value to be written to the model.
     */
    writeValue(value) {
        Promise.resolve().then(() => {
            this._setSelectionByValue(value);
        });
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /**
     * Disables the select. Part of the ControlValueAccessor interface required
     * to integrate with Angular's core forms API.
     *
     * @param isDisabled Sets whether the component is disabled.
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this._cdr.markForCheck();
        this.stateChanges.next();
    }
    /** End ControlValueAccessor */
    _handleKeydown(event) {
        this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);
    }
    get _isLazy() {
        return Array.isArray(this.options);
    }
    setNextItemActive() {
        const options = this._isLazy ? this.options : this.dropdownItems.toArray();
        const next = Math.min(options.length - 1, options.indexOf(this._selectionModel.selected[0]) + 1);
        this._selectionModel.select(options[next]);
        this._propagateChanges();
    }
    setPreviousItemActive() {
        const options = this._isLazy ? this.options : this.dropdownItems.toArray();
        const prev = Math.max(0, options.indexOf(this._selectionModel.selected[0]) - 1);
        this._selectionModel.select(options[prev]);
        this._propagateChanges();
    }
    _handleClosedKeydown(event) {
        if (this.disabled) {
            return;
        }
        // TODO use event.code after removing IE11 support
        const keyCode = event.keyCode;
        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW || keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;
        const isOpenKey = keyCode === ENTER || keyCode === SPACE;
        // Open the select on ALT + arrow key to match the native <select>
        if (isOpenKey || ((this.isMultiSelect || event.altKey) && isArrowKey)) {
            event.preventDefault(); // prevents the page from scrolling down when pressing space
            this.openPanel(event);
        }
        else if (!this.isMultiSelect) {
            switch (keyCode) {
                case DOWN_ARROW:
                    this.setNextItemActive();
                    event.preventDefault();
                    break;
                case UP_ARROW:
                    this.setPreviousItemActive();
                    event.preventDefault();
                    break;
                default:
                    this._keyManager.onKeydown(event);
            }
        }
    }
    _handleOpenKeydown(event) {
        // TODO use event.code after removing IE11 support
        const keyCode = event.keyCode;
        // if has filter all events other than the listed ones should be ignored or handled in _onFilter()
        if (![DOWN_ARROW, UP_ARROW, HOME, END, ENTER, LEFT_ARROW, RIGHT_ARROW, SHIFT, SPACE, TAB].includes(keyCode) && this.showFilter) {
            return;
        }
        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;
        const manager = this._keyManager;
        const allHidden = this.dropdownItems.map(option => option._hidden).every(option => Boolean(option));
        if (keyCode === HOME || keyCode === END) {
            event.preventDefault();
            keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();
        }
        else if (isArrowKey && event.altKey) {
            // Close the select on ALT + arrow key to match the native <select>
            event.preventDefault();
            this.closePanel();
        }
        else if (keyCode === ENTER && manager.activeItem && !allHidden) {
            event.preventDefault();
            manager.activeItem._selectViaInteraction();
        }
        else if (keyCode === ENTER && allHidden) {
            event.preventDefault();
            this.closePanel();
        }
        else if (!this.showFilter && keyCode === SPACE && manager.activeItem) {
            event.preventDefault();
            manager.activeItem._selectViaInteraction();
        }
        else if (keyCode === TAB) {
            this.closePanel();
        }
        else {
            const previouslyFocusedIndex = manager.activeItemIndex;
            manager.onKeydown(event);
            if (this.isMultiSelect && isArrowKey && event.shiftKey && manager.activeItem && manager.activeItemIndex !== previouslyFocusedIndex) {
                manager.activeItem._selectViaInteraction();
            }
        }
    }
    /** @docs-private */
    formatValue(value) {
        return this.valueFormatter(value);
    }
    /** Called when the user types in the filter input */
    _onFilter(event) {
        event.preventDefault();
        this.currentFilter = event.target.value;
        this.filterChanges.next(event.target.value);
        const allHidden = this.dropdownItems.toArray().every(option => option._hidden);
        if (allHidden) {
            // @ts-expect-error: not possible according to TS, but has been working already
            this._keyManager.setActiveItem(null);
        }
        else {
            this._keyManager.setFirstItemActive();
        }
        const visibleItems = this.dropdownItems.filter(option => !option._hidden);
        this.filterResultChange.next(visibleItems);
    }
    /**
     * @docs-private
     * The value displayed in the trigger.
     */
    get triggerValue() {
        if (this.empty) {
            return '';
        }
        if (this.isMultiSelect) {
            return this._selectionModel.selected.map(option => this._getLabel(option)).join(', ');
        }
        return this._getLabel(this._selectionModel.selected[0]);
    }
    _getLabel(option) {
        return option.label || this.formatValue(option.value);
    }
    /**
     * Callback that is invoked when the overlay panel has been attached.
     */
    _onAttached() {
        this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {
            const overlayRef = this.overlayDir.overlayRef;
            const positionStrategy = overlayRef.getConfig().positionStrategy;
            this._updatePosition();
            positionStrategy.withPositions(this._positions);
            overlayRef.updatePosition();
            this._cdr.markForCheck();
            this.openedChange.emit(true);
            if (this.showFilter) {
                this.filterInput?.nativeElement.focus();
            }
            else {
                this.panelBody?.nativeElement.focus();
            }
        });
    }
    _onFocus() {
        if (!this.disabled) {
            this._focused = true;
            this.stateChanges.next();
        }
    }
    /**
     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will
     * "blur" to the panel when it opens, causing a false positive.
     */
    _onBlur() {
        this._focused = false;
        if (this.filterInput && this.showFilter) {
            this._clearFilter();
        }
        if (!this.disabled && !this.panelOpen) {
            this._onTouched();
            this._cdr.markForCheck();
            this.stateChanges.next();
        }
    }
    /** @docs-private */
    get isFilterEmpty() {
        return this.currentFilter.length === 0;
    }
    _clearFilter() {
        if (!this.filterInput) {
            return;
        }
        this.filterInput.nativeElement.value = '';
        this.currentFilter = '';
        this.filterChanges.next('');
    }
    /** determines the `aria-activedescendant` to be set on the host. */
    _getAriaActiveDescendant() {
        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {
            return this._keyManager.activeItem.id;
        }
        return null;
    }
}
_NxDropdownComponent_valueFormatter = new WeakMap(), _NxDropdownComponent_compareWith = new WeakMap(), _NxDropdownComponent_filterFn = new WeakMap();
NxDropdownComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDropdownComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }, { token: 'tabindex', attribute: true }, { token: i1.NxFormfieldComponent, optional: true }, { token: i2.ErrorStateMatcher }, { token: i3.NgControl, optional: true, self: true }, { token: i3.NgForm, optional: true }, { token: i3.FormGroupDirective, optional: true }, { token: i4.Directionality, optional: true }, { token: NX_DROPDOWN_SCROLL_STRATEGY }, { token: i5.LiveAnnouncer }], target: i0.ɵɵFactoryTarget.Component });
NxDropdownComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxDropdownComponent, selector: "nx-dropdown", inputs: { options: "options", filterInputType: "filterInputType", tabIndex: "tabIndex", value: ["nxValue", "value"], disabled: ["nxDisabled", "disabled"], isMultiSelect: ["nxIsMultiselect", "isMultiSelect"], required: ["nxRequired", "required"], styles: ["nxStyle", "styles"], placeholder: "placeholder", ignoreItemTrunctation: ["nxIgnoreItemTrunctation", "ignoreItemTrunctation"], showFilter: ["nxShowFilter", "showFilter"], filterPlaceholder: ["nxFilterPlaceholder", "filterPlaceholder"], overlayLabel: ["nxOverlayLabel", "overlayLabel"], valueFormatter: ["nxValueFormatter", "valueFormatter"], compareWith: "compareWith", filterFn: "filterFn" }, outputs: { openedChange: "openedChange", filterResultChange: "filterResult", _openedStream: "opened", _closedStream: "closed", filterChanges: "filterInput", valueChange: "nxValueChange", selectionChange: "selectionChange" }, host: { attributes: { "role": "button", "aria-haspopup": "listbox" }, listeners: { "keydown": "_handleKeydown($event)", "focus": "_onFocus()", "blur": "_onBlur()", "click": "openPanel($event)" }, properties: { "class.nx-dropdown": "true", "class.is-filled": "hasValue", "class.has-focus": "focused", "class.nx-dropdown--negative": "_negative", "class.nx-dropdown--disabled": "disabled", "attr.aria-describedby": "ariaDescribedby || null", "attr.aria-required": "required", "attr.aria-disabled": "disabled", "attr.aria-labelledby": "_getAriaLabelledBy()", "attr.aria-expanded": "panelOpen", "attr.disabled": "disabled || null", "attr.tabindex": "tabIndex" } }, providers: [
        { provide: NxDropdownControl, useExisting: NxDropdownComponent },
        { provide: NxFormfieldControl, useExisting: NxDropdownComponent },
    ], queries: [{ propertyName: "_customClosedDropdownLabel", first: true, predicate: NxDropdownClosedLabelDirective, descendants: true }, { propertyName: "_contentDropdownItems", predicate: NxDropdownItemComponent, descendants: true }, { propertyName: "groups", predicate: NxDropdownGroupComponent }], viewQueries: [{ propertyName: "panel", first: true, predicate: ["panel"], descendants: true }, { propertyName: "panelBody", first: true, predicate: ["panelBody"], descendants: true }, { propertyName: "trigger", first: true, predicate: ["trigger"], descendants: true, static: true }, { propertyName: "filterInput", first: true, predicate: ["filterInput"], descendants: true }, { propertyName: "overlayDir", first: true, predicate: CdkConnectedOverlay, descendants: true, static: true }, { propertyName: "_defaultClosedDropdownLabel", first: true, predicate: ["defaultClosedDropdownLabel"], descendants: true, static: true }, { propertyName: "_lazyDropdownItems", predicate: NxDropdownItemComponent, descendants: true }], ngImport: i0, template: "<!-- input and stuff-->\n<div cdkOverlayOrigin #origin=\"cdkOverlayOrigin\" class=\"nx-dropdown__container\" #trigger>\n    <div class=\"nx-dropdown__rendered\" [id]=\"renderedValueId\">\n        <span *ngIf=\"empty && placeholder\">{{ placeholder }}</span>\n        <ng-container *ngIf=\"!empty\">\n            <ng-container *ngTemplateOutlet=\"closedDropdownLabel\"></ng-container>\n        </ng-container>\n    </div>\n    <div class=\"nx-dropdown__icon\">\n        <nx-icon class=\"nx-dropdown__chevron\" name=\"chevron-down\"></nx-icon>\n    </div>\n</div>\n\n<ng-template #defaultClosedDropdownLabel>\n    <span *ngIf=\"triggerValue\">{{ triggerValue }}</span>\n</ng-template>\n\n<!-- overlay -->\n<ng-template\n    cdkConnectedOverlay\n    cdkConnectedOverlayHasBackdrop\n    cdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\n    [cdkConnectedOverlayScrollStrategy]=\"_scrollStrategy\"\n    [cdkConnectedOverlayOrigin]=\"origin\"\n    [cdkConnectedOverlayOpen]=\"panelOpen\"\n    [cdkConnectedOverlayPositions]=\"_positions\"\n    [cdkConnectedOverlayMinWidth]=\"_triggerRect?.width!\"\n    [cdkConnectedOverlayFlexibleDimensions]=\"true\"\n    [cdkConnectedOverlayViewportMargin]=\"_overlayViewportMargin\"\n    [cdkConnectedOverlayPush]=\"true\"\n    (backdropClick)=\"closePanel()\"\n    (attach)=\"_onAttached()\"\n    (detach)=\"closePanel()\"\n>\n    <div\n        class=\"nx-dropdown__panel\"\n        [class.has-filter]=\"showFilter\"\n        [class.nx-dropdown__panel--in-outline-field]=\"_isInOutlineField\"\n        (keydown)=\"_handleKeydown($event)\"\n        [dir]=\"dir\"\n        #panel\n    >\n        <div class=\"nx-dropdown__panel-header\" *ngIf=\"label\"> {{ label }} </div>\n        <div class=\"nx-dropdown__filter\" *ngIf=\"showFilter\">\n            <input\n                class=\"nx-dropdown__filter-input\"\n                [class.is-filled]=\"!isFilterEmpty\"\n                #filterInput\n                [type]=\"filterInputType\"\n                (input)=\"_onFilter($event)\"\n                [placeholder]=\"filterPlaceholder\"\n            />\n            <span class=\"nx-dropdown__filter-icon\" *ngIf=\"!isFilterEmpty\" (click)=\"_clearFilter()\">\n                <nx-icon name=\"close\"></nx-icon>\n            </span>\n        </div>\n\n        <div\n            class=\"nx-dropdown__panel-body\"\n            tabindex=\"-1\"\n            role=\"listbox\"\n            #panelBody\n            [attr.aria-activedescendant]=\"_getAriaActiveDescendant()\"\n            [attr.aria-multiselectable]=\"isMultiSelect\"\n        >\n            <ng-content></ng-content>\n            <ng-container *ngFor=\"let option of options\">\n                <nx-dropdown-item (onSelectionChange)=\"_onSelect($event.item, $event.isUserInput, option)\" [nxValue]=\"option.value\"\n                    >{{ _getLabel(option) }}</nx-dropdown-item\n                >\n            </ng-container>\n        </div>\n    </div>\n</ng-template>\n", styles: [":host{display:block;width:100%}:host:focus{outline:none}:host(.nx-dropdown--negative):focus{font-weight:600}:host(.nx-dropdown--negative){color:var(--negative)}:host([aria-expanded=true]) .nx-dropdown__chevron{transform:rotate(180deg)}.nx-dropdown__container{display:flex;justify-content:flex-end;align-items:center;height:100%;cursor:pointer}:host(.nx-dropdown--disabled) .nx-dropdown__container{cursor:not-allowed}.nx-dropdown__rendered{flex:1 1 auto;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.nx-dropdown__panel{box-shadow:var(--shadow-small);border-radius:4px;min-width:100%}.nx-dropdown__panel ::ng-deep .nx-checkbox__label{font-size:var(--dropdown-item-font-size);line-height:var(--dropdown-item-line-height);font-weight:var(--dropdown-item-font-weight);letter-spacing:var(--dropdown-item-letter-spacing);display:flex;align-items:center}.nx-dropdown__panel:focus{outline:none}.nx-dropdown__panel--in-outline-field .nx-dropdown__panel-body{max-height:calc(6 * (var(--dropdown-item-outline-line-height) + 16px) + 16px)}.nx-dropdown__panel--in-outline-field ::ng-deep .nx-dropdown-results__group-label{font-size:var(--formfield-outline-label-font-size);line-height:var(--formfield-outline-label-line-height);font-weight:var(--formfield-outline-label-font-weight);letter-spacing:var(--formfield-outline-label-letter-spacing);font-style:normal;font-weight:700}.nx-dropdown__panel--in-outline-field ::ng-deep nx-dropdown-item .nx-dropdown-results__option,.nx-dropdown__panel--in-outline-field ::ng-deep nx-dropdown-item .nx-dropdown-results__option-label{font-size:var(--dropdown-item-outline-font-size);line-height:var(--dropdown-item-outline-line-height);font-weight:var(--dropdown-item-outline-font-weight);letter-spacing:var(--dropdown-item-outline-letter-spacing)}.nx-dropdown__panel--in-outline-field ::ng-deep nx-dropdown-item .nx-dropdown-results__option-checkicon{height:var(--dropdown-item-outline-line-height)}.nx-dropdown__panel--in-outline-field ::ng-deep .nx-dropdown__filter-input{font-size:var(--formfield-outline-control-font-size);line-height:var(--formfield-outline-control-line-height);font-weight:var(--formfield-outline-control-font-weight);letter-spacing:var(--formfield-outline-control-letter-spacing)}.nx-dropdown__panel--in-outline-field ::ng-deep .nx-dropdown__filter-input:empty{font-weight:300}.nx-dropdown__icon{font-size:var(--dropdown-chevron-size);line-height:0}.nx-dropdown__chevron{vertical-align:middle}.nx-dropdown__panel-header{font-size:var(--formfield-label-font-size);line-height:var(--formfield-label-line-height);font-weight:var(--formfield-label-font-weight);letter-spacing:var(--formfield-label-letter-spacing);color:var(--dropdown-panel-header-text-color);background-color:var(--dropdown-panel-header-background-color);padding:8px 32px;border-top-left-radius:4px;border-top-right-radius:4px;z-index:1}.nx-dropdown__panel-body{background-color:var(--dropdown-panel-background-color);max-height:calc(6 * (var(--dropdown-item-line-height) + 16px) + 16px);overflow-y:auto;outline:none}.nx-dropdown__filter{position:relative;padding:16px 32px 12px;background-color:var(--dropdown-panel-background-color)}[dir=rtl] .nx-dropdown__filter{padding:16px 32px 12px}.nx-dropdown__filter-input{font-size:var(--formfield-control-font-size);line-height:var(--formfield-control-line-height);font-weight:var(--formfield-control-font-weight);letter-spacing:var(--formfield-control-letter-spacing);border:0;border-bottom:1px var(--dropdown-filter-input-border-color) solid;color:var(--dropdown-filter-input-text-color);width:100%;outline:none;background-color:transparent;padding:0 24px 3px 0;font-weight:300}.nx-dropdown__filter-input::-ms-clear{display:none}[dir=rtl] .nx-dropdown__filter-input{padding:0 0 3px 24px}.nx-dropdown__panel.has-filter ::ng-deep nx-dropdown-item:first-of-type .nx-dropdown-results__option{padding-top:12px}.nx-dropdown__filter-icon{position:absolute;height:24px;right:32px;top:17px;cursor:pointer}[dir=rtl] .nx-dropdown__filter-icon{left:32px;right:auto}.nx-dropdown__filter-icon nx-icon{font-size:24px}.nx-dropdown__filter-input:focus{border-color:var(--dropdown-filter-input-active-border-color)}.nx-dropdown__filter-input.is-filled:focus{font-weight:600;color:var(--dropdown-filter-input-active-text-color);border-color:var(--dropdown-filter-input-active-border-color)}.nx-dropdown__filter-input.is-filled:focus+.nx-dropdown__filter-icon{color:var(--dropdown-filter-input-active-text-color)}@media screen and (-ms-high-contrast: active){.nx-dropdown__panel{box-shadow:0 0 0 1px windowText;border:1px solid CanvasText}.nx-dropdown__panel-header{border-bottom:1px solid windowText}.nx-dropdown__filter-input{border-bottom-color:buttonText}}\n"], components: [{ type: i6.NxIconComponent, selector: "nx-icon", inputs: ["name", "outline", "fill", "size", "font"] }, { type: i7.NxDropdownItemComponent, selector: "nx-dropdown-item", inputs: ["nxValue", "disabled"], outputs: ["onSelectionChange"] }], directives: [{ type: i8.CdkOverlayOrigin, selector: "[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]", exportAs: ["cdkOverlayOrigin"] }, { type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i9.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i8.CdkConnectedOverlay, selector: "[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]", inputs: ["cdkConnectedOverlayOrigin", "cdkConnectedOverlayPositions", "cdkConnectedOverlayPositionStrategy", "cdkConnectedOverlayOffsetX", "cdkConnectedOverlayOffsetY", "cdkConnectedOverlayWidth", "cdkConnectedOverlayHeight", "cdkConnectedOverlayMinWidth", "cdkConnectedOverlayMinHeight", "cdkConnectedOverlayBackdropClass", "cdkConnectedOverlayPanelClass", "cdkConnectedOverlayViewportMargin", "cdkConnectedOverlayScrollStrategy", "cdkConnectedOverlayOpen", "cdkConnectedOverlayDisableClose", "cdkConnectedOverlayTransformOriginOn", "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayLockPosition", "cdkConnectedOverlayFlexibleDimensions", "cdkConnectedOverlayGrowAfterOpen", "cdkConnectedOverlayPush"], outputs: ["backdropClick", "positionChange", "attach", "detach", "overlayKeydown", "overlayOutsideClick"], exportAs: ["cdkConnectedOverlay"] }, { type: i4.Dir, selector: "[dir]", inputs: ["dir"], outputs: ["dirChange"], exportAs: ["dir"] }, { type: i9.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDropdownComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-dropdown', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        { provide: NxDropdownControl, useExisting: NxDropdownComponent },
                        { provide: NxFormfieldControl, useExisting: NxDropdownComponent },
                    ], host: {
                        role: 'button',
                        '[class.nx-dropdown]': 'true',
                        '[class.is-filled]': 'hasValue',
                        '[class.has-focus]': 'focused',
                        '[class.nx-dropdown--negative]': '_negative',
                        '[class.nx-dropdown--disabled]': 'disabled',
                        '[attr.aria-describedby]': 'ariaDescribedby || null',
                        '[attr.aria-required]': 'required',
                        '[attr.aria-disabled]': 'disabled',
                        '[attr.aria-labelledby]': '_getAriaLabelledBy()',
                        'aria-haspopup': 'listbox',
                        '[attr.aria-expanded]': 'panelOpen',
                        '[attr.disabled]': 'disabled || null',
                        '[attr.tabindex]': 'tabIndex',
                        '(keydown)': '_handleKeydown($event)',
                        '(focus)': '_onFocus()',
                        '(blur)': '_onBlur()',
                        '(click)': 'openPanel($event)',
                    }, template: "<!-- input and stuff-->\n<div cdkOverlayOrigin #origin=\"cdkOverlayOrigin\" class=\"nx-dropdown__container\" #trigger>\n    <div class=\"nx-dropdown__rendered\" [id]=\"renderedValueId\">\n        <span *ngIf=\"empty && placeholder\">{{ placeholder }}</span>\n        <ng-container *ngIf=\"!empty\">\n            <ng-container *ngTemplateOutlet=\"closedDropdownLabel\"></ng-container>\n        </ng-container>\n    </div>\n    <div class=\"nx-dropdown__icon\">\n        <nx-icon class=\"nx-dropdown__chevron\" name=\"chevron-down\"></nx-icon>\n    </div>\n</div>\n\n<ng-template #defaultClosedDropdownLabel>\n    <span *ngIf=\"triggerValue\">{{ triggerValue }}</span>\n</ng-template>\n\n<!-- overlay -->\n<ng-template\n    cdkConnectedOverlay\n    cdkConnectedOverlayHasBackdrop\n    cdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\n    [cdkConnectedOverlayScrollStrategy]=\"_scrollStrategy\"\n    [cdkConnectedOverlayOrigin]=\"origin\"\n    [cdkConnectedOverlayOpen]=\"panelOpen\"\n    [cdkConnectedOverlayPositions]=\"_positions\"\n    [cdkConnectedOverlayMinWidth]=\"_triggerRect?.width!\"\n    [cdkConnectedOverlayFlexibleDimensions]=\"true\"\n    [cdkConnectedOverlayViewportMargin]=\"_overlayViewportMargin\"\n    [cdkConnectedOverlayPush]=\"true\"\n    (backdropClick)=\"closePanel()\"\n    (attach)=\"_onAttached()\"\n    (detach)=\"closePanel()\"\n>\n    <div\n        class=\"nx-dropdown__panel\"\n        [class.has-filter]=\"showFilter\"\n        [class.nx-dropdown__panel--in-outline-field]=\"_isInOutlineField\"\n        (keydown)=\"_handleKeydown($event)\"\n        [dir]=\"dir\"\n        #panel\n    >\n        <div class=\"nx-dropdown__panel-header\" *ngIf=\"label\"> {{ label }} </div>\n        <div class=\"nx-dropdown__filter\" *ngIf=\"showFilter\">\n            <input\n                class=\"nx-dropdown__filter-input\"\n                [class.is-filled]=\"!isFilterEmpty\"\n                #filterInput\n                [type]=\"filterInputType\"\n                (input)=\"_onFilter($event)\"\n                [placeholder]=\"filterPlaceholder\"\n            />\n            <span class=\"nx-dropdown__filter-icon\" *ngIf=\"!isFilterEmpty\" (click)=\"_clearFilter()\">\n                <nx-icon name=\"close\"></nx-icon>\n            </span>\n        </div>\n\n        <div\n            class=\"nx-dropdown__panel-body\"\n            tabindex=\"-1\"\n            role=\"listbox\"\n            #panelBody\n            [attr.aria-activedescendant]=\"_getAriaActiveDescendant()\"\n            [attr.aria-multiselectable]=\"isMultiSelect\"\n        >\n            <ng-content></ng-content>\n            <ng-container *ngFor=\"let option of options\">\n                <nx-dropdown-item (onSelectionChange)=\"_onSelect($event.item, $event.isUserInput, option)\" [nxValue]=\"option.value\"\n                    >{{ _getLabel(option) }}</nx-dropdown-item\n                >\n            </ng-container>\n        </div>\n    </div>\n</ng-template>\n", styles: [":host{display:block;width:100%}:host:focus{outline:none}:host(.nx-dropdown--negative):focus{font-weight:600}:host(.nx-dropdown--negative){color:var(--negative)}:host([aria-expanded=true]) .nx-dropdown__chevron{transform:rotate(180deg)}.nx-dropdown__container{display:flex;justify-content:flex-end;align-items:center;height:100%;cursor:pointer}:host(.nx-dropdown--disabled) .nx-dropdown__container{cursor:not-allowed}.nx-dropdown__rendered{flex:1 1 auto;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.nx-dropdown__panel{box-shadow:var(--shadow-small);border-radius:4px;min-width:100%}.nx-dropdown__panel ::ng-deep .nx-checkbox__label{font-size:var(--dropdown-item-font-size);line-height:var(--dropdown-item-line-height);font-weight:var(--dropdown-item-font-weight);letter-spacing:var(--dropdown-item-letter-spacing);display:flex;align-items:center}.nx-dropdown__panel:focus{outline:none}.nx-dropdown__panel--in-outline-field .nx-dropdown__panel-body{max-height:calc(6 * (var(--dropdown-item-outline-line-height) + 16px) + 16px)}.nx-dropdown__panel--in-outline-field ::ng-deep .nx-dropdown-results__group-label{font-size:var(--formfield-outline-label-font-size);line-height:var(--formfield-outline-label-line-height);font-weight:var(--formfield-outline-label-font-weight);letter-spacing:var(--formfield-outline-label-letter-spacing);font-style:normal;font-weight:700}.nx-dropdown__panel--in-outline-field ::ng-deep nx-dropdown-item .nx-dropdown-results__option,.nx-dropdown__panel--in-outline-field ::ng-deep nx-dropdown-item .nx-dropdown-results__option-label{font-size:var(--dropdown-item-outline-font-size);line-height:var(--dropdown-item-outline-line-height);font-weight:var(--dropdown-item-outline-font-weight);letter-spacing:var(--dropdown-item-outline-letter-spacing)}.nx-dropdown__panel--in-outline-field ::ng-deep nx-dropdown-item .nx-dropdown-results__option-checkicon{height:var(--dropdown-item-outline-line-height)}.nx-dropdown__panel--in-outline-field ::ng-deep .nx-dropdown__filter-input{font-size:var(--formfield-outline-control-font-size);line-height:var(--formfield-outline-control-line-height);font-weight:var(--formfield-outline-control-font-weight);letter-spacing:var(--formfield-outline-control-letter-spacing)}.nx-dropdown__panel--in-outline-field ::ng-deep .nx-dropdown__filter-input:empty{font-weight:300}.nx-dropdown__icon{font-size:var(--dropdown-chevron-size);line-height:0}.nx-dropdown__chevron{vertical-align:middle}.nx-dropdown__panel-header{font-size:var(--formfield-label-font-size);line-height:var(--formfield-label-line-height);font-weight:var(--formfield-label-font-weight);letter-spacing:var(--formfield-label-letter-spacing);color:var(--dropdown-panel-header-text-color);background-color:var(--dropdown-panel-header-background-color);padding:8px 32px;border-top-left-radius:4px;border-top-right-radius:4px;z-index:1}.nx-dropdown__panel-body{background-color:var(--dropdown-panel-background-color);max-height:calc(6 * (var(--dropdown-item-line-height) + 16px) + 16px);overflow-y:auto;outline:none}.nx-dropdown__filter{position:relative;padding:16px 32px 12px;background-color:var(--dropdown-panel-background-color)}[dir=rtl] .nx-dropdown__filter{padding:16px 32px 12px}.nx-dropdown__filter-input{font-size:var(--formfield-control-font-size);line-height:var(--formfield-control-line-height);font-weight:var(--formfield-control-font-weight);letter-spacing:var(--formfield-control-letter-spacing);border:0;border-bottom:1px var(--dropdown-filter-input-border-color) solid;color:var(--dropdown-filter-input-text-color);width:100%;outline:none;background-color:transparent;padding:0 24px 3px 0;font-weight:300}.nx-dropdown__filter-input::-ms-clear{display:none}[dir=rtl] .nx-dropdown__filter-input{padding:0 0 3px 24px}.nx-dropdown__panel.has-filter ::ng-deep nx-dropdown-item:first-of-type .nx-dropdown-results__option{padding-top:12px}.nx-dropdown__filter-icon{position:absolute;height:24px;right:32px;top:17px;cursor:pointer}[dir=rtl] .nx-dropdown__filter-icon{left:32px;right:auto}.nx-dropdown__filter-icon nx-icon{font-size:24px}.nx-dropdown__filter-input:focus{border-color:var(--dropdown-filter-input-active-border-color)}.nx-dropdown__filter-input.is-filled:focus{font-weight:600;color:var(--dropdown-filter-input-active-text-color);border-color:var(--dropdown-filter-input-active-border-color)}.nx-dropdown__filter-input.is-filled:focus+.nx-dropdown__filter-icon{color:var(--dropdown-filter-input-active-text-color)}@media screen and (-ms-high-contrast: active){.nx-dropdown__panel{box-shadow:0 0 0 1px windowText;border:1px solid CanvasText}.nx-dropdown__panel-header{border-bottom:1px solid windowText}.nx-dropdown__filter-input{border-bottom-color:buttonText}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['tabindex']
                }] }, { type: i1.NxFormfieldComponent, decorators: [{
                    type: Optional
                }] }, { type: i2.ErrorStateMatcher }, { type: i3.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }, { type: i3.NgForm, decorators: [{
                    type: Optional
                }] }, { type: i3.FormGroupDirective, decorators: [{
                    type: Optional
                }] }, { type: i4.Directionality, decorators: [{
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NX_DROPDOWN_SCROLL_STRATEGY]
                }] }, { type: i5.LiveAnnouncer }]; }, propDecorators: { options: [{
                type: Input
            }], filterInputType: [{
                type: Input
            }], tabIndex: [{
                type: Input
            }], value: [{
                type: Input,
                args: ['nxValue']
            }], disabled: [{
                type: Input,
                args: ['nxDisabled']
            }], isMultiSelect: [{
                type: Input,
                args: ['nxIsMultiselect']
            }], required: [{
                type: Input,
                args: ['nxRequired']
            }], styles: [{
                type: Input,
                args: ['nxStyle']
            }], placeholder: [{
                type: Input
            }], ignoreItemTrunctation: [{
                type: Input,
                args: ['nxIgnoreItemTrunctation']
            }], showFilter: [{
                type: Input,
                args: ['nxShowFilter']
            }], filterPlaceholder: [{
                type: Input,
                args: ['nxFilterPlaceholder']
            }], overlayLabel: [{
                type: Input,
                args: ['nxOverlayLabel']
            }], openedChange: [{
                type: Output
            }], filterResultChange: [{
                type: Output,
                args: ['filterResult']
            }], _openedStream: [{
                type: Output,
                args: ['opened']
            }], _closedStream: [{
                type: Output,
                args: ['closed']
            }], filterChanges: [{
                type: Output,
                args: ['filterInput']
            }], valueChange: [{
                type: Output,
                args: ['nxValueChange']
            }], selectionChange: [{
                type: Output
            }], panel: [{
                type: ViewChild,
                args: ['panel']
            }], panelBody: [{
                type: ViewChild,
                args: ['panelBody']
            }], trigger: [{
                type: ViewChild,
                args: ['trigger', { static: true }]
            }], filterInput: [{
                type: ViewChild,
                args: ['filterInput']
            }], overlayDir: [{
                type: ViewChild,
                args: [CdkConnectedOverlay, { static: true }]
            }], _contentDropdownItems: [{
                type: ContentChildren,
                args: [NxDropdownItemComponent, { descendants: true }]
            }], groups: [{
                type: ContentChildren,
                args: [NxDropdownGroupComponent]
            }], _customClosedDropdownLabel: [{
                type: ContentChild,
                args: [NxDropdownClosedLabelDirective]
            }], _defaultClosedDropdownLabel: [{
                type: ViewChild,
                args: ['defaultClosedDropdownLabel', { static: true }]
            }], _lazyDropdownItems: [{
                type: ViewChildren,
                args: [NxDropdownItemComponent]
            }], valueFormatter: [{
                type: Input,
                args: ['nxValueFormatter']
            }], compareWith: [{
                type: Input
            }], filterFn: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,