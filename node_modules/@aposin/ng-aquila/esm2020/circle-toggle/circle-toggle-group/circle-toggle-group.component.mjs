import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ChangeDetectionStrategy, Component, ContentChildren, EventEmitter, HostBinding, Inject, InjectionToken, Input, Optional, Output, Self, } from '@angular/core';
import { merge, Subject } from 'rxjs';
import { filter, startWith, takeUntil, tap } from 'rxjs/operators';
import { ToggleButton } from '../circle-toggle/toggle-button';
import * as i0 from "@angular/core";
import * as i1 from "@aposin/ng-aquila/utils";
import * as i2 from "@angular/forms";
import * as i3 from "@angular/common";
export const CIRCLE_TOGGLE_GROUP_DEFAULT_OPTIONS = new InjectionToken('CIRCLE_TOGGLE_GROUP_DEFAULT_OPTIONS');
let nextId = 0;
export class NxCircleToggleGroupComponent {
    constructor(_cdr, _errorStateMatcher, _defaultOptions, ngControl, _parentForm, _parentFormGroup) {
        this._cdr = _cdr;
        this._errorStateMatcher = _errorStateMatcher;
        this._defaultOptions = _defaultOptions;
        this.ngControl = ngControl;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this.errorState = false;
        this._id = `nx-circle-toggle-group-${nextId++}`;
        /** An event emitted when the selection changes. Outputs the value of the currently selected button. */
        this.valueChange = new EventEmitter();
        this._name = `toggle-group-${nextId++}`;
        this._disabled = false;
        this._negative = false;
        this._responsive = true;
        this._destroyed = new Subject();
        this.onChangeCallback = (value) => { };
        this.onTouchedCallback = () => { };
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
    }
    /**
     * Id of the circle toggle group.
     *
     * If not set, the circle toggle group gets an incremented value by default.
     */
    set id(value) {
        this._id = value;
        this._cdr.markForCheck();
    }
    get id() {
        return this._id;
    }
    /** Name that is used for accessibility. */
    set name(value) {
        this._name = value;
        this.updateToggleButtonsNames();
        this._cdr.markForCheck();
    }
    get name() {
        return this._name;
    }
    /** Whether the circle toggle group is disabled. */
    set disabled(value) {
        const newValue = coerceBooleanProperty(value);
        if (this._disabled !== newValue) {
            this._disabled = newValue;
            this._cdr.markForCheck();
        }
        if (this.buttons) {
            this.buttons.forEach(button => (button.disabled = newValue));
        }
    }
    get disabled() {
        return this._disabled;
    }
    /** Whether the circle toggle group uses the negative styling. */
    set negative(value) {
        const newValue = coerceBooleanProperty(value);
        if (this.negative !== newValue) {
            this._negative = newValue;
        }
        if (this.buttons) {
            this.buttons.forEach(button => (button.negative = newValue));
        }
    }
    get negative() {
        return this._negative;
    }
    /** The value of the selected circle toggle in the circle toggle group. */
    set value(value) {
        this.writeValue(value);
    }
    get value() {
        return this._value;
    }
    /** Whether the circle toggle group has a responsive behavior. */
    set responsive(value) {
        const newValue = coerceBooleanProperty(value);
        if (newValue !== this.responsive) {
            this._responsive = newValue;
            this._cdr.markForCheck();
        }
    }
    get responsive() {
        if (this._isExpert) {
            return false;
        }
        return this._responsive;
    }
    get _isExpert() {
        return this.appearance === 'expert';
    }
    /** @docs-private */
    get selectedButton() {
        return this.buttons ? this.buttons.find(button => button.checked) || null : null;
    }
    /** @docs-private */
    get buttons() {
        return this._buttons;
    }
    /**
     * **Expert option**
     *
     * Sets the appearance of the circle toggle group. Default: 'default'
     */
    set appearance(value) {
        if (this._appearance !== value) {
            this._appearance = value;
            this._cdr.markForCheck();
        }
    }
    get appearance() {
        return this._appearance || this._defaultOptions?.appearance || 'default';
    }
    writeValue(value) {
        Promise.resolve().then(() => {
            if (this.value !== value) {
                this._value = value;
                this.notifySelectedChild(value);
            }
        });
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
    ngAfterViewInit() {
        this.subscribeToSelectionChanges();
        // react if a content child is deleted, added etc.
        this.buttons.changes
            .pipe(startWith(this.buttons), filter(toggles => toggles.length > 0), tap(async (toggles) => Promise.resolve().then(() => {
            toggles.forEach((toggle) => toggle.toggleButton.resetClasses());
            this.buttons.first.toggleButton.setFirstButton();
            this.buttons.last.toggleButton.setLastButton();
        })), takeUntil(this._destroyed))
            .subscribe(() => this.subscribeToSelectionChanges());
    }
    /** @docs-private */
    subscribeToSelectionChanges() {
        merge(...this.buttons.map(button => button.selectionChange))
            .pipe(takeUntil(this.buttons.changes), takeUntil(this._destroyed))
            .subscribe((change) => {
            this.onChangeCallback(change.value);
            this.valueChange.emit(change.value);
        });
    }
    /**
     * @docs-private
     * inform the selected button if the group selection is set programattically at the beginning
     */
    notifySelectedChild(newValue) {
        if (this.buttons) {
            const selected = this.buttons.find(button => button.value === newValue);
            if (selected) {
                selected.setGroupSelection();
            }
        }
    }
    /** @docs-private */
    updateToggleButtonsNames() {
        if (this.buttons) {
            this.buttons.forEach(button => (button.name = this.name));
        }
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    ngDoCheck() {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribed to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this._updateErrorState();
        }
    }
    _updateErrorState() {
        const oldState = this.errorState;
        const parent = this._parentFormGroup || this._parentForm;
        const control = this.ngControl ? this.ngControl.control : null;
        const newState = this._errorStateMatcher.isErrorState(control, parent);
        if (newState !== oldState) {
            this.errorState = newState;
            this._cdr.markForCheck();
        }
    }
}
NxCircleToggleGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxCircleToggleGroupComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.ErrorStateMatcher }, { token: CIRCLE_TOGGLE_GROUP_DEFAULT_OPTIONS, optional: true }, { token: i2.NgControl, optional: true, self: true }, { token: i2.NgForm, optional: true }, { token: i2.FormGroupDirective, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NxCircleToggleGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxCircleToggleGroupComponent, selector: "nx-circle-toggle-group", inputs: { name: "name", disabled: "disabled", negative: "negative", value: "value", responsive: "responsive", appearance: "appearance" }, outputs: { valueChange: "valueChange" }, host: { attributes: { "role": "radiogroup" }, properties: { "class.is-responsive": "responsive", "class.is-disabled": "disabled", "attr.aria-disabled": "disabled", "attr.aria-labelledby": "name", "class.has-error": "errorState", "attr.name": "name", "attr.id": "id", "class.nx-circle-toggle-group": "true", "class.is-expert": "this._isExpert" } }, providers: [], queries: [{ propertyName: "_buttons", predicate: ToggleButton, descendants: true }], ngImport: i0, template: `<ng-content></ng-content>
        <ng-container *ngIf="errorState">
            <ng-content select="nx-error"></ng-content>
        </ng-container> `, isInline: true, styles: [":host{display:flex;flex-wrap:wrap;flex-direction:column;justify-content:space-around}@media (min-width: 320px){:host{flex-direction:row}}:host(.is-responsive){flex-direction:column}@media (min-width: 704px){:host(.is-responsive){flex-direction:row}}:host(.has-error) ::ng-deep .nx-toggle-circle__icon-wrapper{border-color:var(--danger)}\n"], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxCircleToggleGroupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-circle-toggle-group', template: `<ng-content></ng-content>
        <ng-container *ngIf="errorState">
            <ng-content select="nx-error"></ng-content>
        </ng-container> `, changeDetection: ChangeDetectionStrategy.OnPush, providers: [], host: {
                        '[class.is-responsive]': 'responsive',
                        '[class.is-disabled]': 'disabled',
                        '[attr.aria-disabled]': 'disabled',
                        '[attr.aria-labelledby]': 'name',
                        '[class.has-error]': 'errorState',
                        '[attr.name]': 'name',
                        '[attr.id]': 'id',
                        '[class.nx-circle-toggle-group]': 'true',
                        role: 'radiogroup',
                    }, styles: [":host{display:flex;flex-wrap:wrap;flex-direction:column;justify-content:space-around}@media (min-width: 320px){:host{flex-direction:row}}:host(.is-responsive){flex-direction:column}@media (min-width: 704px){:host(.is-responsive){flex-direction:row}}:host(.has-error) ::ng-deep .nx-toggle-circle__icon-wrapper{border-color:var(--danger)}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.ErrorStateMatcher }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [CIRCLE_TOGGLE_GROUP_DEFAULT_OPTIONS]
                }] }, { type: i2.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }, { type: i2.NgForm, decorators: [{
                    type: Optional
                }] }, { type: i2.FormGroupDirective, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { name: [{
                type: Input
            }], disabled: [{
                type: Input
            }], negative: [{
                type: Input
            }], value: [{
                type: Input
            }], responsive: [{
                type: Input
            }], _isExpert: [{
                type: HostBinding,
                args: ['class.is-expert']
            }], _buttons: [{
                type: ContentChildren,
                args: [ToggleButton, { descendants: true }]
            }], valueChange: [{
                type: Output
            }], appearance: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,