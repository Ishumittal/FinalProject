import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ChangeDetectionStrategy, Component, EventEmitter, forwardRef, HostListener, Input, Optional, Output, Self, ViewChild, } from '@angular/core';
import { NxMobileToggleButtonComponent } from '../mobile-toggle-button/mobile-toggle-button.component';
import { ToggleButton } from './toggle-button';
import * as i0 from "@angular/core";
import * as i1 from "../circle-toggle-group/circle-toggle-group.component";
import * as i2 from "@angular/cdk/collections";
import * as i3 from "@angular/cdk/a11y";
import * as i4 from "@angular/forms";
import * as i5 from "../icon-toggle-button/icon-toggle-button.component";
import * as i6 from "../mobile-toggle-button/mobile-toggle-button.component";
import * as i7 from "@angular/common";
export class ToggleChangeEvent {
    constructor(button, value) {
        this.button = button;
        this.value = value;
    }
}
let nextId = 0;
export class NxCircleToggleComponent extends ToggleButton {
    constructor(
    /** @docs-private */ toggleGroup, _checkedDispatcher, _cdr, _focusMonitor, ngControl) {
        super();
        this.toggleGroup = toggleGroup;
        this._checkedDispatcher = _checkedDispatcher;
        this._cdr = _cdr;
        this._focusMonitor = _focusMonitor;
        this.ngControl = ngControl;
        this._id = `toggle-button-${nextId++}`;
        /** @docs-private */
        this.inGroup = false;
        this.errorState = false;
        this._name = null;
        /**
         * An event that is emitted when the checked state fo the circle toggle changes.
         */
        this.checkedChange = new EventEmitter();
        /**
         * An event that is emitted when the checked state of the circle toggle changes.
         * The event object contains the circle toggle itself and its value (see ToggleChangeEvent).
         */
        this.selectionChange = new EventEmitter();
        this._checked = false;
        this._value = null;
        this._iconName = null;
        this._svg = null;
        this._svgChecked = null;
        this._circleText = null;
        this._label = null;
        this._hint = null;
        this._hover = false;
        /** touched is set to true on touch devices. */
        this._touched = false;
        this._removeUniqueSelectionListener = () => { };
        this.onChangeCallback = (checked) => { };
        this.onTouchedCallback = () => { };
        if (this.toggleGroup) {
            this.name = this.toggleGroup.name;
        }
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
    }
    /**
     * Id of the circle toggle.
     *
     * If not set, the circle toggle gets an incremented value by default.
     */
    set id(value) {
        this._id = value;
        this._cdr.markForCheck();
    }
    get id() {
        return this._id;
    }
    /** Name that is used for accessibility. */
    set name(value) {
        this._name = value;
        this._cdr.markForCheck();
    }
    get name() {
        return this._name;
    }
    /** Whether the circle toggle is checked. */
    set checked(value) {
        const newValue = coerceBooleanProperty(value);
        if (this.checked !== newValue) {
            this._checked = newValue;
            this._cdr.markForCheck();
        }
    }
    get checked() {
        return this._checked;
    }
    /** The value that is used in the model. */
    set value(newValue) {
        this._value = newValue;
        this._cdr.markForCheck();
    }
    get value() {
        return this._value;
    }
    /** Id of the icon that should be displayed. */
    set iconName(name) {
        this._iconName = name;
        this._cdr.markForCheck();
    }
    get iconName() {
        return this._iconName;
    }
    /** SVG that is displayed if the circle toggle is unchecked. */
    set svg(src) {
        this._svg = src;
        this._cdr.markForCheck();
    }
    get svg() {
        return this._svg;
    }
    /** SVG that is displayed if the circle toggle is checked. */
    set svgChecked(src) {
        this._svgChecked = src;
        this._cdr.markForCheck();
    }
    get svgChecked() {
        return this._svgChecked;
    }
    /** A text that is displayed inside the circle toggle. */
    set circleText(value) {
        if (value !== this._circleText) {
            this._circleText = value;
            this._cdr.markForCheck();
        }
    }
    get circleText() {
        return this._circleText;
    }
    /** Label displayed below the circle. */
    set label(value) {
        this._label = value;
        this._cdr.markForCheck();
    }
    get label() {
        return this._label;
    }
    /** Additional hint displayed below the label. */
    set hint(value) {
        this._hint = value;
        this._cdr.markForCheck();
    }
    get hint() {
        return this._hint;
    }
    /** Whether the circle toggle uses the negative set of styling. */
    set negative(value) {
        const newValue = coerceBooleanProperty(value);
        if (this.negative !== newValue) {
            this._negative = newValue;
            this._cdr.markForCheck();
        }
    }
    get negative() {
        return !!this._negative;
    }
    /** Whether the circle toggle has a responsive behavior. */
    set responsive(value) {
        const newValue = coerceBooleanProperty(value);
        if (this.responsive !== newValue) {
            this._responsive = newValue;
            this._cdr.markForCheck();
        }
    }
    get responsive() {
        return !!this._responsive;
    }
    /** Whether the circle toggle is disabled. */
    set disabled(value) {
        const newValue = coerceBooleanProperty(value);
        if (this.disabled !== newValue) {
            this._disabled = newValue;
            this._cdr.markForCheck();
        }
    }
    get disabled() {
        return !!this._disabled;
    }
    /** @docs-private */
    onMouseEnter() {
        if (!this._touched) {
            this._hover = true;
        }
    }
    /** @docs-private */
    onMouseLeave() {
        if (!this._touched) {
            this._hover = false;
        }
    }
    /** @docs-private */
    onTouchStart() {
        this._touched = true;
    }
    ngOnInit() {
        if (this.toggleGroup) {
            this.attachListenerForGroup();
        }
    }
    ngDoCheck() {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this.errorState = !this.ngControl.valid;
        }
    }
    ngAfterViewInit() {
        Promise.resolve().then(() => {
            if (this.toggleGroup) {
                this.inGroup = true;
                this.negative = this.toggleGroup.negative;
                this.disabled = this.toggleGroup.disabled;
                this.responsive = this.toggleGroup.responsive;
                this.id = this.toggleGroup.id + `-button-${nextId++}`;
            }
        });
        this._focusMonitor.monitor(this._nativeInput);
    }
    ngOnDestroy() {
        // function returned by the listener
        this._removeUniqueSelectionListener();
        this._focusMonitor.stopMonitoring(this._nativeInput);
    }
    /** @docs-private */
    attachListenerForGroup() {
        this._removeUniqueSelectionListener = this._checkedDispatcher.listen((groupId, buttonId) => {
            if (this.id !== buttonId && groupId === this.toggleGroup?.id) {
                this.checked = false;
            }
        });
    }
    writeValue(newValue) {
        this.checked = newValue;
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /** Focuses the radio button element. */
    focus(focusOrigin) {
        this._focusMonitor.focusVia(this._nativeInput, focusOrigin);
    }
    /** @docs-private */
    toggle(event) {
        event.preventDefault();
        event.stopPropagation();
        // TODO simplify if statement
        if (!((this.toggleGroup && this.checked) || this.disabled)) {
            this.checked = !this.checked;
            this.onChangeCallback(this.checked);
            this.checkedChange.emit(this.checked);
            this.selectionChange.emit(new ToggleChangeEvent(this, this.value));
            if (this.toggleGroup) {
                this._checkedDispatcher.notify(this.toggleGroup.id, this.id);
            }
        }
    }
    /**
     * @docs-private
     *
     * method called by the group if the internal value of the group is changed programatically,
     * does not trigger change emission
     */
    setGroupSelection() {
        if (!this.toggleGroup) {
            return;
        }
        // propagate changes only if the value in the group is different than the button checked value
        if (!this.checked) {
            this.checked = !this.checked;
            this.onChangeCallback(this.checked);
            this._checkedDispatcher.notify(this.toggleGroup.id, this.id);
        }
    }
    /** @docs-private */
    get svgButton() {
        return !!this.svg && !!this.svgChecked;
    }
    /** @docs-private */
    get svgUrl() {
        let useFilledSvg = this.checked || (!this.disabled && this._hover);
        if (this.negative) {
            useFilledSvg = !useFilledSvg;
        }
        return useFilledSvg ? this.svgChecked : this.svg;
    }
    /** @docs-private */
    get type() {
        return this.toggleGroup ? 'radio' : 'checkbox';
    }
    /** @docs-private */
    handleEnterKey(event) {
        if (!this.toggleGroup) {
            this.toggle(event);
        }
    }
}
NxCircleToggleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxCircleToggleComponent, deps: [{ token: i1.NxCircleToggleGroupComponent, optional: true }, { token: i2.UniqueSelectionDispatcher }, { token: i0.ChangeDetectorRef }, { token: i3.FocusMonitor }, { token: i4.NgControl, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Component });
NxCircleToggleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxCircleToggleComponent, selector: "nx-circle-toggle", inputs: { name: "name", checked: "checked", value: "value", iconName: ["icon", "iconName"], svg: "svg", svgChecked: "svgChecked", circleText: "circleText", label: "label", hint: "hint", negative: "negative", responsive: "responsive", disabled: "disabled" }, outputs: { checkedChange: "checkedChange", selectionChange: "selectionChange" }, host: { listeners: { "mouseenter": "onMouseEnter()", "mouseleave": "onMouseLeave()", "touchstart": "onTouchStart()" }, properties: { "class.nx-toggle-circle": "true", "class.in-group": "inGroup", "class.is-disabled": "disabled", "class.is-responsive": "responsive", "class.has-error": "errorState" } }, providers: [
        {
            provide: ToggleButton,
            useExisting: forwardRef(() => NxCircleToggleComponent),
        },
    ], viewQueries: [{ propertyName: "_nativeInput", first: true, predicate: ["input"], descendants: true }, { propertyName: "toggleButton", first: true, predicate: NxMobileToggleButtonComponent, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: "<input\n    #input\n    [id]=\"id + '-input'\"\n    class=\"nx-circle-toggle__input\"\n    [attr.aria-labelledby]=\"id + '-label'\"\n    [type]=\"type\"\n    [attr.name]=\"name\"\n    [checked]=\"checked\"\n    [disabled]=\"disabled\"\n    [attr.aria-checked]=\"checked\"\n    (keydown.enter)=\"handleEnterKey($event)\"\n    (click)=\"toggle($event)\"\n/>\n<label class=\"nx-circle-toggle__label\" [for]=\"id + '-input'\" [id]=\"id + '-label'\">\n    <nx-icon-toggle-button\n        [label]=\"label\"\n        [hint]=\"hint\"\n        [checked]=\"checked\"\n        [icon]=\"iconName\"\n        [negative]=\"negative\"\n        [svg]=\"svgUrl\"\n        [disabled]=\"disabled\"\n        [inGroup]=\"inGroup\"\n        [touched]=\"_touched\"\n        [circleText]=\"circleText\"\n    >\n    </nx-icon-toggle-button>\n    <!-- The mobile toggle button is needed for the responsive mobile version of the component.\n    The display swtich is handled in the css. -->\n    <nx-mobile-toggle-button [label]=\"label\" [hint]=\"hint\" [checked]=\"checked\" [negative]=\"negative\" [disabled]=\"disabled\" [circleText]=\"circleText\">\n    </nx-mobile-toggle-button>\n    <ng-content select=\"nx-error\" *ngIf=\"errorState\"></ng-content>\n</label>\n", styles: [":host{display:inline-block;vertical-align:top;position:relative}:host:not(.is-responsive){opacity:.9999}:host .nx-circle-toggle__input{opacity:0;position:absolute}:host:not(.in-group){margin-right:64px}@media (max-width: 703px){:host:not(.in-group){margin-right:48px}}[dir=rtl] :host:not(.in-group){margin-right:0;margin-right:initial;margin-left:64px}@media (max-width: 703px){[dir=rtl] :host:not(.in-group){margin-right:0;margin-right:initial;margin-left:48px}}:host .nx-circle-toggle__input.cdk-keyboard-focused+.nx-circle-toggle__label ::ng-deep .nx-toggle-circle__icon-wrapper,:host .nx-circle-toggle__input.cdk-keyboard-focused+.nx-circle-toggle__label ::ng-deep .nx-toggle-circle__check-focus{box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){:host .nx-circle-toggle__input.cdk-keyboard-focused+.nx-circle-toggle__label ::ng-deep .nx-toggle-circle__icon-wrapper,:host .nx-circle-toggle__input.cdk-keyboard-focused+.nx-circle-toggle__label ::ng-deep .nx-toggle-circle__check-focus{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}:host .nx-circle-toggle__input.cdk-keyboard-focused+.nx-circle-toggle__label ::ng-deep nx-mobile-toggle-button{box-shadow:var(--focus-box-shadow);z-index:1}@media screen and (-ms-high-contrast: active),(forced-colors: active){:host .nx-circle-toggle__input.cdk-keyboard-focused+.nx-circle-toggle__label ::ng-deep nx-mobile-toggle-button{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}:host(.has-error) ::ng-deep .is-flipped .nx-toggle-circle__check-icon,:host(.has-error) ::ng-deep .is-flipped .nx-toggle-circle__icon-wrapper{background-color:var(--danger)!important}:host(.has-error) ::ng-deep .nx-toggle-circle__icon-wrapper{border-color:var(--danger)!important}\n"], components: [{ type: i5.NxIconToggleButtonComponent, selector: "nx-icon-toggle-button", inputs: ["inGroup", "hint", "label", "checked", "icon", "svg", "disabled", "negative", "touched", "circleText"] }, { type: i6.NxMobileToggleButtonComponent, selector: "nx-mobile-toggle-button", inputs: ["checked", "negative", "disabled", "hint", "label", "circleText"] }], directives: [{ type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxCircleToggleComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-circle-toggle', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        {
                            provide: ToggleButton,
                            useExisting: forwardRef(() => NxCircleToggleComponent),
                        },
                    ], host: {
                        '[class.nx-toggle-circle]': 'true',
                        '[class.in-group]': 'inGroup',
                        '[class.is-disabled]': 'disabled',
                        '[class.is-responsive]': 'responsive',
                        '[class.has-error]': 'errorState',
                    }, template: "<input\n    #input\n    [id]=\"id + '-input'\"\n    class=\"nx-circle-toggle__input\"\n    [attr.aria-labelledby]=\"id + '-label'\"\n    [type]=\"type\"\n    [attr.name]=\"name\"\n    [checked]=\"checked\"\n    [disabled]=\"disabled\"\n    [attr.aria-checked]=\"checked\"\n    (keydown.enter)=\"handleEnterKey($event)\"\n    (click)=\"toggle($event)\"\n/>\n<label class=\"nx-circle-toggle__label\" [for]=\"id + '-input'\" [id]=\"id + '-label'\">\n    <nx-icon-toggle-button\n        [label]=\"label\"\n        [hint]=\"hint\"\n        [checked]=\"checked\"\n        [icon]=\"iconName\"\n        [negative]=\"negative\"\n        [svg]=\"svgUrl\"\n        [disabled]=\"disabled\"\n        [inGroup]=\"inGroup\"\n        [touched]=\"_touched\"\n        [circleText]=\"circleText\"\n    >\n    </nx-icon-toggle-button>\n    <!-- The mobile toggle button is needed for the responsive mobile version of the component.\n    The display swtich is handled in the css. -->\n    <nx-mobile-toggle-button [label]=\"label\" [hint]=\"hint\" [checked]=\"checked\" [negative]=\"negative\" [disabled]=\"disabled\" [circleText]=\"circleText\">\n    </nx-mobile-toggle-button>\n    <ng-content select=\"nx-error\" *ngIf=\"errorState\"></ng-content>\n</label>\n", styles: [":host{display:inline-block;vertical-align:top;position:relative}:host:not(.is-responsive){opacity:.9999}:host .nx-circle-toggle__input{opacity:0;position:absolute}:host:not(.in-group){margin-right:64px}@media (max-width: 703px){:host:not(.in-group){margin-right:48px}}[dir=rtl] :host:not(.in-group){margin-right:0;margin-right:initial;margin-left:64px}@media (max-width: 703px){[dir=rtl] :host:not(.in-group){margin-right:0;margin-right:initial;margin-left:48px}}:host .nx-circle-toggle__input.cdk-keyboard-focused+.nx-circle-toggle__label ::ng-deep .nx-toggle-circle__icon-wrapper,:host .nx-circle-toggle__input.cdk-keyboard-focused+.nx-circle-toggle__label ::ng-deep .nx-toggle-circle__check-focus{box-shadow:var(--focus-box-shadow)}@media screen and (-ms-high-contrast: active),(forced-colors: active){:host .nx-circle-toggle__input.cdk-keyboard-focused+.nx-circle-toggle__label ::ng-deep .nx-toggle-circle__icon-wrapper,:host .nx-circle-toggle__input.cdk-keyboard-focused+.nx-circle-toggle__label ::ng-deep .nx-toggle-circle__check-focus{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}:host .nx-circle-toggle__input.cdk-keyboard-focused+.nx-circle-toggle__label ::ng-deep nx-mobile-toggle-button{box-shadow:var(--focus-box-shadow);z-index:1}@media screen and (-ms-high-contrast: active),(forced-colors: active){:host .nx-circle-toggle__input.cdk-keyboard-focused+.nx-circle-toggle__label ::ng-deep nx-mobile-toggle-button{box-shadow:0 0 0 2px background,0 0 0 6px windowText;outline:4px solid CanvasText;outline-offset:2px}}:host(.has-error) ::ng-deep .is-flipped .nx-toggle-circle__check-icon,:host(.has-error) ::ng-deep .is-flipped .nx-toggle-circle__icon-wrapper{background-color:var(--danger)!important}:host(.has-error) ::ng-deep .nx-toggle-circle__icon-wrapper{border-color:var(--danger)!important}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.NxCircleToggleGroupComponent, decorators: [{
                    type: Optional
                }] }, { type: i2.UniqueSelectionDispatcher }, { type: i0.ChangeDetectorRef }, { type: i3.FocusMonitor }, { type: i4.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }]; }, propDecorators: { _nativeInput: [{
                type: ViewChild,
                args: ['input']
            }], name: [{
                type: Input
            }], checkedChange: [{
                type: Output
            }], selectionChange: [{
                type: Output
            }], checked: [{
                type: Input
            }], value: [{
                type: Input
            }], iconName: [{
                type: Input,
                args: ['icon']
            }], svg: [{
                type: Input
            }], svgChecked: [{
                type: Input
            }], circleText: [{
                type: Input
            }], label: [{
                type: Input
            }], hint: [{
                type: Input
            }], negative: [{
                type: Input
            }], responsive: [{
                type: Input
            }], disabled: [{
                type: Input
            }], toggleButton: [{
                type: ViewChild,
                args: [NxMobileToggleButtonComponent, { static: true }]
            }], onMouseEnter: [{
                type: HostListener,
                args: ['mouseenter']
            }], onMouseLeave: [{
                type: HostListener,
                args: ['mouseleave']
            }], onTouchStart: [{
                type: HostListener,
                args: ['touchstart']
            }] } });
//# sourceMappingURL=data:application/json;base64,