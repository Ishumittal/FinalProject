import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { NxDynamicTableDataSource } from './dynamic-table.models';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/table";
import * as i2 from "@angular/common";
export class NxDynamicTableComponent {
    constructor(_cdr) {
        this._cdr = _cdr;
        this._dataChange = new BehaviorSubject([]);
        this._data = [];
        this._columnKeys = [];
        /** An event is dispatched when a row is clicked. */
        this.nxRowClick = new EventEmitter();
    }
    /** Sets the data that it will show in the table. */
    set data(value) {
        this._data = value.filter(element => element);
        // If user dont pass displayedColumns the table will show all data and the name of columns will be the key of data
        if (!this._displayedColumns) {
            const keys = [], cArray = [];
            // For catch keys of data Objects and assing title, key and type string by default to displayedColumns
            this._data.forEach(element => {
                for (const key in element) {
                    if (!keys.includes(key)) {
                        keys.push(key);
                        cArray.push({ title: key, key, type: 'string' });
                    }
                }
            });
            this._columnKeys = keys;
            this._displayedColumns = cArray;
            // need to call markForCheck as the setter changes displayedColumns here
            // sidenote: isn't needed for the data itself as it gets passed to the cdk-table
            // by the datasource observable
            this._cdr.markForCheck();
        }
        this._dataChange.next(this._data);
    }
    get data() {
        return this._data;
    }
    /** Sets the name order and type of columns. */
    set displayedColumns(value) {
        this._displayedColumns = value;
        this._columnKeys = value ? value.map(column => column.key) : [];
        this._cdr.markForCheck();
    }
    get displayedColumns() {
        return this._displayedColumns;
    }
    /** @docs-private */
    get dataSource() {
        return this._dataSource;
    }
    /** @docs-private */
    get columnKeys() {
        return this._columnKeys;
    }
    ngOnInit() {
        if (!this._data) {
            this._data = [];
            this._dataChange.next(this._data);
        }
        this._dataSource = new NxDynamicTableDataSource(this._dataChange);
    }
    /** @docs-private */
    handleRowClick(row) {
        this.nxRowClick.emit(row);
    }
    /** @docs-private */
    isNumeric(column) {
        return column.type === 'numeric';
    }
}
NxDynamicTableComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDynamicTableComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NxDynamicTableComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: NxDynamicTableComponent, selector: "nx-dynamic-table", inputs: { data: ["nxData", "data"], displayedColumns: ["nxDisplayedColumns", "displayedColumns"] }, outputs: { nxRowClick: "nxRowClick" }, ngImport: i0, template: "<div class=\"nx-table__container\" *ngIf=\"data && data.length > 0\">\n    <div class=\"nx-table__scroll\">\n        <cdk-table [dataSource]=\"dataSource\" class=\"nx-table\">\n            <!-- Column Definitions -->\n            <ng-container *ngFor=\"let column of displayedColumns\" cdkColumnDef=\"{{ column.key }}\">\n                <cdk-header-cell\n                    *cdkHeaderCellDef\n                    class=\"nx-table__header-cell\"\n                    [ngClass]=\"[column.headerCellClass ?? '', isNumeric(column) ? 'nx-table__header-cell--number' : '']\"\n                    [ngStyle]=\"column.headerCellStyle || null\"\n                    ><div class=\"nx-table__header-title--block\">\n                        <span class=\"nx-table__header-title\">{{ column.title }}</span>\n                    </div>\n                </cdk-header-cell>\n                <cdk-cell\n                    *cdkCellDef=\"let row\"\n                    class=\"nx-table__cell\"\n                    [ngClass]=\"[column.cellClass ?? '', isNumeric(column) ? 'nx-table__cell--number' : '']\"\n                    [ngStyle]=\"column.cellStyle ?? null\"\n                    [innerHTML]=\"row[column.key]\"\n                ></cdk-cell>\n            </ng-container>\n\n            <!-- Header and Row Declarations -->\n            <cdk-header-row *cdkHeaderRowDef=\"columnKeys\" class=\"nx-table__header-row\"></cdk-header-row>\n            <cdk-row *cdkRowDef=\"let row; columns: columnKeys\" class=\"nx-table__row\" (dblclick)=\"handleRowClick(row)\"></cdk-row>\n        </cdk-table>\n    </div>\n</div>\n<div class=\"nx-table__appendix\" *ngIf=\"data.length === 0\">\n    <ng-content></ng-content>\n</div>\n", styles: [".nx-table{font-size:var(--table-cell-font-size);line-height:var(--table-cell-line-height);font-weight:var(--table-cell-font-weight);letter-spacing:var(--table-cell-letter-spacing);color:var(--table-cell-color);text-align:left;width:100%;display:table}:host-context([dir=rtl]) .nx-table{text-align:right}.nx-table__scroll{max-width:100%;overflow:hidden;overflow-x:auto}.nx-table__header-cell{font-size:var(--table-header-cell-font-size);line-height:var(--table-header-cell-line-height);font-weight:var(--table-header-cell-font-weight);letter-spacing:var(--table-header-cell-letter-spacing);color:var(--table-header-cell-color);background:var(--table-header-cell-background-color);border-top:1px solid var(--table-cell-border-top-color);border-bottom:2px solid var(--table-header-border-bottom-color);padding:23px 16px 22px;position:relative}.nx-table__header-cell--number{display:flex;position:relative}.nx-table__header-cell--number .nx-table__header-title--block{justify-content:flex-end}.nx-table__cell--number,.nx-table__header-cell--number{text-align:right}:host-context([dir=rtl]) .nx-table__cell--number,:host-context([dir=rtl]) .nx-table__header-cell--number{text-align:left}.nx-table__header-row,.nx-table__row{display:table-row;vertical-align:inherit;background-color:transparent}.nx-table__row{background:var(--table-row-background-color)}.nx-table__cell{border-bottom:1px solid var(--table-header-border-top-color);padding:24px 16px 23px;vertical-align:top}.nx-table__row:last-child .nx-table__cell{padding-bottom:22px;border-bottom:2px solid var(--table-header-border-bottom-color)}.nx-table__header-cell,.nx-table__cell{display:table-cell;vertical-align:inherit}\n"], components: [{ type: i1.CdkTable, selector: "cdk-table, table[cdk-table]", inputs: ["trackBy", "dataSource", "multiTemplateDataRows", "fixedLayout"], outputs: ["contentChanged"], exportAs: ["cdkTable"] }, { type: i1.CdkHeaderRow, selector: "cdk-header-row, tr[cdk-header-row]" }, { type: i1.CdkRow, selector: "cdk-row, tr[cdk-row]" }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.CdkColumnDef, selector: "[cdkColumnDef]", inputs: ["sticky", "cdkColumnDef", "stickyEnd"] }, { type: i1.CdkHeaderCellDef, selector: "[cdkHeaderCellDef]" }, { type: i1.CdkHeaderCell, selector: "cdk-header-cell, th[cdk-header-cell]" }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i1.CdkCellDef, selector: "[cdkCellDef]" }, { type: i1.CdkCell, selector: "cdk-cell, td[cdk-cell]" }, { type: i1.CdkHeaderRowDef, selector: "[cdkHeaderRowDef]", inputs: ["cdkHeaderRowDef", "cdkHeaderRowDefSticky"] }, { type: i1.CdkRowDef, selector: "[cdkRowDef]", inputs: ["cdkRowDefColumns", "cdkRowDefWhen"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NxDynamicTableComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nx-dynamic-table', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"nx-table__container\" *ngIf=\"data && data.length > 0\">\n    <div class=\"nx-table__scroll\">\n        <cdk-table [dataSource]=\"dataSource\" class=\"nx-table\">\n            <!-- Column Definitions -->\n            <ng-container *ngFor=\"let column of displayedColumns\" cdkColumnDef=\"{{ column.key }}\">\n                <cdk-header-cell\n                    *cdkHeaderCellDef\n                    class=\"nx-table__header-cell\"\n                    [ngClass]=\"[column.headerCellClass ?? '', isNumeric(column) ? 'nx-table__header-cell--number' : '']\"\n                    [ngStyle]=\"column.headerCellStyle || null\"\n                    ><div class=\"nx-table__header-title--block\">\n                        <span class=\"nx-table__header-title\">{{ column.title }}</span>\n                    </div>\n                </cdk-header-cell>\n                <cdk-cell\n                    *cdkCellDef=\"let row\"\n                    class=\"nx-table__cell\"\n                    [ngClass]=\"[column.cellClass ?? '', isNumeric(column) ? 'nx-table__cell--number' : '']\"\n                    [ngStyle]=\"column.cellStyle ?? null\"\n                    [innerHTML]=\"row[column.key]\"\n                ></cdk-cell>\n            </ng-container>\n\n            <!-- Header and Row Declarations -->\n            <cdk-header-row *cdkHeaderRowDef=\"columnKeys\" class=\"nx-table__header-row\"></cdk-header-row>\n            <cdk-row *cdkRowDef=\"let row; columns: columnKeys\" class=\"nx-table__row\" (dblclick)=\"handleRowClick(row)\"></cdk-row>\n        </cdk-table>\n    </div>\n</div>\n<div class=\"nx-table__appendix\" *ngIf=\"data.length === 0\">\n    <ng-content></ng-content>\n</div>\n", styles: [".nx-table{font-size:var(--table-cell-font-size);line-height:var(--table-cell-line-height);font-weight:var(--table-cell-font-weight);letter-spacing:var(--table-cell-letter-spacing);color:var(--table-cell-color);text-align:left;width:100%;display:table}:host-context([dir=rtl]) .nx-table{text-align:right}.nx-table__scroll{max-width:100%;overflow:hidden;overflow-x:auto}.nx-table__header-cell{font-size:var(--table-header-cell-font-size);line-height:var(--table-header-cell-line-height);font-weight:var(--table-header-cell-font-weight);letter-spacing:var(--table-header-cell-letter-spacing);color:var(--table-header-cell-color);background:var(--table-header-cell-background-color);border-top:1px solid var(--table-cell-border-top-color);border-bottom:2px solid var(--table-header-border-bottom-color);padding:23px 16px 22px;position:relative}.nx-table__header-cell--number{display:flex;position:relative}.nx-table__header-cell--number .nx-table__header-title--block{justify-content:flex-end}.nx-table__cell--number,.nx-table__header-cell--number{text-align:right}:host-context([dir=rtl]) .nx-table__cell--number,:host-context([dir=rtl]) .nx-table__header-cell--number{text-align:left}.nx-table__header-row,.nx-table__row{display:table-row;vertical-align:inherit;background-color:transparent}.nx-table__row{background:var(--table-row-background-color)}.nx-table__cell{border-bottom:1px solid var(--table-header-border-top-color);padding:24px 16px 23px;vertical-align:top}.nx-table__row:last-child .nx-table__cell{padding-bottom:22px;border-bottom:2px solid var(--table-header-border-bottom-color)}.nx-table__header-cell,.nx-table__cell{display:table-cell;vertical-align:inherit}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { data: [{
                type: Input,
                args: ['nxData']
            }], displayedColumns: [{
                type: Input,
                args: ['nxDisplayedColumns']
            }], nxRowClick: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,