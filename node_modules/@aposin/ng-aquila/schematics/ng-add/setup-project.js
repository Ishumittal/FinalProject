"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular/cdk/schematics");
const schematics_2 = require("@angular-devkit/schematics");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const workspace_1 = require("@schematics/angular/utility/workspace");
const chalk = require("chalk");
const utils_1 = require("../utils/utils");
function default_1(options) {
    return async (host, context) => {
        context.addTask(new tasks_1.NodePackageInstallTask());
        return (0, schematics_2.chain)([
            (options === null || options === void 0 ? void 0 : options.type) === 'b2b' ? addExpertModule(options) : (0, schematics_2.noop)(),
            (options === null || options === void 0 ? void 0 : options.starter) ? addStarterApp(options) : (0, schematics_2.noop)(),
            addAposinTheme(options),
            addCdkStyles(options),
            addCdkA11yStyles(options),
        ]);
    };
}
exports.default = default_1;
function addExpertModule(options) {
    return async (host) => {
        const workspace = await (0, workspace_1.getWorkspace)(host);
        const project = (0, schematics_1.getProjectFromWorkspace)(workspace, options.project);
        (0, schematics_1.addModuleImportToRootModule)(host, 'NxExpertModule', '@aposin/ng-aquila/config', project);
    };
}
function addStarterApp(options) {
    return async (host, context) => {
        const workspace = await (0, workspace_1.getWorkspace)(host);
        const project = (0, schematics_1.getProjectFromWorkspace)(workspace, options.project);
        const projectRoot = project.sourceRoot || '.';
        const projectAppPath = (0, workspace_1.buildDefaultPath)(project);
        if (!(0, utils_1.isAngularApplicationProject)(project)) {
            throw new schematics_2.SchematicsException('Project is not an application or is using an unsupported builder');
        }
        const mainBuffer = host.read(`${projectRoot}/main.ts`);
        if (!mainBuffer) {
            throw new schematics_2.SchematicsException('Incompatible Starter project: cannot find main.ts');
        }
        if (!mainBuffer.toString().includes('AppModule')) {
            throw new schematics_2.SchematicsException('Incompatible Starter project: main.ts is not bootstrapping AppModule');
        }
        const indexBuffer = host.read(`${projectRoot}/index.html`);
        if (!indexBuffer) {
            throw new schematics_2.SchematicsException('Incompatible Starter project: cannot find index.html');
        }
        if (!indexBuffer.toString().includes('<app-root')) {
            throw new schematics_2.SchematicsException('Incompatible Starter project: index.html does not include <app-root> element');
        }
        const moduleBuffer = host.read(`${projectAppPath}/app.module.ts`);
        if (!moduleBuffer) {
            throw new schematics_2.SchematicsException(`Incompatible Starter project: ${projectAppPath}/app.module.ts does not exist`);
        }
        if (!moduleBuffer.toString().includes('AppComponent')) {
            throw new schematics_2.SchematicsException(`Incompatible Starter project: ${projectAppPath}/app.module.ts does not import AppComponent`);
        }
        return (0, schematics_2.chain)([(0, schematics_2.mergeWith)((0, schematics_2.apply)((0, schematics_2.url)('./files'), [(0, schematics_2.move)(projectAppPath)]), schematics_2.MergeStrategy.Overwrite), rewriteCopyrightYear()]);
    };
    function rewriteCopyrightYear() {
        return async (host, context) => {
            const currentYear = new Date().getFullYear();
            const copyrightTemplate = 'Copyright ALLIANZ';
            const copyrightStamp = `Copyright ALLIANZ ${currentYear}`;
            const workspace = await (0, workspace_1.getWorkspace)(host);
            const project = (0, schematics_1.getProjectFromWorkspace)(workspace, options.project);
            const projectAppPath = (0, workspace_1.buildDefaultPath)(project);
            [`${projectAppPath}/app.module.ts`, `${projectAppPath}/app.component.ts`, `${projectAppPath}/app.component.html`].forEach(file => {
                let fileContent = host.read(file).toString('utf-8');
                fileContent = fileContent.replace(copyrightTemplate, copyrightStamp);
                host.overwrite(file, fileContent);
            });
        };
    }
}
function addAposinTheme(options) {
    return async (host) => {
        if (options.noTheme) {
            return;
        }
        const workspace = await (0, workspace_1.getWorkspace)(host);
        const project = (0, schematics_1.getProjectFromWorkspace)(workspace, options.project);
        const newFilePath = 'node_modules/@aposin/ng-aquila/css/normalize.css';
        const buildOptions = (0, schematics_1.getProjectTargetOptions)(project, 'build');
        let styles = buildOptions.styles;
        if (!styles) {
            styles = [newFilePath];
        }
        else if (!styles.includes(newFilePath)) {
            styles.push(newFilePath);
        }
        const themeToAdd = options.type === 'b2b' ? 'expert.css' : 'aposin.css';
        styles.push(`node_modules/@aposin/ng-aquila/themes/${themeToAdd}`);
        return (0, workspace_1.updateWorkspace)(workspace);
    };
}
function addCdkStyles(options) {
    return addStyles(options, 'overlay-prebuilt.css', '@import "@angular/cdk/overlay-prebuilt.css";');
}
function addCdkA11yStyles(options) {
    return addStyles(options, 'a11y-prebuilt.css', '@import "@angular/cdk/a11y-prebuilt.css";');
}
function addStyles(options, path, importString) {
    return async (host) => {
        const workspace = await (0, workspace_1.getWorkspace)(host);
        const project = (0, schematics_1.getProjectFromWorkspace)(workspace, options.project);
        const styleFilePath = (0, schematics_1.getProjectStyleFile)(project);
        if (!styleFilePath) {
            console.warn(chalk.red(`Could not find the default style file for this project.`));
            console.warn(chalk.red(`Please import '${path}' file in your CSS.`));
            return;
        }
        const buffer = host.read(styleFilePath);
        if (!buffer) {
            console.warn(chalk.red(`Could not read the default style file within the project (${chalk.italic(styleFilePath)})`));
            console.warn(chalk.red(`Please import '${path}' file in your CSS.`));
            return;
        }
        const htmlContent = buffer.toString();
        const insertion = `\n${importString}`;
        if (htmlContent.includes(insertion)) {
            return;
        }
        const recorder = host.beginUpdate(styleFilePath);
        recorder.insertLeft(htmlContent.length, insertion);
        host.commitUpdate(recorder);
    };
}
//# sourceMappingURL=setup-project.js.map