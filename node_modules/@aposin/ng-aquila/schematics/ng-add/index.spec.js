"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular/cdk/schematics");
const workspace_1 = require("@schematics/angular/utility/workspace");
const test_setup_1 = require("../utils/testing/test-setup");
describe('ng-aquila ng add', () => {
    const testSetup = new test_setup_1.SchematicTestSetup('ng-add-setup-project', test_setup_1.Collection.SCHEMATICS);
    let testProjectConfig;
    async function getTestProjectConfig() {
        const workspace = await (0, workspace_1.getWorkspace)(testSetup.appTree);
        return (0, schematics_1.getProjectFromWorkspace)(workspace, 'aquila-testing');
    }
    describe('general and b2c', () => {
        beforeEach(async () => {
            await testSetup.runMigration();
            testProjectConfig = await getTestProjectConfig();
        });
        it('should add normalize.css', async () => {
            var _a, _b, _c;
            expect((_c = (_b = (_a = testProjectConfig.targets) === null || _a === void 0 ? void 0 : _a.get('build')) === null || _b === void 0 ? void 0 : _b.options) === null || _c === void 0 ? void 0 : _c.styles).toContain('node_modules/@aposin/ng-aquila/css/normalize.css');
        });
        it('should add aposin theme', async () => {
            var _a, _b, _c, _d, _e, _f;
            expect((_c = (_b = (_a = testProjectConfig.targets) === null || _a === void 0 ? void 0 : _a.get('build')) === null || _b === void 0 ? void 0 : _b.options) === null || _c === void 0 ? void 0 : _c.styles).toContain('node_modules/@aposin/ng-aquila/themes/aposin.css');
            expect((_f = (_e = (_d = testProjectConfig.targets) === null || _d === void 0 ? void 0 : _d.get('build')) === null || _e === void 0 ? void 0 : _e.options) === null || _f === void 0 ? void 0 : _f.styles).not.toContain('node_modules/@aposin/ng-aquila/themes/expert.css');
        });
        it('should add CDK styles', async () => {
            expect(testSetup.appTree.readContent('projects/aquila-testing/src/styles.css')).toContain('@import "@angular/cdk/overlay-prebuilt.css";');
            expect(testSetup.appTree.readContent('projects/aquila-testing/src/styles.css')).toContain('@import "@angular/cdk/a11y-prebuilt.css";');
        });
        it('should not write Starter App files by default', () => {
            expect(testSetup.appTree.readContent('projects/aquila-testing/src/app/app.component.ts')).not.toContain('openConsentDialog()');
            expect(testSetup.appTree.readContent('projects/aquila-testing/src/app/app.component.html')).not.toContain('Aquila Insurance App');
        });
    });
    describe('expert', () => {
        beforeEach(async () => {
            await testSetup.runMigration({ type: 'b2b' });
            testProjectConfig = await getTestProjectConfig();
        });
        it('should add expert theme', async () => {
            var _a, _b, _c, _d;
            expect((_b = (_a = testProjectConfig.targets.get('build')) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.styles).not.toContain('node_modules/@aposin/ng-aquila/themes/aposin.css');
            expect((_d = (_c = testProjectConfig.targets.get('build')) === null || _c === void 0 ? void 0 : _c.options) === null || _d === void 0 ? void 0 : _d.styles).toContain('node_modules/@aposin/ng-aquila/themes/expert.css');
        });
        it('should add Expert Module', async () => {
            expect(testSetup.appTree.readContent('projects/aquila-testing/src/app/app.module.ts')).toContain('NxExpertModule');
        });
    });
    describe('no theme', () => {
        beforeEach(async () => {
            await testSetup.runMigration({ type: 'b2c', noTheme: true });
            testProjectConfig = await getTestProjectConfig();
        });
        it('should not add a theme file if no-theme is set to true', () => {
            var _a, _b;
            expect((_b = (_a = testProjectConfig.targets.get('build')) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.styles).not.toContain('node_modules/@aposin/ng-aquila/themes/aposin.css');
        });
    });
    describe('starter app', () => {
        beforeEach(async () => {
            await testSetup.runMigration({ starter: true });
            testProjectConfig = await getTestProjectConfig();
        });
        it('should update Starter App files', () => {
            const currentYear = new Date().getFullYear();
            expect(testSetup.appTree.readContent('projects/aquila-testing/src/app/app.component.ts')).toContain(`/**  Copyright ALLIANZ ${currentYear} */`);
            expect(testSetup.appTree.readContent('projects/aquila-testing/src/app/app.component.html')).toContain(`<!-- Copyright ALLIANZ ${currentYear} -->`);
        });
    });
});
//# sourceMappingURL=index.spec.js.map