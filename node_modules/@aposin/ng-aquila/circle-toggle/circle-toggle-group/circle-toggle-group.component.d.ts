import { BooleanInput } from '@angular/cdk/coercion';
import { AfterViewInit, ChangeDetectorRef, DoCheck, EventEmitter, InjectionToken, OnDestroy, QueryList } from '@angular/core';
import { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';
import { ErrorStateMatcher } from '@aposin/ng-aquila/utils';
import { ToggleButton } from '../circle-toggle/toggle-button';
import * as i0 from "@angular/core";
/**
 * Appearance options for the circle toggle group component.
 */
export declare type NxCircleToggleGroupAppearance = 'default' | 'expert';
/**
 * Represents the default options for the circle toggle group.
 * It can be configured using the `CIRCLE_TOGGLE_GROUP_DEFAULT_OPTIONS` injection token.
 */
export interface CircleToggleGroupDefaultOptions {
    /**
     * Sets the default appearance. (optional)
     */
    appearance?: NxCircleToggleGroupAppearance;
}
export declare const CIRCLE_TOGGLE_GROUP_DEFAULT_OPTIONS: InjectionToken<CircleToggleGroupDefaultOptions>;
export declare class NxCircleToggleGroupComponent implements ControlValueAccessor, AfterViewInit, OnDestroy, DoCheck {
    private _cdr;
    private _errorStateMatcher;
    private _defaultOptions;
    ngControl: NgControl | null;
    private _parentForm;
    private _parentFormGroup;
    /**
     * Id of the circle toggle group.
     *
     * If not set, the circle toggle group gets an incremented value by default.
     */
    set id(value: string);
    get id(): string;
    /** Name that is used for accessibility. */
    set name(value: string);
    get name(): string;
    /** Whether the circle toggle group is disabled. */
    set disabled(value: BooleanInput);
    get disabled(): boolean;
    /** Whether the circle toggle group uses the negative styling. */
    set negative(value: BooleanInput);
    get negative(): boolean;
    /** The value of the selected circle toggle in the circle toggle group. */
    set value(value: string);
    get value(): string;
    /** Whether the circle toggle group has a responsive behavior. */
    set responsive(value: BooleanInput);
    get responsive(): boolean;
    get _isExpert(): boolean;
    errorState: boolean;
    constructor(_cdr: ChangeDetectorRef, _errorStateMatcher: ErrorStateMatcher, _defaultOptions: CircleToggleGroupDefaultOptions | null, ngControl: NgControl | null, _parentForm: NgForm | null, _parentFormGroup: FormGroupDirective | null);
    /** @docs-private */
    get selectedButton(): ToggleButton | null;
    /** @docs-private */
    get buttons(): QueryList<ToggleButton>;
    private _buttons;
    private _id;
    /** An event emitted when the selection changes. Outputs the value of the currently selected button. */
    valueChange: EventEmitter<any>;
    private _name;
    private _disabled;
    _negative: boolean;
    private _value;
    private _responsive;
    private _appearance;
    /**
     * **Expert option**
     *
     * Sets the appearance of the circle toggle group. Default: 'default'
     */
    set appearance(value: NxCircleToggleGroupAppearance);
    get appearance(): NxCircleToggleGroupAppearance;
    private readonly _destroyed;
    private onChangeCallback;
    private onTouchedCallback;
    writeValue(value: any): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    /** @docs-private */
    subscribeToSelectionChanges(): void;
    /**
     * @docs-private
     * inform the selected button if the group selection is set programattically at the beginning
     */
    notifySelectedChild(newValue: string): void;
    /** @docs-private */
    updateToggleButtonsNames(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState?(isDisabled: boolean): void;
    ngDoCheck(): void;
    _updateErrorState(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxCircleToggleGroupComponent, [null, null, { optional: true; }, { optional: true; self: true; }, { optional: true; }, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxCircleToggleGroupComponent, "nx-circle-toggle-group", never, { "name": "name"; "disabled": "disabled"; "negative": "negative"; "value": "value"; "responsive": "responsive"; "appearance": "appearance"; }, { "valueChange": "valueChange"; }, ["_buttons"], ["*", "nx-error"]>;
}
