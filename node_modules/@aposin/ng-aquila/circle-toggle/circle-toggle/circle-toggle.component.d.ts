import { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';
import { BooleanInput } from '@angular/cdk/coercion';
import { UniqueSelectionDispatcher } from '@angular/cdk/collections';
import { AfterViewInit, ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { ControlValueAccessor, NgControl } from '@angular/forms';
import { NxCircleToggleGroupComponent } from '../circle-toggle-group/circle-toggle-group.component';
import { NxMobileToggleButtonComponent } from '../mobile-toggle-button/mobile-toggle-button.component';
import { ToggleButton } from './toggle-button';
import * as i0 from "@angular/core";
export declare class ToggleChangeEvent {
    /** A toggle button */
    button: ToggleButton;
    /** The value of the toggle button that is sent with the event. */
    value: string;
    constructor(button: ToggleButton, value: string);
}
export declare class NxCircleToggleComponent extends ToggleButton implements OnInit, OnDestroy, AfterViewInit, ControlValueAccessor, DoCheck {
    /** @docs-private */ toggleGroup: NxCircleToggleGroupComponent | null;
    private _checkedDispatcher;
    private _cdr;
    private _focusMonitor;
    ngControl: NgControl | null;
    private _id;
    _nativeInput: ElementRef<HTMLElement>;
    /** @docs-private */
    inGroup: boolean;
    errorState: boolean;
    /**
     * Id of the circle toggle.
     *
     * If not set, the circle toggle gets an incremented value by default.
     */
    set id(value: string);
    get id(): string;
    private _name;
    /** Name that is used for accessibility. */
    set name(value: string);
    get name(): string;
    /**
     * An event that is emitted when the checked state fo the circle toggle changes.
     */
    checkedChange: EventEmitter<boolean>;
    /**
     * An event that is emitted when the checked state of the circle toggle changes.
     * The event object contains the circle toggle itself and its value (see ToggleChangeEvent).
     */
    selectionChange: EventEmitter<ToggleChangeEvent>;
    _checked: boolean;
    /** Whether the circle toggle is checked. */
    set checked(value: BooleanInput);
    get checked(): boolean;
    private _value;
    /** The value that is used in the model. */
    set value(newValue: string);
    get value(): string;
    private _iconName;
    /** Id of the icon that should be displayed. */
    set iconName(name: string);
    get iconName(): string;
    private _svg;
    /** SVG that is displayed if the circle toggle is unchecked. */
    set svg(src: string);
    get svg(): string;
    private _svgChecked;
    /** SVG that is displayed if the circle toggle is checked. */
    set svgChecked(src: string);
    get svgChecked(): string;
    private _circleText;
    /** A text that is displayed inside the circle toggle. */
    set circleText(value: string);
    get circleText(): string;
    private _label;
    /** Label displayed below the circle. */
    set label(value: string);
    get label(): string;
    private _hint;
    /** Additional hint displayed below the label. */
    set hint(value: string);
    get hint(): string;
    private _negative;
    /** Whether the circle toggle uses the negative set of styling. */
    set negative(value: BooleanInput);
    get negative(): boolean;
    private _responsive;
    /** Whether the circle toggle has a responsive behavior. */
    set responsive(value: BooleanInput);
    get responsive(): boolean;
    private _disabled;
    /** Whether the circle toggle is disabled. */
    set disabled(value: BooleanInput);
    get disabled(): boolean;
    /** @docs-private */
    toggleButton: NxMobileToggleButtonComponent;
    private _hover;
    /** touched is set to true on touch devices. */
    _touched: boolean;
    /** @docs-private */
    onMouseEnter(): void;
    /** @docs-private */
    onMouseLeave(): void;
    /** @docs-private */
    onTouchStart(): void;
    _removeUniqueSelectionListener: () => void;
    private onChangeCallback;
    private onTouchedCallback;
    constructor(
    /** @docs-private */ toggleGroup: NxCircleToggleGroupComponent | null, _checkedDispatcher: UniqueSelectionDispatcher, _cdr: ChangeDetectorRef, _focusMonitor: FocusMonitor, ngControl: NgControl | null);
    ngOnInit(): void;
    ngDoCheck(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /** @docs-private */
    attachListenerForGroup(): void;
    writeValue(newValue: boolean): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState?(isDisabled: boolean): void;
    /** Focuses the radio button element. */
    focus(focusOrigin?: FocusOrigin): void;
    /** @docs-private */
    toggle(event: Event): void;
    /**
     * @docs-private
     *
     * method called by the group if the internal value of the group is changed programatically,
     * does not trigger change emission
     */
    setGroupSelection(): void;
    /** @docs-private */
    get svgButton(): boolean;
    /** @docs-private */
    get svgUrl(): string;
    /** @docs-private */
    get type(): "radio" | "checkbox";
    /** @docs-private */
    handleEnterKey(event: Event): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxCircleToggleComponent, [{ optional: true; }, null, null, null, { optional: true; self: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxCircleToggleComponent, "nx-circle-toggle", never, { "name": "name"; "checked": "checked"; "value": "value"; "iconName": "icon"; "svg": "svg"; "svgChecked": "svgChecked"; "circleText": "circleText"; "label": "label"; "hint": "hint"; "negative": "negative"; "responsive": "responsive"; "disabled": "disabled"; }, { "checkedChange": "checkedChange"; "selectionChange": "selectionChange"; }, never, ["nx-error"]>;
}
