import { FocusMonitor } from '@angular/cdk/a11y';
import { Direction, Directionality } from '@angular/cdk/bidi';
import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import * as i0 from "@angular/core";
export declare const MAX_WIDTH = 400;
export declare const MIN_WIDTH = 56;
export declare const AUTO_COLLAPSE_WIDTH = 168;
export declare const RESIZE_STEP_SIZE = 20;
export declare class NxSidebarComponent implements AfterViewInit, OnDestroy, OnInit {
    private _cdr;
    private renderer;
    private _element;
    private _dir;
    private _focusMonitor;
    _resizeHandle: ElementRef;
    /** Emits the new width of the sidebar on resize or on close/open event.*/
    widthChange: EventEmitter<number>;
    /** If set to `true` this will enable dynamic resizing of the sidebar. */
    set resizeable(value: BooleanInput);
    get resizeable(): BooleanInput;
    private _resizeable;
    /** Sets the minimal width (in pixel) of the sidebar. */
    set minWidth(value: NumberInput);
    get minWidth(): number;
    private _minWidth;
    /** Sets the maximal width (in pixel) of the sidebar. */
    set maxWidth(value: NumberInput);
    get maxWidth(): number;
    private _maxWidth;
    /** This sets the accessibility label for the resize handle of the sidebar. */
    set resizeHandleAriaLabel(value: string);
    get resizeHandleAriaLabel(): string;
    private _resizeHandleAriaLabel;
    /** This reflects the current open state of the sidebar.
      It will be `true` if the sidebar is expanded and `false` if the sidebar is closed.
  */
    set open(value: BooleanInput);
    get open(): boolean;
    private _open;
    /** This sets the width of the sidebar in an expanded state. */
    set width(value: number);
    get width(): number;
    /** The text direction of the containing app. */
    get dir(): Direction;
    _width: number;
    _resizing: boolean;
    _previousWidth: number;
    _isMobile: boolean;
    _resizeWidth: number;
    private _resizeStartX;
    private _resizeStartWidth;
    private _unsubscribeListeners;
    constructor(_cdr: ChangeDetectorRef, renderer: Renderer2, _element: ElementRef, _dir: Directionality | null, _focusMonitor: FocusMonitor);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /** This will expand the sidebar to its full width. */
    expand(expandedWidth?: number): void;
    /** This will close the sidebar to its minimal width. */
    close(): void;
    /** This will close or expand the sidebar depending if it is expanded or closed. */
    toggle(): void;
    get _sidebarElementWidth(): number;
    _onResizeStart(event: any): void;
    _onResize(event: any): void;
    _onResizeEnd(event: MouseEvent): void;
    _onResizeHandleClick(event: MouseEvent): void;
    _onSidebarKeydown(event: KeyboardEvent): void;
    private _emitWidthChange;
    private _isMouseDrag;
    private _attachDragEventListeners;
    private _removeDragEventListeners;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxSidebarComponent, [null, null, null, { optional: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxSidebarComponent, "nx-sidebar", never, { "resizeable": "resizeable"; "minWidth": "minWidth"; "maxWidth": "maxWidth"; "resizeHandleAriaLabel": "resizeHandleAriaLabel"; }, { "widthChange": "widthChange"; }, never, ["*", "nx-sidebar-footer"]>;
}
