import { AfterContentChecked, AfterContentInit, ChangeDetectorRef, ElementRef, InjectionToken, OnDestroy, QueryList, Renderer2 } from '@angular/core';
import { NxFormfieldAppendixDirective } from './appendix.directive';
import { NxFormfieldErrorDirective } from './error.directive';
import { NxFormfieldControl } from './formfield-control';
import { NxFormfieldHintDirective } from './hint.directive';
import { NxFormfieldLabelDirective } from './label.directive';
import { NxFormfieldNoteDirective } from './note.directive';
import { NxFormfieldPrefixDirective } from './prefix.directive';
import { NxFormfieldSuffixDirective } from './suffix.directive';
import * as i0 from "@angular/core";
/**
 * Represents the default options for the form field that can be configured
 * using the `FORMFIELD_DEFAULT_OPTIONS` injection token.
 */
export interface FormfieldDefaultOptions {
    /** Sets the default appearance. (optional) */
    appearance?: AppearanceType;
    /** Sets the default float label type. (optional) */
    nxFloatLabel?: FloatLabelType;
}
export declare const FORMFIELD_DEFAULT_OPTIONS: InjectionToken<FormfieldDefaultOptions>;
/** Type for the available floatLabel values. */
export declare type FloatLabelType = 'always' | 'auto';
/** Type for the appearance of the formfield. */
export declare type AppearanceType = 'outline' | 'auto';
export declare class NxFormfieldComponent implements AfterContentInit, AfterContentChecked, OnDestroy {
    /** @docs-private */ elementRef: ElementRef;
    private renderer;
    private _cdr;
    private _defaultOptions;
    private _styles;
    /** Html id of the formfield label */
    readonly labelId: string;
    _control: NxFormfieldControl<any>;
    /**
     * Sets the label which will act as a floating label.
     * In addition, the component uses input and label to properly support accessibility.
     */
    label?: string | null;
    _labelChild: NxFormfieldLabelDirective;
    _hintChildren: QueryList<NxFormfieldHintDirective>;
    _noteChildren: QueryList<NxFormfieldNoteDirective>;
    _errorChildren: QueryList<NxFormfieldErrorDirective>;
    _suffixChildren: QueryList<NxFormfieldSuffixDirective>;
    _prefixChildren: QueryList<NxFormfieldPrefixDirective>;
    _appendixChildren: QueryList<NxFormfieldAppendixDirective>;
    _connectionContainerRef: ElementRef;
    /**
     * Whether the label should float once the input is focused or filled (auto, default)
     * or force it to always float with a value of always to simulate a more static form.
     */
    get floatLabel(): FloatLabelType;
    set floatLabel(value: FloatLabelType);
    private _floatLabel;
    /**
     * Sets the styling of the formfield.
     * If 'negative', a negative set of stylings is used.
     */
    set styles(value: string);
    private _appearance;
    /**
     * **Expert option**
     *
     * Sets the appearance of the formfield.
     */
    set appearance(value: AppearanceType);
    get appearance(): AppearanceType;
    get _shouldAlwaysFloat(): boolean;
    /** @docs-private */
    get shouldLabelFloat(): boolean;
    /** @docs-private */
    get control(): NxFormfieldControl<any>;
    private readonly _destroyed;
    constructor(
    /** @docs-private */ elementRef: ElementRef, renderer: Renderer2, _cdr: ChangeDetectorRef, _defaultOptions: FormfieldDefaultOptions | null);
    ngAfterContentInit(): void;
    ngAfterContentChecked(): void;
    ngOnDestroy(): void;
    /** @docs-private */
    getDisplayedMessage(): 'note' | 'error' | '';
    private _syncDescribedByIds;
    protected _validateControlChild(): void;
    /** @docs-private */
    getConnectedOverlayOrigin(): ElementRef;
    /** @docs-private */
    _hasLabel(): boolean;
    /** @docs-private
     * The placeholder is hidden when
     *  - the control is not empty
     *  - The label is not floated
     * */
    _hideControlPlaceholder(): boolean;
    _getTitle(): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxFormfieldComponent, [null, null, null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxFormfieldComponent, "nx-formfield", never, { "label": "nxLabel"; "floatLabel": "nxFloatLabel"; "styles": "nxStyle"; "appearance": "appearance"; }, {}, ["_control", "_labelChild", "_hintChildren", "_noteChildren", "_errorChildren", "_suffixChildren", "_prefixChildren", "_appendixChildren"], ["[nxFormfieldPrefix]", "nx-formfield-label", "*", "[nxFormfieldSuffix]", "[nxFormfieldHint]", "[nxFormfieldAppendix]", "[nxFormfieldError]", "[nxFormfieldNote]"]>;
}
