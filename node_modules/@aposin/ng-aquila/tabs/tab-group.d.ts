import { FocusMonitor } from '@angular/cdk/a11y';
import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import { AfterContentChecked, AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, QueryList } from '@angular/core';
import { NxAccordionDirective, NxExpansionPanelComponent } from '@aposin/ng-aquila/accordion';
import { NxViewportService } from '@aposin/ng-aquila/utils';
import { Subject } from 'rxjs';
import { NxTabComponent } from './tab';
import { NxTabBodyComponent } from './tab-body';
import { NxTabGroupBase } from './tab-group-base';
import { NxTabHeaderComponent } from './tab-header';
import { NxTabsAppearance, TabGroupDefaultOptions } from './tabs.models';
import * as i0 from "@angular/core";
export declare class NxTabChangeEvent {
    /** The index of the selected or focused tab. */
    index: number;
    /** The component instance of the selected or focused tab. */
    tab: NxTabComponent;
}
export declare class NxTabGroupComponent implements NxTabGroupBase, OnDestroy, AfterViewInit, AfterContentInit, AfterContentChecked {
    viewportService: NxViewportService;
    private _cdr;
    private _defaultOptions;
    private _focusMonitor;
    private _selectedIndex;
    private _groupId;
    private _negative;
    private _disabled;
    private _indexToSelect;
    private _autoselect;
    private _mobileAccordion;
    private _appearance;
    _showAccordion: boolean;
    /** @docs-private */
    tabs: QueryList<NxTabComponent>;
    /** @docs-private */
    tabBodyChildren: QueryList<NxTabBodyComponent>;
    /** @docs-private */
    tabHeader: NxTabHeaderComponent;
    /** @docs-private */
    panels: QueryList<NxExpansionPanelComponent>;
    /** @docs-private */
    accordion: NxAccordionDirective;
    _tabButtons: QueryList<ElementRef>;
    /** Preserves the current value of the _tabButtons ViewChildren in case it changes. */
    private _tabButtonsPrevious;
    /** Sets the selected tab. */
    get selectedIndex(): number;
    set selectedIndex(value: NumberInput);
    /** Whether the negative set of styling should be used. */
    get negative(): boolean;
    set negative(value: BooleanInput);
    /** Whether the tab group is disabled. Default: false. */
    get disabled(): boolean;
    set disabled(value: BooleanInput);
    /** Whether the tab should be immediately selected on focus. */
    get autoselect(): boolean;
    set autoselect(value: BooleanInput);
    /** Whether the tabs should to accordion on mobile viewports. */
    get mobileAccordion(): boolean;
    set mobileAccordion(value: BooleanInput);
    /**
     * **Expert option**
     *
     * Sets the appearance of the tab group. Default: 'default'.
     */
    set appearance(value: NxTabsAppearance);
    get appearance(): NxTabsAppearance;
    /** An event emitted when the selected tab has changed. */
    readonly selectedIndexChange: EventEmitter<number>;
    /** An event emitted when the selected tab has changed. */
    readonly selectedTabChange: EventEmitter<NxTabChangeEvent>;
    /**
     * An event emitted when focus has changed within a tab group.
     *
     * **Note:** is not supported in mobile view.
     */
    readonly focusChange: EventEmitter<NxTabChangeEvent>;
    /** Subscription to changes in the tab labels. */
    private _tabLabelSubscription;
    private _disabledTabsCache;
    _appearanceChange: Subject<void>;
    private readonly _destroyed;
    constructor(viewportService: NxViewportService, _cdr: ChangeDetectorRef, _defaultOptions: TabGroupDefaultOptions | null, _focusMonitor: FocusMonitor);
    ngAfterContentInit(): void;
    /**
     * After the content is checked, this component knows what tabs have been defined
     * and what the selected index should be.
     */
    ngAfterContentChecked(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /**
     * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is
     * on the NxTab component, whereas the data binding is inside the NxTabGroup. In order for the
     * binding to be updated, we need to subscribe to changes in it and trigger change detection
     * manually.
     */
    private _subscribeToTabLabels;
    /** Clamps the given index to the bounds of 0 and the tabs length. */
    private _clampTabIndex;
    /** @docs-private */
    focusChanged(index: number): void;
    private _createChangeEvent;
    /** @docs-private */
    handleClick(index: number): void;
    /**
     * @docs-private
     * Returns the tabindex for a tab label
     */
    getTabIndex(tab: NxTabComponent, idx: number): number | null;
    /** Returns a unique id for each tab label element */
    _getTabLabelId(i: number): string;
    /** Returns a unique id for each tab content element */
    _getTabContentId(i: number): string;
    private _switchAppearance;
    /**
     * Emulate the tab change event when an accordion panel is opened in
     * mobile viewports.
     */
    _panelOpened(index: number): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxTabGroupComponent, [null, null, { optional: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxTabGroupComponent, "nx-tab-group", never, { "selectedIndex": "selectedIndex"; "negative": "negative"; "disabled": "disabled"; "autoselect": "autoselect"; "mobileAccordion": "mobileAccordion"; "appearance": "appearance"; }, { "selectedIndexChange": "selectedIndexChange"; "selectedTabChange": "selectedTabChange"; "focusChange": "focusChange"; }, ["tabs"], never>;
}
