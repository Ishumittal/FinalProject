import { FocusMonitor } from '@angular/cdk/a11y';
import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { EventManager } from '@angular/platform-browser';
import { NxModalService } from './modal.service';
import * as i0 from "@angular/core";
/** Container for the action buttons in a modal. Has a fixed position at the bottom of the modal on scroll. */
export declare class NxModalActionsDirective {
    static ɵfac: i0.ɵɵFactoryDeclaration<NxModalActionsDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NxModalActionsDirective, "[nxModalActions]", never, {}, {}, never>;
}
/** Scrollable container for the content of a modal. */
export declare class NxModalContentDirective {
    static ɵfac: i0.ɵɵFactoryDeclaration<NxModalContentDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NxModalContentDirective, "[nxModalContent]", never, {}, {}, never>;
}
export declare class NxModalComponent implements OnInit, AfterViewInit, OnDestroy {
    private modalService;
    private eventManager;
    private _cdr;
    private _focusMonitor;
    private _closeButtonLabel;
    _closeButton: ElementRef;
    /** Sets the 'aria-label' of the modal close button needed for accessibility.
     *
     * Default value is 'Close dialog'.
     */
    set closeButtonLabel(value: string);
    get closeButtonLabel(): string;
    /**
     * A template reference variable pointing to the template
     * which contains the content of the modal view.
     */
    body: TemplateRef<any>;
    /**
     * Whether the modal view should close when the user hits the escape key.
     * Default is true.
     */
    hideOnEsc: boolean;
    /**
     * Whether the modal view should close when the user clicks on the backdrop.
     * Default is true.
     */
    hideOnClickOutside: boolean;
    /**
     * Whether the modal view should have a close icon in the upper right corner.
     * Default is true.
     */
    showCloseIcon: boolean;
    /**
     * Controls the width of the dialog.
     * On `auto` the width is controlled by the content width,
     * on `fixed` the dialog gets a fixed width of 736px if the viewport is big enough. */
    size: 'fixed' | 'auto';
    /**
     * An event emitted when the user clicks on the backdrop or uses the built-in close button.
     * This event can be applied in conjunction with the custom open state handling
     * of a modal to close it when requested by the user.
     */
    closeEvent: EventEmitter<void>;
    private readonly _destroyed;
    private removeEventListener;
    constructor(modalService: NxModalService, eventManager: EventManager, _cdr: ChangeDetectorRef, _focusMonitor: FocusMonitor);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /** @docs-private */
    clickOutsideModal(): void;
    /** @docs-private */
    closeButtonClick(): void;
    /** @docs-private */
    cancelClick(evt: MouseEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxModalComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxModalComponent, "nx-modal", never, { "closeButtonLabel": "closeButtonLabel"; "body": "nxBody"; "hideOnEsc": "nxHideOnEsc"; "hideOnClickOutside": "nxHideOnClickOutside"; "showCloseIcon": "nxShowCloseIcon"; "size": "nxSize"; }, { "closeEvent": "nxClose"; }, never, ["*"]>;
}
