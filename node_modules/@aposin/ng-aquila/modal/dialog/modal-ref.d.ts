import { OverlayRef } from '@angular/cdk/overlay';
import { Observable } from 'rxjs';
import { NxDialogPosition } from './modal-config';
import { NxModalContainer } from './modal-container.component';
/** Possible states of the lifecycle of a modal. */
export declare const enum NxModalState {
    OPEN = 0,
    CLOSING = 1,
    CLOSED = 2
}
/**
 * Reference to a modal opened via the NxDialogService.
 */
export declare class NxModalRef<T, R = any> {
    private _overlayRef;
    _containerInstance: NxModalContainer;
    readonly id: string;
    /** The instance of component opened into the modal. */
    componentInstance: T;
    /** Whether the user is allowed to close the modal. */
    disableClose: boolean | undefined;
    /** Subject for notifying the user that the modal has finished opening. */
    private readonly _afterOpened;
    /** Subject for notifying the user that the modal has finished closing. */
    private readonly _afterClosed;
    /** Subject for notifying the user that the modal has started closing. */
    private readonly _beforeClosed;
    /** Result to be passed to afterClosed. */
    private _result;
    /** Handle to the timeout that's running as a fallback in case the exit animation doesn't fire. */
    private _closeFallbackTimeout;
    /** Current state of the modal. */
    private _state;
    constructor(_overlayRef: OverlayRef, _containerInstance: NxModalContainer, id?: string);
    /**
     * Close the modal.
     * @param modalResult Optional result to return to the modal opener.
     */
    close(modalResult?: R): void;
    /**
     * Gets an observable that is notified when the modal is finished opening.
     */
    afterOpened(): Observable<void>;
    /**
     * Gets an observable that is notified when the modal is finished closing.
     */
    afterClosed(): Observable<R | undefined>;
    /**
     * Gets an observable that is notified when the modal has started closing.
     */
    beforeClosed(): Observable<R | undefined>;
    /**
     * Gets an observable that emits when the overlay's backdrop has been clicked.
     */
    backdropClick(): Observable<MouseEvent>;
    /**
     * Gets an observable that emits when keydown events are targeted on the overlay.
     */
    keydownEvents(): Observable<KeyboardEvent>;
    /**
     * Updates the modal's position.
     * @param position New modal position.
     */
    updatePosition(position?: NxDialogPosition): this;
    /**
     * Updates the modal's width and height.
     * @param width New width of the modal.
     * @param height New height of the modal.
     */
    updateSize(width?: string, height?: string): this;
    /** Add a CSS class or an array of classes to the overlay pane. */
    addPanelClass(classes: string | string[]): this;
    /** Remove a CSS class or an array of classes from the overlay pane. */
    removePanelClass(classes: string | string[]): this;
    /** Gets the current state of the modal's lifecycle. */
    getState(): NxModalState;
    /** Fetches the position strategy object from the overlay ref. */
    private _getPositionStrategy;
}
