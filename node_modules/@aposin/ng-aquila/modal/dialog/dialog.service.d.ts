import { Overlay, OverlayContainer, ScrollStrategy } from '@angular/cdk/overlay';
import { ComponentType } from '@angular/cdk/portal';
import { InjectionToken, Injector, OnDestroy, TemplateRef } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { NxModalConfig } from './modal-config';
import { NxModalRef } from './modal-ref';
import * as i0 from "@angular/core";
/** Injection token that can be used to access the data that was passed in to a modal. */
export declare const NX_MODAL_DATA: InjectionToken<any>;
/** Injection token that can be used to specify default modal options. */
export declare const NX_MODAL_DEFAULT_OPTIONS: InjectionToken<NxModalConfig<any>>;
/** Injection token that determines the scroll handling while a modal is open. */
export declare const NX_MODAL_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;
/** @docs-private */
export declare function NX_MODAL_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => ScrollStrategy;
/** @docs-private */
export declare const NX_MODAL_SCROLL_STRATEGY_PROVIDER: {
    provide: InjectionToken<() => ScrollStrategy>;
    useFactory: typeof NX_MODAL_SCROLL_STRATEGY_PROVIDER_FACTORY;
    deps: (typeof Overlay)[];
};
/**
 * Service to open Material Design modal modals.
 */
export declare class NxDialogService implements OnDestroy {
    private _overlay;
    private _injector;
    private _defaultOptions;
    private _parentDialogService;
    private _overlayContainer;
    private _defaultScrollStrategyFactory;
    private _openModalsAtThisLevel;
    private readonly _afterAllClosedAtThisLevel;
    private readonly _afterOpenedAtThisLevel;
    private _ariaHiddenElements;
    /** Keeps track of the currently-open modals. */
    get openModals(): NxModalRef<any>[];
    /** Stream that emits when a modal has been opened. */
    get afterOpened(): Subject<NxModalRef<any>>;
    get _afterAllClosed(): Subject<void>;
    /**
     * Stream that emits when all open modal have finished closing.
     * Will emit on subscribe if there are no open modals to begin with.
     */
    readonly afterAllClosed: Observable<void>;
    private readonly _destroyed;
    /** Strategy factory that will be used to handle scrolling while the modal panel is open. */
    private _scrollStrategyFactory;
    constructor(_overlay: Overlay, _injector: Injector, _defaultOptions: NxModalConfig | null, _parentDialogService: NxDialogService | null, _overlayContainer: OverlayContainer, _defaultScrollStrategyFactory: () => ScrollStrategy);
    /**
     * Opens a modal modal containing the given component.
     * @param componentOrTemplateRef Type of the component to load into the dialog,
     *     or a TemplateRef to instantiate as the modal content.
     * @param config Extra configuration options.
     * @returns Reference to the newly-opened modal.
     */
    open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>, config?: NxModalConfig<D>): NxModalRef<T, R>;
    /**
     * Closes all of the currently-open modals.
     */
    closeAll(): void;
    /**
     * Finds an open modal by its id.
     * @param id ID to use when looking up the modal.
     */
    getModalById(id: string): NxModalRef<any> | undefined;
    ngOnDestroy(): void;
    /**
     * Creates the overlay into which the modal will be loaded.
     * @param config The modal configuration.
     * @returns A promise resolving to the OverlayRef for the created overlay.
     */
    private _createOverlay;
    /**
     * Creates an overlay config from a modal config.
     * @param modalConfig The modal configuration.
     * @returns The overlay configuration.
     */
    private _getOverlayConfig;
    /**
     * Attaches an NxModalContainer to a dialog's already-created overlay.
     * @param overlay Reference to the dialog's underlying overlay.
     * @param config The modal configuration.
     * @returns A promise resolving to a ComponentRef for the attached container.
     */
    private _attachModalContainer;
    /**
     * Attaches the user-provided component to the already-created NxModalContainer.
     * @param componentOrTemplateRef The type of component being loaded into the dialog,
     *     or a TemplateRef to instantiate as the content.
     * @param modalContainer Reference to the wrapping NxModalContainer.
     * @param overlayRef Reference to the overlay in which the modal resides.
     * @param config The modal configuration.
     * @returns A promise resolving to the NxModalRef that should be returned to the user.
     */
    private _attachModalContent;
    /**
     * Creates a custom injector to be used inside the modal. This allows a component loaded inside
     * of a modal to close itself and, optionally, to return a value.
     * @param config Config object that is used to construct the modal.
     * @param modalRef Reference to the modal.
     * @param container Modal container element that wraps all of the contents.
     * @returns The custom injector that can be used inside the modal.
     */
    private _createInjector;
    /**
     * Removes a modal from the array of open modals.
     * @param modalRef Modal to be removed.
     */
    private _removeOpenModal;
    /**
     * Hides all of the content that isn't an overlay from assistive technology.
     */
    private _hideNonModalContentFromAssistiveTechnology;
    /** Closes all of the modals in an array. */
    private _closeModals;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxDialogService, [null, null, { optional: true; }, { optional: true; skipSelf: true; }, null, null]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<NxDialogService>;
}
