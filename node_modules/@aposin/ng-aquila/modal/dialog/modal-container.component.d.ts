import { AnimationEvent } from '@angular/animations';
import { FocusMonitor, FocusTrapFactory } from '@angular/cdk/a11y';
import { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, DomPortal, TemplatePortal } from '@angular/cdk/portal';
import { AfterViewInit, ChangeDetectorRef, ComponentRef, ElementRef, EmbeddedViewRef, EventEmitter, OnDestroy } from '@angular/core';
import { NxModalConfig } from './modal-config';
import * as i0 from "@angular/core";
/**
 * Throws an exception for the case when a ComponentPortal is
 * attached to a DomPortalOutlet without an origin.
 * @docs-private
 */
export declare function throwNxDialogContentAlreadyAttachedError(): void;
/**
 * Internal component that wraps user-provided modal content.
 * Animation is based on https://material.io/guidelines/motion/choreography.html.
 * @docs-private
 */
export declare class NxModalContainer extends BasePortalOutlet implements AfterViewInit, OnDestroy {
    private _elementRef;
    private _focusTrapFactory;
    private _cdr;
    private _document;
    /** The modal configuration. */
    _config: NxModalConfig;
    private _focusMonitor;
    /** The portal outlet inside of this container into which the modal content will be loaded. */
    _portalOutlet: CdkPortalOutlet;
    _closeButton: ElementRef;
    /** The class that traps and manages focus within the modal. */
    private _focusTrap;
    /** Element that was focused before the modal was opened. Save this to restore upon close. */
    private _elementFocusedBeforeDialogWasOpened;
    /** State of the modal animation. */
    _state: 'void' | 'enter' | 'exit';
    /** Emits when an animation state changes. */
    _animationStateChanged: EventEmitter<AnimationEvent>;
    /** Emits when the close button (X) is clicked. */
    _closeButtonClicked: EventEmitter<any>;
    /** ID of the element that should be considered as the modal's label. */
    _ariaLabelledBy: string | null;
    /** ID for the container DOM element. */
    _id: string;
    constructor(_elementRef: ElementRef, _focusTrapFactory: FocusTrapFactory, _cdr: ChangeDetectorRef, _document: Document | null, 
    /** The modal configuration. */
    _config: NxModalConfig, _focusMonitor: FocusMonitor);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /**
     * Attach a ComponentPortal as content to this modal container.
     * @param portal Portal to be attached as the modal content.
     */
    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;
    /**
     * Attach a TemplatePortal as content to this modal container.
     * @param portal Portal to be attached as the modal content.
     */
    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;
    /**
     * Attaches a DOM portal to the modal container.
     * @param portal Portal to be attached.
     * @deprecated To be turned into a method when changed in the CDK.
     */
    attachDomPortal: (portal: DomPortal) => void;
    /** Moves the focus inside the focus trap. */
    private _trapFocus;
    /** Restores focus to the element that was focused before the modal opened. */
    private _restoreFocus;
    /** Saves a reference to the element that was focused before the modal was opened. */
    private _savePreviouslyFocusedElement;
    /** Callback, invoked whenever an animation on the host completes. */
    _onAnimationDone(event: AnimationEvent): void;
    /** Callback, invoked when an animation on the host starts. */
    _onAnimationStart(event: AnimationEvent): void;
    /** Starts the modal exit animation. */
    _startExitAnimation(): void;
    _closeButtonClick(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxModalContainer, [null, null, null, { optional: true; }, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NxModalContainer, "nx-modal-container", never, {}, {}, never, never>;
}
