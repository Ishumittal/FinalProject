import { FlexibleConnectedPositionStrategyOrigin, OverlayRef } from '@angular/cdk/overlay';
import { Router } from '@angular/router';
import { Observable } from 'rxjs';
import { NxOverlayContainerComponent } from './overlay-container.component';
import { NxOverlayState } from './overlay-service';
/**
 * Reference to a overlay opened via the NxDialogService.
 */
export declare class NxOverlayRef<T, R = any> {
    private _overlayRef;
    _containerInstance: NxOverlayContainerComponent;
    origin: FlexibleConnectedPositionStrategyOrigin;
    private _router;
    readonly id: string;
    /** The instance of component opened into the overlay. */
    componentInstance: T;
    /** Whether the user is allowed to close the overlay. */
    closeOnClickOutside: boolean | undefined;
    /** Subject for notifying the user that the overlay has finished opening. */
    private readonly _afterOpened;
    /** Subject for notifying the user that the overlay has finished closing. */
    private readonly _afterClosed;
    /** Subject for notifying the user that the overlay has started closing. */
    private readonly _beforeClosed;
    private _documentClickObservable;
    /** Result to be passed to afterClosed. */
    private _result;
    /** Current state of the overlay. */
    private _state;
    constructor(_overlayRef: OverlayRef, _containerInstance: NxOverlayContainerComponent, origin: FlexibleConnectedPositionStrategyOrigin, _router: Router, id?: string);
    waitForClose(): void;
    /**
     * Close the overlay.
     * @param overlayResult Optional result to return to the overlay opener.
     */
    close(overlayResult?: R): void;
    /**
     * Gets an observable that is notified when the overlay is finished opening.
     */
    afterOpened(): Observable<void>;
    /**
     * Gets an observable that is notified when the overlay is finished closing.
     */
    afterClosed(): Observable<R | undefined>;
    /**
     * Gets an observable that is notified when the overlay has started closing.
     */
    beforeClosed(): Observable<R | undefined>;
    /**
     * Gets an observable that emits when the overlay's backdrop has been clicked.
     */
    backdropClick(): Observable<MouseEvent>;
    /**
     * Gets an observable that emits when keydown events are targeted on the overlay.
     */
    keydownEvents(): Observable<KeyboardEvent>;
    /** Add a CSS class or an array of classes to the overlay pane. */
    addPanelClass(classes: string | string[]): this;
    /** Remove a CSS class or an array of classes from the overlay pane. */
    removePanelClass(classes: string | string[]): this;
    /** Gets the current state of the overlay's lifecycle. */
    getState(): NxOverlayState;
}
