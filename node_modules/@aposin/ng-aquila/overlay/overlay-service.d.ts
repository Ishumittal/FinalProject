import { Direction, Directionality } from '@angular/cdk/bidi';
import { FlexibleConnectedPositionStrategyOrigin, Overlay, ScrollStrategy } from '@angular/cdk/overlay';
import { ComponentType } from '@angular/cdk/portal';
import { InjectionToken, Injector, OnDestroy, TemplateRef } from '@angular/core';
import { Router } from '@angular/router';
import { NxOverlayConfig } from './overlay-config';
import { NxOverlayRef } from './overlay-ref';
import { NxOverlayPositionBuilder } from './position-builder';
import * as i0 from "@angular/core";
/** Injection token that determines the scroll handling while a overlay is open. */
export declare const NX_OVERLAY_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;
/** @docs-private */
export declare function NX_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => ScrollStrategy;
/** @docs-private */
export declare const NX_OVERLAY_SCROLL_STRATEGY_PROVIDER: {
    provide: InjectionToken<() => ScrollStrategy>;
    useFactory: typeof NX_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY;
    deps: (typeof Overlay)[];
};
/** Possible states of the lifecycle of a overlay. */
export declare const enum NxOverlayState {
    OPEN = 0,
    CLOSED = 1
}
export declare class NxOverlayService implements OnDestroy {
    private _overlay;
    private _injector;
    private _router;
    private _positionBuilder;
    private _parentOverlayService;
    private _dir;
    private _defaultScrollStrategyFactory;
    private readonly _afterAllClosedAtThisLevel;
    private readonly _afterOpenedAtThisLevel;
    private _openOverlaysAtThisLevel;
    /** Strategy factory that will be used to handle scrolling while an overlay panel is open. */
    private _scrollStrategyFactory;
    constructor(_overlay: Overlay, _injector: Injector, _router: Router, _positionBuilder: NxOverlayPositionBuilder, _parentOverlayService: NxOverlayService | null, _dir: Directionality | null, _defaultScrollStrategyFactory: () => ScrollStrategy);
    /** Keeps track of the currently-open overlays. */
    get openOverlays(): NxOverlayRef<any>[];
    /** The text direction of the containing app. */
    get dir(): Direction;
    /**
     * Opens a panel containing the given component and attaches it to an element.
     * @param componentOrTemplateRef Type of the component to load into the dialog,
     *     or a TemplateRef to instantiate as the panel content.
     * @param config Extra configuration options.
     * @returns Reference to the newly-opened panel.
     */
    open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>, origin: FlexibleConnectedPositionStrategyOrigin, config?: NxOverlayConfig<D>): NxOverlayRef<T, R>;
    /**
     * Finds an open overlay by its id.
     * @param id ID to use when looking up the overlay.
     */
    getOverlayById(id: string): NxOverlayRef<any> | undefined;
    ngOnDestroy(): void;
    /**
     * Creates the overlay into which the overlay will be loaded.
     * @param config The overlay configuration.
     * @returns A promise resolving to the OverlayRef for the created overlay.
     */
    private _createOverlay;
    private _getOverlayConfig;
    get isRtl(): boolean;
    /**
     * Attaches an NxOverlayContainer to the already-created overlay.
     * @param cdkOverlay Reference to the dialog's underlying overlay.
     * @param config The overlay configuration.
     * @returns A promise resolving to a ComponentRef for the attached container.
     */
    private _attachOverlayContainer;
    /**
     * Attaches the user-provided component to the already-created NxOverlayContainer.
     * @param componentOrTemplateRef The type of component being loaded into the dialog,
     *     or a TemplateRef to instantiate as the content.
     * @param overlayContainer Reference to the wrapping NxOverlayContainer.
     * @param cdkOverlayRef Reference to the overlay in which the overlay resides.
     * @param config The overlay configuration.
     * @returns A promise resolving to the NxOverlayRef that should be returned to the user.
     */
    private _attachOverlayContent;
    /**
     * Creates a custom injector to be used inside the overlay. This allows a component loaded inside
     * of a overlay to close itself and, optionally, to return a value.
     * @param config Config object that is used to construct the overlay.
     * @param overlayRef Reference to the overlay.
     * @param container Overlay container element that wraps all of the contents.
     * @returns The custom injector that can be used inside the overlay.
     */
    private _createInjector;
    /**
     * Removes a overlay from the array of open overlays.
     * @param overlayRef Overlay to be removed.
     */
    private _removeOpenOverlay;
    /** Closes all of the overlays in an array. */
    private _closeOverlays;
    static ɵfac: i0.ɵɵFactoryDeclaration<NxOverlayService, [null, null, null, null, { optional: true; skipSelf: true; }, { optional: true; }, null]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<NxOverlayService>;
}
